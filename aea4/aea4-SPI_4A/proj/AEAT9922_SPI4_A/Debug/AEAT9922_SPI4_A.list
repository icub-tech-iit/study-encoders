
AEAT9922_SPI4_A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a8c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000544  08009c70  08009c70  0000ac70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a1b4  0800a1b4  0000c1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a1b4  0800a1b4  0000b1b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a1bc  0800a1bc  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a1bc  0800a1bc  0000b1bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a1c0  0800a1c0  0000b1c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800a1c4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002cc  200001d4  0800a398  0000c1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a0  0800a398  0000c4a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000108ce  00000000  00000000  0000c204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024db  00000000  00000000  0001cad2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d28  00000000  00000000  0001efb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a15  00000000  00000000  0001fcd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026863  00000000  00000000  000206ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001070a  00000000  00000000  00046f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000edfb4  00000000  00000000  0005765a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014560e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a50  00000000  00000000  00145654  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  0014a0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009c54 	.word	0x08009c54

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	08009c54 	.word	0x08009c54

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9be 	b.w	800106c <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	468e      	mov	lr, r1
 8000d7c:	4604      	mov	r4, r0
 8000d7e:	4688      	mov	r8, r1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d14a      	bne.n	8000e1a <__udivmoddi4+0xa6>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4617      	mov	r7, r2
 8000d88:	d962      	bls.n	8000e50 <__udivmoddi4+0xdc>
 8000d8a:	fab2 f682 	clz	r6, r2
 8000d8e:	b14e      	cbz	r6, 8000da4 <__udivmoddi4+0x30>
 8000d90:	f1c6 0320 	rsb	r3, r6, #32
 8000d94:	fa01 f806 	lsl.w	r8, r1, r6
 8000d98:	fa20 f303 	lsr.w	r3, r0, r3
 8000d9c:	40b7      	lsls	r7, r6
 8000d9e:	ea43 0808 	orr.w	r8, r3, r8
 8000da2:	40b4      	lsls	r4, r6
 8000da4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000da8:	fa1f fc87 	uxth.w	ip, r7
 8000dac:	fbb8 f1fe 	udiv	r1, r8, lr
 8000db0:	0c23      	lsrs	r3, r4, #16
 8000db2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000db6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dba:	fb01 f20c 	mul.w	r2, r1, ip
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d909      	bls.n	8000dd6 <__udivmoddi4+0x62>
 8000dc2:	18fb      	adds	r3, r7, r3
 8000dc4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000dc8:	f080 80ea 	bcs.w	8000fa0 <__udivmoddi4+0x22c>
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	f240 80e7 	bls.w	8000fa0 <__udivmoddi4+0x22c>
 8000dd2:	3902      	subs	r1, #2
 8000dd4:	443b      	add	r3, r7
 8000dd6:	1a9a      	subs	r2, r3, r2
 8000dd8:	b2a3      	uxth	r3, r4
 8000dda:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dde:	fb0e 2210 	mls	r2, lr, r0, r2
 8000de2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000de6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dea:	459c      	cmp	ip, r3
 8000dec:	d909      	bls.n	8000e02 <__udivmoddi4+0x8e>
 8000dee:	18fb      	adds	r3, r7, r3
 8000df0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000df4:	f080 80d6 	bcs.w	8000fa4 <__udivmoddi4+0x230>
 8000df8:	459c      	cmp	ip, r3
 8000dfa:	f240 80d3 	bls.w	8000fa4 <__udivmoddi4+0x230>
 8000dfe:	443b      	add	r3, r7
 8000e00:	3802      	subs	r0, #2
 8000e02:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e06:	eba3 030c 	sub.w	r3, r3, ip
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	b11d      	cbz	r5, 8000e16 <__udivmoddi4+0xa2>
 8000e0e:	40f3      	lsrs	r3, r6
 8000e10:	2200      	movs	r2, #0
 8000e12:	e9c5 3200 	strd	r3, r2, [r5]
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d905      	bls.n	8000e2a <__udivmoddi4+0xb6>
 8000e1e:	b10d      	cbz	r5, 8000e24 <__udivmoddi4+0xb0>
 8000e20:	e9c5 0100 	strd	r0, r1, [r5]
 8000e24:	2100      	movs	r1, #0
 8000e26:	4608      	mov	r0, r1
 8000e28:	e7f5      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e2a:	fab3 f183 	clz	r1, r3
 8000e2e:	2900      	cmp	r1, #0
 8000e30:	d146      	bne.n	8000ec0 <__udivmoddi4+0x14c>
 8000e32:	4573      	cmp	r3, lr
 8000e34:	d302      	bcc.n	8000e3c <__udivmoddi4+0xc8>
 8000e36:	4282      	cmp	r2, r0
 8000e38:	f200 8105 	bhi.w	8001046 <__udivmoddi4+0x2d2>
 8000e3c:	1a84      	subs	r4, r0, r2
 8000e3e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e42:	2001      	movs	r0, #1
 8000e44:	4690      	mov	r8, r2
 8000e46:	2d00      	cmp	r5, #0
 8000e48:	d0e5      	beq.n	8000e16 <__udivmoddi4+0xa2>
 8000e4a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e4e:	e7e2      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e50:	2a00      	cmp	r2, #0
 8000e52:	f000 8090 	beq.w	8000f76 <__udivmoddi4+0x202>
 8000e56:	fab2 f682 	clz	r6, r2
 8000e5a:	2e00      	cmp	r6, #0
 8000e5c:	f040 80a4 	bne.w	8000fa8 <__udivmoddi4+0x234>
 8000e60:	1a8a      	subs	r2, r1, r2
 8000e62:	0c03      	lsrs	r3, r0, #16
 8000e64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e68:	b280      	uxth	r0, r0
 8000e6a:	b2bc      	uxth	r4, r7
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e72:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e7a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d907      	bls.n	8000e92 <__udivmoddi4+0x11e>
 8000e82:	18fb      	adds	r3, r7, r3
 8000e84:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e88:	d202      	bcs.n	8000e90 <__udivmoddi4+0x11c>
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	f200 80e0 	bhi.w	8001050 <__udivmoddi4+0x2dc>
 8000e90:	46c4      	mov	ip, r8
 8000e92:	1a9b      	subs	r3, r3, r2
 8000e94:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e98:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e9c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000ea0:	fb02 f404 	mul.w	r4, r2, r4
 8000ea4:	429c      	cmp	r4, r3
 8000ea6:	d907      	bls.n	8000eb8 <__udivmoddi4+0x144>
 8000ea8:	18fb      	adds	r3, r7, r3
 8000eaa:	f102 30ff 	add.w	r0, r2, #4294967295
 8000eae:	d202      	bcs.n	8000eb6 <__udivmoddi4+0x142>
 8000eb0:	429c      	cmp	r4, r3
 8000eb2:	f200 80ca 	bhi.w	800104a <__udivmoddi4+0x2d6>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	1b1b      	subs	r3, r3, r4
 8000eba:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000ebe:	e7a5      	b.n	8000e0c <__udivmoddi4+0x98>
 8000ec0:	f1c1 0620 	rsb	r6, r1, #32
 8000ec4:	408b      	lsls	r3, r1
 8000ec6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eca:	431f      	orrs	r7, r3
 8000ecc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ed0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ed4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ed8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000edc:	4323      	orrs	r3, r4
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	fa1f fc87 	uxth.w	ip, r7
 8000ee6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eea:	0c1c      	lsrs	r4, r3, #16
 8000eec:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ef0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ef4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	fa02 f201 	lsl.w	r2, r2, r1
 8000efe:	d909      	bls.n	8000f14 <__udivmoddi4+0x1a0>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f06:	f080 809c 	bcs.w	8001042 <__udivmoddi4+0x2ce>
 8000f0a:	45a6      	cmp	lr, r4
 8000f0c:	f240 8099 	bls.w	8001042 <__udivmoddi4+0x2ce>
 8000f10:	3802      	subs	r0, #2
 8000f12:	443c      	add	r4, r7
 8000f14:	eba4 040e 	sub.w	r4, r4, lr
 8000f18:	fa1f fe83 	uxth.w	lr, r3
 8000f1c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f20:	fb09 4413 	mls	r4, r9, r3, r4
 8000f24:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f28:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f2c:	45a4      	cmp	ip, r4
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x1ce>
 8000f30:	193c      	adds	r4, r7, r4
 8000f32:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f36:	f080 8082 	bcs.w	800103e <__udivmoddi4+0x2ca>
 8000f3a:	45a4      	cmp	ip, r4
 8000f3c:	d97f      	bls.n	800103e <__udivmoddi4+0x2ca>
 8000f3e:	3b02      	subs	r3, #2
 8000f40:	443c      	add	r4, r7
 8000f42:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f46:	eba4 040c 	sub.w	r4, r4, ip
 8000f4a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f4e:	4564      	cmp	r4, ip
 8000f50:	4673      	mov	r3, lr
 8000f52:	46e1      	mov	r9, ip
 8000f54:	d362      	bcc.n	800101c <__udivmoddi4+0x2a8>
 8000f56:	d05f      	beq.n	8001018 <__udivmoddi4+0x2a4>
 8000f58:	b15d      	cbz	r5, 8000f72 <__udivmoddi4+0x1fe>
 8000f5a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f5e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f62:	fa04 f606 	lsl.w	r6, r4, r6
 8000f66:	fa22 f301 	lsr.w	r3, r2, r1
 8000f6a:	431e      	orrs	r6, r3
 8000f6c:	40cc      	lsrs	r4, r1
 8000f6e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f72:	2100      	movs	r1, #0
 8000f74:	e74f      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000f76:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f7a:	0c01      	lsrs	r1, r0, #16
 8000f7c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f80:	b280      	uxth	r0, r0
 8000f82:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f86:	463b      	mov	r3, r7
 8000f88:	4638      	mov	r0, r7
 8000f8a:	463c      	mov	r4, r7
 8000f8c:	46b8      	mov	r8, r7
 8000f8e:	46be      	mov	lr, r7
 8000f90:	2620      	movs	r6, #32
 8000f92:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f96:	eba2 0208 	sub.w	r2, r2, r8
 8000f9a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f9e:	e766      	b.n	8000e6e <__udivmoddi4+0xfa>
 8000fa0:	4601      	mov	r1, r0
 8000fa2:	e718      	b.n	8000dd6 <__udivmoddi4+0x62>
 8000fa4:	4610      	mov	r0, r2
 8000fa6:	e72c      	b.n	8000e02 <__udivmoddi4+0x8e>
 8000fa8:	f1c6 0220 	rsb	r2, r6, #32
 8000fac:	fa2e f302 	lsr.w	r3, lr, r2
 8000fb0:	40b7      	lsls	r7, r6
 8000fb2:	40b1      	lsls	r1, r6
 8000fb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fc2:	b2bc      	uxth	r4, r7
 8000fc4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fc8:	0c11      	lsrs	r1, r2, #16
 8000fca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fce:	fb08 f904 	mul.w	r9, r8, r4
 8000fd2:	40b0      	lsls	r0, r6
 8000fd4:	4589      	cmp	r9, r1
 8000fd6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fda:	b280      	uxth	r0, r0
 8000fdc:	d93e      	bls.n	800105c <__udivmoddi4+0x2e8>
 8000fde:	1879      	adds	r1, r7, r1
 8000fe0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fe4:	d201      	bcs.n	8000fea <__udivmoddi4+0x276>
 8000fe6:	4589      	cmp	r9, r1
 8000fe8:	d81f      	bhi.n	800102a <__udivmoddi4+0x2b6>
 8000fea:	eba1 0109 	sub.w	r1, r1, r9
 8000fee:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff2:	fb09 f804 	mul.w	r8, r9, r4
 8000ff6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ffa:	b292      	uxth	r2, r2
 8000ffc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001000:	4542      	cmp	r2, r8
 8001002:	d229      	bcs.n	8001058 <__udivmoddi4+0x2e4>
 8001004:	18ba      	adds	r2, r7, r2
 8001006:	f109 31ff 	add.w	r1, r9, #4294967295
 800100a:	d2c4      	bcs.n	8000f96 <__udivmoddi4+0x222>
 800100c:	4542      	cmp	r2, r8
 800100e:	d2c2      	bcs.n	8000f96 <__udivmoddi4+0x222>
 8001010:	f1a9 0102 	sub.w	r1, r9, #2
 8001014:	443a      	add	r2, r7
 8001016:	e7be      	b.n	8000f96 <__udivmoddi4+0x222>
 8001018:	45f0      	cmp	r8, lr
 800101a:	d29d      	bcs.n	8000f58 <__udivmoddi4+0x1e4>
 800101c:	ebbe 0302 	subs.w	r3, lr, r2
 8001020:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001024:	3801      	subs	r0, #1
 8001026:	46e1      	mov	r9, ip
 8001028:	e796      	b.n	8000f58 <__udivmoddi4+0x1e4>
 800102a:	eba7 0909 	sub.w	r9, r7, r9
 800102e:	4449      	add	r1, r9
 8001030:	f1a8 0c02 	sub.w	ip, r8, #2
 8001034:	fbb1 f9fe 	udiv	r9, r1, lr
 8001038:	fb09 f804 	mul.w	r8, r9, r4
 800103c:	e7db      	b.n	8000ff6 <__udivmoddi4+0x282>
 800103e:	4673      	mov	r3, lr
 8001040:	e77f      	b.n	8000f42 <__udivmoddi4+0x1ce>
 8001042:	4650      	mov	r0, sl
 8001044:	e766      	b.n	8000f14 <__udivmoddi4+0x1a0>
 8001046:	4608      	mov	r0, r1
 8001048:	e6fd      	b.n	8000e46 <__udivmoddi4+0xd2>
 800104a:	443b      	add	r3, r7
 800104c:	3a02      	subs	r2, #2
 800104e:	e733      	b.n	8000eb8 <__udivmoddi4+0x144>
 8001050:	f1ac 0c02 	sub.w	ip, ip, #2
 8001054:	443b      	add	r3, r7
 8001056:	e71c      	b.n	8000e92 <__udivmoddi4+0x11e>
 8001058:	4649      	mov	r1, r9
 800105a:	e79c      	b.n	8000f96 <__udivmoddi4+0x222>
 800105c:	eba1 0109 	sub.w	r1, r1, r9
 8001060:	46c4      	mov	ip, r8
 8001062:	fbb1 f9fe 	udiv	r9, r1, lr
 8001066:	fb09 f804 	mul.w	r8, r9, r4
 800106a:	e7c4      	b.n	8000ff6 <__udivmoddi4+0x282>

0800106c <__aeabi_idiv0>:
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop

08001070 <AEAT9922_ReadPosition_SPI4A>:
 * a single, continuous 3-byte SPI transaction.
 * @param  reading Pointer to the data structure where results will be stored.
 * @retval HAL_StatusTypeDef The status of the SPI communication.
 */
HAL_StatusTypeDef AEAT9922_ReadPosition_SPI4A(AEAT9922_Reading_t* reading)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08e      	sub	sp, #56	@ 0x38
 8001074:	af02      	add	r7, sp, #8
 8001076:	6078      	str	r0, [r7, #4]
    uint8_t tx_buf[3];
    uint8_t rx_buf[3];
    uint32_t received_frame;

    // 1. Construct the 16-bit Read Command and place it in a 3-byte buffer.
    uint16_t frame_data = (1 << 14) | ENCODER_READ_COMMAND;
 8001078:	f244 033f 	movw	r3, #16447	@ 0x403f
 800107c:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint8_t parity = calculate_even_parity(frame_data);
 800107e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001080:	4618      	mov	r0, r3
 8001082:	f000 fd8f 	bl	8001ba4 <calculate_even_parity>
 8001086:	4603      	mov	r3, r0
 8001088:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    uint16_t command = (parity << 15) | frame_data;
 800108c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001090:	b21b      	sxth	r3, r3
 8001092:	03db      	lsls	r3, r3, #15
 8001094:	b21a      	sxth	r2, r3
 8001096:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800109a:	4313      	orrs	r3, r2
 800109c:	b21b      	sxth	r3, r3
 800109e:	847b      	strh	r3, [r7, #34]	@ 0x22

    tx_buf[0] = (uint8_t)(command >> 8);
 80010a0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80010a2:	0a1b      	lsrs	r3, r3, #8
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	743b      	strb	r3, [r7, #16]
    tx_buf[1] = (uint8_t)(command & 0xFF);
 80010aa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	747b      	strb	r3, [r7, #17]
    tx_buf[2] = 0x00; // Dummy byte to clock out the end of the response.
 80010b0:	2300      	movs	r3, #0
 80010b2:	74bb      	strb	r3, [r7, #18]

    // 2. Perform a single, continuous 3-byte transaction.
    // NSS stays LOW for the entire duration, maintaining the pipeline.
    HAL_GPIO_WritePin(ENCODER_NSS_PORT, ENCODER_NSS_PIN, GPIO_PIN_RESET);
 80010b4:	2200      	movs	r2, #0
 80010b6:	2110      	movs	r1, #16
 80010b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010bc:	f001 f9a4 	bl	8002408 <HAL_GPIO_WritePin>
    status = HAL_SPI_TransmitReceive(&hspi2, tx_buf, rx_buf, 3, SPI_TIMEOUT_MS);
 80010c0:	f107 020c 	add.w	r2, r7, #12
 80010c4:	f107 0110 	add.w	r1, r7, #16
 80010c8:	23fa      	movs	r3, #250	@ 0xfa
 80010ca:	9300      	str	r3, [sp, #0]
 80010cc:	2303      	movs	r3, #3
 80010ce:	4839      	ldr	r0, [pc, #228]	@ (80011b4 <AEAT9922_ReadPosition_SPI4A+0x144>)
 80010d0:	f002 faf7 	bl	80036c2 <HAL_SPI_TransmitReceive>
 80010d4:	4603      	mov	r3, r0
 80010d6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    HAL_GPIO_WritePin(ENCODER_NSS_PORT, ENCODER_NSS_PIN, GPIO_PIN_SET);
 80010da:	2201      	movs	r2, #1
 80010dc:	2110      	movs	r1, #16
 80010de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010e2:	f001 f991 	bl	8002408 <HAL_GPIO_WritePin>

    if (status != HAL_OK)
 80010e6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d002      	beq.n	80010f4 <AEAT9922_ReadPosition_SPI4A+0x84>
    {
        return status;
 80010ee:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80010f2:	e05a      	b.n	80011aa <AEAT9922_ReadPosition_SPI4A+0x13a>
    }

    // 3. Parse the received data, knowing the first byte is invalid.
    received_frame = ((uint32_t)rx_buf[0] << 16) |
 80010f4:	7b3b      	ldrb	r3, [r7, #12]
 80010f6:	041a      	lsls	r2, r3, #16
                     ((uint32_t)rx_buf[1] << 8)  |
 80010f8:	7b7b      	ldrb	r3, [r7, #13]
 80010fa:	021b      	lsls	r3, r3, #8
    received_frame = ((uint32_t)rx_buf[0] << 16) |
 80010fc:	4313      	orrs	r3, r2
                     ((uint32_t)rx_buf[2]);
 80010fe:	7bba      	ldrb	r2, [r7, #14]
    received_frame = ((uint32_t)rx_buf[0] << 16) |
 8001100:	4313      	orrs	r3, r2
 8001102:	61fb      	str	r3, [r7, #28]

    // Right-shift by 4 bits to discard the first junk byte and align the 20-bit payload.
    reading->raw_frame = received_frame >> 4;
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	091a      	lsrs	r2, r3, #4
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	601a      	str	r2, [r3, #0]

    // 4. Extract data from the correctly aligned 20-bit frame.
    uint8_t received_parity = (reading->raw_frame >> 19) & 0x01;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	0cdb      	lsrs	r3, r3, #19
 8001112:	b2db      	uxtb	r3, r3
 8001114:	f003 0301 	and.w	r3, r3, #1
 8001118:	76fb      	strb	r3, [r7, #27]
    reading->is_error = (reading->raw_frame >> 18) & 0x01;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	0c9b      	lsrs	r3, r3, #18
 8001120:	f003 0301 	and.w	r3, r3, #1
 8001124:	2b00      	cmp	r3, #0
 8001126:	bf14      	ite	ne
 8001128:	2301      	movne	r3, #1
 800112a:	2300      	moveq	r3, #0
 800112c:	b2da      	uxtb	r2, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	73da      	strb	r2, [r3, #15]
    reading->position = reading->raw_frame & POSITION_DATA_MASK;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f3c3 0211 	ubfx	r2, r3, #0, #18
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	605a      	str	r2, [r3, #4]

    // 5. Verify parity on the 19 valid data bits.
    uint32_t data_for_parity_check = reading->raw_frame & 0x7FFFF;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001146:	617b      	str	r3, [r7, #20]
    uint8_t calculated_parity = 0;
 8001148:	2300      	movs	r3, #0
 800114a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    for (int i = 0; i < 19; i++) {
 800114e:	2300      	movs	r3, #0
 8001150:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001152:	e00f      	b.n	8001174 <AEAT9922_ReadPosition_SPI4A+0x104>
        calculated_parity ^= (data_for_parity_check >> i) & 1;
 8001154:	697a      	ldr	r2, [r7, #20]
 8001156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001158:	fa22 f303 	lsr.w	r3, r2, r3
 800115c:	b2db      	uxtb	r3, r3
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	b2da      	uxtb	r2, r3
 8001164:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001168:	4053      	eors	r3, r2
 800116a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    for (int i = 0; i < 19; i++) {
 800116e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001170:	3301      	adds	r3, #1
 8001172:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001176:	2b12      	cmp	r3, #18
 8001178:	ddec      	ble.n	8001154 <AEAT9922_ReadPosition_SPI4A+0xe4>
    }
    reading->crc_ok = (received_parity == calculated_parity);
 800117a:	7efa      	ldrb	r2, [r7, #27]
 800117c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001180:	429a      	cmp	r2, r3
 8001182:	bf0c      	ite	eq
 8001184:	2301      	moveq	r3, #1
 8001186:	2300      	movne	r3, #0
 8001188:	b2da      	uxtb	r2, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	741a      	strb	r2, [r3, #16]

    // 6. Calculate angle.
    reading->angle_degrees = (float)reading->position * DEGREES_PER_COUNT;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	ee07 3a90 	vmov	s15, r3
 8001196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800119a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80011b8 <AEAT9922_ReadPosition_SPI4A+0x148>
 800119e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	edc3 7a02 	vstr	s15, [r3, #8]

    return HAL_OK;
 80011a8:	2300      	movs	r3, #0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3730      	adds	r7, #48	@ 0x30
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20000284 	.word	0x20000284
 80011b8:	3ab40000 	.word	0x3ab40000

080011bc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0


	/* MCU Configuration--------------------------------------------------------*/
	HAL_Init();
 80011c2:	f000 fd3c 	bl	8001c3e <HAL_Init>
	SystemClock_Config();
 80011c6:	f000 f903 	bl	80013d0 <SystemClock_Config>
	MX_GPIO_Init();
 80011ca:	f000 fa1b 	bl	8001604 <MX_GPIO_Init>
	MX_LPUART1_UART_Init();
 80011ce:	f000 f953 	bl	8001478 <MX_LPUART1_UART_Init>
	MX_SPI2_Init();
 80011d2:	f000 f99b 	bl	800150c <MX_SPI2_Init>
	MX_SPI3_Init();
 80011d6:	f000 f9d7 	bl	8001588 <MX_SPI3_Init>

	/* 3. Declare variables for the main loop */
	AEAT9922_Reading_t reading_data;
	uint8_t status_register_val = 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	75fb      	strb	r3, [r7, #23]
	HAL_StatusTypeDef comm_status;

	/* 4. Enter the main application loop */
	while (1)
	{
		    comm_status = AEAT9922_ReadPosition_SPI4A(&reading_data);
 80011de:	463b      	mov	r3, r7
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff ff45 	bl	8001070 <AEAT9922_ReadPosition_SPI4A>
 80011e6:	4603      	mov	r3, r0
 80011e8:	75bb      	strb	r3, [r7, #22]

		    if (comm_status == HAL_OK) {
 80011ea:	7dbb      	ldrb	r3, [r7, #22]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d105      	bne.n	80011fc <main+0x40>
		    	Print_Reading_SPI4A(&reading_data, status_register_val); // Your printing function
 80011f0:	7dfa      	ldrb	r2, [r7, #23]
 80011f2:	463b      	mov	r3, r7
 80011f4:	4611      	mov	r1, r2
 80011f6:	4618      	mov	r0, r3
 80011f8:	f000 f804 	bl	8001204 <Print_Reading_SPI4A>
		    } else {
		        // Handle SPI communication error
		    }

		    HAL_Delay(250);
 80011fc:	20fa      	movs	r0, #250	@ 0xfa
 80011fe:	f000 fd8f 	bl	8001d20 <HAL_Delay>
		    comm_status = AEAT9922_ReadPosition_SPI4A(&reading_data);
 8001202:	e7ec      	b.n	80011de <main+0x22>

08001204 <Print_Reading_SPI4A>:
 * @brief  Formats and prints the sensor reading and status to match the README.md specification.
 * @param  reading Pointer to the sensor data structure (const as we only read it).
 * @param  status_register The value from the status register (only used if an error is active).
 */
static void Print_Reading_SPI4A(const AEAT9922_Reading_t* reading, uint8_t status_register)
{
 8001204:	b5b0      	push	{r4, r5, r7, lr}
 8001206:	b0d0      	sub	sp, #320	@ 0x140
 8001208:	af04      	add	r7, sp, #16
 800120a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800120e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001212:	6018      	str	r0, [r3, #0]
 8001214:	460a      	mov	r2, r1
 8001216:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800121a:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 800121e:	701a      	strb	r2, [r3, #0]
	char buffer[200];
	char parity_str[5];
	char status_str[50];

	// Use the crc_ok flag (which represents parity status for SPI-4A) to set the parity string.
	strcpy(parity_str, reading->crc_ok ? "OK" : "FAIL");
 8001220:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001224:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	7c1b      	ldrb	r3, [r3, #16]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <Print_Reading_SPI4A+0x30>
 8001230:	4a5c      	ldr	r2, [pc, #368]	@ (80013a4 <Print_Reading_SPI4A+0x1a0>)
 8001232:	e000      	b.n	8001236 <Print_Reading_SPI4A+0x32>
 8001234:	4a5c      	ldr	r2, [pc, #368]	@ (80013a8 <Print_Reading_SPI4A+0x1a4>)
 8001236:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800123a:	4611      	mov	r1, r2
 800123c:	4618      	mov	r0, r3
 800123e:	f005 f9a8 	bl	8006592 <strcpy>

	// Build the status string based on the priority of errors.
	if (!reading->crc_ok) {
 8001242:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001246:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	7c1b      	ldrb	r3, [r3, #16]
 800124e:	f083 0301 	eor.w	r3, r3, #1
 8001252:	b2db      	uxtb	r3, r3
 8001254:	2b00      	cmp	r3, #0
 8001256:	d006      	beq.n	8001266 <Print_Reading_SPI4A+0x62>
		// Highest priority: Data corruption invalidates other flags.
		sprintf(status_str, "Status: DATA CORRUPTED");
 8001258:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800125c:	4953      	ldr	r1, [pc, #332]	@ (80013ac <Print_Reading_SPI4A+0x1a8>)
 800125e:	4618      	mov	r0, r3
 8001260:	f005 f8b2 	bl	80063c8 <siprintf>
 8001264:	e06c      	b.n	8001340 <Print_Reading_SPI4A+0x13c>
	} else if (reading->is_error) {
 8001266:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800126a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	7bdb      	ldrb	r3, [r3, #15]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d05e      	beq.n	8001334 <Print_Reading_SPI4A+0x130>
		// Second priority: A hardware error was flagged by the sensor.
		char error_detail[30] = "Unknown";
 8001276:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800127a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800127e:	494c      	ldr	r1, [pc, #304]	@ (80013b0 <Print_Reading_SPI4A+0x1ac>)
 8001280:	461a      	mov	r2, r3
 8001282:	c903      	ldmia	r1, {r0, r1}
 8001284:	e882 0003 	stmia.w	r2, {r0, r1}
 8001288:	3308      	adds	r3, #8
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	605a      	str	r2, [r3, #4]
 8001290:	609a      	str	r2, [r3, #8]
 8001292:	60da      	str	r2, [r3, #12]
 8001294:	611a      	str	r2, [r3, #16]
 8001296:	829a      	strh	r2, [r3, #20]
		if (status_register & FLAG_MHI) strcpy(error_detail, "MHI - Magnet Too Close");
 8001298:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800129c:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d00e      	beq.n	80012c8 <Print_Reading_SPI4A+0xc4>
 80012aa:	f107 030c 	add.w	r3, r7, #12
 80012ae:	4a41      	ldr	r2, [pc, #260]	@ (80013b4 <Print_Reading_SPI4A+0x1b0>)
 80012b0:	461c      	mov	r4, r3
 80012b2:	4615      	mov	r5, r2
 80012b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012b8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80012bc:	6020      	str	r0, [r4, #0]
 80012be:	3404      	adds	r4, #4
 80012c0:	8021      	strh	r1, [r4, #0]
 80012c2:	3402      	adds	r4, #2
 80012c4:	0c0b      	lsrs	r3, r1, #16
 80012c6:	7023      	strb	r3, [r4, #0]
		if (status_register & FLAG_MLO) strcpy(error_detail, "MLO - Magnet Too Far");
 80012c8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80012cc:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	f003 0320 	and.w	r3, r3, #32
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d00b      	beq.n	80012f2 <Print_Reading_SPI4A+0xee>
 80012da:	f107 030c 	add.w	r3, r7, #12
 80012de:	4a36      	ldr	r2, [pc, #216]	@ (80013b8 <Print_Reading_SPI4A+0x1b4>)
 80012e0:	461c      	mov	r4, r3
 80012e2:	4615      	mov	r5, r2
 80012e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012e8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80012ec:	6020      	str	r0, [r4, #0]
 80012ee:	3404      	adds	r4, #4
 80012f0:	7021      	strb	r1, [r4, #0]
		if (status_register & FLAG_MEM_Err) strcpy(error_detail, "MEM_Err - Memory Error");
 80012f2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80012f6:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	f003 0310 	and.w	r3, r3, #16
 8001300:	2b00      	cmp	r3, #0
 8001302:	d00e      	beq.n	8001322 <Print_Reading_SPI4A+0x11e>
 8001304:	f107 030c 	add.w	r3, r7, #12
 8001308:	4a2c      	ldr	r2, [pc, #176]	@ (80013bc <Print_Reading_SPI4A+0x1b8>)
 800130a:	461c      	mov	r4, r3
 800130c:	4615      	mov	r5, r2
 800130e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001310:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001312:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001316:	6020      	str	r0, [r4, #0]
 8001318:	3404      	adds	r4, #4
 800131a:	8021      	strh	r1, [r4, #0]
 800131c:	3402      	adds	r4, #2
 800131e:	0c0b      	lsrs	r3, r1, #16
 8001320:	7023      	strb	r3, [r4, #0]
		sprintf(status_str, "Status: ERROR (%s)", error_detail);
 8001322:	f107 020c 	add.w	r2, r7, #12
 8001326:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800132a:	4925      	ldr	r1, [pc, #148]	@ (80013c0 <Print_Reading_SPI4A+0x1bc>)
 800132c:	4618      	mov	r0, r3
 800132e:	f005 f84b 	bl	80063c8 <siprintf>
 8001332:	e005      	b.n	8001340 <Print_Reading_SPI4A+0x13c>
	} else {
		// No errors detected, normal operation.
		sprintf(status_str, "Status: OK");
 8001334:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001338:	4922      	ldr	r1, [pc, #136]	@ (80013c4 <Print_Reading_SPI4A+0x1c0>)
 800133a:	4618      	mov	r0, r3
 800133c:	f005 f844 	bl	80063c8 <siprintf>
	}

	// Combine all parts into the final output string.
	sprintf(buffer, "Pos: %6lu | Angle: %7.2f° | Parity: %s | %s\r\n",
			(unsigned long)reading->position,
 8001340:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001344:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	685c      	ldr	r4, [r3, #4]
			reading->angle_degrees,
 800134c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001350:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	689b      	ldr	r3, [r3, #8]
	sprintf(buffer, "Pos: %6lu | Angle: %7.2f° | Parity: %s | %s\r\n",
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff f91d 	bl	8000598 <__aeabi_f2d>
 800135e:	4602      	mov	r2, r0
 8001360:	460b      	mov	r3, r1
 8001362:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8001366:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800136a:	9103      	str	r1, [sp, #12]
 800136c:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 8001370:	9102      	str	r1, [sp, #8]
 8001372:	e9cd 2300 	strd	r2, r3, [sp]
 8001376:	4622      	mov	r2, r4
 8001378:	4913      	ldr	r1, [pc, #76]	@ (80013c8 <Print_Reading_SPI4A+0x1c4>)
 800137a:	f005 f825 	bl	80063c8 <siprintf>
			parity_str,
			status_str);

	HAL_UART_Transmit(&hlpuart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 800137e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001382:	4618      	mov	r0, r3
 8001384:	f7fe ff9c 	bl	80002c0 <strlen>
 8001388:	4603      	mov	r3, r0
 800138a:	b29a      	uxth	r2, r3
 800138c:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 8001390:	f04f 33ff 	mov.w	r3, #4294967295
 8001394:	480d      	ldr	r0, [pc, #52]	@ (80013cc <Print_Reading_SPI4A+0x1c8>)
 8001396:	f002 fe87 	bl	80040a8 <HAL_UART_Transmit>
}
 800139a:	bf00      	nop
 800139c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bdb0      	pop	{r4, r5, r7, pc}
 80013a4:	08009c70 	.word	0x08009c70
 80013a8:	08009c74 	.word	0x08009c74
 80013ac:	08009c7c 	.word	0x08009c7c
 80013b0:	08009d2c 	.word	0x08009d2c
 80013b4:	08009c94 	.word	0x08009c94
 80013b8:	08009cac 	.word	0x08009cac
 80013bc:	08009cc4 	.word	0x08009cc4
 80013c0:	08009cdc 	.word	0x08009cdc
 80013c4:	08009cf0 	.word	0x08009cf0
 80013c8:	08009cfc 	.word	0x08009cfc
 80013cc:	200001f0 	.word	0x200001f0

080013d0 <SystemClock_Config>:



/* System configuration functions (same as in main.c) */
void SystemClock_Config(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b094      	sub	sp, #80	@ 0x50
 80013d4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013d6:	f107 0318 	add.w	r3, r7, #24
 80013da:	2238      	movs	r2, #56	@ 0x38
 80013dc:	2100      	movs	r1, #0
 80013de:	4618      	mov	r0, r3
 80013e0:	f005 f857 	bl	8006492 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013e4:	1d3b      	adds	r3, r7, #4
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	609a      	str	r2, [r3, #8]
 80013ee:	60da      	str	r2, [r3, #12]
 80013f0:	611a      	str	r2, [r3, #16]

	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80013f2:	2000      	movs	r0, #0
 80013f4:	f001 f844 	bl	8002480 <HAL_PWREx_ControlVoltageScaling>

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013f8:	2302      	movs	r3, #2
 80013fa:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001400:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001402:	2340      	movs	r3, #64	@ 0x40
 8001404:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001406:	2302      	movs	r3, #2
 8001408:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800140a:	2302      	movs	r3, #2
 800140c:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800140e:	2304      	movs	r3, #4
 8001410:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8001412:	2355      	movs	r3, #85	@ 0x55
 8001414:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001416:	2302      	movs	r3, #2
 8001418:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800141a:	2302      	movs	r3, #2
 800141c:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800141e:	2302      	movs	r3, #2
 8001420:	64fb      	str	r3, [r7, #76]	@ 0x4c

	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001422:	f107 0318 	add.w	r3, r7, #24
 8001426:	4618      	mov	r0, r3
 8001428:	f001 f8de 	bl	80025e8 <HAL_RCC_OscConfig>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <SystemClock_Config+0x66>
		Error_Handler();
 8001432:	f000 f97b 	bl	800172c <Error_Handler>
	}

	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001436:	230f      	movs	r3, #15
 8001438:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800143a:	2303      	movs	r3, #3
 800143c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800143e:	2300      	movs	r3, #0
 8001440:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001442:	2300      	movs	r3, #0
 8001444:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001446:	2300      	movs	r3, #0
 8001448:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 800144a:	1d3b      	adds	r3, r7, #4
 800144c:	2104      	movs	r1, #4
 800144e:	4618      	mov	r0, r3
 8001450:	f001 fbdc 	bl	8002c0c <HAL_RCC_ClockConfig>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <SystemClock_Config+0x8e>
		Error_Handler();
 800145a:	f000 f967 	bl	800172c <Error_Handler>
	}
	HAL_RCC_MCOConfig(RCC_MCO_PG10, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 800145e:	2200      	movs	r2, #0
 8001460:	f04f 7140 	mov.w	r1, #50331648	@ 0x3000000
 8001464:	4803      	ldr	r0, [pc, #12]	@ (8001474 <SystemClock_Config+0xa4>)
 8001466:	f001 fd0d 	bl	8002e84 <HAL_RCC_MCOConfig>
}
 800146a:	bf00      	nop
 800146c:	3750      	adds	r7, #80	@ 0x50
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	00060400 	.word	0x00060400

08001478 <MX_LPUART1_UART_Init>:

static void MX_LPUART1_UART_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
	hlpuart1.Instance = LPUART1;
 800147c:	4b21      	ldr	r3, [pc, #132]	@ (8001504 <MX_LPUART1_UART_Init+0x8c>)
 800147e:	4a22      	ldr	r2, [pc, #136]	@ (8001508 <MX_LPUART1_UART_Init+0x90>)
 8001480:	601a      	str	r2, [r3, #0]
	hlpuart1.Init.BaudRate = 115200;
 8001482:	4b20      	ldr	r3, [pc, #128]	@ (8001504 <MX_LPUART1_UART_Init+0x8c>)
 8001484:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001488:	605a      	str	r2, [r3, #4]
	hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800148a:	4b1e      	ldr	r3, [pc, #120]	@ (8001504 <MX_LPUART1_UART_Init+0x8c>)
 800148c:	2200      	movs	r2, #0
 800148e:	609a      	str	r2, [r3, #8]
	hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001490:	4b1c      	ldr	r3, [pc, #112]	@ (8001504 <MX_LPUART1_UART_Init+0x8c>)
 8001492:	2200      	movs	r2, #0
 8001494:	60da      	str	r2, [r3, #12]
	hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001496:	4b1b      	ldr	r3, [pc, #108]	@ (8001504 <MX_LPUART1_UART_Init+0x8c>)
 8001498:	2200      	movs	r2, #0
 800149a:	611a      	str	r2, [r3, #16]
	hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800149c:	4b19      	ldr	r3, [pc, #100]	@ (8001504 <MX_LPUART1_UART_Init+0x8c>)
 800149e:	220c      	movs	r2, #12
 80014a0:	615a      	str	r2, [r3, #20]
	hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014a2:	4b18      	ldr	r3, [pc, #96]	@ (8001504 <MX_LPUART1_UART_Init+0x8c>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	619a      	str	r2, [r3, #24]
	hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014a8:	4b16      	ldr	r3, [pc, #88]	@ (8001504 <MX_LPUART1_UART_Init+0x8c>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	621a      	str	r2, [r3, #32]
	hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014ae:	4b15      	ldr	r3, [pc, #84]	@ (8001504 <MX_LPUART1_UART_Init+0x8c>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	625a      	str	r2, [r3, #36]	@ 0x24
	hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014b4:	4b13      	ldr	r3, [pc, #76]	@ (8001504 <MX_LPUART1_UART_Init+0x8c>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	629a      	str	r2, [r3, #40]	@ 0x28

	if (HAL_UART_Init(&hlpuart1) != HAL_OK) {
 80014ba:	4812      	ldr	r0, [pc, #72]	@ (8001504 <MX_LPUART1_UART_Init+0x8c>)
 80014bc:	f002 fda4 	bl	8004008 <HAL_UART_Init>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_LPUART1_UART_Init+0x52>
		Error_Handler();
 80014c6:	f000 f931 	bl	800172c <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK) {
 80014ca:	2100      	movs	r1, #0
 80014cc:	480d      	ldr	r0, [pc, #52]	@ (8001504 <MX_LPUART1_UART_Init+0x8c>)
 80014ce:	f003 ff8a 	bl	80053e6 <HAL_UARTEx_SetTxFifoThreshold>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_LPUART1_UART_Init+0x64>
		Error_Handler();
 80014d8:	f000 f928 	bl	800172c <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK) {
 80014dc:	2100      	movs	r1, #0
 80014de:	4809      	ldr	r0, [pc, #36]	@ (8001504 <MX_LPUART1_UART_Init+0x8c>)
 80014e0:	f003 ffbf 	bl	8005462 <HAL_UARTEx_SetRxFifoThreshold>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_LPUART1_UART_Init+0x76>
		Error_Handler();
 80014ea:	f000 f91f 	bl	800172c <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK) {
 80014ee:	4805      	ldr	r0, [pc, #20]	@ (8001504 <MX_LPUART1_UART_Init+0x8c>)
 80014f0:	f003 ff40 	bl	8005374 <HAL_UARTEx_DisableFifoMode>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_LPUART1_UART_Init+0x86>
		Error_Handler();
 80014fa:	f000 f917 	bl	800172c <Error_Handler>
	}
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	200001f0 	.word	0x200001f0
 8001508:	40008000 	.word	0x40008000

0800150c <MX_SPI2_Init>:

static void MX_SPI2_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
	hspi2.Instance = SPI2;
 8001510:	4b1b      	ldr	r3, [pc, #108]	@ (8001580 <MX_SPI2_Init+0x74>)
 8001512:	4a1c      	ldr	r2, [pc, #112]	@ (8001584 <MX_SPI2_Init+0x78>)
 8001514:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8001516:	4b1a      	ldr	r3, [pc, #104]	@ (8001580 <MX_SPI2_Init+0x74>)
 8001518:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800151c:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800151e:	4b18      	ldr	r3, [pc, #96]	@ (8001580 <MX_SPI2_Init+0x74>)
 8001520:	2200      	movs	r2, #0
 8001522:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001524:	4b16      	ldr	r3, [pc, #88]	@ (8001580 <MX_SPI2_Init+0x74>)
 8001526:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800152a:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800152c:	4b14      	ldr	r3, [pc, #80]	@ (8001580 <MX_SPI2_Init+0x74>)
 800152e:	2200      	movs	r2, #0
 8001530:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001532:	4b13      	ldr	r3, [pc, #76]	@ (8001580 <MX_SPI2_Init+0x74>)
 8001534:	2201      	movs	r2, #1
 8001536:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8001538:	4b11      	ldr	r3, [pc, #68]	@ (8001580 <MX_SPI2_Init+0x74>)
 800153a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800153e:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001540:	4b0f      	ldr	r3, [pc, #60]	@ (8001580 <MX_SPI2_Init+0x74>)
 8001542:	2238      	movs	r2, #56	@ 0x38
 8001544:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001546:	4b0e      	ldr	r3, [pc, #56]	@ (8001580 <MX_SPI2_Init+0x74>)
 8001548:	2200      	movs	r2, #0
 800154a:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800154c:	4b0c      	ldr	r3, [pc, #48]	@ (8001580 <MX_SPI2_Init+0x74>)
 800154e:	2200      	movs	r2, #0
 8001550:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001552:	4b0b      	ldr	r3, [pc, #44]	@ (8001580 <MX_SPI2_Init+0x74>)
 8001554:	2200      	movs	r2, #0
 8001556:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi2.Init.CRCPolynomial = 7;
 8001558:	4b09      	ldr	r3, [pc, #36]	@ (8001580 <MX_SPI2_Init+0x74>)
 800155a:	2207      	movs	r2, #7
 800155c:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800155e:	4b08      	ldr	r3, [pc, #32]	@ (8001580 <MX_SPI2_Init+0x74>)
 8001560:	2200      	movs	r2, #0
 8001562:	631a      	str	r2, [r3, #48]	@ 0x30
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001564:	4b06      	ldr	r3, [pc, #24]	@ (8001580 <MX_SPI2_Init+0x74>)
 8001566:	2200      	movs	r2, #0
 8001568:	635a      	str	r2, [r3, #52]	@ 0x34

	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 800156a:	4805      	ldr	r0, [pc, #20]	@ (8001580 <MX_SPI2_Init+0x74>)
 800156c:	f001 fffe 	bl	800356c <HAL_SPI_Init>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_SPI2_Init+0x6e>
		Error_Handler();
 8001576:	f000 f8d9 	bl	800172c <Error_Handler>
	}
}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	20000284 	.word	0x20000284
 8001584:	40003800 	.word	0x40003800

08001588 <MX_SPI3_Init>:

static void MX_SPI3_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
	hspi3.Instance = SPI3;
 800158c:	4b1b      	ldr	r3, [pc, #108]	@ (80015fc <MX_SPI3_Init+0x74>)
 800158e:	4a1c      	ldr	r2, [pc, #112]	@ (8001600 <MX_SPI3_Init+0x78>)
 8001590:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 8001592:	4b1a      	ldr	r3, [pc, #104]	@ (80015fc <MX_SPI3_Init+0x74>)
 8001594:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001598:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800159a:	4b18      	ldr	r3, [pc, #96]	@ (80015fc <MX_SPI3_Init+0x74>)
 800159c:	2200      	movs	r2, #0
 800159e:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80015a0:	4b16      	ldr	r3, [pc, #88]	@ (80015fc <MX_SPI3_Init+0x74>)
 80015a2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80015a6:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015a8:	4b14      	ldr	r3, [pc, #80]	@ (80015fc <MX_SPI3_Init+0x74>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80015ae:	4b13      	ldr	r3, [pc, #76]	@ (80015fc <MX_SPI3_Init+0x74>)
 80015b0:	2201      	movs	r2, #1
 80015b2:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 80015b4:	4b11      	ldr	r3, [pc, #68]	@ (80015fc <MX_SPI3_Init+0x74>)
 80015b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015ba:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80015bc:	4b0f      	ldr	r3, [pc, #60]	@ (80015fc <MX_SPI3_Init+0x74>)
 80015be:	2238      	movs	r2, #56	@ 0x38
 80015c0:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015c2:	4b0e      	ldr	r3, [pc, #56]	@ (80015fc <MX_SPI3_Init+0x74>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80015c8:	4b0c      	ldr	r3, [pc, #48]	@ (80015fc <MX_SPI3_Init+0x74>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015ce:	4b0b      	ldr	r3, [pc, #44]	@ (80015fc <MX_SPI3_Init+0x74>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi3.Init.CRCPolynomial = 7;
 80015d4:	4b09      	ldr	r3, [pc, #36]	@ (80015fc <MX_SPI3_Init+0x74>)
 80015d6:	2207      	movs	r2, #7
 80015d8:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015da:	4b08      	ldr	r3, [pc, #32]	@ (80015fc <MX_SPI3_Init+0x74>)
 80015dc:	2200      	movs	r2, #0
 80015de:	631a      	str	r2, [r3, #48]	@ 0x30
	hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80015e0:	4b06      	ldr	r3, [pc, #24]	@ (80015fc <MX_SPI3_Init+0x74>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	635a      	str	r2, [r3, #52]	@ 0x34

	if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 80015e6:	4805      	ldr	r0, [pc, #20]	@ (80015fc <MX_SPI3_Init+0x74>)
 80015e8:	f001 ffc0 	bl	800356c <HAL_SPI_Init>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_SPI3_Init+0x6e>
		Error_Handler();
 80015f2:	f000 f89b 	bl	800172c <Error_Handler>
	}
}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	200002e8 	.word	0x200002e8
 8001600:	40003c00 	.word	0x40003c00

08001604 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b08a      	sub	sp, #40	@ 0x28
 8001608:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160a:	f107 0314 	add.w	r3, r7, #20
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	605a      	str	r2, [r3, #4]
 8001614:	609a      	str	r2, [r3, #8]
 8001616:	60da      	str	r2, [r3, #12]
 8001618:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOC_CLK_ENABLE();
 800161a:	4b41      	ldr	r3, [pc, #260]	@ (8001720 <MX_GPIO_Init+0x11c>)
 800161c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800161e:	4a40      	ldr	r2, [pc, #256]	@ (8001720 <MX_GPIO_Init+0x11c>)
 8001620:	f043 0304 	orr.w	r3, r3, #4
 8001624:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001626:	4b3e      	ldr	r3, [pc, #248]	@ (8001720 <MX_GPIO_Init+0x11c>)
 8001628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800162a:	f003 0304 	and.w	r3, r3, #4
 800162e:	613b      	str	r3, [r7, #16]
 8001630:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001632:	4b3b      	ldr	r3, [pc, #236]	@ (8001720 <MX_GPIO_Init+0x11c>)
 8001634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001636:	4a3a      	ldr	r2, [pc, #232]	@ (8001720 <MX_GPIO_Init+0x11c>)
 8001638:	f043 0320 	orr.w	r3, r3, #32
 800163c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800163e:	4b38      	ldr	r3, [pc, #224]	@ (8001720 <MX_GPIO_Init+0x11c>)
 8001640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001642:	f003 0320 	and.w	r3, r3, #32
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 800164a:	4b35      	ldr	r3, [pc, #212]	@ (8001720 <MX_GPIO_Init+0x11c>)
 800164c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800164e:	4a34      	ldr	r2, [pc, #208]	@ (8001720 <MX_GPIO_Init+0x11c>)
 8001650:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001654:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001656:	4b32      	ldr	r3, [pc, #200]	@ (8001720 <MX_GPIO_Init+0x11c>)
 8001658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800165a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800165e:	60bb      	str	r3, [r7, #8]
 8001660:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001662:	4b2f      	ldr	r3, [pc, #188]	@ (8001720 <MX_GPIO_Init+0x11c>)
 8001664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001666:	4a2e      	ldr	r2, [pc, #184]	@ (8001720 <MX_GPIO_Init+0x11c>)
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800166e:	4b2c      	ldr	r3, [pc, #176]	@ (8001720 <MX_GPIO_Init+0x11c>)
 8001670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	607b      	str	r3, [r7, #4]
 8001678:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800167a:	4b29      	ldr	r3, [pc, #164]	@ (8001720 <MX_GPIO_Init+0x11c>)
 800167c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800167e:	4a28      	ldr	r2, [pc, #160]	@ (8001720 <MX_GPIO_Init+0x11c>)
 8001680:	f043 0302 	orr.w	r3, r3, #2
 8001684:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001686:	4b26      	ldr	r3, [pc, #152]	@ (8001720 <MX_GPIO_Init+0x11c>)
 8001688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	603b      	str	r3, [r7, #0]
 8001690:	683b      	ldr	r3, [r7, #0]

	HAL_GPIO_WritePin(ENCODER_NSS_PORT, ENCODER_NSS_PIN, GPIO_PIN_SET);
 8001692:	2201      	movs	r2, #1
 8001694:	2110      	movs	r1, #16
 8001696:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800169a:	f000 feb5 	bl	8002408 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);  // LD2
 800169e:	2200      	movs	r2, #0
 80016a0:	2120      	movs	r1, #32
 80016a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016a6:	f000 feaf 	bl	8002408 <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = GPIO_PIN_13;  // B1
 80016aa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016ae:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016b0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80016b4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	2300      	movs	r3, #0
 80016b8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ba:	f107 0314 	add.w	r3, r7, #20
 80016be:	4619      	mov	r1, r3
 80016c0:	4818      	ldr	r0, [pc, #96]	@ (8001724 <MX_GPIO_Init+0x120>)
 80016c2:	f000 fd1f 	bl	8002104 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016ca:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016cc:	2302      	movs	r3, #2
 80016ce:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d4:	2300      	movs	r3, #0
 80016d6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80016d8:	2300      	movs	r3, #0
 80016da:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016dc:	f107 0314 	add.w	r3, r7, #20
 80016e0:	4619      	mov	r1, r3
 80016e2:	4811      	ldr	r0, [pc, #68]	@ (8001728 <MX_GPIO_Init+0x124>)
 80016e4:	f000 fd0e 	bl	8002104 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = ENCODER_NSS_PIN | GPIO_PIN_5;  // NSS and LD2
 80016e8:	2330      	movs	r3, #48	@ 0x30
 80016ea:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ec:	2301      	movs	r3, #1
 80016ee:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f4:	2300      	movs	r3, #0
 80016f6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	4619      	mov	r1, r3
 80016fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001702:	f000 fcff 	bl	8002104 <HAL_GPIO_Init>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001706:	2200      	movs	r2, #0
 8001708:	2100      	movs	r1, #0
 800170a:	2028      	movs	r0, #40	@ 0x28
 800170c:	f000 fc05 	bl	8001f1a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001710:	2028      	movs	r0, #40	@ 0x28
 8001712:	f000 fc1c 	bl	8001f4e <HAL_NVIC_EnableIRQ>
}
 8001716:	bf00      	nop
 8001718:	3728      	adds	r7, #40	@ 0x28
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40021000 	.word	0x40021000
 8001724:	48000800 	.word	0x48000800
 8001728:	48001800 	.word	0x48001800

0800172c <Error_Handler>:

void Error_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001730:	b672      	cpsid	i
}
 8001732:	bf00      	nop
	__disable_irq();
	while (1) {
 8001734:	bf00      	nop
 8001736:	e7fd      	b.n	8001734 <Error_Handler+0x8>

08001738 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800173e:	4b0f      	ldr	r3, [pc, #60]	@ (800177c <HAL_MspInit+0x44>)
 8001740:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001742:	4a0e      	ldr	r2, [pc, #56]	@ (800177c <HAL_MspInit+0x44>)
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	6613      	str	r3, [r2, #96]	@ 0x60
 800174a:	4b0c      	ldr	r3, [pc, #48]	@ (800177c <HAL_MspInit+0x44>)
 800174c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	607b      	str	r3, [r7, #4]
 8001754:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001756:	4b09      	ldr	r3, [pc, #36]	@ (800177c <HAL_MspInit+0x44>)
 8001758:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800175a:	4a08      	ldr	r2, [pc, #32]	@ (800177c <HAL_MspInit+0x44>)
 800175c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001760:	6593      	str	r3, [r2, #88]	@ 0x58
 8001762:	4b06      	ldr	r3, [pc, #24]	@ (800177c <HAL_MspInit+0x44>)
 8001764:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001766:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800176a:	603b      	str	r3, [r7, #0]
 800176c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800176e:	f000 ff2b 	bl	80025c8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001772:	bf00      	nop
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40021000 	.word	0x40021000

08001780 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b09e      	sub	sp, #120	@ 0x78
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001788:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]
 8001796:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001798:	f107 0310 	add.w	r3, r7, #16
 800179c:	2254      	movs	r2, #84	@ 0x54
 800179e:	2100      	movs	r1, #0
 80017a0:	4618      	mov	r0, r3
 80017a2:	f004 fe76 	bl	8006492 <memset>
  if(huart->Instance==LPUART1)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a23      	ldr	r2, [pc, #140]	@ (8001838 <HAL_UART_MspInit+0xb8>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d13e      	bne.n	800182e <HAL_UART_MspInit+0xae>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80017b0:	2320      	movs	r3, #32
 80017b2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80017b4:	2300      	movs	r3, #0
 80017b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017b8:	f107 0310 	add.w	r3, r7, #16
 80017bc:	4618      	mov	r0, r3
 80017be:	f001 fc87 	bl	80030d0 <HAL_RCCEx_PeriphCLKConfig>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80017c8:	f7ff ffb0 	bl	800172c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80017cc:	4b1b      	ldr	r3, [pc, #108]	@ (800183c <HAL_UART_MspInit+0xbc>)
 80017ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017d0:	4a1a      	ldr	r2, [pc, #104]	@ (800183c <HAL_UART_MspInit+0xbc>)
 80017d2:	f043 0301 	orr.w	r3, r3, #1
 80017d6:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80017d8:	4b18      	ldr	r3, [pc, #96]	@ (800183c <HAL_UART_MspInit+0xbc>)
 80017da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017dc:	f003 0301 	and.w	r3, r3, #1
 80017e0:	60fb      	str	r3, [r7, #12]
 80017e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e4:	4b15      	ldr	r3, [pc, #84]	@ (800183c <HAL_UART_MspInit+0xbc>)
 80017e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017e8:	4a14      	ldr	r2, [pc, #80]	@ (800183c <HAL_UART_MspInit+0xbc>)
 80017ea:	f043 0301 	orr.w	r3, r3, #1
 80017ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017f0:	4b12      	ldr	r3, [pc, #72]	@ (800183c <HAL_UART_MspInit+0xbc>)
 80017f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017f4:	f003 0301 	and.w	r3, r3, #1
 80017f8:	60bb      	str	r3, [r7, #8]
 80017fa:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80017fc:	230c      	movs	r3, #12
 80017fe:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001800:	2302      	movs	r3, #2
 8001802:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	2300      	movs	r3, #0
 8001806:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001808:	2300      	movs	r3, #0
 800180a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800180c:	230c      	movs	r3, #12
 800180e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001810:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001814:	4619      	mov	r1, r3
 8001816:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800181a:	f000 fc73 	bl	8002104 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800181e:	2200      	movs	r2, #0
 8001820:	2100      	movs	r1, #0
 8001822:	205b      	movs	r0, #91	@ 0x5b
 8001824:	f000 fb79 	bl	8001f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001828:	205b      	movs	r0, #91	@ 0x5b
 800182a:	f000 fb90 	bl	8001f4e <HAL_NVIC_EnableIRQ>

    /* USER CODE END LPUART1_MspInit 1 */

  }

}
 800182e:	bf00      	nop
 8001830:	3778      	adds	r7, #120	@ 0x78
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40008000 	.word	0x40008000
 800183c:	40021000 	.word	0x40021000

08001840 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b08c      	sub	sp, #48	@ 0x30
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001848:	f107 031c 	add.w	r3, r7, #28
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a36      	ldr	r2, [pc, #216]	@ (8001938 <HAL_SPI_MspInit+0xf8>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d131      	bne.n	80018c6 <HAL_SPI_MspInit+0x86>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001862:	4b36      	ldr	r3, [pc, #216]	@ (800193c <HAL_SPI_MspInit+0xfc>)
 8001864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001866:	4a35      	ldr	r2, [pc, #212]	@ (800193c <HAL_SPI_MspInit+0xfc>)
 8001868:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800186c:	6593      	str	r3, [r2, #88]	@ 0x58
 800186e:	4b33      	ldr	r3, [pc, #204]	@ (800193c <HAL_SPI_MspInit+0xfc>)
 8001870:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001872:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001876:	61bb      	str	r3, [r7, #24]
 8001878:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800187a:	4b30      	ldr	r3, [pc, #192]	@ (800193c <HAL_SPI_MspInit+0xfc>)
 800187c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800187e:	4a2f      	ldr	r2, [pc, #188]	@ (800193c <HAL_SPI_MspInit+0xfc>)
 8001880:	f043 0302 	orr.w	r3, r3, #2
 8001884:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001886:	4b2d      	ldr	r3, [pc, #180]	@ (800193c <HAL_SPI_MspInit+0xfc>)
 8001888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	617b      	str	r3, [r7, #20]
 8001890:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001892:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001896:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001898:	2302      	movs	r3, #2
 800189a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a0:	2300      	movs	r3, #0
 80018a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018a4:	2305      	movs	r3, #5
 80018a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a8:	f107 031c 	add.w	r3, r7, #28
 80018ac:	4619      	mov	r1, r3
 80018ae:	4824      	ldr	r0, [pc, #144]	@ (8001940 <HAL_SPI_MspInit+0x100>)
 80018b0:	f000 fc28 	bl	8002104 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80018b4:	2200      	movs	r2, #0
 80018b6:	2100      	movs	r1, #0
 80018b8:	2024      	movs	r0, #36	@ 0x24
 80018ba:	f000 fb2e 	bl	8001f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80018be:	2024      	movs	r0, #36	@ 0x24
 80018c0:	f000 fb45 	bl	8001f4e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 80018c4:	e034      	b.n	8001930 <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI3)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a1e      	ldr	r2, [pc, #120]	@ (8001944 <HAL_SPI_MspInit+0x104>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d12f      	bne.n	8001930 <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80018d0:	4b1a      	ldr	r3, [pc, #104]	@ (800193c <HAL_SPI_MspInit+0xfc>)
 80018d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018d4:	4a19      	ldr	r2, [pc, #100]	@ (800193c <HAL_SPI_MspInit+0xfc>)
 80018d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80018da:	6593      	str	r3, [r2, #88]	@ 0x58
 80018dc:	4b17      	ldr	r3, [pc, #92]	@ (800193c <HAL_SPI_MspInit+0xfc>)
 80018de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80018e4:	613b      	str	r3, [r7, #16]
 80018e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e8:	4b14      	ldr	r3, [pc, #80]	@ (800193c <HAL_SPI_MspInit+0xfc>)
 80018ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ec:	4a13      	ldr	r2, [pc, #76]	@ (800193c <HAL_SPI_MspInit+0xfc>)
 80018ee:	f043 0302 	orr.w	r3, r3, #2
 80018f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018f4:	4b11      	ldr	r3, [pc, #68]	@ (800193c <HAL_SPI_MspInit+0xfc>)
 80018f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018f8:	f003 0302 	and.w	r3, r3, #2
 80018fc:	60fb      	str	r3, [r7, #12]
 80018fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001900:	2338      	movs	r3, #56	@ 0x38
 8001902:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001904:	2302      	movs	r3, #2
 8001906:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190c:	2300      	movs	r3, #0
 800190e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001910:	2306      	movs	r3, #6
 8001912:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001914:	f107 031c 	add.w	r3, r7, #28
 8001918:	4619      	mov	r1, r3
 800191a:	4809      	ldr	r0, [pc, #36]	@ (8001940 <HAL_SPI_MspInit+0x100>)
 800191c:	f000 fbf2 	bl	8002104 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001920:	2200      	movs	r2, #0
 8001922:	2100      	movs	r1, #0
 8001924:	2033      	movs	r0, #51	@ 0x33
 8001926:	f000 faf8 	bl	8001f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800192a:	2033      	movs	r0, #51	@ 0x33
 800192c:	f000 fb0f 	bl	8001f4e <HAL_NVIC_EnableIRQ>
}
 8001930:	bf00      	nop
 8001932:	3730      	adds	r7, #48	@ 0x30
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	40003800 	.word	0x40003800
 800193c:	40021000 	.word	0x40021000
 8001940:	48000400 	.word	0x48000400
 8001944:	40003c00 	.word	0x40003c00

08001948 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800194c:	bf00      	nop
 800194e:	e7fd      	b.n	800194c <NMI_Handler+0x4>

08001950 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001954:	bf00      	nop
 8001956:	e7fd      	b.n	8001954 <HardFault_Handler+0x4>

08001958 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800195c:	bf00      	nop
 800195e:	e7fd      	b.n	800195c <MemManage_Handler+0x4>

08001960 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001964:	bf00      	nop
 8001966:	e7fd      	b.n	8001964 <BusFault_Handler+0x4>

08001968 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800196c:	bf00      	nop
 800196e:	e7fd      	b.n	800196c <UsageFault_Handler+0x4>

08001970 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001974:	bf00      	nop
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800197e:	b480      	push	{r7}
 8001980:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001982:	bf00      	nop
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800199e:	f000 f9a1 	bl	8001ce4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
	...

080019a8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80019ac:	4802      	ldr	r0, [pc, #8]	@ (80019b8 <SPI2_IRQHandler+0x10>)
 80019ae:	f002 f8a7 	bl	8003b00 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20000284 	.word	0x20000284

080019bc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80019c0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80019c4:	f000 fd38 	bl	8002438 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80019c8:	bf00      	nop
 80019ca:	bd80      	pop	{r7, pc}

080019cc <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80019d0:	4802      	ldr	r0, [pc, #8]	@ (80019dc <SPI3_IRQHandler+0x10>)
 80019d2:	f002 f895 	bl	8003b00 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	200002e8 	.word	0x200002e8

080019e0 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80019e4:	4802      	ldr	r0, [pc, #8]	@ (80019f0 <LPUART1_IRQHandler+0x10>)
 80019e6:	f002 fbed 	bl	80041c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80019ea:	bf00      	nop
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	200001f0 	.word	0x200001f0

080019f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  return 1;
 80019f8:	2301      	movs	r3, #1
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <_kill>:

int _kill(int pid, int sig)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a0e:	f004 fd93 	bl	8006538 <__errno>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2216      	movs	r2, #22
 8001a16:	601a      	str	r2, [r3, #0]
  return -1;
 8001a18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <_exit>:

void _exit (int status)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f7ff ffe7 	bl	8001a04 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a36:	bf00      	nop
 8001a38:	e7fd      	b.n	8001a36 <_exit+0x12>

08001a3a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b086      	sub	sp, #24
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	60f8      	str	r0, [r7, #12]
 8001a42:	60b9      	str	r1, [r7, #8]
 8001a44:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a46:	2300      	movs	r3, #0
 8001a48:	617b      	str	r3, [r7, #20]
 8001a4a:	e00a      	b.n	8001a62 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a4c:	f3af 8000 	nop.w
 8001a50:	4601      	mov	r1, r0
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	1c5a      	adds	r2, r3, #1
 8001a56:	60ba      	str	r2, [r7, #8]
 8001a58:	b2ca      	uxtb	r2, r1
 8001a5a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	617b      	str	r3, [r7, #20]
 8001a62:	697a      	ldr	r2, [r7, #20]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	dbf0      	blt.n	8001a4c <_read+0x12>
  }

  return len;
 8001a6a:	687b      	ldr	r3, [r7, #4]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3718      	adds	r7, #24
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a80:	2300      	movs	r3, #0
 8001a82:	617b      	str	r3, [r7, #20]
 8001a84:	e009      	b.n	8001a9a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	1c5a      	adds	r2, r3, #1
 8001a8a:	60ba      	str	r2, [r7, #8]
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	3301      	adds	r3, #1
 8001a98:	617b      	str	r3, [r7, #20]
 8001a9a:	697a      	ldr	r2, [r7, #20]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	dbf1      	blt.n	8001a86 <_write+0x12>
  }
  return len;
 8001aa2:	687b      	ldr	r3, [r7, #4]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3718      	adds	r7, #24
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <_close>:

int _close(int file)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ab4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ad4:	605a      	str	r2, [r3, #4]
  return 0;
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <_isatty>:

int _isatty(int file)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001aec:	2301      	movs	r3, #1
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr

08001afa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001afa:	b480      	push	{r7}
 8001afc:	b085      	sub	sp, #20
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	60f8      	str	r0, [r7, #12]
 8001b02:	60b9      	str	r1, [r7, #8]
 8001b04:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b06:	2300      	movs	r3, #0
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3714      	adds	r7, #20
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b1c:	4a14      	ldr	r2, [pc, #80]	@ (8001b70 <_sbrk+0x5c>)
 8001b1e:	4b15      	ldr	r3, [pc, #84]	@ (8001b74 <_sbrk+0x60>)
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b28:	4b13      	ldr	r3, [pc, #76]	@ (8001b78 <_sbrk+0x64>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d102      	bne.n	8001b36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b30:	4b11      	ldr	r3, [pc, #68]	@ (8001b78 <_sbrk+0x64>)
 8001b32:	4a12      	ldr	r2, [pc, #72]	@ (8001b7c <_sbrk+0x68>)
 8001b34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b36:	4b10      	ldr	r3, [pc, #64]	@ (8001b78 <_sbrk+0x64>)
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d207      	bcs.n	8001b54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b44:	f004 fcf8 	bl	8006538 <__errno>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	220c      	movs	r2, #12
 8001b4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b52:	e009      	b.n	8001b68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b54:	4b08      	ldr	r3, [pc, #32]	@ (8001b78 <_sbrk+0x64>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b5a:	4b07      	ldr	r3, [pc, #28]	@ (8001b78 <_sbrk+0x64>)
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4413      	add	r3, r2
 8001b62:	4a05      	ldr	r2, [pc, #20]	@ (8001b78 <_sbrk+0x64>)
 8001b64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b66:	68fb      	ldr	r3, [r7, #12]
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3718      	adds	r7, #24
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	20020000 	.word	0x20020000
 8001b74:	00000400 	.word	0x00000400
 8001b78:	2000034c 	.word	0x2000034c
 8001b7c:	200004a0 	.word	0x200004a0

08001b80 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b84:	4b06      	ldr	r3, [pc, #24]	@ (8001ba0 <SystemInit+0x20>)
 8001b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b8a:	4a05      	ldr	r2, [pc, #20]	@ (8001ba0 <SystemInit+0x20>)
 8001b8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b94:	bf00      	nop
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	e000ed00 	.word	0xe000ed00

08001ba4 <calculate_even_parity>:
 */

#include "utils.h"

uint8_t calculate_even_parity(uint16_t val)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	80fb      	strh	r3, [r7, #6]
    uint8_t parity = 0;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < 15; i++)
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60bb      	str	r3, [r7, #8]
 8001bb6:	e00f      	b.n	8001bd8 <calculate_even_parity+0x34>
    {
        parity ^= (val >> i) & 0x01;
 8001bb8:	88fa      	ldrh	r2, [r7, #6]
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	fa42 f303 	asr.w	r3, r2, r3
 8001bc0:	b25b      	sxtb	r3, r3
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	b25a      	sxtb	r2, r3
 8001bc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bcc:	4053      	eors	r3, r2
 8001bce:	b25b      	sxtb	r3, r3
 8001bd0:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < 15; i++)
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	60bb      	str	r3, [r7, #8]
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	2b0e      	cmp	r3, #14
 8001bdc:	ddec      	ble.n	8001bb8 <calculate_even_parity+0x14>
    }
    return parity;
 8001bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3714      	adds	r7, #20
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001bec:	480d      	ldr	r0, [pc, #52]	@ (8001c24 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001bee:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bf0:	f7ff ffc6 	bl	8001b80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bf4:	480c      	ldr	r0, [pc, #48]	@ (8001c28 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bf6:	490d      	ldr	r1, [pc, #52]	@ (8001c2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bf8:	4a0d      	ldr	r2, [pc, #52]	@ (8001c30 <LoopForever+0xe>)
  movs r3, #0
 8001bfa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001bfc:	e002      	b.n	8001c04 <LoopCopyDataInit>

08001bfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c02:	3304      	adds	r3, #4

08001c04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c08:	d3f9      	bcc.n	8001bfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c0c:	4c0a      	ldr	r4, [pc, #40]	@ (8001c38 <LoopForever+0x16>)
  movs r3, #0
 8001c0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c10:	e001      	b.n	8001c16 <LoopFillZerobss>

08001c12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c14:	3204      	adds	r2, #4

08001c16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c18:	d3fb      	bcc.n	8001c12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c1a:	f004 fc93 	bl	8006544 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c1e:	f7ff facd 	bl	80011bc <main>

08001c22 <LoopForever>:

LoopForever:
    b LoopForever
 8001c22:	e7fe      	b.n	8001c22 <LoopForever>
  ldr   r0, =_estack
 8001c24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c2c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001c30:	0800a1c4 	.word	0x0800a1c4
  ldr r2, =_sbss
 8001c34:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001c38:	200004a0 	.word	0x200004a0

08001c3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c3c:	e7fe      	b.n	8001c3c <ADC1_2_IRQHandler>

08001c3e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b082      	sub	sp, #8
 8001c42:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c44:	2300      	movs	r3, #0
 8001c46:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c48:	2003      	movs	r0, #3
 8001c4a:	f000 f95b 	bl	8001f04 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c4e:	2000      	movs	r0, #0
 8001c50:	f000 f80e 	bl	8001c70 <HAL_InitTick>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d002      	beq.n	8001c60 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	71fb      	strb	r3, [r7, #7]
 8001c5e:	e001      	b.n	8001c64 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c60:	f7ff fd6a 	bl	8001738 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c64:	79fb      	ldrb	r3, [r7, #7]

}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
	...

08001c70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001c7c:	4b16      	ldr	r3, [pc, #88]	@ (8001cd8 <HAL_InitTick+0x68>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d022      	beq.n	8001cca <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001c84:	4b15      	ldr	r3, [pc, #84]	@ (8001cdc <HAL_InitTick+0x6c>)
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	4b13      	ldr	r3, [pc, #76]	@ (8001cd8 <HAL_InitTick+0x68>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001c90:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f000 f966 	bl	8001f6a <HAL_SYSTICK_Config>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d10f      	bne.n	8001cc4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2b0f      	cmp	r3, #15
 8001ca8:	d809      	bhi.n	8001cbe <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001caa:	2200      	movs	r2, #0
 8001cac:	6879      	ldr	r1, [r7, #4]
 8001cae:	f04f 30ff 	mov.w	r0, #4294967295
 8001cb2:	f000 f932 	bl	8001f1a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001cb6:	4a0a      	ldr	r2, [pc, #40]	@ (8001ce0 <HAL_InitTick+0x70>)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6013      	str	r3, [r2, #0]
 8001cbc:	e007      	b.n	8001cce <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	73fb      	strb	r3, [r7, #15]
 8001cc2:	e004      	b.n	8001cce <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	73fb      	strb	r3, [r7, #15]
 8001cc8:	e001      	b.n	8001cce <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	20000008 	.word	0x20000008
 8001cdc:	20000000 	.word	0x20000000
 8001ce0:	20000004 	.word	0x20000004

08001ce4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ce8:	4b05      	ldr	r3, [pc, #20]	@ (8001d00 <HAL_IncTick+0x1c>)
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	4b05      	ldr	r3, [pc, #20]	@ (8001d04 <HAL_IncTick+0x20>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	4a03      	ldr	r2, [pc, #12]	@ (8001d00 <HAL_IncTick+0x1c>)
 8001cf4:	6013      	str	r3, [r2, #0]
}
 8001cf6:	bf00      	nop
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	20000350 	.word	0x20000350
 8001d04:	20000008 	.word	0x20000008

08001d08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d0c:	4b03      	ldr	r3, [pc, #12]	@ (8001d1c <HAL_GetTick+0x14>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	20000350 	.word	0x20000350

08001d20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d28:	f7ff ffee 	bl	8001d08 <HAL_GetTick>
 8001d2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d38:	d004      	beq.n	8001d44 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d3a:	4b09      	ldr	r3, [pc, #36]	@ (8001d60 <HAL_Delay+0x40>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	68fa      	ldr	r2, [r7, #12]
 8001d40:	4413      	add	r3, r2
 8001d42:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d44:	bf00      	nop
 8001d46:	f7ff ffdf 	bl	8001d08 <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	68fa      	ldr	r2, [r7, #12]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d8f7      	bhi.n	8001d46 <HAL_Delay+0x26>
  {
  }
}
 8001d56:	bf00      	nop
 8001d58:	bf00      	nop
 8001d5a:	3710      	adds	r7, #16
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	20000008 	.word	0x20000008

08001d64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f003 0307 	and.w	r3, r3, #7
 8001d72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d74:	4b0c      	ldr	r3, [pc, #48]	@ (8001da8 <__NVIC_SetPriorityGrouping+0x44>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d7a:	68ba      	ldr	r2, [r7, #8]
 8001d7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d80:	4013      	ands	r3, r2
 8001d82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d96:	4a04      	ldr	r2, [pc, #16]	@ (8001da8 <__NVIC_SetPriorityGrouping+0x44>)
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	60d3      	str	r3, [r2, #12]
}
 8001d9c:	bf00      	nop
 8001d9e:	3714      	adds	r7, #20
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr
 8001da8:	e000ed00 	.word	0xe000ed00

08001dac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001db0:	4b04      	ldr	r3, [pc, #16]	@ (8001dc4 <__NVIC_GetPriorityGrouping+0x18>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	0a1b      	lsrs	r3, r3, #8
 8001db6:	f003 0307 	and.w	r3, r3, #7
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	e000ed00 	.word	0xe000ed00

08001dc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	db0b      	blt.n	8001df2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dda:	79fb      	ldrb	r3, [r7, #7]
 8001ddc:	f003 021f 	and.w	r2, r3, #31
 8001de0:	4907      	ldr	r1, [pc, #28]	@ (8001e00 <__NVIC_EnableIRQ+0x38>)
 8001de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de6:	095b      	lsrs	r3, r3, #5
 8001de8:	2001      	movs	r0, #1
 8001dea:	fa00 f202 	lsl.w	r2, r0, r2
 8001dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	e000e100 	.word	0xe000e100

08001e04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	6039      	str	r1, [r7, #0]
 8001e0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	db0a      	blt.n	8001e2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	b2da      	uxtb	r2, r3
 8001e1c:	490c      	ldr	r1, [pc, #48]	@ (8001e50 <__NVIC_SetPriority+0x4c>)
 8001e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e22:	0112      	lsls	r2, r2, #4
 8001e24:	b2d2      	uxtb	r2, r2
 8001e26:	440b      	add	r3, r1
 8001e28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e2c:	e00a      	b.n	8001e44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	b2da      	uxtb	r2, r3
 8001e32:	4908      	ldr	r1, [pc, #32]	@ (8001e54 <__NVIC_SetPriority+0x50>)
 8001e34:	79fb      	ldrb	r3, [r7, #7]
 8001e36:	f003 030f 	and.w	r3, r3, #15
 8001e3a:	3b04      	subs	r3, #4
 8001e3c:	0112      	lsls	r2, r2, #4
 8001e3e:	b2d2      	uxtb	r2, r2
 8001e40:	440b      	add	r3, r1
 8001e42:	761a      	strb	r2, [r3, #24]
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr
 8001e50:	e000e100 	.word	0xe000e100
 8001e54:	e000ed00 	.word	0xe000ed00

08001e58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b089      	sub	sp, #36	@ 0x24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f003 0307 	and.w	r3, r3, #7
 8001e6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	f1c3 0307 	rsb	r3, r3, #7
 8001e72:	2b04      	cmp	r3, #4
 8001e74:	bf28      	it	cs
 8001e76:	2304      	movcs	r3, #4
 8001e78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	3304      	adds	r3, #4
 8001e7e:	2b06      	cmp	r3, #6
 8001e80:	d902      	bls.n	8001e88 <NVIC_EncodePriority+0x30>
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	3b03      	subs	r3, #3
 8001e86:	e000      	b.n	8001e8a <NVIC_EncodePriority+0x32>
 8001e88:	2300      	movs	r3, #0
 8001e8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	43da      	mvns	r2, r3
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	401a      	ands	r2, r3
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ea0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eaa:	43d9      	mvns	r1, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb0:	4313      	orrs	r3, r2
         );
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3724      	adds	r7, #36	@ 0x24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
	...

08001ec0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ed0:	d301      	bcc.n	8001ed6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e00f      	b.n	8001ef6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ed6:	4a0a      	ldr	r2, [pc, #40]	@ (8001f00 <SysTick_Config+0x40>)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	3b01      	subs	r3, #1
 8001edc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ede:	210f      	movs	r1, #15
 8001ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ee4:	f7ff ff8e 	bl	8001e04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ee8:	4b05      	ldr	r3, [pc, #20]	@ (8001f00 <SysTick_Config+0x40>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eee:	4b04      	ldr	r3, [pc, #16]	@ (8001f00 <SysTick_Config+0x40>)
 8001ef0:	2207      	movs	r2, #7
 8001ef2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	e000e010 	.word	0xe000e010

08001f04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f7ff ff29 	bl	8001d64 <__NVIC_SetPriorityGrouping>
}
 8001f12:	bf00      	nop
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b086      	sub	sp, #24
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	4603      	mov	r3, r0
 8001f22:	60b9      	str	r1, [r7, #8]
 8001f24:	607a      	str	r2, [r7, #4]
 8001f26:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f28:	f7ff ff40 	bl	8001dac <__NVIC_GetPriorityGrouping>
 8001f2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	68b9      	ldr	r1, [r7, #8]
 8001f32:	6978      	ldr	r0, [r7, #20]
 8001f34:	f7ff ff90 	bl	8001e58 <NVIC_EncodePriority>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f3e:	4611      	mov	r1, r2
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7ff ff5f 	bl	8001e04 <__NVIC_SetPriority>
}
 8001f46:	bf00      	nop
 8001f48:	3718      	adds	r7, #24
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b082      	sub	sp, #8
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	4603      	mov	r3, r0
 8001f56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff ff33 	bl	8001dc8 <__NVIC_EnableIRQ>
}
 8001f62:	bf00      	nop
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	b082      	sub	sp, #8
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f7ff ffa4 	bl	8001ec0 <SysTick_Config>
 8001f78:	4603      	mov	r3, r0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b085      	sub	sp, #20
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d005      	beq.n	8001fa6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2204      	movs	r2, #4
 8001f9e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	73fb      	strb	r3, [r7, #15]
 8001fa4:	e037      	b.n	8002016 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f022 020e 	bic.w	r2, r2, #14
 8001fb4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fc0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001fc4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f022 0201 	bic.w	r2, r2, #1
 8001fd4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fda:	f003 021f 	and.w	r2, r3, #31
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe2:	2101      	movs	r1, #1
 8001fe4:	fa01 f202 	lsl.w	r2, r1, r2
 8001fe8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001ff2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d00c      	beq.n	8002016 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002006:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800200a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002014:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2201      	movs	r2, #1
 800201a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8002026:	7bfb      	ldrb	r3, [r7, #15]
}
 8002028:	4618      	mov	r0, r3
 800202a:	3714      	adds	r7, #20
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800203c:	2300      	movs	r3, #0
 800203e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002046:	b2db      	uxtb	r3, r3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d00d      	beq.n	8002068 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2204      	movs	r2, #4
 8002050:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2201      	movs	r2, #1
 8002056:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	73fb      	strb	r3, [r7, #15]
 8002066:	e047      	b.n	80020f8 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f022 020e 	bic.w	r2, r2, #14
 8002076:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f022 0201 	bic.w	r2, r2, #1
 8002086:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002092:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002096:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800209c:	f003 021f 	and.w	r2, r3, #31
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a4:	2101      	movs	r1, #1
 80020a6:	fa01 f202 	lsl.w	r2, r1, r2
 80020aa:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80020b4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d00c      	beq.n	80020d8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80020cc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80020d6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d003      	beq.n	80020f8 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	4798      	blx	r3
    }
  }
  return status;
 80020f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
	...

08002104 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002104:	b480      	push	{r7}
 8002106:	b087      	sub	sp, #28
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800210e:	2300      	movs	r3, #0
 8002110:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002112:	e15a      	b.n	80023ca <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	2101      	movs	r1, #1
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	fa01 f303 	lsl.w	r3, r1, r3
 8002120:	4013      	ands	r3, r2
 8002122:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2b00      	cmp	r3, #0
 8002128:	f000 814c 	beq.w	80023c4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f003 0303 	and.w	r3, r3, #3
 8002134:	2b01      	cmp	r3, #1
 8002136:	d005      	beq.n	8002144 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002140:	2b02      	cmp	r3, #2
 8002142:	d130      	bne.n	80021a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	2203      	movs	r2, #3
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	43db      	mvns	r3, r3
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	4013      	ands	r3, r2
 800215a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	68da      	ldr	r2, [r3, #12]
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	693a      	ldr	r2, [r7, #16]
 800216a:	4313      	orrs	r3, r2
 800216c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	693a      	ldr	r2, [r7, #16]
 8002172:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800217a:	2201      	movs	r2, #1
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	43db      	mvns	r3, r3
 8002184:	693a      	ldr	r2, [r7, #16]
 8002186:	4013      	ands	r3, r2
 8002188:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	091b      	lsrs	r3, r3, #4
 8002190:	f003 0201 	and.w	r2, r3, #1
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	4313      	orrs	r3, r2
 800219e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f003 0303 	and.w	r3, r3, #3
 80021ae:	2b03      	cmp	r3, #3
 80021b0:	d017      	beq.n	80021e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	2203      	movs	r2, #3
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	43db      	mvns	r3, r3
 80021c4:	693a      	ldr	r2, [r7, #16]
 80021c6:	4013      	ands	r3, r2
 80021c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	689a      	ldr	r2, [r3, #8]
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	4313      	orrs	r3, r2
 80021da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f003 0303 	and.w	r3, r3, #3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d123      	bne.n	8002236 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	08da      	lsrs	r2, r3, #3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	3208      	adds	r2, #8
 80021f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	f003 0307 	and.w	r3, r3, #7
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	220f      	movs	r2, #15
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	43db      	mvns	r3, r3
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	4013      	ands	r3, r2
 8002210:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	691a      	ldr	r2, [r3, #16]
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	f003 0307 	and.w	r3, r3, #7
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	4313      	orrs	r3, r2
 8002226:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	08da      	lsrs	r2, r3, #3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	3208      	adds	r2, #8
 8002230:	6939      	ldr	r1, [r7, #16]
 8002232:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	2203      	movs	r2, #3
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	43db      	mvns	r3, r3
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	4013      	ands	r3, r2
 800224c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f003 0203 	and.w	r2, r3, #3
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	4313      	orrs	r3, r2
 8002262:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002272:	2b00      	cmp	r3, #0
 8002274:	f000 80a6 	beq.w	80023c4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002278:	4b5b      	ldr	r3, [pc, #364]	@ (80023e8 <HAL_GPIO_Init+0x2e4>)
 800227a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800227c:	4a5a      	ldr	r2, [pc, #360]	@ (80023e8 <HAL_GPIO_Init+0x2e4>)
 800227e:	f043 0301 	orr.w	r3, r3, #1
 8002282:	6613      	str	r3, [r2, #96]	@ 0x60
 8002284:	4b58      	ldr	r3, [pc, #352]	@ (80023e8 <HAL_GPIO_Init+0x2e4>)
 8002286:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002288:	f003 0301 	and.w	r3, r3, #1
 800228c:	60bb      	str	r3, [r7, #8]
 800228e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002290:	4a56      	ldr	r2, [pc, #344]	@ (80023ec <HAL_GPIO_Init+0x2e8>)
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	089b      	lsrs	r3, r3, #2
 8002296:	3302      	adds	r3, #2
 8002298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800229c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	f003 0303 	and.w	r3, r3, #3
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	220f      	movs	r2, #15
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	43db      	mvns	r3, r3
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	4013      	ands	r3, r2
 80022b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80022ba:	d01f      	beq.n	80022fc <HAL_GPIO_Init+0x1f8>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4a4c      	ldr	r2, [pc, #304]	@ (80023f0 <HAL_GPIO_Init+0x2ec>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d019      	beq.n	80022f8 <HAL_GPIO_Init+0x1f4>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4a4b      	ldr	r2, [pc, #300]	@ (80023f4 <HAL_GPIO_Init+0x2f0>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d013      	beq.n	80022f4 <HAL_GPIO_Init+0x1f0>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4a4a      	ldr	r2, [pc, #296]	@ (80023f8 <HAL_GPIO_Init+0x2f4>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d00d      	beq.n	80022f0 <HAL_GPIO_Init+0x1ec>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4a49      	ldr	r2, [pc, #292]	@ (80023fc <HAL_GPIO_Init+0x2f8>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d007      	beq.n	80022ec <HAL_GPIO_Init+0x1e8>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4a48      	ldr	r2, [pc, #288]	@ (8002400 <HAL_GPIO_Init+0x2fc>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d101      	bne.n	80022e8 <HAL_GPIO_Init+0x1e4>
 80022e4:	2305      	movs	r3, #5
 80022e6:	e00a      	b.n	80022fe <HAL_GPIO_Init+0x1fa>
 80022e8:	2306      	movs	r3, #6
 80022ea:	e008      	b.n	80022fe <HAL_GPIO_Init+0x1fa>
 80022ec:	2304      	movs	r3, #4
 80022ee:	e006      	b.n	80022fe <HAL_GPIO_Init+0x1fa>
 80022f0:	2303      	movs	r3, #3
 80022f2:	e004      	b.n	80022fe <HAL_GPIO_Init+0x1fa>
 80022f4:	2302      	movs	r3, #2
 80022f6:	e002      	b.n	80022fe <HAL_GPIO_Init+0x1fa>
 80022f8:	2301      	movs	r3, #1
 80022fa:	e000      	b.n	80022fe <HAL_GPIO_Init+0x1fa>
 80022fc:	2300      	movs	r3, #0
 80022fe:	697a      	ldr	r2, [r7, #20]
 8002300:	f002 0203 	and.w	r2, r2, #3
 8002304:	0092      	lsls	r2, r2, #2
 8002306:	4093      	lsls	r3, r2
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	4313      	orrs	r3, r2
 800230c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800230e:	4937      	ldr	r1, [pc, #220]	@ (80023ec <HAL_GPIO_Init+0x2e8>)
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	089b      	lsrs	r3, r3, #2
 8002314:	3302      	adds	r3, #2
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800231c:	4b39      	ldr	r3, [pc, #228]	@ (8002404 <HAL_GPIO_Init+0x300>)
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	43db      	mvns	r3, r3
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	4013      	ands	r3, r2
 800232a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d003      	beq.n	8002340 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002338:	693a      	ldr	r2, [r7, #16]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	4313      	orrs	r3, r2
 800233e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002340:	4a30      	ldr	r2, [pc, #192]	@ (8002404 <HAL_GPIO_Init+0x300>)
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002346:	4b2f      	ldr	r3, [pc, #188]	@ (8002404 <HAL_GPIO_Init+0x300>)
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	43db      	mvns	r3, r3
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	4013      	ands	r3, r2
 8002354:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d003      	beq.n	800236a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	4313      	orrs	r3, r2
 8002368:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800236a:	4a26      	ldr	r2, [pc, #152]	@ (8002404 <HAL_GPIO_Init+0x300>)
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002370:	4b24      	ldr	r3, [pc, #144]	@ (8002404 <HAL_GPIO_Init+0x300>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	43db      	mvns	r3, r3
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	4013      	ands	r3, r2
 800237e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d003      	beq.n	8002394 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	4313      	orrs	r3, r2
 8002392:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002394:	4a1b      	ldr	r2, [pc, #108]	@ (8002404 <HAL_GPIO_Init+0x300>)
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800239a:	4b1a      	ldr	r3, [pc, #104]	@ (8002404 <HAL_GPIO_Init+0x300>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	43db      	mvns	r3, r3
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	4013      	ands	r3, r2
 80023a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d003      	beq.n	80023be <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80023be:	4a11      	ldr	r2, [pc, #68]	@ (8002404 <HAL_GPIO_Init+0x300>)
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	3301      	adds	r3, #1
 80023c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	fa22 f303 	lsr.w	r3, r2, r3
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f47f ae9d 	bne.w	8002114 <HAL_GPIO_Init+0x10>
  }
}
 80023da:	bf00      	nop
 80023dc:	bf00      	nop
 80023de:	371c      	adds	r7, #28
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	40021000 	.word	0x40021000
 80023ec:	40010000 	.word	0x40010000
 80023f0:	48000400 	.word	0x48000400
 80023f4:	48000800 	.word	0x48000800
 80023f8:	48000c00 	.word	0x48000c00
 80023fc:	48001000 	.word	0x48001000
 8002400:	48001400 	.word	0x48001400
 8002404:	40010400 	.word	0x40010400

08002408 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	460b      	mov	r3, r1
 8002412:	807b      	strh	r3, [r7, #2]
 8002414:	4613      	mov	r3, r2
 8002416:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002418:	787b      	ldrb	r3, [r7, #1]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d003      	beq.n	8002426 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800241e:	887a      	ldrh	r2, [r7, #2]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002424:	e002      	b.n	800242c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002426:	887a      	ldrh	r2, [r7, #2]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800242c:	bf00      	nop
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	4603      	mov	r3, r0
 8002440:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002442:	4b08      	ldr	r3, [pc, #32]	@ (8002464 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002444:	695a      	ldr	r2, [r3, #20]
 8002446:	88fb      	ldrh	r3, [r7, #6]
 8002448:	4013      	ands	r3, r2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d006      	beq.n	800245c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800244e:	4a05      	ldr	r2, [pc, #20]	@ (8002464 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002450:	88fb      	ldrh	r3, [r7, #6]
 8002452:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002454:	88fb      	ldrh	r3, [r7, #6]
 8002456:	4618      	mov	r0, r3
 8002458:	f000 f806 	bl	8002468 <HAL_GPIO_EXTI_Callback>
  }
}
 800245c:	bf00      	nop
 800245e:	3708      	adds	r7, #8
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40010400 	.word	0x40010400

08002468 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	4603      	mov	r3, r0
 8002470:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002472:	bf00      	nop
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
	...

08002480 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002480:	b480      	push	{r7}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d141      	bne.n	8002512 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800248e:	4b4b      	ldr	r3, [pc, #300]	@ (80025bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002496:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800249a:	d131      	bne.n	8002500 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800249c:	4b47      	ldr	r3, [pc, #284]	@ (80025bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800249e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80024a2:	4a46      	ldr	r2, [pc, #280]	@ (80025bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80024a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80024ac:	4b43      	ldr	r3, [pc, #268]	@ (80025bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80024b4:	4a41      	ldr	r2, [pc, #260]	@ (80025bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80024ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80024bc:	4b40      	ldr	r3, [pc, #256]	@ (80025c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2232      	movs	r2, #50	@ 0x32
 80024c2:	fb02 f303 	mul.w	r3, r2, r3
 80024c6:	4a3f      	ldr	r2, [pc, #252]	@ (80025c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80024c8:	fba2 2303 	umull	r2, r3, r2, r3
 80024cc:	0c9b      	lsrs	r3, r3, #18
 80024ce:	3301      	adds	r3, #1
 80024d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024d2:	e002      	b.n	80024da <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	3b01      	subs	r3, #1
 80024d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024da:	4b38      	ldr	r3, [pc, #224]	@ (80025bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024e6:	d102      	bne.n	80024ee <HAL_PWREx_ControlVoltageScaling+0x6e>
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1f2      	bne.n	80024d4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80024ee:	4b33      	ldr	r3, [pc, #204]	@ (80025bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024f0:	695b      	ldr	r3, [r3, #20]
 80024f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024fa:	d158      	bne.n	80025ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e057      	b.n	80025b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002500:	4b2e      	ldr	r3, [pc, #184]	@ (80025bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002502:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002506:	4a2d      	ldr	r2, [pc, #180]	@ (80025bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002508:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800250c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002510:	e04d      	b.n	80025ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002518:	d141      	bne.n	800259e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800251a:	4b28      	ldr	r3, [pc, #160]	@ (80025bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002522:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002526:	d131      	bne.n	800258c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002528:	4b24      	ldr	r3, [pc, #144]	@ (80025bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800252a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800252e:	4a23      	ldr	r2, [pc, #140]	@ (80025bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002530:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002534:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002538:	4b20      	ldr	r3, [pc, #128]	@ (80025bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002540:	4a1e      	ldr	r2, [pc, #120]	@ (80025bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002542:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002546:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002548:	4b1d      	ldr	r3, [pc, #116]	@ (80025c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2232      	movs	r2, #50	@ 0x32
 800254e:	fb02 f303 	mul.w	r3, r2, r3
 8002552:	4a1c      	ldr	r2, [pc, #112]	@ (80025c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002554:	fba2 2303 	umull	r2, r3, r2, r3
 8002558:	0c9b      	lsrs	r3, r3, #18
 800255a:	3301      	adds	r3, #1
 800255c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800255e:	e002      	b.n	8002566 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	3b01      	subs	r3, #1
 8002564:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002566:	4b15      	ldr	r3, [pc, #84]	@ (80025bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002568:	695b      	ldr	r3, [r3, #20]
 800256a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800256e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002572:	d102      	bne.n	800257a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d1f2      	bne.n	8002560 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800257a:	4b10      	ldr	r3, [pc, #64]	@ (80025bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002582:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002586:	d112      	bne.n	80025ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e011      	b.n	80025b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800258c:	4b0b      	ldr	r3, [pc, #44]	@ (80025bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800258e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002592:	4a0a      	ldr	r2, [pc, #40]	@ (80025bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002594:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002598:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800259c:	e007      	b.n	80025ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800259e:	4b07      	ldr	r3, [pc, #28]	@ (80025bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80025a6:	4a05      	ldr	r2, [pc, #20]	@ (80025bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025a8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80025ac:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3714      	adds	r7, #20
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr
 80025bc:	40007000 	.word	0x40007000
 80025c0:	20000000 	.word	0x20000000
 80025c4:	431bde83 	.word	0x431bde83

080025c8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80025cc:	4b05      	ldr	r3, [pc, #20]	@ (80025e4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	4a04      	ldr	r2, [pc, #16]	@ (80025e4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80025d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025d6:	6093      	str	r3, [r2, #8]
}
 80025d8:	bf00      	nop
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	40007000 	.word	0x40007000

080025e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b088      	sub	sp, #32
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e2fe      	b.n	8002bf8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b00      	cmp	r3, #0
 8002604:	d075      	beq.n	80026f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002606:	4b97      	ldr	r3, [pc, #604]	@ (8002864 <HAL_RCC_OscConfig+0x27c>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f003 030c 	and.w	r3, r3, #12
 800260e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002610:	4b94      	ldr	r3, [pc, #592]	@ (8002864 <HAL_RCC_OscConfig+0x27c>)
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	f003 0303 	and.w	r3, r3, #3
 8002618:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	2b0c      	cmp	r3, #12
 800261e:	d102      	bne.n	8002626 <HAL_RCC_OscConfig+0x3e>
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	2b03      	cmp	r3, #3
 8002624:	d002      	beq.n	800262c <HAL_RCC_OscConfig+0x44>
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	2b08      	cmp	r3, #8
 800262a:	d10b      	bne.n	8002644 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800262c:	4b8d      	ldr	r3, [pc, #564]	@ (8002864 <HAL_RCC_OscConfig+0x27c>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d05b      	beq.n	80026f0 <HAL_RCC_OscConfig+0x108>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d157      	bne.n	80026f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e2d9      	b.n	8002bf8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800264c:	d106      	bne.n	800265c <HAL_RCC_OscConfig+0x74>
 800264e:	4b85      	ldr	r3, [pc, #532]	@ (8002864 <HAL_RCC_OscConfig+0x27c>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a84      	ldr	r2, [pc, #528]	@ (8002864 <HAL_RCC_OscConfig+0x27c>)
 8002654:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002658:	6013      	str	r3, [r2, #0]
 800265a:	e01d      	b.n	8002698 <HAL_RCC_OscConfig+0xb0>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002664:	d10c      	bne.n	8002680 <HAL_RCC_OscConfig+0x98>
 8002666:	4b7f      	ldr	r3, [pc, #508]	@ (8002864 <HAL_RCC_OscConfig+0x27c>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a7e      	ldr	r2, [pc, #504]	@ (8002864 <HAL_RCC_OscConfig+0x27c>)
 800266c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002670:	6013      	str	r3, [r2, #0]
 8002672:	4b7c      	ldr	r3, [pc, #496]	@ (8002864 <HAL_RCC_OscConfig+0x27c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a7b      	ldr	r2, [pc, #492]	@ (8002864 <HAL_RCC_OscConfig+0x27c>)
 8002678:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800267c:	6013      	str	r3, [r2, #0]
 800267e:	e00b      	b.n	8002698 <HAL_RCC_OscConfig+0xb0>
 8002680:	4b78      	ldr	r3, [pc, #480]	@ (8002864 <HAL_RCC_OscConfig+0x27c>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a77      	ldr	r2, [pc, #476]	@ (8002864 <HAL_RCC_OscConfig+0x27c>)
 8002686:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800268a:	6013      	str	r3, [r2, #0]
 800268c:	4b75      	ldr	r3, [pc, #468]	@ (8002864 <HAL_RCC_OscConfig+0x27c>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a74      	ldr	r2, [pc, #464]	@ (8002864 <HAL_RCC_OscConfig+0x27c>)
 8002692:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002696:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d013      	beq.n	80026c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a0:	f7ff fb32 	bl	8001d08 <HAL_GetTick>
 80026a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026a8:	f7ff fb2e 	bl	8001d08 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b64      	cmp	r3, #100	@ 0x64
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e29e      	b.n	8002bf8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026ba:	4b6a      	ldr	r3, [pc, #424]	@ (8002864 <HAL_RCC_OscConfig+0x27c>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d0f0      	beq.n	80026a8 <HAL_RCC_OscConfig+0xc0>
 80026c6:	e014      	b.n	80026f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c8:	f7ff fb1e 	bl	8001d08 <HAL_GetTick>
 80026cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026ce:	e008      	b.n	80026e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026d0:	f7ff fb1a 	bl	8001d08 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b64      	cmp	r3, #100	@ 0x64
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e28a      	b.n	8002bf8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026e2:	4b60      	ldr	r3, [pc, #384]	@ (8002864 <HAL_RCC_OscConfig+0x27c>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1f0      	bne.n	80026d0 <HAL_RCC_OscConfig+0xe8>
 80026ee:	e000      	b.n	80026f2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d075      	beq.n	80027ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026fe:	4b59      	ldr	r3, [pc, #356]	@ (8002864 <HAL_RCC_OscConfig+0x27c>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f003 030c 	and.w	r3, r3, #12
 8002706:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002708:	4b56      	ldr	r3, [pc, #344]	@ (8002864 <HAL_RCC_OscConfig+0x27c>)
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	f003 0303 	and.w	r3, r3, #3
 8002710:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	2b0c      	cmp	r3, #12
 8002716:	d102      	bne.n	800271e <HAL_RCC_OscConfig+0x136>
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	2b02      	cmp	r3, #2
 800271c:	d002      	beq.n	8002724 <HAL_RCC_OscConfig+0x13c>
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	2b04      	cmp	r3, #4
 8002722:	d11f      	bne.n	8002764 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002724:	4b4f      	ldr	r3, [pc, #316]	@ (8002864 <HAL_RCC_OscConfig+0x27c>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800272c:	2b00      	cmp	r3, #0
 800272e:	d005      	beq.n	800273c <HAL_RCC_OscConfig+0x154>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d101      	bne.n	800273c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e25d      	b.n	8002bf8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800273c:	4b49      	ldr	r3, [pc, #292]	@ (8002864 <HAL_RCC_OscConfig+0x27c>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	061b      	lsls	r3, r3, #24
 800274a:	4946      	ldr	r1, [pc, #280]	@ (8002864 <HAL_RCC_OscConfig+0x27c>)
 800274c:	4313      	orrs	r3, r2
 800274e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002750:	4b45      	ldr	r3, [pc, #276]	@ (8002868 <HAL_RCC_OscConfig+0x280>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff fa8b 	bl	8001c70 <HAL_InitTick>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d043      	beq.n	80027e8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e249      	b.n	8002bf8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d023      	beq.n	80027b4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800276c:	4b3d      	ldr	r3, [pc, #244]	@ (8002864 <HAL_RCC_OscConfig+0x27c>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a3c      	ldr	r2, [pc, #240]	@ (8002864 <HAL_RCC_OscConfig+0x27c>)
 8002772:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002776:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002778:	f7ff fac6 	bl	8001d08 <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002780:	f7ff fac2 	bl	8001d08 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e232      	b.n	8002bf8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002792:	4b34      	ldr	r3, [pc, #208]	@ (8002864 <HAL_RCC_OscConfig+0x27c>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800279a:	2b00      	cmp	r3, #0
 800279c:	d0f0      	beq.n	8002780 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800279e:	4b31      	ldr	r3, [pc, #196]	@ (8002864 <HAL_RCC_OscConfig+0x27c>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	061b      	lsls	r3, r3, #24
 80027ac:	492d      	ldr	r1, [pc, #180]	@ (8002864 <HAL_RCC_OscConfig+0x27c>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	604b      	str	r3, [r1, #4]
 80027b2:	e01a      	b.n	80027ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027b4:	4b2b      	ldr	r3, [pc, #172]	@ (8002864 <HAL_RCC_OscConfig+0x27c>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a2a      	ldr	r2, [pc, #168]	@ (8002864 <HAL_RCC_OscConfig+0x27c>)
 80027ba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80027be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c0:	f7ff faa2 	bl	8001d08 <HAL_GetTick>
 80027c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027c6:	e008      	b.n	80027da <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027c8:	f7ff fa9e 	bl	8001d08 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e20e      	b.n	8002bf8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027da:	4b22      	ldr	r3, [pc, #136]	@ (8002864 <HAL_RCC_OscConfig+0x27c>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d1f0      	bne.n	80027c8 <HAL_RCC_OscConfig+0x1e0>
 80027e6:	e000      	b.n	80027ea <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0308 	and.w	r3, r3, #8
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d041      	beq.n	800287a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	695b      	ldr	r3, [r3, #20]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d01c      	beq.n	8002838 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027fe:	4b19      	ldr	r3, [pc, #100]	@ (8002864 <HAL_RCC_OscConfig+0x27c>)
 8002800:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002804:	4a17      	ldr	r2, [pc, #92]	@ (8002864 <HAL_RCC_OscConfig+0x27c>)
 8002806:	f043 0301 	orr.w	r3, r3, #1
 800280a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800280e:	f7ff fa7b 	bl	8001d08 <HAL_GetTick>
 8002812:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002814:	e008      	b.n	8002828 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002816:	f7ff fa77 	bl	8001d08 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	2b02      	cmp	r3, #2
 8002822:	d901      	bls.n	8002828 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e1e7      	b.n	8002bf8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002828:	4b0e      	ldr	r3, [pc, #56]	@ (8002864 <HAL_RCC_OscConfig+0x27c>)
 800282a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d0ef      	beq.n	8002816 <HAL_RCC_OscConfig+0x22e>
 8002836:	e020      	b.n	800287a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002838:	4b0a      	ldr	r3, [pc, #40]	@ (8002864 <HAL_RCC_OscConfig+0x27c>)
 800283a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800283e:	4a09      	ldr	r2, [pc, #36]	@ (8002864 <HAL_RCC_OscConfig+0x27c>)
 8002840:	f023 0301 	bic.w	r3, r3, #1
 8002844:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002848:	f7ff fa5e 	bl	8001d08 <HAL_GetTick>
 800284c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800284e:	e00d      	b.n	800286c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002850:	f7ff fa5a 	bl	8001d08 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b02      	cmp	r3, #2
 800285c:	d906      	bls.n	800286c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e1ca      	b.n	8002bf8 <HAL_RCC_OscConfig+0x610>
 8002862:	bf00      	nop
 8002864:	40021000 	.word	0x40021000
 8002868:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800286c:	4b8c      	ldr	r3, [pc, #560]	@ (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 800286e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d1ea      	bne.n	8002850 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0304 	and.w	r3, r3, #4
 8002882:	2b00      	cmp	r3, #0
 8002884:	f000 80a6 	beq.w	80029d4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002888:	2300      	movs	r3, #0
 800288a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800288c:	4b84      	ldr	r3, [pc, #528]	@ (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 800288e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002890:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d101      	bne.n	800289c <HAL_RCC_OscConfig+0x2b4>
 8002898:	2301      	movs	r3, #1
 800289a:	e000      	b.n	800289e <HAL_RCC_OscConfig+0x2b6>
 800289c:	2300      	movs	r3, #0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d00d      	beq.n	80028be <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028a2:	4b7f      	ldr	r3, [pc, #508]	@ (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 80028a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028a6:	4a7e      	ldr	r2, [pc, #504]	@ (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 80028a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80028ae:	4b7c      	ldr	r3, [pc, #496]	@ (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 80028b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028b6:	60fb      	str	r3, [r7, #12]
 80028b8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80028ba:	2301      	movs	r3, #1
 80028bc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028be:	4b79      	ldr	r3, [pc, #484]	@ (8002aa4 <HAL_RCC_OscConfig+0x4bc>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d118      	bne.n	80028fc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028ca:	4b76      	ldr	r3, [pc, #472]	@ (8002aa4 <HAL_RCC_OscConfig+0x4bc>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a75      	ldr	r2, [pc, #468]	@ (8002aa4 <HAL_RCC_OscConfig+0x4bc>)
 80028d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028d6:	f7ff fa17 	bl	8001d08 <HAL_GetTick>
 80028da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028dc:	e008      	b.n	80028f0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028de:	f7ff fa13 	bl	8001d08 <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d901      	bls.n	80028f0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e183      	b.n	8002bf8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028f0:	4b6c      	ldr	r3, [pc, #432]	@ (8002aa4 <HAL_RCC_OscConfig+0x4bc>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d0f0      	beq.n	80028de <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d108      	bne.n	8002916 <HAL_RCC_OscConfig+0x32e>
 8002904:	4b66      	ldr	r3, [pc, #408]	@ (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 8002906:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800290a:	4a65      	ldr	r2, [pc, #404]	@ (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 800290c:	f043 0301 	orr.w	r3, r3, #1
 8002910:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002914:	e024      	b.n	8002960 <HAL_RCC_OscConfig+0x378>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	2b05      	cmp	r3, #5
 800291c:	d110      	bne.n	8002940 <HAL_RCC_OscConfig+0x358>
 800291e:	4b60      	ldr	r3, [pc, #384]	@ (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 8002920:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002924:	4a5e      	ldr	r2, [pc, #376]	@ (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 8002926:	f043 0304 	orr.w	r3, r3, #4
 800292a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800292e:	4b5c      	ldr	r3, [pc, #368]	@ (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 8002930:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002934:	4a5a      	ldr	r2, [pc, #360]	@ (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 8002936:	f043 0301 	orr.w	r3, r3, #1
 800293a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800293e:	e00f      	b.n	8002960 <HAL_RCC_OscConfig+0x378>
 8002940:	4b57      	ldr	r3, [pc, #348]	@ (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 8002942:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002946:	4a56      	ldr	r2, [pc, #344]	@ (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 8002948:	f023 0301 	bic.w	r3, r3, #1
 800294c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002950:	4b53      	ldr	r3, [pc, #332]	@ (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 8002952:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002956:	4a52      	ldr	r2, [pc, #328]	@ (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 8002958:	f023 0304 	bic.w	r3, r3, #4
 800295c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d016      	beq.n	8002996 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002968:	f7ff f9ce 	bl	8001d08 <HAL_GetTick>
 800296c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800296e:	e00a      	b.n	8002986 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002970:	f7ff f9ca 	bl	8001d08 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800297e:	4293      	cmp	r3, r2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e138      	b.n	8002bf8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002986:	4b46      	ldr	r3, [pc, #280]	@ (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 8002988:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d0ed      	beq.n	8002970 <HAL_RCC_OscConfig+0x388>
 8002994:	e015      	b.n	80029c2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002996:	f7ff f9b7 	bl	8001d08 <HAL_GetTick>
 800299a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800299c:	e00a      	b.n	80029b4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800299e:	f7ff f9b3 	bl	8001d08 <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d901      	bls.n	80029b4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e121      	b.n	8002bf8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029b4:	4b3a      	ldr	r3, [pc, #232]	@ (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 80029b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1ed      	bne.n	800299e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80029c2:	7ffb      	ldrb	r3, [r7, #31]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d105      	bne.n	80029d4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029c8:	4b35      	ldr	r3, [pc, #212]	@ (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 80029ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029cc:	4a34      	ldr	r2, [pc, #208]	@ (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 80029ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029d2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0320 	and.w	r3, r3, #32
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d03c      	beq.n	8002a5a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	699b      	ldr	r3, [r3, #24]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d01c      	beq.n	8002a22 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80029e8:	4b2d      	ldr	r3, [pc, #180]	@ (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 80029ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80029ee:	4a2c      	ldr	r2, [pc, #176]	@ (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 80029f0:	f043 0301 	orr.w	r3, r3, #1
 80029f4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f8:	f7ff f986 	bl	8001d08 <HAL_GetTick>
 80029fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80029fe:	e008      	b.n	8002a12 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a00:	f7ff f982 	bl	8001d08 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e0f2      	b.n	8002bf8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a12:	4b23      	ldr	r3, [pc, #140]	@ (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 8002a14:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002a18:	f003 0302 	and.w	r3, r3, #2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d0ef      	beq.n	8002a00 <HAL_RCC_OscConfig+0x418>
 8002a20:	e01b      	b.n	8002a5a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a22:	4b1f      	ldr	r3, [pc, #124]	@ (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 8002a24:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002a28:	4a1d      	ldr	r2, [pc, #116]	@ (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 8002a2a:	f023 0301 	bic.w	r3, r3, #1
 8002a2e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a32:	f7ff f969 	bl	8001d08 <HAL_GetTick>
 8002a36:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a38:	e008      	b.n	8002a4c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a3a:	f7ff f965 	bl	8001d08 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d901      	bls.n	8002a4c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e0d5      	b.n	8002bf8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a4c:	4b14      	ldr	r3, [pc, #80]	@ (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 8002a4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1ef      	bne.n	8002a3a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	f000 80c9 	beq.w	8002bf6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a64:	4b0e      	ldr	r3, [pc, #56]	@ (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f003 030c 	and.w	r3, r3, #12
 8002a6c:	2b0c      	cmp	r3, #12
 8002a6e:	f000 8083 	beq.w	8002b78 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	69db      	ldr	r3, [r3, #28]
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d15e      	bne.n	8002b38 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a7a:	4b09      	ldr	r3, [pc, #36]	@ (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a08      	ldr	r2, [pc, #32]	@ (8002aa0 <HAL_RCC_OscConfig+0x4b8>)
 8002a80:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a86:	f7ff f93f 	bl	8001d08 <HAL_GetTick>
 8002a8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a8c:	e00c      	b.n	8002aa8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a8e:	f7ff f93b 	bl	8001d08 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d905      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e0ab      	b.n	8002bf8 <HAL_RCC_OscConfig+0x610>
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002aa8:	4b55      	ldr	r3, [pc, #340]	@ (8002c00 <HAL_RCC_OscConfig+0x618>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d1ec      	bne.n	8002a8e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ab4:	4b52      	ldr	r3, [pc, #328]	@ (8002c00 <HAL_RCC_OscConfig+0x618>)
 8002ab6:	68da      	ldr	r2, [r3, #12]
 8002ab8:	4b52      	ldr	r3, [pc, #328]	@ (8002c04 <HAL_RCC_OscConfig+0x61c>)
 8002aba:	4013      	ands	r3, r2
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	6a11      	ldr	r1, [r2, #32]
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002ac4:	3a01      	subs	r2, #1
 8002ac6:	0112      	lsls	r2, r2, #4
 8002ac8:	4311      	orrs	r1, r2
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002ace:	0212      	lsls	r2, r2, #8
 8002ad0:	4311      	orrs	r1, r2
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002ad6:	0852      	lsrs	r2, r2, #1
 8002ad8:	3a01      	subs	r2, #1
 8002ada:	0552      	lsls	r2, r2, #21
 8002adc:	4311      	orrs	r1, r2
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002ae2:	0852      	lsrs	r2, r2, #1
 8002ae4:	3a01      	subs	r2, #1
 8002ae6:	0652      	lsls	r2, r2, #25
 8002ae8:	4311      	orrs	r1, r2
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002aee:	06d2      	lsls	r2, r2, #27
 8002af0:	430a      	orrs	r2, r1
 8002af2:	4943      	ldr	r1, [pc, #268]	@ (8002c00 <HAL_RCC_OscConfig+0x618>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002af8:	4b41      	ldr	r3, [pc, #260]	@ (8002c00 <HAL_RCC_OscConfig+0x618>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a40      	ldr	r2, [pc, #256]	@ (8002c00 <HAL_RCC_OscConfig+0x618>)
 8002afe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b02:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b04:	4b3e      	ldr	r3, [pc, #248]	@ (8002c00 <HAL_RCC_OscConfig+0x618>)
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	4a3d      	ldr	r2, [pc, #244]	@ (8002c00 <HAL_RCC_OscConfig+0x618>)
 8002b0a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b0e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b10:	f7ff f8fa 	bl	8001d08 <HAL_GetTick>
 8002b14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b16:	e008      	b.n	8002b2a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b18:	f7ff f8f6 	bl	8001d08 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e066      	b.n	8002bf8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b2a:	4b35      	ldr	r3, [pc, #212]	@ (8002c00 <HAL_RCC_OscConfig+0x618>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d0f0      	beq.n	8002b18 <HAL_RCC_OscConfig+0x530>
 8002b36:	e05e      	b.n	8002bf6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b38:	4b31      	ldr	r3, [pc, #196]	@ (8002c00 <HAL_RCC_OscConfig+0x618>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a30      	ldr	r2, [pc, #192]	@ (8002c00 <HAL_RCC_OscConfig+0x618>)
 8002b3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b44:	f7ff f8e0 	bl	8001d08 <HAL_GetTick>
 8002b48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b4c:	f7ff f8dc 	bl	8001d08 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e04c      	b.n	8002bf8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b5e:	4b28      	ldr	r3, [pc, #160]	@ (8002c00 <HAL_RCC_OscConfig+0x618>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1f0      	bne.n	8002b4c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002b6a:	4b25      	ldr	r3, [pc, #148]	@ (8002c00 <HAL_RCC_OscConfig+0x618>)
 8002b6c:	68da      	ldr	r2, [r3, #12]
 8002b6e:	4924      	ldr	r1, [pc, #144]	@ (8002c00 <HAL_RCC_OscConfig+0x618>)
 8002b70:	4b25      	ldr	r3, [pc, #148]	@ (8002c08 <HAL_RCC_OscConfig+0x620>)
 8002b72:	4013      	ands	r3, r2
 8002b74:	60cb      	str	r3, [r1, #12]
 8002b76:	e03e      	b.n	8002bf6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	69db      	ldr	r3, [r3, #28]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d101      	bne.n	8002b84 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e039      	b.n	8002bf8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002b84:	4b1e      	ldr	r3, [pc, #120]	@ (8002c00 <HAL_RCC_OscConfig+0x618>)
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	f003 0203 	and.w	r2, r3, #3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a1b      	ldr	r3, [r3, #32]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d12c      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d123      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bb4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d11b      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bc4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d113      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd4:	085b      	lsrs	r3, r3, #1
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d109      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002be8:	085b      	lsrs	r3, r3, #1
 8002bea:	3b01      	subs	r3, #1
 8002bec:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d001      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e000      	b.n	8002bf8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3720      	adds	r7, #32
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	40021000 	.word	0x40021000
 8002c04:	019f800c 	.word	0x019f800c
 8002c08:	feeefffc 	.word	0xfeeefffc

08002c0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b086      	sub	sp, #24
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002c16:	2300      	movs	r3, #0
 8002c18:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d101      	bne.n	8002c24 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e11e      	b.n	8002e62 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c24:	4b91      	ldr	r3, [pc, #580]	@ (8002e6c <HAL_RCC_ClockConfig+0x260>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 030f 	and.w	r3, r3, #15
 8002c2c:	683a      	ldr	r2, [r7, #0]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d910      	bls.n	8002c54 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c32:	4b8e      	ldr	r3, [pc, #568]	@ (8002e6c <HAL_RCC_ClockConfig+0x260>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f023 020f 	bic.w	r2, r3, #15
 8002c3a:	498c      	ldr	r1, [pc, #560]	@ (8002e6c <HAL_RCC_ClockConfig+0x260>)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c42:	4b8a      	ldr	r3, [pc, #552]	@ (8002e6c <HAL_RCC_ClockConfig+0x260>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 030f 	and.w	r3, r3, #15
 8002c4a:	683a      	ldr	r2, [r7, #0]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d001      	beq.n	8002c54 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e106      	b.n	8002e62 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d073      	beq.n	8002d48 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	2b03      	cmp	r3, #3
 8002c66:	d129      	bne.n	8002cbc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c68:	4b81      	ldr	r3, [pc, #516]	@ (8002e70 <HAL_RCC_ClockConfig+0x264>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d101      	bne.n	8002c78 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e0f4      	b.n	8002e62 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002c78:	f000 f9e4 	bl	8003044 <RCC_GetSysClockFreqFromPLLSource>
 8002c7c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	4a7c      	ldr	r2, [pc, #496]	@ (8002e74 <HAL_RCC_ClockConfig+0x268>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d93f      	bls.n	8002d06 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002c86:	4b7a      	ldr	r3, [pc, #488]	@ (8002e70 <HAL_RCC_ClockConfig+0x264>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d009      	beq.n	8002ca6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d033      	beq.n	8002d06 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d12f      	bne.n	8002d06 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002ca6:	4b72      	ldr	r3, [pc, #456]	@ (8002e70 <HAL_RCC_ClockConfig+0x264>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002cae:	4a70      	ldr	r2, [pc, #448]	@ (8002e70 <HAL_RCC_ClockConfig+0x264>)
 8002cb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002cb4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002cb6:	2380      	movs	r3, #128	@ 0x80
 8002cb8:	617b      	str	r3, [r7, #20]
 8002cba:	e024      	b.n	8002d06 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d107      	bne.n	8002cd4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cc4:	4b6a      	ldr	r3, [pc, #424]	@ (8002e70 <HAL_RCC_ClockConfig+0x264>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d109      	bne.n	8002ce4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e0c6      	b.n	8002e62 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cd4:	4b66      	ldr	r3, [pc, #408]	@ (8002e70 <HAL_RCC_ClockConfig+0x264>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d101      	bne.n	8002ce4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e0be      	b.n	8002e62 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002ce4:	f000 f914 	bl	8002f10 <HAL_RCC_GetSysClockFreq>
 8002ce8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	4a61      	ldr	r2, [pc, #388]	@ (8002e74 <HAL_RCC_ClockConfig+0x268>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d909      	bls.n	8002d06 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002cf2:	4b5f      	ldr	r3, [pc, #380]	@ (8002e70 <HAL_RCC_ClockConfig+0x264>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002cfa:	4a5d      	ldr	r2, [pc, #372]	@ (8002e70 <HAL_RCC_ClockConfig+0x264>)
 8002cfc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d00:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002d02:	2380      	movs	r3, #128	@ 0x80
 8002d04:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d06:	4b5a      	ldr	r3, [pc, #360]	@ (8002e70 <HAL_RCC_ClockConfig+0x264>)
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f023 0203 	bic.w	r2, r3, #3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	4957      	ldr	r1, [pc, #348]	@ (8002e70 <HAL_RCC_ClockConfig+0x264>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d18:	f7fe fff6 	bl	8001d08 <HAL_GetTick>
 8002d1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d1e:	e00a      	b.n	8002d36 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d20:	f7fe fff2 	bl	8001d08 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e095      	b.n	8002e62 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d36:	4b4e      	ldr	r3, [pc, #312]	@ (8002e70 <HAL_RCC_ClockConfig+0x264>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f003 020c 	and.w	r2, r3, #12
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d1eb      	bne.n	8002d20 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0302 	and.w	r3, r3, #2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d023      	beq.n	8002d9c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0304 	and.w	r3, r3, #4
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d005      	beq.n	8002d6c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d60:	4b43      	ldr	r3, [pc, #268]	@ (8002e70 <HAL_RCC_ClockConfig+0x264>)
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	4a42      	ldr	r2, [pc, #264]	@ (8002e70 <HAL_RCC_ClockConfig+0x264>)
 8002d66:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002d6a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0308 	and.w	r3, r3, #8
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d007      	beq.n	8002d88 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002d78:	4b3d      	ldr	r3, [pc, #244]	@ (8002e70 <HAL_RCC_ClockConfig+0x264>)
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002d80:	4a3b      	ldr	r2, [pc, #236]	@ (8002e70 <HAL_RCC_ClockConfig+0x264>)
 8002d82:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002d86:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d88:	4b39      	ldr	r3, [pc, #228]	@ (8002e70 <HAL_RCC_ClockConfig+0x264>)
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	4936      	ldr	r1, [pc, #216]	@ (8002e70 <HAL_RCC_ClockConfig+0x264>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	608b      	str	r3, [r1, #8]
 8002d9a:	e008      	b.n	8002dae <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	2b80      	cmp	r3, #128	@ 0x80
 8002da0:	d105      	bne.n	8002dae <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002da2:	4b33      	ldr	r3, [pc, #204]	@ (8002e70 <HAL_RCC_ClockConfig+0x264>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	4a32      	ldr	r2, [pc, #200]	@ (8002e70 <HAL_RCC_ClockConfig+0x264>)
 8002da8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002dac:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002dae:	4b2f      	ldr	r3, [pc, #188]	@ (8002e6c <HAL_RCC_ClockConfig+0x260>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 030f 	and.w	r3, r3, #15
 8002db6:	683a      	ldr	r2, [r7, #0]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d21d      	bcs.n	8002df8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dbc:	4b2b      	ldr	r3, [pc, #172]	@ (8002e6c <HAL_RCC_ClockConfig+0x260>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f023 020f 	bic.w	r2, r3, #15
 8002dc4:	4929      	ldr	r1, [pc, #164]	@ (8002e6c <HAL_RCC_ClockConfig+0x260>)
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002dcc:	f7fe ff9c 	bl	8001d08 <HAL_GetTick>
 8002dd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dd2:	e00a      	b.n	8002dea <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dd4:	f7fe ff98 	bl	8001d08 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e03b      	b.n	8002e62 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dea:	4b20      	ldr	r3, [pc, #128]	@ (8002e6c <HAL_RCC_ClockConfig+0x260>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 030f 	and.w	r3, r3, #15
 8002df2:	683a      	ldr	r2, [r7, #0]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d1ed      	bne.n	8002dd4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0304 	and.w	r3, r3, #4
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d008      	beq.n	8002e16 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e04:	4b1a      	ldr	r3, [pc, #104]	@ (8002e70 <HAL_RCC_ClockConfig+0x264>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	4917      	ldr	r1, [pc, #92]	@ (8002e70 <HAL_RCC_ClockConfig+0x264>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0308 	and.w	r3, r3, #8
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d009      	beq.n	8002e36 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e22:	4b13      	ldr	r3, [pc, #76]	@ (8002e70 <HAL_RCC_ClockConfig+0x264>)
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	00db      	lsls	r3, r3, #3
 8002e30:	490f      	ldr	r1, [pc, #60]	@ (8002e70 <HAL_RCC_ClockConfig+0x264>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e36:	f000 f86b 	bl	8002f10 <HAL_RCC_GetSysClockFreq>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	4b0c      	ldr	r3, [pc, #48]	@ (8002e70 <HAL_RCC_ClockConfig+0x264>)
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	091b      	lsrs	r3, r3, #4
 8002e42:	f003 030f 	and.w	r3, r3, #15
 8002e46:	490c      	ldr	r1, [pc, #48]	@ (8002e78 <HAL_RCC_ClockConfig+0x26c>)
 8002e48:	5ccb      	ldrb	r3, [r1, r3]
 8002e4a:	f003 031f 	and.w	r3, r3, #31
 8002e4e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e52:	4a0a      	ldr	r2, [pc, #40]	@ (8002e7c <HAL_RCC_ClockConfig+0x270>)
 8002e54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002e56:	4b0a      	ldr	r3, [pc, #40]	@ (8002e80 <HAL_RCC_ClockConfig+0x274>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7fe ff08 	bl	8001c70 <HAL_InitTick>
 8002e60:	4603      	mov	r3, r0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3718      	adds	r7, #24
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	40022000 	.word	0x40022000
 8002e70:	40021000 	.word	0x40021000
 8002e74:	04c4b400 	.word	0x04c4b400
 8002e78:	08009d4c 	.word	0x08009d4c
 8002e7c:	20000000 	.word	0x20000000
 8002e80:	20000004 	.word	0x20000004

08002e84 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b08c      	sub	sp, #48	@ 0x30
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 8002e90:	2302      	movs	r3, #2
 8002e92:	617b      	str	r3, [r7, #20]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e94:	2303      	movs	r3, #3
 8002e96:	61fb      	str	r3, [r7, #28]
  gpio_initstruct.Pull      = GPIO_NOPULL;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	61bb      	str	r3, [r7, #24]

  /* Get MCOx selection */
  mcoindex = RCC_MCOx & RCC_MCO_INDEX_MASK;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	0c1b      	lsrs	r3, r3, #16
 8002ea8:	f003 030f 	and.w	r3, r3, #15
 8002eac:	f503 1390 	add.w	r3, r3, #1179648	@ 0x120000
 8002eb0:	029b      	lsls	r3, r3, #10
 8002eb2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	0c1b      	lsrs	r3, r3, #16
 8002eb8:	f003 030f 	and.w	r3, r3, #15
 8002ebc:	627b      	str	r3, [r7, #36]	@ 0x24
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index ));
 8002ebe:	4b13      	ldr	r3, [pc, #76]	@ (8002f0c <HAL_RCC_MCOConfig+0x88>)
 8002ec0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002ec2:	2101      	movs	r1, #1
 8002ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eca:	4910      	ldr	r1, [pc, #64]	@ (8002f0c <HAL_RCC_MCOConfig+0x88>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	64cb      	str	r3, [r1, #76]	@ 0x4c

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	613b      	str	r3, [r7, #16]
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	0d1b      	lsrs	r3, r3, #20
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 8002ede:	f107 0310 	add.w	r3, r7, #16
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002ee6:	f7ff f90d 	bl	8002104 <HAL_GPIO_Init>

   if (mcoindex == RCC_MCO1_INDEX)
 8002eea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d109      	bne.n	8002f04 <HAL_RCC_MCOConfig+0x80>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 8002ef0:	4b06      	ldr	r3, [pc, #24]	@ (8002f0c <HAL_RCC_MCOConfig+0x88>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002ef8:	68b9      	ldr	r1, [r7, #8]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	430b      	orrs	r3, r1
 8002efe:	4903      	ldr	r1, [pc, #12]	@ (8002f0c <HAL_RCC_MCOConfig+0x88>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	608b      	str	r3, [r1, #8]
  }
}
 8002f04:	bf00      	nop
 8002f06:	3730      	adds	r7, #48	@ 0x30
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	40021000 	.word	0x40021000

08002f10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b087      	sub	sp, #28
 8002f14:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002f16:	4b2c      	ldr	r3, [pc, #176]	@ (8002fc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f003 030c 	and.w	r3, r3, #12
 8002f1e:	2b04      	cmp	r3, #4
 8002f20:	d102      	bne.n	8002f28 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f22:	4b2a      	ldr	r3, [pc, #168]	@ (8002fcc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f24:	613b      	str	r3, [r7, #16]
 8002f26:	e047      	b.n	8002fb8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002f28:	4b27      	ldr	r3, [pc, #156]	@ (8002fc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f003 030c 	and.w	r3, r3, #12
 8002f30:	2b08      	cmp	r3, #8
 8002f32:	d102      	bne.n	8002f3a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f34:	4b26      	ldr	r3, [pc, #152]	@ (8002fd0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f36:	613b      	str	r3, [r7, #16]
 8002f38:	e03e      	b.n	8002fb8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002f3a:	4b23      	ldr	r3, [pc, #140]	@ (8002fc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f003 030c 	and.w	r3, r3, #12
 8002f42:	2b0c      	cmp	r3, #12
 8002f44:	d136      	bne.n	8002fb4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f46:	4b20      	ldr	r3, [pc, #128]	@ (8002fc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	f003 0303 	and.w	r3, r3, #3
 8002f4e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f50:	4b1d      	ldr	r3, [pc, #116]	@ (8002fc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	091b      	lsrs	r3, r3, #4
 8002f56:	f003 030f 	and.w	r3, r3, #15
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2b03      	cmp	r3, #3
 8002f62:	d10c      	bne.n	8002f7e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f64:	4a1a      	ldr	r2, [pc, #104]	@ (8002fd0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f6c:	4a16      	ldr	r2, [pc, #88]	@ (8002fc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f6e:	68d2      	ldr	r2, [r2, #12]
 8002f70:	0a12      	lsrs	r2, r2, #8
 8002f72:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002f76:	fb02 f303 	mul.w	r3, r2, r3
 8002f7a:	617b      	str	r3, [r7, #20]
      break;
 8002f7c:	e00c      	b.n	8002f98 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f7e:	4a13      	ldr	r2, [pc, #76]	@ (8002fcc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f86:	4a10      	ldr	r2, [pc, #64]	@ (8002fc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f88:	68d2      	ldr	r2, [r2, #12]
 8002f8a:	0a12      	lsrs	r2, r2, #8
 8002f8c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002f90:	fb02 f303 	mul.w	r3, r2, r3
 8002f94:	617b      	str	r3, [r7, #20]
      break;
 8002f96:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f98:	4b0b      	ldr	r3, [pc, #44]	@ (8002fc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	0e5b      	lsrs	r3, r3, #25
 8002f9e:	f003 0303 	and.w	r3, r3, #3
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002fa8:	697a      	ldr	r2, [r7, #20]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fb0:	613b      	str	r3, [r7, #16]
 8002fb2:	e001      	b.n	8002fb8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002fb8:	693b      	ldr	r3, [r7, #16]
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	371c      	adds	r7, #28
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	00f42400 	.word	0x00f42400
 8002fd0:	016e3600 	.word	0x016e3600

08002fd4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fd8:	4b03      	ldr	r3, [pc, #12]	@ (8002fe8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fda:	681b      	ldr	r3, [r3, #0]
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	20000000 	.word	0x20000000

08002fec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002ff0:	f7ff fff0 	bl	8002fd4 <HAL_RCC_GetHCLKFreq>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	4b06      	ldr	r3, [pc, #24]	@ (8003010 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	0a1b      	lsrs	r3, r3, #8
 8002ffc:	f003 0307 	and.w	r3, r3, #7
 8003000:	4904      	ldr	r1, [pc, #16]	@ (8003014 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003002:	5ccb      	ldrb	r3, [r1, r3]
 8003004:	f003 031f 	and.w	r3, r3, #31
 8003008:	fa22 f303 	lsr.w	r3, r2, r3
}
 800300c:	4618      	mov	r0, r3
 800300e:	bd80      	pop	{r7, pc}
 8003010:	40021000 	.word	0x40021000
 8003014:	08009d5c 	.word	0x08009d5c

08003018 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800301c:	f7ff ffda 	bl	8002fd4 <HAL_RCC_GetHCLKFreq>
 8003020:	4602      	mov	r2, r0
 8003022:	4b06      	ldr	r3, [pc, #24]	@ (800303c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	0adb      	lsrs	r3, r3, #11
 8003028:	f003 0307 	and.w	r3, r3, #7
 800302c:	4904      	ldr	r1, [pc, #16]	@ (8003040 <HAL_RCC_GetPCLK2Freq+0x28>)
 800302e:	5ccb      	ldrb	r3, [r1, r3]
 8003030:	f003 031f 	and.w	r3, r3, #31
 8003034:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003038:	4618      	mov	r0, r3
 800303a:	bd80      	pop	{r7, pc}
 800303c:	40021000 	.word	0x40021000
 8003040:	08009d5c 	.word	0x08009d5c

08003044 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003044:	b480      	push	{r7}
 8003046:	b087      	sub	sp, #28
 8003048:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800304a:	4b1e      	ldr	r3, [pc, #120]	@ (80030c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	f003 0303 	and.w	r3, r3, #3
 8003052:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003054:	4b1b      	ldr	r3, [pc, #108]	@ (80030c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	091b      	lsrs	r3, r3, #4
 800305a:	f003 030f 	and.w	r3, r3, #15
 800305e:	3301      	adds	r3, #1
 8003060:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	2b03      	cmp	r3, #3
 8003066:	d10c      	bne.n	8003082 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003068:	4a17      	ldr	r2, [pc, #92]	@ (80030c8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003070:	4a14      	ldr	r2, [pc, #80]	@ (80030c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003072:	68d2      	ldr	r2, [r2, #12]
 8003074:	0a12      	lsrs	r2, r2, #8
 8003076:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800307a:	fb02 f303 	mul.w	r3, r2, r3
 800307e:	617b      	str	r3, [r7, #20]
    break;
 8003080:	e00c      	b.n	800309c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003082:	4a12      	ldr	r2, [pc, #72]	@ (80030cc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	fbb2 f3f3 	udiv	r3, r2, r3
 800308a:	4a0e      	ldr	r2, [pc, #56]	@ (80030c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800308c:	68d2      	ldr	r2, [r2, #12]
 800308e:	0a12      	lsrs	r2, r2, #8
 8003090:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003094:	fb02 f303 	mul.w	r3, r2, r3
 8003098:	617b      	str	r3, [r7, #20]
    break;
 800309a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800309c:	4b09      	ldr	r3, [pc, #36]	@ (80030c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	0e5b      	lsrs	r3, r3, #25
 80030a2:	f003 0303 	and.w	r3, r3, #3
 80030a6:	3301      	adds	r3, #1
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80030ac:	697a      	ldr	r2, [r7, #20]
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80030b6:	687b      	ldr	r3, [r7, #4]
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	371c      	adds	r7, #28
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr
 80030c4:	40021000 	.word	0x40021000
 80030c8:	016e3600 	.word	0x016e3600
 80030cc:	00f42400 	.word	0x00f42400

080030d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80030d8:	2300      	movs	r3, #0
 80030da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030dc:	2300      	movs	r3, #0
 80030de:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	f000 8098 	beq.w	800321e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030ee:	2300      	movs	r3, #0
 80030f0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030f2:	4b43      	ldr	r3, [pc, #268]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d10d      	bne.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030fe:	4b40      	ldr	r3, [pc, #256]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003100:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003102:	4a3f      	ldr	r2, [pc, #252]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003104:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003108:	6593      	str	r3, [r2, #88]	@ 0x58
 800310a:	4b3d      	ldr	r3, [pc, #244]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800310c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800310e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003112:	60bb      	str	r3, [r7, #8]
 8003114:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003116:	2301      	movs	r3, #1
 8003118:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800311a:	4b3a      	ldr	r3, [pc, #232]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a39      	ldr	r2, [pc, #228]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003120:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003124:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003126:	f7fe fdef 	bl	8001d08 <HAL_GetTick>
 800312a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800312c:	e009      	b.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800312e:	f7fe fdeb 	bl	8001d08 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	2b02      	cmp	r3, #2
 800313a:	d902      	bls.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	74fb      	strb	r3, [r7, #19]
        break;
 8003140:	e005      	b.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003142:	4b30      	ldr	r3, [pc, #192]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800314a:	2b00      	cmp	r3, #0
 800314c:	d0ef      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800314e:	7cfb      	ldrb	r3, [r7, #19]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d159      	bne.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003154:	4b2a      	ldr	r3, [pc, #168]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003156:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800315a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800315e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d01e      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800316a:	697a      	ldr	r2, [r7, #20]
 800316c:	429a      	cmp	r2, r3
 800316e:	d019      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003170:	4b23      	ldr	r3, [pc, #140]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003172:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003176:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800317a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800317c:	4b20      	ldr	r3, [pc, #128]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800317e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003182:	4a1f      	ldr	r2, [pc, #124]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003184:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003188:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800318c:	4b1c      	ldr	r3, [pc, #112]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800318e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003192:	4a1b      	ldr	r2, [pc, #108]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003194:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003198:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800319c:	4a18      	ldr	r2, [pc, #96]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d016      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ae:	f7fe fdab 	bl	8001d08 <HAL_GetTick>
 80031b2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031b4:	e00b      	b.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031b6:	f7fe fda7 	bl	8001d08 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d902      	bls.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	74fb      	strb	r3, [r7, #19]
            break;
 80031cc:	e006      	b.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031ce:	4b0c      	ldr	r3, [pc, #48]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d0ec      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80031dc:	7cfb      	ldrb	r3, [r7, #19]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d10b      	bne.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031e2:	4b07      	ldr	r3, [pc, #28]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031f0:	4903      	ldr	r1, [pc, #12]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80031f8:	e008      	b.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80031fa:	7cfb      	ldrb	r3, [r7, #19]
 80031fc:	74bb      	strb	r3, [r7, #18]
 80031fe:	e005      	b.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003200:	40021000 	.word	0x40021000
 8003204:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003208:	7cfb      	ldrb	r3, [r7, #19]
 800320a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800320c:	7c7b      	ldrb	r3, [r7, #17]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d105      	bne.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003212:	4ba7      	ldr	r3, [pc, #668]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003216:	4aa6      	ldr	r2, [pc, #664]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003218:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800321c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00a      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800322a:	4ba1      	ldr	r3, [pc, #644]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800322c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003230:	f023 0203 	bic.w	r2, r3, #3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	499d      	ldr	r1, [pc, #628]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800323a:	4313      	orrs	r3, r2
 800323c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0302 	and.w	r3, r3, #2
 8003248:	2b00      	cmp	r3, #0
 800324a:	d00a      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800324c:	4b98      	ldr	r3, [pc, #608]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800324e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003252:	f023 020c 	bic.w	r2, r3, #12
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	4995      	ldr	r1, [pc, #596]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800325c:	4313      	orrs	r3, r2
 800325e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0304 	and.w	r3, r3, #4
 800326a:	2b00      	cmp	r3, #0
 800326c:	d00a      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800326e:	4b90      	ldr	r3, [pc, #576]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003270:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003274:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	498c      	ldr	r1, [pc, #560]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800327e:	4313      	orrs	r3, r2
 8003280:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0308 	and.w	r3, r3, #8
 800328c:	2b00      	cmp	r3, #0
 800328e:	d00a      	beq.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003290:	4b87      	ldr	r3, [pc, #540]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003292:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003296:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	4984      	ldr	r1, [pc, #528]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0310 	and.w	r3, r3, #16
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00a      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80032b2:	4b7f      	ldr	r3, [pc, #508]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	695b      	ldr	r3, [r3, #20]
 80032c0:	497b      	ldr	r1, [pc, #492]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0320 	and.w	r3, r3, #32
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00a      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80032d4:	4b76      	ldr	r3, [pc, #472]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032da:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	4973      	ldr	r1, [pc, #460]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00a      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032f6:	4b6e      	ldr	r3, [pc, #440]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032fc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	69db      	ldr	r3, [r3, #28]
 8003304:	496a      	ldr	r1, [pc, #424]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003306:	4313      	orrs	r3, r2
 8003308:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00a      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003318:	4b65      	ldr	r3, [pc, #404]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800331a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800331e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a1b      	ldr	r3, [r3, #32]
 8003326:	4962      	ldr	r1, [pc, #392]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003328:	4313      	orrs	r3, r2
 800332a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00a      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800333a:	4b5d      	ldr	r3, [pc, #372]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800333c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003340:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003348:	4959      	ldr	r1, [pc, #356]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800334a:	4313      	orrs	r3, r2
 800334c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d00a      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800335c:	4b54      	ldr	r3, [pc, #336]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800335e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003362:	f023 0203 	bic.w	r2, r3, #3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800336a:	4951      	ldr	r1, [pc, #324]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800336c:	4313      	orrs	r3, r2
 800336e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00a      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800337e:	4b4c      	ldr	r3, [pc, #304]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003380:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003384:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800338c:	4948      	ldr	r1, [pc, #288]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800338e:	4313      	orrs	r3, r2
 8003390:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800339c:	2b00      	cmp	r3, #0
 800339e:	d015      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033a0:	4b43      	ldr	r3, [pc, #268]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033a6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ae:	4940      	ldr	r1, [pc, #256]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033be:	d105      	bne.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033c0:	4b3b      	ldr	r3, [pc, #236]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	4a3a      	ldr	r2, [pc, #232]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80033ca:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d015      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80033d8:	4b35      	ldr	r3, [pc, #212]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033de:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033e6:	4932      	ldr	r1, [pc, #200]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033f6:	d105      	bne.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033f8:	4b2d      	ldr	r3, [pc, #180]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	4a2c      	ldr	r2, [pc, #176]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003402:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d015      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003410:	4b27      	ldr	r3, [pc, #156]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003412:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003416:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800341e:	4924      	ldr	r1, [pc, #144]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003420:	4313      	orrs	r3, r2
 8003422:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800342a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800342e:	d105      	bne.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003430:	4b1f      	ldr	r3, [pc, #124]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	4a1e      	ldr	r2, [pc, #120]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003436:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800343a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d015      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003448:	4b19      	ldr	r3, [pc, #100]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800344a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800344e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003456:	4916      	ldr	r1, [pc, #88]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003458:	4313      	orrs	r3, r2
 800345a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003462:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003466:	d105      	bne.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003468:	4b11      	ldr	r3, [pc, #68]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	4a10      	ldr	r2, [pc, #64]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800346e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003472:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d019      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003480:	4b0b      	ldr	r3, [pc, #44]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003482:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003486:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800348e:	4908      	ldr	r1, [pc, #32]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003490:	4313      	orrs	r3, r2
 8003492:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800349a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800349e:	d109      	bne.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034a0:	4b03      	ldr	r3, [pc, #12]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	4a02      	ldr	r2, [pc, #8]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80034aa:	60d3      	str	r3, [r2, #12]
 80034ac:	e002      	b.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80034ae:	bf00      	nop
 80034b0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d015      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80034c0:	4b29      	ldr	r3, [pc, #164]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80034c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034c6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ce:	4926      	ldr	r1, [pc, #152]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80034de:	d105      	bne.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80034e0:	4b21      	ldr	r3, [pc, #132]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	4a20      	ldr	r2, [pc, #128]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80034e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034ea:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d015      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80034f8:	4b1b      	ldr	r3, [pc, #108]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80034fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034fe:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003506:	4918      	ldr	r1, [pc, #96]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003508:	4313      	orrs	r3, r2
 800350a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003512:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003516:	d105      	bne.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003518:	4b13      	ldr	r3, [pc, #76]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	4a12      	ldr	r2, [pc, #72]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800351e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003522:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d015      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003530:	4b0d      	ldr	r3, [pc, #52]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003532:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003536:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800353e:	490a      	ldr	r1, [pc, #40]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003540:	4313      	orrs	r3, r2
 8003542:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800354a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800354e:	d105      	bne.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003550:	4b05      	ldr	r3, [pc, #20]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	4a04      	ldr	r2, [pc, #16]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003556:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800355a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800355c:	7cbb      	ldrb	r3, [r7, #18]
}
 800355e:	4618      	mov	r0, r3
 8003560:	3718      	adds	r7, #24
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	40021000 	.word	0x40021000

0800356c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d101      	bne.n	800357e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e09d      	b.n	80036ba <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003582:	2b00      	cmp	r3, #0
 8003584:	d108      	bne.n	8003598 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800358e:	d009      	beq.n	80035a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	61da      	str	r2, [r3, #28]
 8003596:	e005      	b.n	80035a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d106      	bne.n	80035c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f7fe f93e 	bl	8001840 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2202      	movs	r2, #2
 80035c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80035da:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80035e4:	d902      	bls.n	80035ec <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80035e6:	2300      	movs	r3, #0
 80035e8:	60fb      	str	r3, [r7, #12]
 80035ea:	e002      	b.n	80035f2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80035ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80035f0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80035fa:	d007      	beq.n	800360c <HAL_SPI_Init+0xa0>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003604:	d002      	beq.n	800360c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800361c:	431a      	orrs	r2, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	431a      	orrs	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	695b      	ldr	r3, [r3, #20]
 800362c:	f003 0301 	and.w	r3, r3, #1
 8003630:	431a      	orrs	r2, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800363a:	431a      	orrs	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	69db      	ldr	r3, [r3, #28]
 8003640:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003644:	431a      	orrs	r2, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a1b      	ldr	r3, [r3, #32]
 800364a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800364e:	ea42 0103 	orr.w	r1, r2, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003656:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	430a      	orrs	r2, r1
 8003660:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	699b      	ldr	r3, [r3, #24]
 8003666:	0c1b      	lsrs	r3, r3, #16
 8003668:	f003 0204 	and.w	r2, r3, #4
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003670:	f003 0310 	and.w	r3, r3, #16
 8003674:	431a      	orrs	r2, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800367a:	f003 0308 	and.w	r3, r3, #8
 800367e:	431a      	orrs	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003688:	ea42 0103 	orr.w	r1, r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	430a      	orrs	r2, r1
 8003698:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	69da      	ldr	r2, [r3, #28]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036a8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b08a      	sub	sp, #40	@ 0x28
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	60f8      	str	r0, [r7, #12]
 80036ca:	60b9      	str	r1, [r7, #8]
 80036cc:	607a      	str	r2, [r7, #4]
 80036ce:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80036d0:	2301      	movs	r3, #1
 80036d2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80036d4:	f7fe fb18 	bl	8001d08 <HAL_GetTick>
 80036d8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80036e0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80036e8:	887b      	ldrh	r3, [r7, #2]
 80036ea:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 80036ec:	887b      	ldrh	r3, [r7, #2]
 80036ee:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80036f0:	7ffb      	ldrb	r3, [r7, #31]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d00c      	beq.n	8003710 <HAL_SPI_TransmitReceive+0x4e>
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80036fc:	d106      	bne.n	800370c <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d102      	bne.n	800370c <HAL_SPI_TransmitReceive+0x4a>
 8003706:	7ffb      	ldrb	r3, [r7, #31]
 8003708:	2b04      	cmp	r3, #4
 800370a:	d001      	beq.n	8003710 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800370c:	2302      	movs	r3, #2
 800370e:	e1f3      	b.n	8003af8 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d005      	beq.n	8003722 <HAL_SPI_TransmitReceive+0x60>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d002      	beq.n	8003722 <HAL_SPI_TransmitReceive+0x60>
 800371c:	887b      	ldrh	r3, [r7, #2]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d101      	bne.n	8003726 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e1e8      	b.n	8003af8 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800372c:	2b01      	cmp	r3, #1
 800372e:	d101      	bne.n	8003734 <HAL_SPI_TransmitReceive+0x72>
 8003730:	2302      	movs	r3, #2
 8003732:	e1e1      	b.n	8003af8 <HAL_SPI_TransmitReceive+0x436>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003742:	b2db      	uxtb	r3, r3
 8003744:	2b04      	cmp	r3, #4
 8003746:	d003      	beq.n	8003750 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2205      	movs	r2, #5
 800374c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	887a      	ldrh	r2, [r7, #2]
 8003760:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	887a      	ldrh	r2, [r7, #2]
 8003768:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	68ba      	ldr	r2, [r7, #8]
 8003770:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	887a      	ldrh	r2, [r7, #2]
 8003776:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	887a      	ldrh	r2, [r7, #2]
 800377c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2200      	movs	r2, #0
 8003788:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003792:	d802      	bhi.n	800379a <HAL_SPI_TransmitReceive+0xd8>
 8003794:	8abb      	ldrh	r3, [r7, #20]
 8003796:	2b01      	cmp	r3, #1
 8003798:	d908      	bls.n	80037ac <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	685a      	ldr	r2, [r3, #4]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80037a8:	605a      	str	r2, [r3, #4]
 80037aa:	e007      	b.n	80037bc <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	685a      	ldr	r2, [r3, #4]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80037ba:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037c6:	2b40      	cmp	r3, #64	@ 0x40
 80037c8:	d007      	beq.n	80037da <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80037d8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80037e2:	f240 8083 	bls.w	80038ec <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d002      	beq.n	80037f4 <HAL_SPI_TransmitReceive+0x132>
 80037ee:	8afb      	ldrh	r3, [r7, #22]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d16f      	bne.n	80038d4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037f8:	881a      	ldrh	r2, [r3, #0]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003804:	1c9a      	adds	r2, r3, #2
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800380e:	b29b      	uxth	r3, r3
 8003810:	3b01      	subs	r3, #1
 8003812:	b29a      	uxth	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003818:	e05c      	b.n	80038d4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f003 0302 	and.w	r3, r3, #2
 8003824:	2b02      	cmp	r3, #2
 8003826:	d11b      	bne.n	8003860 <HAL_SPI_TransmitReceive+0x19e>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800382c:	b29b      	uxth	r3, r3
 800382e:	2b00      	cmp	r3, #0
 8003830:	d016      	beq.n	8003860 <HAL_SPI_TransmitReceive+0x19e>
 8003832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003834:	2b01      	cmp	r3, #1
 8003836:	d113      	bne.n	8003860 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800383c:	881a      	ldrh	r2, [r3, #0]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003848:	1c9a      	adds	r2, r3, #2
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003852:	b29b      	uxth	r3, r3
 8003854:	3b01      	subs	r3, #1
 8003856:	b29a      	uxth	r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800385c:	2300      	movs	r3, #0
 800385e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f003 0301 	and.w	r3, r3, #1
 800386a:	2b01      	cmp	r3, #1
 800386c:	d11c      	bne.n	80038a8 <HAL_SPI_TransmitReceive+0x1e6>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003874:	b29b      	uxth	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d016      	beq.n	80038a8 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68da      	ldr	r2, [r3, #12]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003884:	b292      	uxth	r2, r2
 8003886:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800388c:	1c9a      	adds	r2, r3, #2
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003898:	b29b      	uxth	r3, r3
 800389a:	3b01      	subs	r3, #1
 800389c:	b29a      	uxth	r2, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80038a4:	2301      	movs	r3, #1
 80038a6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80038a8:	f7fe fa2e 	bl	8001d08 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	6a3b      	ldr	r3, [r7, #32]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d80d      	bhi.n	80038d4 <HAL_SPI_TransmitReceive+0x212>
 80038b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038be:	d009      	beq.n	80038d4 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e111      	b.n	8003af8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038d8:	b29b      	uxth	r3, r3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d19d      	bne.n	800381a <HAL_SPI_TransmitReceive+0x158>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d197      	bne.n	800381a <HAL_SPI_TransmitReceive+0x158>
 80038ea:	e0e5      	b.n	8003ab8 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d003      	beq.n	80038fc <HAL_SPI_TransmitReceive+0x23a>
 80038f4:	8afb      	ldrh	r3, [r7, #22]
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	f040 80d1 	bne.w	8003a9e <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003900:	b29b      	uxth	r3, r3
 8003902:	2b01      	cmp	r3, #1
 8003904:	d912      	bls.n	800392c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800390a:	881a      	ldrh	r2, [r3, #0]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003916:	1c9a      	adds	r2, r3, #2
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003920:	b29b      	uxth	r3, r3
 8003922:	3b02      	subs	r3, #2
 8003924:	b29a      	uxth	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800392a:	e0b8      	b.n	8003a9e <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	330c      	adds	r3, #12
 8003936:	7812      	ldrb	r2, [r2, #0]
 8003938:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800393e:	1c5a      	adds	r2, r3, #1
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003948:	b29b      	uxth	r3, r3
 800394a:	3b01      	subs	r3, #1
 800394c:	b29a      	uxth	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003952:	e0a4      	b.n	8003a9e <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	2b02      	cmp	r3, #2
 8003960:	d134      	bne.n	80039cc <HAL_SPI_TransmitReceive+0x30a>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003966:	b29b      	uxth	r3, r3
 8003968:	2b00      	cmp	r3, #0
 800396a:	d02f      	beq.n	80039cc <HAL_SPI_TransmitReceive+0x30a>
 800396c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800396e:	2b01      	cmp	r3, #1
 8003970:	d12c      	bne.n	80039cc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003976:	b29b      	uxth	r3, r3
 8003978:	2b01      	cmp	r3, #1
 800397a:	d912      	bls.n	80039a2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003980:	881a      	ldrh	r2, [r3, #0]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800398c:	1c9a      	adds	r2, r3, #2
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003996:	b29b      	uxth	r3, r3
 8003998:	3b02      	subs	r3, #2
 800399a:	b29a      	uxth	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80039a0:	e012      	b.n	80039c8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	330c      	adds	r3, #12
 80039ac:	7812      	ldrb	r2, [r2, #0]
 80039ae:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039b4:	1c5a      	adds	r2, r3, #1
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039be:	b29b      	uxth	r3, r3
 80039c0:	3b01      	subs	r3, #1
 80039c2:	b29a      	uxth	r2, r3
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80039c8:	2300      	movs	r3, #0
 80039ca:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d148      	bne.n	8003a6c <HAL_SPI_TransmitReceive+0x3aa>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d042      	beq.n	8003a6c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d923      	bls.n	8003a3a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68da      	ldr	r2, [r3, #12]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039fc:	b292      	uxth	r2, r2
 80039fe:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a04:	1c9a      	adds	r2, r3, #2
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	3b02      	subs	r3, #2
 8003a14:	b29a      	uxth	r2, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d81f      	bhi.n	8003a68 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	685a      	ldr	r2, [r3, #4]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003a36:	605a      	str	r2, [r3, #4]
 8003a38:	e016      	b.n	8003a68 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f103 020c 	add.w	r2, r3, #12
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a46:	7812      	ldrb	r2, [r2, #0]
 8003a48:	b2d2      	uxtb	r2, r2
 8003a4a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a50:	1c5a      	adds	r2, r3, #1
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	b29a      	uxth	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003a6c:	f7fe f94c 	bl	8001d08 <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	6a3b      	ldr	r3, [r7, #32]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d803      	bhi.n	8003a84 <HAL_SPI_TransmitReceive+0x3c2>
 8003a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a82:	d102      	bne.n	8003a8a <HAL_SPI_TransmitReceive+0x3c8>
 8003a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d109      	bne.n	8003a9e <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e02c      	b.n	8003af8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f47f af55 	bne.w	8003954 <HAL_SPI_TransmitReceive+0x292>
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f47f af4e 	bne.w	8003954 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ab8:	6a3a      	ldr	r2, [r7, #32]
 8003aba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003abc:	68f8      	ldr	r0, [r7, #12]
 8003abe:	f000 fa5d 	bl	8003f7c <SPI_EndRxTxTransaction>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d008      	beq.n	8003ada <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2220      	movs	r2, #32
 8003acc:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e00e      	b.n	8003af8 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2201      	movs	r2, #1
 8003ade:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d001      	beq.n	8003af6 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e000      	b.n	8003af8 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8003af6:	2300      	movs	r3, #0
  }
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3728      	adds	r7, #40	@ 0x28
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b088      	sub	sp, #32
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	099b      	lsrs	r3, r3, #6
 8003b1c:	f003 0301 	and.w	r3, r3, #1
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d10f      	bne.n	8003b44 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00a      	beq.n	8003b44 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	099b      	lsrs	r3, r3, #6
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d004      	beq.n	8003b44 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	4798      	blx	r3
    return;
 8003b42:	e0d7      	b.n	8003cf4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	085b      	lsrs	r3, r3, #1
 8003b48:	f003 0301 	and.w	r3, r3, #1
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00a      	beq.n	8003b66 <HAL_SPI_IRQHandler+0x66>
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	09db      	lsrs	r3, r3, #7
 8003b54:	f003 0301 	and.w	r3, r3, #1
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d004      	beq.n	8003b66 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	4798      	blx	r3
    return;
 8003b64:	e0c6      	b.n	8003cf4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	095b      	lsrs	r3, r3, #5
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d10c      	bne.n	8003b8c <HAL_SPI_IRQHandler+0x8c>
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	099b      	lsrs	r3, r3, #6
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d106      	bne.n	8003b8c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	0a1b      	lsrs	r3, r3, #8
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	f000 80b4 	beq.w	8003cf4 <HAL_SPI_IRQHandler+0x1f4>
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	095b      	lsrs	r3, r3, #5
 8003b90:	f003 0301 	and.w	r3, r3, #1
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f000 80ad 	beq.w	8003cf4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	099b      	lsrs	r3, r3, #6
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d023      	beq.n	8003bee <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b03      	cmp	r3, #3
 8003bb0:	d011      	beq.n	8003bd6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bb6:	f043 0204 	orr.w	r2, r3, #4
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	617b      	str	r3, [r7, #20]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	617b      	str	r3, [r7, #20]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	617b      	str	r3, [r7, #20]
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	e00b      	b.n	8003bee <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	613b      	str	r3, [r7, #16]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	613b      	str	r3, [r7, #16]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	613b      	str	r3, [r7, #16]
 8003bea:	693b      	ldr	r3, [r7, #16]
        return;
 8003bec:	e082      	b.n	8003cf4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	095b      	lsrs	r3, r3, #5
 8003bf2:	f003 0301 	and.w	r3, r3, #1
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d014      	beq.n	8003c24 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bfe:	f043 0201 	orr.w	r2, r3, #1
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003c06:	2300      	movs	r3, #0
 8003c08:	60fb      	str	r3, [r7, #12]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	60fb      	str	r3, [r7, #12]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c20:	601a      	str	r2, [r3, #0]
 8003c22:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	0a1b      	lsrs	r3, r3, #8
 8003c28:	f003 0301 	and.w	r3, r3, #1
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d00c      	beq.n	8003c4a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c34:	f043 0208 	orr.w	r2, r3, #8
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	60bb      	str	r3, [r7, #8]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	60bb      	str	r3, [r7, #8]
 8003c48:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d04f      	beq.n	8003cf2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	685a      	ldr	r2, [r3, #4]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003c60:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2201      	movs	r2, #1
 8003c66:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	f003 0302 	and.w	r3, r3, #2
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d104      	bne.n	8003c7e <HAL_SPI_IRQHandler+0x17e>
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	f003 0301 	and.w	r3, r3, #1
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d034      	beq.n	8003ce8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	685a      	ldr	r2, [r3, #4]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f022 0203 	bic.w	r2, r2, #3
 8003c8c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d011      	beq.n	8003cba <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c9a:	4a18      	ldr	r2, [pc, #96]	@ (8003cfc <HAL_SPI_IRQHandler+0x1fc>)
 8003c9c:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f7fe f9c6 	bl	8002034 <HAL_DMA_Abort_IT>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d005      	beq.n	8003cba <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cb2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d016      	beq.n	8003cf0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cc6:	4a0d      	ldr	r2, [pc, #52]	@ (8003cfc <HAL_SPI_IRQHandler+0x1fc>)
 8003cc8:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7fe f9b0 	bl	8002034 <HAL_DMA_Abort_IT>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d00a      	beq.n	8003cf0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cde:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8003ce6:	e003      	b.n	8003cf0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f000 f809 	bl	8003d00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003cee:	e000      	b.n	8003cf2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003cf0:	bf00      	nop
    return;
 8003cf2:	bf00      	nop
  }
}
 8003cf4:	3720      	adds	r7, #32
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	08003d15 	.word	0x08003d15

08003d00 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d20:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003d30:	68f8      	ldr	r0, [r7, #12]
 8003d32:	f7ff ffe5 	bl	8003d00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003d36:	bf00      	nop
 8003d38:	3710      	adds	r7, #16
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
	...

08003d40 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b088      	sub	sp, #32
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	60b9      	str	r1, [r7, #8]
 8003d4a:	603b      	str	r3, [r7, #0]
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d50:	f7fd ffda 	bl	8001d08 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d58:	1a9b      	subs	r3, r3, r2
 8003d5a:	683a      	ldr	r2, [r7, #0]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d60:	f7fd ffd2 	bl	8001d08 <HAL_GetTick>
 8003d64:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d66:	4b39      	ldr	r3, [pc, #228]	@ (8003e4c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	015b      	lsls	r3, r3, #5
 8003d6c:	0d1b      	lsrs	r3, r3, #20
 8003d6e:	69fa      	ldr	r2, [r7, #28]
 8003d70:	fb02 f303 	mul.w	r3, r2, r3
 8003d74:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d76:	e054      	b.n	8003e22 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d7e:	d050      	beq.n	8003e22 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d80:	f7fd ffc2 	bl	8001d08 <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	69fa      	ldr	r2, [r7, #28]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d902      	bls.n	8003d96 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d13d      	bne.n	8003e12 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	685a      	ldr	r2, [r3, #4]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003da4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003dae:	d111      	bne.n	8003dd4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003db8:	d004      	beq.n	8003dc4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dc2:	d107      	bne.n	8003dd4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003dd2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ddc:	d10f      	bne.n	8003dfe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003dec:	601a      	str	r2, [r3, #0]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003dfc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2201      	movs	r2, #1
 8003e02:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e017      	b.n	8003e42 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d101      	bne.n	8003e1c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	689a      	ldr	r2, [r3, #8]
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	68ba      	ldr	r2, [r7, #8]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	bf0c      	ite	eq
 8003e32:	2301      	moveq	r3, #1
 8003e34:	2300      	movne	r3, #0
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	461a      	mov	r2, r3
 8003e3a:	79fb      	ldrb	r3, [r7, #7]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d19b      	bne.n	8003d78 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3720      	adds	r7, #32
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	20000000 	.word	0x20000000

08003e50 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b08a      	sub	sp, #40	@ 0x28
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	60b9      	str	r1, [r7, #8]
 8003e5a:	607a      	str	r2, [r7, #4]
 8003e5c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003e62:	f7fd ff51 	bl	8001d08 <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e6a:	1a9b      	subs	r3, r3, r2
 8003e6c:	683a      	ldr	r2, [r7, #0]
 8003e6e:	4413      	add	r3, r2
 8003e70:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003e72:	f7fd ff49 	bl	8001d08 <HAL_GetTick>
 8003e76:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	330c      	adds	r3, #12
 8003e7e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003e80:	4b3d      	ldr	r3, [pc, #244]	@ (8003f78 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	4613      	mov	r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	4413      	add	r3, r2
 8003e8a:	00da      	lsls	r2, r3, #3
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	0d1b      	lsrs	r3, r3, #20
 8003e90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e92:	fb02 f303 	mul.w	r3, r2, r3
 8003e96:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003e98:	e060      	b.n	8003f5c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003ea0:	d107      	bne.n	8003eb2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d104      	bne.n	8003eb2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003eb0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb8:	d050      	beq.n	8003f5c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003eba:	f7fd ff25 	bl	8001d08 <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	6a3b      	ldr	r3, [r7, #32]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d902      	bls.n	8003ed0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d13d      	bne.n	8003f4c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	685a      	ldr	r2, [r3, #4]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003ede:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ee8:	d111      	bne.n	8003f0e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ef2:	d004      	beq.n	8003efe <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003efc:	d107      	bne.n	8003f0e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f0c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f16:	d10f      	bne.n	8003f38 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003f26:	601a      	str	r2, [r3, #0]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003f36:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e010      	b.n	8003f6e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d101      	bne.n	8003f56 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003f52:	2300      	movs	r3, #0
 8003f54:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	689a      	ldr	r2, [r3, #8]
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	4013      	ands	r3, r2
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d196      	bne.n	8003e9a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3728      	adds	r7, #40	@ 0x28
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	20000000 	.word	0x20000000

08003f7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b086      	sub	sp, #24
 8003f80:	af02      	add	r7, sp, #8
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	9300      	str	r3, [sp, #0]
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003f94:	68f8      	ldr	r0, [r7, #12]
 8003f96:	f7ff ff5b 	bl	8003e50 <SPI_WaitFifoStateUntilTimeout>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d007      	beq.n	8003fb0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fa4:	f043 0220 	orr.w	r2, r3, #32
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e027      	b.n	8004000 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	9300      	str	r3, [sp, #0]
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	2180      	movs	r1, #128	@ 0x80
 8003fba:	68f8      	ldr	r0, [r7, #12]
 8003fbc:	f7ff fec0 	bl	8003d40 <SPI_WaitFlagStateUntilTimeout>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d007      	beq.n	8003fd6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fca:	f043 0220 	orr.w	r2, r3, #32
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e014      	b.n	8004000 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	9300      	str	r3, [sp, #0]
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003fe2:	68f8      	ldr	r0, [r7, #12]
 8003fe4:	f7ff ff34 	bl	8003e50 <SPI_WaitFifoStateUntilTimeout>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d007      	beq.n	8003ffe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ff2:	f043 0220 	orr.w	r2, r3, #32
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e000      	b.n	8004000 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003ffe:	2300      	movs	r3, #0
}
 8004000:	4618      	mov	r0, r3
 8004002:	3710      	adds	r7, #16
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d101      	bne.n	800401a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e042      	b.n	80040a0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004020:	2b00      	cmp	r3, #0
 8004022:	d106      	bne.n	8004032 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f7fd fba7 	bl	8001780 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2224      	movs	r2, #36	@ 0x24
 8004036:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f022 0201 	bic.w	r2, r2, #1
 8004048:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800404e:	2b00      	cmp	r3, #0
 8004050:	d002      	beq.n	8004058 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 ff14 	bl	8004e80 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f000 fc15 	bl	8004888 <UART_SetConfig>
 800405e:	4603      	mov	r3, r0
 8004060:	2b01      	cmp	r3, #1
 8004062:	d101      	bne.n	8004068 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e01b      	b.n	80040a0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	685a      	ldr	r2, [r3, #4]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004076:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	689a      	ldr	r2, [r3, #8]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004086:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f042 0201 	orr.w	r2, r2, #1
 8004096:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f000 ff93 	bl	8004fc4 <UART_CheckIdleState>
 800409e:	4603      	mov	r3, r0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3708      	adds	r7, #8
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b08a      	sub	sp, #40	@ 0x28
 80040ac:	af02      	add	r7, sp, #8
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	603b      	str	r3, [r7, #0]
 80040b4:	4613      	mov	r3, r2
 80040b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040be:	2b20      	cmp	r3, #32
 80040c0:	d17b      	bne.n	80041ba <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d002      	beq.n	80040ce <HAL_UART_Transmit+0x26>
 80040c8:	88fb      	ldrh	r3, [r7, #6]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d101      	bne.n	80040d2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e074      	b.n	80041bc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2221      	movs	r2, #33	@ 0x21
 80040de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040e2:	f7fd fe11 	bl	8001d08 <HAL_GetTick>
 80040e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	88fa      	ldrh	r2, [r7, #6]
 80040ec:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	88fa      	ldrh	r2, [r7, #6]
 80040f4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004100:	d108      	bne.n	8004114 <HAL_UART_Transmit+0x6c>
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d104      	bne.n	8004114 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800410a:	2300      	movs	r3, #0
 800410c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	61bb      	str	r3, [r7, #24]
 8004112:	e003      	b.n	800411c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004118:	2300      	movs	r3, #0
 800411a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800411c:	e030      	b.n	8004180 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	9300      	str	r3, [sp, #0]
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	2200      	movs	r2, #0
 8004126:	2180      	movs	r1, #128	@ 0x80
 8004128:	68f8      	ldr	r0, [r7, #12]
 800412a:	f000 fff5 	bl	8005118 <UART_WaitOnFlagUntilTimeout>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d005      	beq.n	8004140 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2220      	movs	r2, #32
 8004138:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e03d      	b.n	80041bc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d10b      	bne.n	800415e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	881b      	ldrh	r3, [r3, #0]
 800414a:	461a      	mov	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004154:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	3302      	adds	r3, #2
 800415a:	61bb      	str	r3, [r7, #24]
 800415c:	e007      	b.n	800416e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	781a      	ldrb	r2, [r3, #0]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	3301      	adds	r3, #1
 800416c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004174:	b29b      	uxth	r3, r3
 8004176:	3b01      	subs	r3, #1
 8004178:	b29a      	uxth	r2, r3
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004186:	b29b      	uxth	r3, r3
 8004188:	2b00      	cmp	r3, #0
 800418a:	d1c8      	bne.n	800411e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	9300      	str	r3, [sp, #0]
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	2200      	movs	r2, #0
 8004194:	2140      	movs	r1, #64	@ 0x40
 8004196:	68f8      	ldr	r0, [r7, #12]
 8004198:	f000 ffbe 	bl	8005118 <UART_WaitOnFlagUntilTimeout>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d005      	beq.n	80041ae <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2220      	movs	r2, #32
 80041a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e006      	b.n	80041bc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2220      	movs	r2, #32
 80041b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80041b6:	2300      	movs	r3, #0
 80041b8:	e000      	b.n	80041bc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80041ba:	2302      	movs	r3, #2
  }
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3720      	adds	r7, #32
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b0ba      	sub	sp, #232	@ 0xe8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	69db      	ldr	r3, [r3, #28]
 80041d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80041ea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80041ee:	f640 030f 	movw	r3, #2063	@ 0x80f
 80041f2:	4013      	ands	r3, r2
 80041f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80041f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d11b      	bne.n	8004238 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004204:	f003 0320 	and.w	r3, r3, #32
 8004208:	2b00      	cmp	r3, #0
 800420a:	d015      	beq.n	8004238 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800420c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004210:	f003 0320 	and.w	r3, r3, #32
 8004214:	2b00      	cmp	r3, #0
 8004216:	d105      	bne.n	8004224 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004218:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800421c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d009      	beq.n	8004238 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004228:	2b00      	cmp	r3, #0
 800422a:	f000 8300 	beq.w	800482e <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	4798      	blx	r3
      }
      return;
 8004236:	e2fa      	b.n	800482e <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004238:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800423c:	2b00      	cmp	r3, #0
 800423e:	f000 8123 	beq.w	8004488 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004242:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004246:	4b8d      	ldr	r3, [pc, #564]	@ (800447c <HAL_UART_IRQHandler+0x2b8>)
 8004248:	4013      	ands	r3, r2
 800424a:	2b00      	cmp	r3, #0
 800424c:	d106      	bne.n	800425c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800424e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004252:	4b8b      	ldr	r3, [pc, #556]	@ (8004480 <HAL_UART_IRQHandler+0x2bc>)
 8004254:	4013      	ands	r3, r2
 8004256:	2b00      	cmp	r3, #0
 8004258:	f000 8116 	beq.w	8004488 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800425c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004260:	f003 0301 	and.w	r3, r3, #1
 8004264:	2b00      	cmp	r3, #0
 8004266:	d011      	beq.n	800428c <HAL_UART_IRQHandler+0xc8>
 8004268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800426c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00b      	beq.n	800428c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2201      	movs	r2, #1
 800427a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004282:	f043 0201 	orr.w	r2, r3, #1
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800428c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004290:	f003 0302 	and.w	r3, r3, #2
 8004294:	2b00      	cmp	r3, #0
 8004296:	d011      	beq.n	80042bc <HAL_UART_IRQHandler+0xf8>
 8004298:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800429c:	f003 0301 	and.w	r3, r3, #1
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d00b      	beq.n	80042bc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2202      	movs	r2, #2
 80042aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042b2:	f043 0204 	orr.w	r2, r3, #4
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80042bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042c0:	f003 0304 	and.w	r3, r3, #4
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d011      	beq.n	80042ec <HAL_UART_IRQHandler+0x128>
 80042c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042cc:	f003 0301 	and.w	r3, r3, #1
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d00b      	beq.n	80042ec <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2204      	movs	r2, #4
 80042da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042e2:	f043 0202 	orr.w	r2, r3, #2
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80042ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042f0:	f003 0308 	and.w	r3, r3, #8
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d017      	beq.n	8004328 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80042f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042fc:	f003 0320 	and.w	r3, r3, #32
 8004300:	2b00      	cmp	r3, #0
 8004302:	d105      	bne.n	8004310 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004304:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004308:	4b5c      	ldr	r3, [pc, #368]	@ (800447c <HAL_UART_IRQHandler+0x2b8>)
 800430a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00b      	beq.n	8004328 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2208      	movs	r2, #8
 8004316:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800431e:	f043 0208 	orr.w	r2, r3, #8
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004328:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800432c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004330:	2b00      	cmp	r3, #0
 8004332:	d012      	beq.n	800435a <HAL_UART_IRQHandler+0x196>
 8004334:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004338:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d00c      	beq.n	800435a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004348:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004350:	f043 0220 	orr.w	r2, r3, #32
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004360:	2b00      	cmp	r3, #0
 8004362:	f000 8266 	beq.w	8004832 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800436a:	f003 0320 	and.w	r3, r3, #32
 800436e:	2b00      	cmp	r3, #0
 8004370:	d013      	beq.n	800439a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004372:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004376:	f003 0320 	and.w	r3, r3, #32
 800437a:	2b00      	cmp	r3, #0
 800437c:	d105      	bne.n	800438a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800437e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004382:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d007      	beq.n	800439a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800438e:	2b00      	cmp	r3, #0
 8004390:	d003      	beq.n	800439a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043a0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043ae:	2b40      	cmp	r3, #64	@ 0x40
 80043b0:	d005      	beq.n	80043be <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80043b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80043b6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d054      	beq.n	8004468 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 ff17 	bl	80051f2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043ce:	2b40      	cmp	r3, #64	@ 0x40
 80043d0:	d146      	bne.n	8004460 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	3308      	adds	r3, #8
 80043d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80043e0:	e853 3f00 	ldrex	r3, [r3]
 80043e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80043e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80043ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	3308      	adds	r3, #8
 80043fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80043fe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004402:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004406:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800440a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800440e:	e841 2300 	strex	r3, r2, [r1]
 8004412:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004416:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d1d9      	bne.n	80043d2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004424:	2b00      	cmp	r3, #0
 8004426:	d017      	beq.n	8004458 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800442e:	4a15      	ldr	r2, [pc, #84]	@ (8004484 <HAL_UART_IRQHandler+0x2c0>)
 8004430:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004438:	4618      	mov	r0, r3
 800443a:	f7fd fdfb 	bl	8002034 <HAL_DMA_Abort_IT>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d019      	beq.n	8004478 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800444a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8004452:	4610      	mov	r0, r2
 8004454:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004456:	e00f      	b.n	8004478 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f000 f9ff 	bl	800485c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800445e:	e00b      	b.n	8004478 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f000 f9fb 	bl	800485c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004466:	e007      	b.n	8004478 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f000 f9f7 	bl	800485c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8004476:	e1dc      	b.n	8004832 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004478:	bf00      	nop
    return;
 800447a:	e1da      	b.n	8004832 <HAL_UART_IRQHandler+0x66e>
 800447c:	10000001 	.word	0x10000001
 8004480:	04000120 	.word	0x04000120
 8004484:	080052bf 	.word	0x080052bf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800448c:	2b01      	cmp	r3, #1
 800448e:	f040 8170 	bne.w	8004772 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004496:	f003 0310 	and.w	r3, r3, #16
 800449a:	2b00      	cmp	r3, #0
 800449c:	f000 8169 	beq.w	8004772 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80044a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044a4:	f003 0310 	and.w	r3, r3, #16
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	f000 8162 	beq.w	8004772 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2210      	movs	r2, #16
 80044b4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044c0:	2b40      	cmp	r3, #64	@ 0x40
 80044c2:	f040 80d8 	bne.w	8004676 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80044d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f000 80af 	beq.w	800463c <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80044e4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80044e8:	429a      	cmp	r2, r3
 80044ea:	f080 80a7 	bcs.w	800463c <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80044f4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0320 	and.w	r3, r3, #32
 8004506:	2b00      	cmp	r3, #0
 8004508:	f040 8087 	bne.w	800461a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004514:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004518:	e853 3f00 	ldrex	r3, [r3]
 800451c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004520:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004524:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004528:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	461a      	mov	r2, r3
 8004532:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004536:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800453a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004542:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004546:	e841 2300 	strex	r3, r2, [r1]
 800454a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800454e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004552:	2b00      	cmp	r3, #0
 8004554:	d1da      	bne.n	800450c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	3308      	adds	r3, #8
 800455c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800455e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004560:	e853 3f00 	ldrex	r3, [r3]
 8004564:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004566:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004568:	f023 0301 	bic.w	r3, r3, #1
 800456c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	3308      	adds	r3, #8
 8004576:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800457a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800457e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004580:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004582:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004586:	e841 2300 	strex	r3, r2, [r1]
 800458a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800458c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1e1      	bne.n	8004556 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	3308      	adds	r3, #8
 8004598:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800459a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800459c:	e853 3f00 	ldrex	r3, [r3]
 80045a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80045a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80045a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	3308      	adds	r3, #8
 80045b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80045b6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80045b8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80045bc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80045be:	e841 2300 	strex	r3, r2, [r1]
 80045c2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80045c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1e3      	bne.n	8004592 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2220      	movs	r2, #32
 80045ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045e0:	e853 3f00 	ldrex	r3, [r3]
 80045e4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80045e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045e8:	f023 0310 	bic.w	r3, r3, #16
 80045ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	461a      	mov	r2, r3
 80045f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80045fa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80045fc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045fe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004600:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004602:	e841 2300 	strex	r3, r2, [r1]
 8004606:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004608:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1e4      	bne.n	80045d8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004614:	4618      	mov	r0, r3
 8004616:	f7fd fcb4 	bl	8001f82 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2202      	movs	r2, #2
 800461e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800462c:	b29b      	uxth	r3, r3
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	b29b      	uxth	r3, r3
 8004632:	4619      	mov	r1, r3
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f000 f91b 	bl	8004870 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800463a:	e0fc      	b.n	8004836 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004642:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004646:	429a      	cmp	r2, r3
 8004648:	f040 80f5 	bne.w	8004836 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0320 	and.w	r3, r3, #32
 800465a:	2b20      	cmp	r3, #32
 800465c:	f040 80eb 	bne.w	8004836 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2202      	movs	r2, #2
 8004664:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800466c:	4619      	mov	r1, r3
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 f8fe 	bl	8004870 <HAL_UARTEx_RxEventCallback>
      return;
 8004674:	e0df      	b.n	8004836 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004682:	b29b      	uxth	r3, r3
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004690:	b29b      	uxth	r3, r3
 8004692:	2b00      	cmp	r3, #0
 8004694:	f000 80d1 	beq.w	800483a <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8004698:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800469c:	2b00      	cmp	r3, #0
 800469e:	f000 80cc 	beq.w	800483a <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046aa:	e853 3f00 	ldrex	r3, [r3]
 80046ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80046b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80046b6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	461a      	mov	r2, r3
 80046c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80046c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80046c6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80046ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80046cc:	e841 2300 	strex	r3, r2, [r1]
 80046d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80046d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d1e4      	bne.n	80046a2 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	3308      	adds	r3, #8
 80046de:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e2:	e853 3f00 	ldrex	r3, [r3]
 80046e6:	623b      	str	r3, [r7, #32]
   return(result);
 80046e8:	6a3b      	ldr	r3, [r7, #32]
 80046ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046ee:	f023 0301 	bic.w	r3, r3, #1
 80046f2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	3308      	adds	r3, #8
 80046fc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004700:	633a      	str	r2, [r7, #48]	@ 0x30
 8004702:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004704:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004706:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004708:	e841 2300 	strex	r3, r2, [r1]
 800470c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800470e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004710:	2b00      	cmp	r3, #0
 8004712:	d1e1      	bne.n	80046d8 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2220      	movs	r2, #32
 8004718:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	e853 3f00 	ldrex	r3, [r3]
 8004734:	60fb      	str	r3, [r7, #12]
   return(result);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f023 0310 	bic.w	r3, r3, #16
 800473c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	461a      	mov	r2, r3
 8004746:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800474a:	61fb      	str	r3, [r7, #28]
 800474c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474e:	69b9      	ldr	r1, [r7, #24]
 8004750:	69fa      	ldr	r2, [r7, #28]
 8004752:	e841 2300 	strex	r3, r2, [r1]
 8004756:	617b      	str	r3, [r7, #20]
   return(result);
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1e4      	bne.n	8004728 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2202      	movs	r2, #2
 8004762:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004764:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004768:	4619      	mov	r1, r3
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 f880 	bl	8004870 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004770:	e063      	b.n	800483a <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004776:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00e      	beq.n	800479c <HAL_UART_IRQHandler+0x5d8>
 800477e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004782:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d008      	beq.n	800479c <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004792:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f000 fdcf 	bl	8005338 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800479a:	e051      	b.n	8004840 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800479c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d014      	beq.n	80047d2 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80047a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d105      	bne.n	80047c0 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80047b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80047b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d008      	beq.n	80047d2 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d03a      	beq.n	800483e <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	4798      	blx	r3
    }
    return;
 80047d0:	e035      	b.n	800483e <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80047d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d009      	beq.n	80047f2 <HAL_UART_IRQHandler+0x62e>
 80047de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d003      	beq.n	80047f2 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 fd79 	bl	80052e2 <UART_EndTransmit_IT>
    return;
 80047f0:	e026      	b.n	8004840 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80047f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d009      	beq.n	8004812 <HAL_UART_IRQHandler+0x64e>
 80047fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004802:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d003      	beq.n	8004812 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 fda8 	bl	8005360 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004810:	e016      	b.n	8004840 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004816:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d010      	beq.n	8004840 <HAL_UART_IRQHandler+0x67c>
 800481e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004822:	2b00      	cmp	r3, #0
 8004824:	da0c      	bge.n	8004840 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 fd90 	bl	800534c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800482c:	e008      	b.n	8004840 <HAL_UART_IRQHandler+0x67c>
      return;
 800482e:	bf00      	nop
 8004830:	e006      	b.n	8004840 <HAL_UART_IRQHandler+0x67c>
    return;
 8004832:	bf00      	nop
 8004834:	e004      	b.n	8004840 <HAL_UART_IRQHandler+0x67c>
      return;
 8004836:	bf00      	nop
 8004838:	e002      	b.n	8004840 <HAL_UART_IRQHandler+0x67c>
      return;
 800483a:	bf00      	nop
 800483c:	e000      	b.n	8004840 <HAL_UART_IRQHandler+0x67c>
    return;
 800483e:	bf00      	nop
  }
}
 8004840:	37e8      	adds	r7, #232	@ 0xe8
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop

08004848 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004850:	bf00      	nop
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004864:	bf00      	nop
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	460b      	mov	r3, r1
 800487a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800487c:	bf00      	nop
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004888:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800488c:	b08c      	sub	sp, #48	@ 0x30
 800488e:	af00      	add	r7, sp, #0
 8004890:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004892:	2300      	movs	r3, #0
 8004894:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	689a      	ldr	r2, [r3, #8]
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	431a      	orrs	r2, r3
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	431a      	orrs	r2, r3
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	69db      	ldr	r3, [r3, #28]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	4baa      	ldr	r3, [pc, #680]	@ (8004b60 <UART_SetConfig+0x2d8>)
 80048b8:	4013      	ands	r3, r2
 80048ba:	697a      	ldr	r2, [r7, #20]
 80048bc:	6812      	ldr	r2, [r2, #0]
 80048be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80048c0:	430b      	orrs	r3, r1
 80048c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	68da      	ldr	r2, [r3, #12]
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	430a      	orrs	r2, r1
 80048d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	699b      	ldr	r3, [r3, #24]
 80048de:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a9f      	ldr	r2, [pc, #636]	@ (8004b64 <UART_SetConfig+0x2dc>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d004      	beq.n	80048f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	6a1b      	ldr	r3, [r3, #32]
 80048ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048f0:	4313      	orrs	r3, r2
 80048f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80048fe:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004902:	697a      	ldr	r2, [r7, #20]
 8004904:	6812      	ldr	r2, [r2, #0]
 8004906:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004908:	430b      	orrs	r3, r1
 800490a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004912:	f023 010f 	bic.w	r1, r3, #15
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	430a      	orrs	r2, r1
 8004920:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a90      	ldr	r2, [pc, #576]	@ (8004b68 <UART_SetConfig+0x2e0>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d125      	bne.n	8004978 <UART_SetConfig+0xf0>
 800492c:	4b8f      	ldr	r3, [pc, #572]	@ (8004b6c <UART_SetConfig+0x2e4>)
 800492e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004932:	f003 0303 	and.w	r3, r3, #3
 8004936:	2b03      	cmp	r3, #3
 8004938:	d81a      	bhi.n	8004970 <UART_SetConfig+0xe8>
 800493a:	a201      	add	r2, pc, #4	@ (adr r2, 8004940 <UART_SetConfig+0xb8>)
 800493c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004940:	08004951 	.word	0x08004951
 8004944:	08004961 	.word	0x08004961
 8004948:	08004959 	.word	0x08004959
 800494c:	08004969 	.word	0x08004969
 8004950:	2301      	movs	r3, #1
 8004952:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004956:	e116      	b.n	8004b86 <UART_SetConfig+0x2fe>
 8004958:	2302      	movs	r3, #2
 800495a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800495e:	e112      	b.n	8004b86 <UART_SetConfig+0x2fe>
 8004960:	2304      	movs	r3, #4
 8004962:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004966:	e10e      	b.n	8004b86 <UART_SetConfig+0x2fe>
 8004968:	2308      	movs	r3, #8
 800496a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800496e:	e10a      	b.n	8004b86 <UART_SetConfig+0x2fe>
 8004970:	2310      	movs	r3, #16
 8004972:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004976:	e106      	b.n	8004b86 <UART_SetConfig+0x2fe>
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a7c      	ldr	r2, [pc, #496]	@ (8004b70 <UART_SetConfig+0x2e8>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d138      	bne.n	80049f4 <UART_SetConfig+0x16c>
 8004982:	4b7a      	ldr	r3, [pc, #488]	@ (8004b6c <UART_SetConfig+0x2e4>)
 8004984:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004988:	f003 030c 	and.w	r3, r3, #12
 800498c:	2b0c      	cmp	r3, #12
 800498e:	d82d      	bhi.n	80049ec <UART_SetConfig+0x164>
 8004990:	a201      	add	r2, pc, #4	@ (adr r2, 8004998 <UART_SetConfig+0x110>)
 8004992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004996:	bf00      	nop
 8004998:	080049cd 	.word	0x080049cd
 800499c:	080049ed 	.word	0x080049ed
 80049a0:	080049ed 	.word	0x080049ed
 80049a4:	080049ed 	.word	0x080049ed
 80049a8:	080049dd 	.word	0x080049dd
 80049ac:	080049ed 	.word	0x080049ed
 80049b0:	080049ed 	.word	0x080049ed
 80049b4:	080049ed 	.word	0x080049ed
 80049b8:	080049d5 	.word	0x080049d5
 80049bc:	080049ed 	.word	0x080049ed
 80049c0:	080049ed 	.word	0x080049ed
 80049c4:	080049ed 	.word	0x080049ed
 80049c8:	080049e5 	.word	0x080049e5
 80049cc:	2300      	movs	r3, #0
 80049ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049d2:	e0d8      	b.n	8004b86 <UART_SetConfig+0x2fe>
 80049d4:	2302      	movs	r3, #2
 80049d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049da:	e0d4      	b.n	8004b86 <UART_SetConfig+0x2fe>
 80049dc:	2304      	movs	r3, #4
 80049de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049e2:	e0d0      	b.n	8004b86 <UART_SetConfig+0x2fe>
 80049e4:	2308      	movs	r3, #8
 80049e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049ea:	e0cc      	b.n	8004b86 <UART_SetConfig+0x2fe>
 80049ec:	2310      	movs	r3, #16
 80049ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049f2:	e0c8      	b.n	8004b86 <UART_SetConfig+0x2fe>
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a5e      	ldr	r2, [pc, #376]	@ (8004b74 <UART_SetConfig+0x2ec>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d125      	bne.n	8004a4a <UART_SetConfig+0x1c2>
 80049fe:	4b5b      	ldr	r3, [pc, #364]	@ (8004b6c <UART_SetConfig+0x2e4>)
 8004a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a04:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004a08:	2b30      	cmp	r3, #48	@ 0x30
 8004a0a:	d016      	beq.n	8004a3a <UART_SetConfig+0x1b2>
 8004a0c:	2b30      	cmp	r3, #48	@ 0x30
 8004a0e:	d818      	bhi.n	8004a42 <UART_SetConfig+0x1ba>
 8004a10:	2b20      	cmp	r3, #32
 8004a12:	d00a      	beq.n	8004a2a <UART_SetConfig+0x1a2>
 8004a14:	2b20      	cmp	r3, #32
 8004a16:	d814      	bhi.n	8004a42 <UART_SetConfig+0x1ba>
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d002      	beq.n	8004a22 <UART_SetConfig+0x19a>
 8004a1c:	2b10      	cmp	r3, #16
 8004a1e:	d008      	beq.n	8004a32 <UART_SetConfig+0x1aa>
 8004a20:	e00f      	b.n	8004a42 <UART_SetConfig+0x1ba>
 8004a22:	2300      	movs	r3, #0
 8004a24:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a28:	e0ad      	b.n	8004b86 <UART_SetConfig+0x2fe>
 8004a2a:	2302      	movs	r3, #2
 8004a2c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a30:	e0a9      	b.n	8004b86 <UART_SetConfig+0x2fe>
 8004a32:	2304      	movs	r3, #4
 8004a34:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a38:	e0a5      	b.n	8004b86 <UART_SetConfig+0x2fe>
 8004a3a:	2308      	movs	r3, #8
 8004a3c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a40:	e0a1      	b.n	8004b86 <UART_SetConfig+0x2fe>
 8004a42:	2310      	movs	r3, #16
 8004a44:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a48:	e09d      	b.n	8004b86 <UART_SetConfig+0x2fe>
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a4a      	ldr	r2, [pc, #296]	@ (8004b78 <UART_SetConfig+0x2f0>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d125      	bne.n	8004aa0 <UART_SetConfig+0x218>
 8004a54:	4b45      	ldr	r3, [pc, #276]	@ (8004b6c <UART_SetConfig+0x2e4>)
 8004a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a5a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004a5e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a60:	d016      	beq.n	8004a90 <UART_SetConfig+0x208>
 8004a62:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a64:	d818      	bhi.n	8004a98 <UART_SetConfig+0x210>
 8004a66:	2b80      	cmp	r3, #128	@ 0x80
 8004a68:	d00a      	beq.n	8004a80 <UART_SetConfig+0x1f8>
 8004a6a:	2b80      	cmp	r3, #128	@ 0x80
 8004a6c:	d814      	bhi.n	8004a98 <UART_SetConfig+0x210>
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d002      	beq.n	8004a78 <UART_SetConfig+0x1f0>
 8004a72:	2b40      	cmp	r3, #64	@ 0x40
 8004a74:	d008      	beq.n	8004a88 <UART_SetConfig+0x200>
 8004a76:	e00f      	b.n	8004a98 <UART_SetConfig+0x210>
 8004a78:	2300      	movs	r3, #0
 8004a7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a7e:	e082      	b.n	8004b86 <UART_SetConfig+0x2fe>
 8004a80:	2302      	movs	r3, #2
 8004a82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a86:	e07e      	b.n	8004b86 <UART_SetConfig+0x2fe>
 8004a88:	2304      	movs	r3, #4
 8004a8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a8e:	e07a      	b.n	8004b86 <UART_SetConfig+0x2fe>
 8004a90:	2308      	movs	r3, #8
 8004a92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a96:	e076      	b.n	8004b86 <UART_SetConfig+0x2fe>
 8004a98:	2310      	movs	r3, #16
 8004a9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a9e:	e072      	b.n	8004b86 <UART_SetConfig+0x2fe>
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a35      	ldr	r2, [pc, #212]	@ (8004b7c <UART_SetConfig+0x2f4>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d12a      	bne.n	8004b00 <UART_SetConfig+0x278>
 8004aaa:	4b30      	ldr	r3, [pc, #192]	@ (8004b6c <UART_SetConfig+0x2e4>)
 8004aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ab0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ab4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ab8:	d01a      	beq.n	8004af0 <UART_SetConfig+0x268>
 8004aba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004abe:	d81b      	bhi.n	8004af8 <UART_SetConfig+0x270>
 8004ac0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ac4:	d00c      	beq.n	8004ae0 <UART_SetConfig+0x258>
 8004ac6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004aca:	d815      	bhi.n	8004af8 <UART_SetConfig+0x270>
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d003      	beq.n	8004ad8 <UART_SetConfig+0x250>
 8004ad0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ad4:	d008      	beq.n	8004ae8 <UART_SetConfig+0x260>
 8004ad6:	e00f      	b.n	8004af8 <UART_SetConfig+0x270>
 8004ad8:	2300      	movs	r3, #0
 8004ada:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ade:	e052      	b.n	8004b86 <UART_SetConfig+0x2fe>
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ae6:	e04e      	b.n	8004b86 <UART_SetConfig+0x2fe>
 8004ae8:	2304      	movs	r3, #4
 8004aea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004aee:	e04a      	b.n	8004b86 <UART_SetConfig+0x2fe>
 8004af0:	2308      	movs	r3, #8
 8004af2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004af6:	e046      	b.n	8004b86 <UART_SetConfig+0x2fe>
 8004af8:	2310      	movs	r3, #16
 8004afa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004afe:	e042      	b.n	8004b86 <UART_SetConfig+0x2fe>
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a17      	ldr	r2, [pc, #92]	@ (8004b64 <UART_SetConfig+0x2dc>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d13a      	bne.n	8004b80 <UART_SetConfig+0x2f8>
 8004b0a:	4b18      	ldr	r3, [pc, #96]	@ (8004b6c <UART_SetConfig+0x2e4>)
 8004b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b10:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004b14:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004b18:	d01a      	beq.n	8004b50 <UART_SetConfig+0x2c8>
 8004b1a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004b1e:	d81b      	bhi.n	8004b58 <UART_SetConfig+0x2d0>
 8004b20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b24:	d00c      	beq.n	8004b40 <UART_SetConfig+0x2b8>
 8004b26:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b2a:	d815      	bhi.n	8004b58 <UART_SetConfig+0x2d0>
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d003      	beq.n	8004b38 <UART_SetConfig+0x2b0>
 8004b30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b34:	d008      	beq.n	8004b48 <UART_SetConfig+0x2c0>
 8004b36:	e00f      	b.n	8004b58 <UART_SetConfig+0x2d0>
 8004b38:	2300      	movs	r3, #0
 8004b3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b3e:	e022      	b.n	8004b86 <UART_SetConfig+0x2fe>
 8004b40:	2302      	movs	r3, #2
 8004b42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b46:	e01e      	b.n	8004b86 <UART_SetConfig+0x2fe>
 8004b48:	2304      	movs	r3, #4
 8004b4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b4e:	e01a      	b.n	8004b86 <UART_SetConfig+0x2fe>
 8004b50:	2308      	movs	r3, #8
 8004b52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b56:	e016      	b.n	8004b86 <UART_SetConfig+0x2fe>
 8004b58:	2310      	movs	r3, #16
 8004b5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b5e:	e012      	b.n	8004b86 <UART_SetConfig+0x2fe>
 8004b60:	cfff69f3 	.word	0xcfff69f3
 8004b64:	40008000 	.word	0x40008000
 8004b68:	40013800 	.word	0x40013800
 8004b6c:	40021000 	.word	0x40021000
 8004b70:	40004400 	.word	0x40004400
 8004b74:	40004800 	.word	0x40004800
 8004b78:	40004c00 	.word	0x40004c00
 8004b7c:	40005000 	.word	0x40005000
 8004b80:	2310      	movs	r3, #16
 8004b82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4aae      	ldr	r2, [pc, #696]	@ (8004e44 <UART_SetConfig+0x5bc>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	f040 8097 	bne.w	8004cc0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004b92:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004b96:	2b08      	cmp	r3, #8
 8004b98:	d823      	bhi.n	8004be2 <UART_SetConfig+0x35a>
 8004b9a:	a201      	add	r2, pc, #4	@ (adr r2, 8004ba0 <UART_SetConfig+0x318>)
 8004b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba0:	08004bc5 	.word	0x08004bc5
 8004ba4:	08004be3 	.word	0x08004be3
 8004ba8:	08004bcd 	.word	0x08004bcd
 8004bac:	08004be3 	.word	0x08004be3
 8004bb0:	08004bd3 	.word	0x08004bd3
 8004bb4:	08004be3 	.word	0x08004be3
 8004bb8:	08004be3 	.word	0x08004be3
 8004bbc:	08004be3 	.word	0x08004be3
 8004bc0:	08004bdb 	.word	0x08004bdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bc4:	f7fe fa12 	bl	8002fec <HAL_RCC_GetPCLK1Freq>
 8004bc8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004bca:	e010      	b.n	8004bee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bcc:	4b9e      	ldr	r3, [pc, #632]	@ (8004e48 <UART_SetConfig+0x5c0>)
 8004bce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004bd0:	e00d      	b.n	8004bee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bd2:	f7fe f99d 	bl	8002f10 <HAL_RCC_GetSysClockFreq>
 8004bd6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004bd8:	e009      	b.n	8004bee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004bde:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004be0:	e005      	b.n	8004bee <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004be2:	2300      	movs	r3, #0
 8004be4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004bec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	f000 8130 	beq.w	8004e56 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bfa:	4a94      	ldr	r2, [pc, #592]	@ (8004e4c <UART_SetConfig+0x5c4>)
 8004bfc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c00:	461a      	mov	r2, r3
 8004c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c04:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c08:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	685a      	ldr	r2, [r3, #4]
 8004c0e:	4613      	mov	r3, r2
 8004c10:	005b      	lsls	r3, r3, #1
 8004c12:	4413      	add	r3, r2
 8004c14:	69ba      	ldr	r2, [r7, #24]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d305      	bcc.n	8004c26 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c20:	69ba      	ldr	r2, [r7, #24]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d903      	bls.n	8004c2e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004c2c:	e113      	b.n	8004e56 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c30:	2200      	movs	r2, #0
 8004c32:	60bb      	str	r3, [r7, #8]
 8004c34:	60fa      	str	r2, [r7, #12]
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c3a:	4a84      	ldr	r2, [pc, #528]	@ (8004e4c <UART_SetConfig+0x5c4>)
 8004c3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	2200      	movs	r2, #0
 8004c44:	603b      	str	r3, [r7, #0]
 8004c46:	607a      	str	r2, [r7, #4]
 8004c48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c4c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004c50:	f7fc f842 	bl	8000cd8 <__aeabi_uldivmod>
 8004c54:	4602      	mov	r2, r0
 8004c56:	460b      	mov	r3, r1
 8004c58:	4610      	mov	r0, r2
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	f04f 0200 	mov.w	r2, #0
 8004c60:	f04f 0300 	mov.w	r3, #0
 8004c64:	020b      	lsls	r3, r1, #8
 8004c66:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004c6a:	0202      	lsls	r2, r0, #8
 8004c6c:	6979      	ldr	r1, [r7, #20]
 8004c6e:	6849      	ldr	r1, [r1, #4]
 8004c70:	0849      	lsrs	r1, r1, #1
 8004c72:	2000      	movs	r0, #0
 8004c74:	460c      	mov	r4, r1
 8004c76:	4605      	mov	r5, r0
 8004c78:	eb12 0804 	adds.w	r8, r2, r4
 8004c7c:	eb43 0905 	adc.w	r9, r3, r5
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	469a      	mov	sl, r3
 8004c88:	4693      	mov	fp, r2
 8004c8a:	4652      	mov	r2, sl
 8004c8c:	465b      	mov	r3, fp
 8004c8e:	4640      	mov	r0, r8
 8004c90:	4649      	mov	r1, r9
 8004c92:	f7fc f821 	bl	8000cd8 <__aeabi_uldivmod>
 8004c96:	4602      	mov	r2, r0
 8004c98:	460b      	mov	r3, r1
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004c9e:	6a3b      	ldr	r3, [r7, #32]
 8004ca0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ca4:	d308      	bcc.n	8004cb8 <UART_SetConfig+0x430>
 8004ca6:	6a3b      	ldr	r3, [r7, #32]
 8004ca8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004cac:	d204      	bcs.n	8004cb8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	6a3a      	ldr	r2, [r7, #32]
 8004cb4:	60da      	str	r2, [r3, #12]
 8004cb6:	e0ce      	b.n	8004e56 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004cbe:	e0ca      	b.n	8004e56 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	69db      	ldr	r3, [r3, #28]
 8004cc4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cc8:	d166      	bne.n	8004d98 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004cca:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004cce:	2b08      	cmp	r3, #8
 8004cd0:	d827      	bhi.n	8004d22 <UART_SetConfig+0x49a>
 8004cd2:	a201      	add	r2, pc, #4	@ (adr r2, 8004cd8 <UART_SetConfig+0x450>)
 8004cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cd8:	08004cfd 	.word	0x08004cfd
 8004cdc:	08004d05 	.word	0x08004d05
 8004ce0:	08004d0d 	.word	0x08004d0d
 8004ce4:	08004d23 	.word	0x08004d23
 8004ce8:	08004d13 	.word	0x08004d13
 8004cec:	08004d23 	.word	0x08004d23
 8004cf0:	08004d23 	.word	0x08004d23
 8004cf4:	08004d23 	.word	0x08004d23
 8004cf8:	08004d1b 	.word	0x08004d1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cfc:	f7fe f976 	bl	8002fec <HAL_RCC_GetPCLK1Freq>
 8004d00:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004d02:	e014      	b.n	8004d2e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d04:	f7fe f988 	bl	8003018 <HAL_RCC_GetPCLK2Freq>
 8004d08:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004d0a:	e010      	b.n	8004d2e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d0c:	4b4e      	ldr	r3, [pc, #312]	@ (8004e48 <UART_SetConfig+0x5c0>)
 8004d0e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004d10:	e00d      	b.n	8004d2e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d12:	f7fe f8fd 	bl	8002f10 <HAL_RCC_GetSysClockFreq>
 8004d16:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004d18:	e009      	b.n	8004d2e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d1e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004d20:	e005      	b.n	8004d2e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004d22:	2300      	movs	r3, #0
 8004d24:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004d2c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	f000 8090 	beq.w	8004e56 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d3a:	4a44      	ldr	r2, [pc, #272]	@ (8004e4c <UART_SetConfig+0x5c4>)
 8004d3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d40:	461a      	mov	r2, r3
 8004d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d44:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d48:	005a      	lsls	r2, r3, #1
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	085b      	lsrs	r3, r3, #1
 8004d50:	441a      	add	r2, r3
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d5a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d5c:	6a3b      	ldr	r3, [r7, #32]
 8004d5e:	2b0f      	cmp	r3, #15
 8004d60:	d916      	bls.n	8004d90 <UART_SetConfig+0x508>
 8004d62:	6a3b      	ldr	r3, [r7, #32]
 8004d64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d68:	d212      	bcs.n	8004d90 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d6a:	6a3b      	ldr	r3, [r7, #32]
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	f023 030f 	bic.w	r3, r3, #15
 8004d72:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d74:	6a3b      	ldr	r3, [r7, #32]
 8004d76:	085b      	lsrs	r3, r3, #1
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	f003 0307 	and.w	r3, r3, #7
 8004d7e:	b29a      	uxth	r2, r3
 8004d80:	8bfb      	ldrh	r3, [r7, #30]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	8bfa      	ldrh	r2, [r7, #30]
 8004d8c:	60da      	str	r2, [r3, #12]
 8004d8e:	e062      	b.n	8004e56 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004d96:	e05e      	b.n	8004e56 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d98:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004d9c:	2b08      	cmp	r3, #8
 8004d9e:	d828      	bhi.n	8004df2 <UART_SetConfig+0x56a>
 8004da0:	a201      	add	r2, pc, #4	@ (adr r2, 8004da8 <UART_SetConfig+0x520>)
 8004da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da6:	bf00      	nop
 8004da8:	08004dcd 	.word	0x08004dcd
 8004dac:	08004dd5 	.word	0x08004dd5
 8004db0:	08004ddd 	.word	0x08004ddd
 8004db4:	08004df3 	.word	0x08004df3
 8004db8:	08004de3 	.word	0x08004de3
 8004dbc:	08004df3 	.word	0x08004df3
 8004dc0:	08004df3 	.word	0x08004df3
 8004dc4:	08004df3 	.word	0x08004df3
 8004dc8:	08004deb 	.word	0x08004deb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dcc:	f7fe f90e 	bl	8002fec <HAL_RCC_GetPCLK1Freq>
 8004dd0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004dd2:	e014      	b.n	8004dfe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004dd4:	f7fe f920 	bl	8003018 <HAL_RCC_GetPCLK2Freq>
 8004dd8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004dda:	e010      	b.n	8004dfe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ddc:	4b1a      	ldr	r3, [pc, #104]	@ (8004e48 <UART_SetConfig+0x5c0>)
 8004dde:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004de0:	e00d      	b.n	8004dfe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004de2:	f7fe f895 	bl	8002f10 <HAL_RCC_GetSysClockFreq>
 8004de6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004de8:	e009      	b.n	8004dfe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004dee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004df0:	e005      	b.n	8004dfe <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004df2:	2300      	movs	r3, #0
 8004df4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004dfc:	bf00      	nop
    }

    if (pclk != 0U)
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d028      	beq.n	8004e56 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e08:	4a10      	ldr	r2, [pc, #64]	@ (8004e4c <UART_SetConfig+0x5c4>)
 8004e0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e0e:	461a      	mov	r2, r3
 8004e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e12:	fbb3 f2f2 	udiv	r2, r3, r2
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	085b      	lsrs	r3, r3, #1
 8004e1c:	441a      	add	r2, r3
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e26:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e28:	6a3b      	ldr	r3, [r7, #32]
 8004e2a:	2b0f      	cmp	r3, #15
 8004e2c:	d910      	bls.n	8004e50 <UART_SetConfig+0x5c8>
 8004e2e:	6a3b      	ldr	r3, [r7, #32]
 8004e30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e34:	d20c      	bcs.n	8004e50 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e36:	6a3b      	ldr	r3, [r7, #32]
 8004e38:	b29a      	uxth	r2, r3
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	60da      	str	r2, [r3, #12]
 8004e40:	e009      	b.n	8004e56 <UART_SetConfig+0x5ce>
 8004e42:	bf00      	nop
 8004e44:	40008000 	.word	0x40008000
 8004e48:	00f42400 	.word	0x00f42400
 8004e4c:	08009d64 	.word	0x08009d64
      }
      else
      {
        ret = HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	2201      	movs	r2, #1
 8004e62:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004e72:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3730      	adds	r7, #48	@ 0x30
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004e80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e8c:	f003 0308 	and.w	r3, r3, #8
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d00a      	beq.n	8004eaa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	430a      	orrs	r2, r1
 8004ea8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eae:	f003 0301 	and.w	r3, r3, #1
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00a      	beq.n	8004ecc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	430a      	orrs	r2, r1
 8004eca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ed0:	f003 0302 	and.w	r3, r3, #2
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00a      	beq.n	8004eee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	430a      	orrs	r2, r1
 8004eec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ef2:	f003 0304 	and.w	r3, r3, #4
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00a      	beq.n	8004f10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f14:	f003 0310 	and.w	r3, r3, #16
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00a      	beq.n	8004f32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f36:	f003 0320 	and.w	r3, r3, #32
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00a      	beq.n	8004f54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	430a      	orrs	r2, r1
 8004f52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d01a      	beq.n	8004f96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	430a      	orrs	r2, r1
 8004f74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f7e:	d10a      	bne.n	8004f96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	430a      	orrs	r2, r1
 8004f94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00a      	beq.n	8004fb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	430a      	orrs	r2, r1
 8004fb6:	605a      	str	r2, [r3, #4]
  }
}
 8004fb8:	bf00      	nop
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b098      	sub	sp, #96	@ 0x60
 8004fc8:	af02      	add	r7, sp, #8
 8004fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004fd4:	f7fc fe98 	bl	8001d08 <HAL_GetTick>
 8004fd8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 0308 	and.w	r3, r3, #8
 8004fe4:	2b08      	cmp	r3, #8
 8004fe6:	d12f      	bne.n	8005048 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fe8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004fec:	9300      	str	r3, [sp, #0]
 8004fee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 f88e 	bl	8005118 <UART_WaitOnFlagUntilTimeout>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d022      	beq.n	8005048 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800500a:	e853 3f00 	ldrex	r3, [r3]
 800500e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005010:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005012:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005016:	653b      	str	r3, [r7, #80]	@ 0x50
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	461a      	mov	r2, r3
 800501e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005020:	647b      	str	r3, [r7, #68]	@ 0x44
 8005022:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005024:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005026:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005028:	e841 2300 	strex	r3, r2, [r1]
 800502c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800502e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005030:	2b00      	cmp	r3, #0
 8005032:	d1e6      	bne.n	8005002 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2220      	movs	r2, #32
 8005038:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	e063      	b.n	8005110 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0304 	and.w	r3, r3, #4
 8005052:	2b04      	cmp	r3, #4
 8005054:	d149      	bne.n	80050ea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005056:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800505a:	9300      	str	r3, [sp, #0]
 800505c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800505e:	2200      	movs	r2, #0
 8005060:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f000 f857 	bl	8005118 <UART_WaitOnFlagUntilTimeout>
 800506a:	4603      	mov	r3, r0
 800506c:	2b00      	cmp	r3, #0
 800506e:	d03c      	beq.n	80050ea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005078:	e853 3f00 	ldrex	r3, [r3]
 800507c:	623b      	str	r3, [r7, #32]
   return(result);
 800507e:	6a3b      	ldr	r3, [r7, #32]
 8005080:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005084:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	461a      	mov	r2, r3
 800508c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800508e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005090:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005092:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005094:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005096:	e841 2300 	strex	r3, r2, [r1]
 800509a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800509c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d1e6      	bne.n	8005070 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	3308      	adds	r3, #8
 80050a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	e853 3f00 	ldrex	r3, [r3]
 80050b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f023 0301 	bic.w	r3, r3, #1
 80050b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	3308      	adds	r3, #8
 80050c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80050c2:	61fa      	str	r2, [r7, #28]
 80050c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c6:	69b9      	ldr	r1, [r7, #24]
 80050c8:	69fa      	ldr	r2, [r7, #28]
 80050ca:	e841 2300 	strex	r3, r2, [r1]
 80050ce:	617b      	str	r3, [r7, #20]
   return(result);
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d1e5      	bne.n	80050a2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2220      	movs	r2, #32
 80050da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e012      	b.n	8005110 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2220      	movs	r2, #32
 80050ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2220      	movs	r2, #32
 80050f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800510e:	2300      	movs	r3, #0
}
 8005110:	4618      	mov	r0, r3
 8005112:	3758      	adds	r7, #88	@ 0x58
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}

08005118 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	603b      	str	r3, [r7, #0]
 8005124:	4613      	mov	r3, r2
 8005126:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005128:	e04f      	b.n	80051ca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005130:	d04b      	beq.n	80051ca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005132:	f7fc fde9 	bl	8001d08 <HAL_GetTick>
 8005136:	4602      	mov	r2, r0
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	69ba      	ldr	r2, [r7, #24]
 800513e:	429a      	cmp	r2, r3
 8005140:	d302      	bcc.n	8005148 <UART_WaitOnFlagUntilTimeout+0x30>
 8005142:	69bb      	ldr	r3, [r7, #24]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d101      	bne.n	800514c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e04e      	b.n	80051ea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 0304 	and.w	r3, r3, #4
 8005156:	2b00      	cmp	r3, #0
 8005158:	d037      	beq.n	80051ca <UART_WaitOnFlagUntilTimeout+0xb2>
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	2b80      	cmp	r3, #128	@ 0x80
 800515e:	d034      	beq.n	80051ca <UART_WaitOnFlagUntilTimeout+0xb2>
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	2b40      	cmp	r3, #64	@ 0x40
 8005164:	d031      	beq.n	80051ca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	69db      	ldr	r3, [r3, #28]
 800516c:	f003 0308 	and.w	r3, r3, #8
 8005170:	2b08      	cmp	r3, #8
 8005172:	d110      	bne.n	8005196 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2208      	movs	r2, #8
 800517a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800517c:	68f8      	ldr	r0, [r7, #12]
 800517e:	f000 f838 	bl	80051f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2208      	movs	r2, #8
 8005186:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e029      	b.n	80051ea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	69db      	ldr	r3, [r3, #28]
 800519c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051a4:	d111      	bne.n	80051ca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80051ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051b0:	68f8      	ldr	r0, [r7, #12]
 80051b2:	f000 f81e 	bl	80051f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2220      	movs	r2, #32
 80051ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80051c6:	2303      	movs	r3, #3
 80051c8:	e00f      	b.n	80051ea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	69da      	ldr	r2, [r3, #28]
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	4013      	ands	r3, r2
 80051d4:	68ba      	ldr	r2, [r7, #8]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	bf0c      	ite	eq
 80051da:	2301      	moveq	r3, #1
 80051dc:	2300      	movne	r3, #0
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	461a      	mov	r2, r3
 80051e2:	79fb      	ldrb	r3, [r7, #7]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d0a0      	beq.n	800512a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3710      	adds	r7, #16
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}

080051f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051f2:	b480      	push	{r7}
 80051f4:	b095      	sub	sp, #84	@ 0x54
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005200:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005202:	e853 3f00 	ldrex	r3, [r3]
 8005206:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800520a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800520e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	461a      	mov	r2, r3
 8005216:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005218:	643b      	str	r3, [r7, #64]	@ 0x40
 800521a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800521c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800521e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005220:	e841 2300 	strex	r3, r2, [r1]
 8005224:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005228:	2b00      	cmp	r3, #0
 800522a:	d1e6      	bne.n	80051fa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	3308      	adds	r3, #8
 8005232:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005234:	6a3b      	ldr	r3, [r7, #32]
 8005236:	e853 3f00 	ldrex	r3, [r3]
 800523a:	61fb      	str	r3, [r7, #28]
   return(result);
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005242:	f023 0301 	bic.w	r3, r3, #1
 8005246:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	3308      	adds	r3, #8
 800524e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005250:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005252:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005254:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005256:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005258:	e841 2300 	strex	r3, r2, [r1]
 800525c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800525e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005260:	2b00      	cmp	r3, #0
 8005262:	d1e3      	bne.n	800522c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005268:	2b01      	cmp	r3, #1
 800526a:	d118      	bne.n	800529e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	e853 3f00 	ldrex	r3, [r3]
 8005278:	60bb      	str	r3, [r7, #8]
   return(result);
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	f023 0310 	bic.w	r3, r3, #16
 8005280:	647b      	str	r3, [r7, #68]	@ 0x44
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	461a      	mov	r2, r3
 8005288:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800528a:	61bb      	str	r3, [r7, #24]
 800528c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800528e:	6979      	ldr	r1, [r7, #20]
 8005290:	69ba      	ldr	r2, [r7, #24]
 8005292:	e841 2300 	strex	r3, r2, [r1]
 8005296:	613b      	str	r3, [r7, #16]
   return(result);
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d1e6      	bne.n	800526c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2220      	movs	r2, #32
 80052a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80052b2:	bf00      	nop
 80052b4:	3754      	adds	r7, #84	@ 0x54
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr

080052be <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80052be:	b580      	push	{r7, lr}
 80052c0:	b084      	sub	sp, #16
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2200      	movs	r2, #0
 80052d0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80052d4:	68f8      	ldr	r0, [r7, #12]
 80052d6:	f7ff fac1 	bl	800485c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052da:	bf00      	nop
 80052dc:	3710      	adds	r7, #16
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}

080052e2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80052e2:	b580      	push	{r7, lr}
 80052e4:	b088      	sub	sp, #32
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	e853 3f00 	ldrex	r3, [r3]
 80052f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052fe:	61fb      	str	r3, [r7, #28]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	461a      	mov	r2, r3
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	61bb      	str	r3, [r7, #24]
 800530a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800530c:	6979      	ldr	r1, [r7, #20]
 800530e:	69ba      	ldr	r2, [r7, #24]
 8005310:	e841 2300 	strex	r3, r2, [r1]
 8005314:	613b      	str	r3, [r7, #16]
   return(result);
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d1e6      	bne.n	80052ea <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2220      	movs	r2, #32
 8005320:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f7ff fa8c 	bl	8004848 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005330:	bf00      	nop
 8005332:	3720      	adds	r7, #32
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}

08005338 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005340:	bf00      	nop
 8005342:	370c      	adds	r7, #12
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005354:	bf00      	nop
 8005356:	370c      	adds	r7, #12
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr

08005360 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005368:	bf00      	nop
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005374:	b480      	push	{r7}
 8005376:	b085      	sub	sp, #20
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005382:	2b01      	cmp	r3, #1
 8005384:	d101      	bne.n	800538a <HAL_UARTEx_DisableFifoMode+0x16>
 8005386:	2302      	movs	r3, #2
 8005388:	e027      	b.n	80053da <HAL_UARTEx_DisableFifoMode+0x66>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2201      	movs	r2, #1
 800538e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2224      	movs	r2, #36	@ 0x24
 8005396:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f022 0201 	bic.w	r2, r2, #1
 80053b0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80053b8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2220      	movs	r2, #32
 80053cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3714      	adds	r7, #20
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr

080053e6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80053e6:	b580      	push	{r7, lr}
 80053e8:	b084      	sub	sp, #16
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
 80053ee:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d101      	bne.n	80053fe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80053fa:	2302      	movs	r3, #2
 80053fc:	e02d      	b.n	800545a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2201      	movs	r2, #1
 8005402:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2224      	movs	r2, #36	@ 0x24
 800540a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f022 0201 	bic.w	r2, r2, #1
 8005424:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	683a      	ldr	r2, [r7, #0]
 8005436:	430a      	orrs	r2, r1
 8005438:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 f850 	bl	80054e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68fa      	ldr	r2, [r7, #12]
 8005446:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2220      	movs	r2, #32
 800544c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3710      	adds	r7, #16
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}

08005462 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005462:	b580      	push	{r7, lr}
 8005464:	b084      	sub	sp, #16
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
 800546a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005472:	2b01      	cmp	r3, #1
 8005474:	d101      	bne.n	800547a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005476:	2302      	movs	r3, #2
 8005478:	e02d      	b.n	80054d6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2201      	movs	r2, #1
 800547e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2224      	movs	r2, #36	@ 0x24
 8005486:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f022 0201 	bic.w	r2, r2, #1
 80054a0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	683a      	ldr	r2, [r7, #0]
 80054b2:	430a      	orrs	r2, r1
 80054b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 f812 	bl	80054e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68fa      	ldr	r2, [r7, #12]
 80054c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2220      	movs	r2, #32
 80054c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3710      	adds	r7, #16
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
	...

080054e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b085      	sub	sp, #20
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d108      	bne.n	8005502 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005500:	e031      	b.n	8005566 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005502:	2308      	movs	r3, #8
 8005504:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005506:	2308      	movs	r3, #8
 8005508:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	0e5b      	lsrs	r3, r3, #25
 8005512:	b2db      	uxtb	r3, r3
 8005514:	f003 0307 	and.w	r3, r3, #7
 8005518:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	0f5b      	lsrs	r3, r3, #29
 8005522:	b2db      	uxtb	r3, r3
 8005524:	f003 0307 	and.w	r3, r3, #7
 8005528:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800552a:	7bbb      	ldrb	r3, [r7, #14]
 800552c:	7b3a      	ldrb	r2, [r7, #12]
 800552e:	4911      	ldr	r1, [pc, #68]	@ (8005574 <UARTEx_SetNbDataToProcess+0x94>)
 8005530:	5c8a      	ldrb	r2, [r1, r2]
 8005532:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005536:	7b3a      	ldrb	r2, [r7, #12]
 8005538:	490f      	ldr	r1, [pc, #60]	@ (8005578 <UARTEx_SetNbDataToProcess+0x98>)
 800553a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800553c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005540:	b29a      	uxth	r2, r3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005548:	7bfb      	ldrb	r3, [r7, #15]
 800554a:	7b7a      	ldrb	r2, [r7, #13]
 800554c:	4909      	ldr	r1, [pc, #36]	@ (8005574 <UARTEx_SetNbDataToProcess+0x94>)
 800554e:	5c8a      	ldrb	r2, [r1, r2]
 8005550:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005554:	7b7a      	ldrb	r2, [r7, #13]
 8005556:	4908      	ldr	r1, [pc, #32]	@ (8005578 <UARTEx_SetNbDataToProcess+0x98>)
 8005558:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800555a:	fb93 f3f2 	sdiv	r3, r3, r2
 800555e:	b29a      	uxth	r2, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005566:	bf00      	nop
 8005568:	3714      	adds	r7, #20
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop
 8005574:	08009d7c 	.word	0x08009d7c
 8005578:	08009d84 	.word	0x08009d84

0800557c <__cvt>:
 800557c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005580:	ec57 6b10 	vmov	r6, r7, d0
 8005584:	2f00      	cmp	r7, #0
 8005586:	460c      	mov	r4, r1
 8005588:	4619      	mov	r1, r3
 800558a:	463b      	mov	r3, r7
 800558c:	bfbb      	ittet	lt
 800558e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005592:	461f      	movlt	r7, r3
 8005594:	2300      	movge	r3, #0
 8005596:	232d      	movlt	r3, #45	@ 0x2d
 8005598:	700b      	strb	r3, [r1, #0]
 800559a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800559c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80055a0:	4691      	mov	r9, r2
 80055a2:	f023 0820 	bic.w	r8, r3, #32
 80055a6:	bfbc      	itt	lt
 80055a8:	4632      	movlt	r2, r6
 80055aa:	4616      	movlt	r6, r2
 80055ac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80055b0:	d005      	beq.n	80055be <__cvt+0x42>
 80055b2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80055b6:	d100      	bne.n	80055ba <__cvt+0x3e>
 80055b8:	3401      	adds	r4, #1
 80055ba:	2102      	movs	r1, #2
 80055bc:	e000      	b.n	80055c0 <__cvt+0x44>
 80055be:	2103      	movs	r1, #3
 80055c0:	ab03      	add	r3, sp, #12
 80055c2:	9301      	str	r3, [sp, #4]
 80055c4:	ab02      	add	r3, sp, #8
 80055c6:	9300      	str	r3, [sp, #0]
 80055c8:	ec47 6b10 	vmov	d0, r6, r7
 80055cc:	4653      	mov	r3, sl
 80055ce:	4622      	mov	r2, r4
 80055d0:	f001 f876 	bl	80066c0 <_dtoa_r>
 80055d4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80055d8:	4605      	mov	r5, r0
 80055da:	d119      	bne.n	8005610 <__cvt+0x94>
 80055dc:	f019 0f01 	tst.w	r9, #1
 80055e0:	d00e      	beq.n	8005600 <__cvt+0x84>
 80055e2:	eb00 0904 	add.w	r9, r0, r4
 80055e6:	2200      	movs	r2, #0
 80055e8:	2300      	movs	r3, #0
 80055ea:	4630      	mov	r0, r6
 80055ec:	4639      	mov	r1, r7
 80055ee:	f7fb fa93 	bl	8000b18 <__aeabi_dcmpeq>
 80055f2:	b108      	cbz	r0, 80055f8 <__cvt+0x7c>
 80055f4:	f8cd 900c 	str.w	r9, [sp, #12]
 80055f8:	2230      	movs	r2, #48	@ 0x30
 80055fa:	9b03      	ldr	r3, [sp, #12]
 80055fc:	454b      	cmp	r3, r9
 80055fe:	d31e      	bcc.n	800563e <__cvt+0xc2>
 8005600:	9b03      	ldr	r3, [sp, #12]
 8005602:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005604:	1b5b      	subs	r3, r3, r5
 8005606:	4628      	mov	r0, r5
 8005608:	6013      	str	r3, [r2, #0]
 800560a:	b004      	add	sp, #16
 800560c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005610:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005614:	eb00 0904 	add.w	r9, r0, r4
 8005618:	d1e5      	bne.n	80055e6 <__cvt+0x6a>
 800561a:	7803      	ldrb	r3, [r0, #0]
 800561c:	2b30      	cmp	r3, #48	@ 0x30
 800561e:	d10a      	bne.n	8005636 <__cvt+0xba>
 8005620:	2200      	movs	r2, #0
 8005622:	2300      	movs	r3, #0
 8005624:	4630      	mov	r0, r6
 8005626:	4639      	mov	r1, r7
 8005628:	f7fb fa76 	bl	8000b18 <__aeabi_dcmpeq>
 800562c:	b918      	cbnz	r0, 8005636 <__cvt+0xba>
 800562e:	f1c4 0401 	rsb	r4, r4, #1
 8005632:	f8ca 4000 	str.w	r4, [sl]
 8005636:	f8da 3000 	ldr.w	r3, [sl]
 800563a:	4499      	add	r9, r3
 800563c:	e7d3      	b.n	80055e6 <__cvt+0x6a>
 800563e:	1c59      	adds	r1, r3, #1
 8005640:	9103      	str	r1, [sp, #12]
 8005642:	701a      	strb	r2, [r3, #0]
 8005644:	e7d9      	b.n	80055fa <__cvt+0x7e>

08005646 <__exponent>:
 8005646:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005648:	2900      	cmp	r1, #0
 800564a:	bfba      	itte	lt
 800564c:	4249      	neglt	r1, r1
 800564e:	232d      	movlt	r3, #45	@ 0x2d
 8005650:	232b      	movge	r3, #43	@ 0x2b
 8005652:	2909      	cmp	r1, #9
 8005654:	7002      	strb	r2, [r0, #0]
 8005656:	7043      	strb	r3, [r0, #1]
 8005658:	dd29      	ble.n	80056ae <__exponent+0x68>
 800565a:	f10d 0307 	add.w	r3, sp, #7
 800565e:	461d      	mov	r5, r3
 8005660:	270a      	movs	r7, #10
 8005662:	461a      	mov	r2, r3
 8005664:	fbb1 f6f7 	udiv	r6, r1, r7
 8005668:	fb07 1416 	mls	r4, r7, r6, r1
 800566c:	3430      	adds	r4, #48	@ 0x30
 800566e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005672:	460c      	mov	r4, r1
 8005674:	2c63      	cmp	r4, #99	@ 0x63
 8005676:	f103 33ff 	add.w	r3, r3, #4294967295
 800567a:	4631      	mov	r1, r6
 800567c:	dcf1      	bgt.n	8005662 <__exponent+0x1c>
 800567e:	3130      	adds	r1, #48	@ 0x30
 8005680:	1e94      	subs	r4, r2, #2
 8005682:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005686:	1c41      	adds	r1, r0, #1
 8005688:	4623      	mov	r3, r4
 800568a:	42ab      	cmp	r3, r5
 800568c:	d30a      	bcc.n	80056a4 <__exponent+0x5e>
 800568e:	f10d 0309 	add.w	r3, sp, #9
 8005692:	1a9b      	subs	r3, r3, r2
 8005694:	42ac      	cmp	r4, r5
 8005696:	bf88      	it	hi
 8005698:	2300      	movhi	r3, #0
 800569a:	3302      	adds	r3, #2
 800569c:	4403      	add	r3, r0
 800569e:	1a18      	subs	r0, r3, r0
 80056a0:	b003      	add	sp, #12
 80056a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056a4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80056a8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80056ac:	e7ed      	b.n	800568a <__exponent+0x44>
 80056ae:	2330      	movs	r3, #48	@ 0x30
 80056b0:	3130      	adds	r1, #48	@ 0x30
 80056b2:	7083      	strb	r3, [r0, #2]
 80056b4:	70c1      	strb	r1, [r0, #3]
 80056b6:	1d03      	adds	r3, r0, #4
 80056b8:	e7f1      	b.n	800569e <__exponent+0x58>
	...

080056bc <_printf_float>:
 80056bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056c0:	b08d      	sub	sp, #52	@ 0x34
 80056c2:	460c      	mov	r4, r1
 80056c4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80056c8:	4616      	mov	r6, r2
 80056ca:	461f      	mov	r7, r3
 80056cc:	4605      	mov	r5, r0
 80056ce:	f000 fee9 	bl	80064a4 <_localeconv_r>
 80056d2:	6803      	ldr	r3, [r0, #0]
 80056d4:	9304      	str	r3, [sp, #16]
 80056d6:	4618      	mov	r0, r3
 80056d8:	f7fa fdf2 	bl	80002c0 <strlen>
 80056dc:	2300      	movs	r3, #0
 80056de:	930a      	str	r3, [sp, #40]	@ 0x28
 80056e0:	f8d8 3000 	ldr.w	r3, [r8]
 80056e4:	9005      	str	r0, [sp, #20]
 80056e6:	3307      	adds	r3, #7
 80056e8:	f023 0307 	bic.w	r3, r3, #7
 80056ec:	f103 0208 	add.w	r2, r3, #8
 80056f0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80056f4:	f8d4 b000 	ldr.w	fp, [r4]
 80056f8:	f8c8 2000 	str.w	r2, [r8]
 80056fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005700:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005704:	9307      	str	r3, [sp, #28]
 8005706:	f8cd 8018 	str.w	r8, [sp, #24]
 800570a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800570e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005712:	4b9c      	ldr	r3, [pc, #624]	@ (8005984 <_printf_float+0x2c8>)
 8005714:	f04f 32ff 	mov.w	r2, #4294967295
 8005718:	f7fb fa30 	bl	8000b7c <__aeabi_dcmpun>
 800571c:	bb70      	cbnz	r0, 800577c <_printf_float+0xc0>
 800571e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005722:	4b98      	ldr	r3, [pc, #608]	@ (8005984 <_printf_float+0x2c8>)
 8005724:	f04f 32ff 	mov.w	r2, #4294967295
 8005728:	f7fb fa0a 	bl	8000b40 <__aeabi_dcmple>
 800572c:	bb30      	cbnz	r0, 800577c <_printf_float+0xc0>
 800572e:	2200      	movs	r2, #0
 8005730:	2300      	movs	r3, #0
 8005732:	4640      	mov	r0, r8
 8005734:	4649      	mov	r1, r9
 8005736:	f7fb f9f9 	bl	8000b2c <__aeabi_dcmplt>
 800573a:	b110      	cbz	r0, 8005742 <_printf_float+0x86>
 800573c:	232d      	movs	r3, #45	@ 0x2d
 800573e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005742:	4a91      	ldr	r2, [pc, #580]	@ (8005988 <_printf_float+0x2cc>)
 8005744:	4b91      	ldr	r3, [pc, #580]	@ (800598c <_printf_float+0x2d0>)
 8005746:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800574a:	bf8c      	ite	hi
 800574c:	4690      	movhi	r8, r2
 800574e:	4698      	movls	r8, r3
 8005750:	2303      	movs	r3, #3
 8005752:	6123      	str	r3, [r4, #16]
 8005754:	f02b 0304 	bic.w	r3, fp, #4
 8005758:	6023      	str	r3, [r4, #0]
 800575a:	f04f 0900 	mov.w	r9, #0
 800575e:	9700      	str	r7, [sp, #0]
 8005760:	4633      	mov	r3, r6
 8005762:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005764:	4621      	mov	r1, r4
 8005766:	4628      	mov	r0, r5
 8005768:	f000 f9d2 	bl	8005b10 <_printf_common>
 800576c:	3001      	adds	r0, #1
 800576e:	f040 808d 	bne.w	800588c <_printf_float+0x1d0>
 8005772:	f04f 30ff 	mov.w	r0, #4294967295
 8005776:	b00d      	add	sp, #52	@ 0x34
 8005778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800577c:	4642      	mov	r2, r8
 800577e:	464b      	mov	r3, r9
 8005780:	4640      	mov	r0, r8
 8005782:	4649      	mov	r1, r9
 8005784:	f7fb f9fa 	bl	8000b7c <__aeabi_dcmpun>
 8005788:	b140      	cbz	r0, 800579c <_printf_float+0xe0>
 800578a:	464b      	mov	r3, r9
 800578c:	2b00      	cmp	r3, #0
 800578e:	bfbc      	itt	lt
 8005790:	232d      	movlt	r3, #45	@ 0x2d
 8005792:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005796:	4a7e      	ldr	r2, [pc, #504]	@ (8005990 <_printf_float+0x2d4>)
 8005798:	4b7e      	ldr	r3, [pc, #504]	@ (8005994 <_printf_float+0x2d8>)
 800579a:	e7d4      	b.n	8005746 <_printf_float+0x8a>
 800579c:	6863      	ldr	r3, [r4, #4]
 800579e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80057a2:	9206      	str	r2, [sp, #24]
 80057a4:	1c5a      	adds	r2, r3, #1
 80057a6:	d13b      	bne.n	8005820 <_printf_float+0x164>
 80057a8:	2306      	movs	r3, #6
 80057aa:	6063      	str	r3, [r4, #4]
 80057ac:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80057b0:	2300      	movs	r3, #0
 80057b2:	6022      	str	r2, [r4, #0]
 80057b4:	9303      	str	r3, [sp, #12]
 80057b6:	ab0a      	add	r3, sp, #40	@ 0x28
 80057b8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80057bc:	ab09      	add	r3, sp, #36	@ 0x24
 80057be:	9300      	str	r3, [sp, #0]
 80057c0:	6861      	ldr	r1, [r4, #4]
 80057c2:	ec49 8b10 	vmov	d0, r8, r9
 80057c6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80057ca:	4628      	mov	r0, r5
 80057cc:	f7ff fed6 	bl	800557c <__cvt>
 80057d0:	9b06      	ldr	r3, [sp, #24]
 80057d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80057d4:	2b47      	cmp	r3, #71	@ 0x47
 80057d6:	4680      	mov	r8, r0
 80057d8:	d129      	bne.n	800582e <_printf_float+0x172>
 80057da:	1cc8      	adds	r0, r1, #3
 80057dc:	db02      	blt.n	80057e4 <_printf_float+0x128>
 80057de:	6863      	ldr	r3, [r4, #4]
 80057e0:	4299      	cmp	r1, r3
 80057e2:	dd41      	ble.n	8005868 <_printf_float+0x1ac>
 80057e4:	f1aa 0a02 	sub.w	sl, sl, #2
 80057e8:	fa5f fa8a 	uxtb.w	sl, sl
 80057ec:	3901      	subs	r1, #1
 80057ee:	4652      	mov	r2, sl
 80057f0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80057f4:	9109      	str	r1, [sp, #36]	@ 0x24
 80057f6:	f7ff ff26 	bl	8005646 <__exponent>
 80057fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80057fc:	1813      	adds	r3, r2, r0
 80057fe:	2a01      	cmp	r2, #1
 8005800:	4681      	mov	r9, r0
 8005802:	6123      	str	r3, [r4, #16]
 8005804:	dc02      	bgt.n	800580c <_printf_float+0x150>
 8005806:	6822      	ldr	r2, [r4, #0]
 8005808:	07d2      	lsls	r2, r2, #31
 800580a:	d501      	bpl.n	8005810 <_printf_float+0x154>
 800580c:	3301      	adds	r3, #1
 800580e:	6123      	str	r3, [r4, #16]
 8005810:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005814:	2b00      	cmp	r3, #0
 8005816:	d0a2      	beq.n	800575e <_printf_float+0xa2>
 8005818:	232d      	movs	r3, #45	@ 0x2d
 800581a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800581e:	e79e      	b.n	800575e <_printf_float+0xa2>
 8005820:	9a06      	ldr	r2, [sp, #24]
 8005822:	2a47      	cmp	r2, #71	@ 0x47
 8005824:	d1c2      	bne.n	80057ac <_printf_float+0xf0>
 8005826:	2b00      	cmp	r3, #0
 8005828:	d1c0      	bne.n	80057ac <_printf_float+0xf0>
 800582a:	2301      	movs	r3, #1
 800582c:	e7bd      	b.n	80057aa <_printf_float+0xee>
 800582e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005832:	d9db      	bls.n	80057ec <_printf_float+0x130>
 8005834:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005838:	d118      	bne.n	800586c <_printf_float+0x1b0>
 800583a:	2900      	cmp	r1, #0
 800583c:	6863      	ldr	r3, [r4, #4]
 800583e:	dd0b      	ble.n	8005858 <_printf_float+0x19c>
 8005840:	6121      	str	r1, [r4, #16]
 8005842:	b913      	cbnz	r3, 800584a <_printf_float+0x18e>
 8005844:	6822      	ldr	r2, [r4, #0]
 8005846:	07d0      	lsls	r0, r2, #31
 8005848:	d502      	bpl.n	8005850 <_printf_float+0x194>
 800584a:	3301      	adds	r3, #1
 800584c:	440b      	add	r3, r1
 800584e:	6123      	str	r3, [r4, #16]
 8005850:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005852:	f04f 0900 	mov.w	r9, #0
 8005856:	e7db      	b.n	8005810 <_printf_float+0x154>
 8005858:	b913      	cbnz	r3, 8005860 <_printf_float+0x1a4>
 800585a:	6822      	ldr	r2, [r4, #0]
 800585c:	07d2      	lsls	r2, r2, #31
 800585e:	d501      	bpl.n	8005864 <_printf_float+0x1a8>
 8005860:	3302      	adds	r3, #2
 8005862:	e7f4      	b.n	800584e <_printf_float+0x192>
 8005864:	2301      	movs	r3, #1
 8005866:	e7f2      	b.n	800584e <_printf_float+0x192>
 8005868:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800586c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800586e:	4299      	cmp	r1, r3
 8005870:	db05      	blt.n	800587e <_printf_float+0x1c2>
 8005872:	6823      	ldr	r3, [r4, #0]
 8005874:	6121      	str	r1, [r4, #16]
 8005876:	07d8      	lsls	r0, r3, #31
 8005878:	d5ea      	bpl.n	8005850 <_printf_float+0x194>
 800587a:	1c4b      	adds	r3, r1, #1
 800587c:	e7e7      	b.n	800584e <_printf_float+0x192>
 800587e:	2900      	cmp	r1, #0
 8005880:	bfd4      	ite	le
 8005882:	f1c1 0202 	rsble	r2, r1, #2
 8005886:	2201      	movgt	r2, #1
 8005888:	4413      	add	r3, r2
 800588a:	e7e0      	b.n	800584e <_printf_float+0x192>
 800588c:	6823      	ldr	r3, [r4, #0]
 800588e:	055a      	lsls	r2, r3, #21
 8005890:	d407      	bmi.n	80058a2 <_printf_float+0x1e6>
 8005892:	6923      	ldr	r3, [r4, #16]
 8005894:	4642      	mov	r2, r8
 8005896:	4631      	mov	r1, r6
 8005898:	4628      	mov	r0, r5
 800589a:	47b8      	blx	r7
 800589c:	3001      	adds	r0, #1
 800589e:	d12b      	bne.n	80058f8 <_printf_float+0x23c>
 80058a0:	e767      	b.n	8005772 <_printf_float+0xb6>
 80058a2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80058a6:	f240 80dd 	bls.w	8005a64 <_printf_float+0x3a8>
 80058aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80058ae:	2200      	movs	r2, #0
 80058b0:	2300      	movs	r3, #0
 80058b2:	f7fb f931 	bl	8000b18 <__aeabi_dcmpeq>
 80058b6:	2800      	cmp	r0, #0
 80058b8:	d033      	beq.n	8005922 <_printf_float+0x266>
 80058ba:	4a37      	ldr	r2, [pc, #220]	@ (8005998 <_printf_float+0x2dc>)
 80058bc:	2301      	movs	r3, #1
 80058be:	4631      	mov	r1, r6
 80058c0:	4628      	mov	r0, r5
 80058c2:	47b8      	blx	r7
 80058c4:	3001      	adds	r0, #1
 80058c6:	f43f af54 	beq.w	8005772 <_printf_float+0xb6>
 80058ca:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80058ce:	4543      	cmp	r3, r8
 80058d0:	db02      	blt.n	80058d8 <_printf_float+0x21c>
 80058d2:	6823      	ldr	r3, [r4, #0]
 80058d4:	07d8      	lsls	r0, r3, #31
 80058d6:	d50f      	bpl.n	80058f8 <_printf_float+0x23c>
 80058d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80058dc:	4631      	mov	r1, r6
 80058de:	4628      	mov	r0, r5
 80058e0:	47b8      	blx	r7
 80058e2:	3001      	adds	r0, #1
 80058e4:	f43f af45 	beq.w	8005772 <_printf_float+0xb6>
 80058e8:	f04f 0900 	mov.w	r9, #0
 80058ec:	f108 38ff 	add.w	r8, r8, #4294967295
 80058f0:	f104 0a1a 	add.w	sl, r4, #26
 80058f4:	45c8      	cmp	r8, r9
 80058f6:	dc09      	bgt.n	800590c <_printf_float+0x250>
 80058f8:	6823      	ldr	r3, [r4, #0]
 80058fa:	079b      	lsls	r3, r3, #30
 80058fc:	f100 8103 	bmi.w	8005b06 <_printf_float+0x44a>
 8005900:	68e0      	ldr	r0, [r4, #12]
 8005902:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005904:	4298      	cmp	r0, r3
 8005906:	bfb8      	it	lt
 8005908:	4618      	movlt	r0, r3
 800590a:	e734      	b.n	8005776 <_printf_float+0xba>
 800590c:	2301      	movs	r3, #1
 800590e:	4652      	mov	r2, sl
 8005910:	4631      	mov	r1, r6
 8005912:	4628      	mov	r0, r5
 8005914:	47b8      	blx	r7
 8005916:	3001      	adds	r0, #1
 8005918:	f43f af2b 	beq.w	8005772 <_printf_float+0xb6>
 800591c:	f109 0901 	add.w	r9, r9, #1
 8005920:	e7e8      	b.n	80058f4 <_printf_float+0x238>
 8005922:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005924:	2b00      	cmp	r3, #0
 8005926:	dc39      	bgt.n	800599c <_printf_float+0x2e0>
 8005928:	4a1b      	ldr	r2, [pc, #108]	@ (8005998 <_printf_float+0x2dc>)
 800592a:	2301      	movs	r3, #1
 800592c:	4631      	mov	r1, r6
 800592e:	4628      	mov	r0, r5
 8005930:	47b8      	blx	r7
 8005932:	3001      	adds	r0, #1
 8005934:	f43f af1d 	beq.w	8005772 <_printf_float+0xb6>
 8005938:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800593c:	ea59 0303 	orrs.w	r3, r9, r3
 8005940:	d102      	bne.n	8005948 <_printf_float+0x28c>
 8005942:	6823      	ldr	r3, [r4, #0]
 8005944:	07d9      	lsls	r1, r3, #31
 8005946:	d5d7      	bpl.n	80058f8 <_printf_float+0x23c>
 8005948:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800594c:	4631      	mov	r1, r6
 800594e:	4628      	mov	r0, r5
 8005950:	47b8      	blx	r7
 8005952:	3001      	adds	r0, #1
 8005954:	f43f af0d 	beq.w	8005772 <_printf_float+0xb6>
 8005958:	f04f 0a00 	mov.w	sl, #0
 800595c:	f104 0b1a 	add.w	fp, r4, #26
 8005960:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005962:	425b      	negs	r3, r3
 8005964:	4553      	cmp	r3, sl
 8005966:	dc01      	bgt.n	800596c <_printf_float+0x2b0>
 8005968:	464b      	mov	r3, r9
 800596a:	e793      	b.n	8005894 <_printf_float+0x1d8>
 800596c:	2301      	movs	r3, #1
 800596e:	465a      	mov	r2, fp
 8005970:	4631      	mov	r1, r6
 8005972:	4628      	mov	r0, r5
 8005974:	47b8      	blx	r7
 8005976:	3001      	adds	r0, #1
 8005978:	f43f aefb 	beq.w	8005772 <_printf_float+0xb6>
 800597c:	f10a 0a01 	add.w	sl, sl, #1
 8005980:	e7ee      	b.n	8005960 <_printf_float+0x2a4>
 8005982:	bf00      	nop
 8005984:	7fefffff 	.word	0x7fefffff
 8005988:	08009d90 	.word	0x08009d90
 800598c:	08009d8c 	.word	0x08009d8c
 8005990:	08009d98 	.word	0x08009d98
 8005994:	08009d94 	.word	0x08009d94
 8005998:	08009d9c 	.word	0x08009d9c
 800599c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800599e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80059a2:	4553      	cmp	r3, sl
 80059a4:	bfa8      	it	ge
 80059a6:	4653      	movge	r3, sl
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	4699      	mov	r9, r3
 80059ac:	dc36      	bgt.n	8005a1c <_printf_float+0x360>
 80059ae:	f04f 0b00 	mov.w	fp, #0
 80059b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80059b6:	f104 021a 	add.w	r2, r4, #26
 80059ba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80059bc:	9306      	str	r3, [sp, #24]
 80059be:	eba3 0309 	sub.w	r3, r3, r9
 80059c2:	455b      	cmp	r3, fp
 80059c4:	dc31      	bgt.n	8005a2a <_printf_float+0x36e>
 80059c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059c8:	459a      	cmp	sl, r3
 80059ca:	dc3a      	bgt.n	8005a42 <_printf_float+0x386>
 80059cc:	6823      	ldr	r3, [r4, #0]
 80059ce:	07da      	lsls	r2, r3, #31
 80059d0:	d437      	bmi.n	8005a42 <_printf_float+0x386>
 80059d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059d4:	ebaa 0903 	sub.w	r9, sl, r3
 80059d8:	9b06      	ldr	r3, [sp, #24]
 80059da:	ebaa 0303 	sub.w	r3, sl, r3
 80059de:	4599      	cmp	r9, r3
 80059e0:	bfa8      	it	ge
 80059e2:	4699      	movge	r9, r3
 80059e4:	f1b9 0f00 	cmp.w	r9, #0
 80059e8:	dc33      	bgt.n	8005a52 <_printf_float+0x396>
 80059ea:	f04f 0800 	mov.w	r8, #0
 80059ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80059f2:	f104 0b1a 	add.w	fp, r4, #26
 80059f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059f8:	ebaa 0303 	sub.w	r3, sl, r3
 80059fc:	eba3 0309 	sub.w	r3, r3, r9
 8005a00:	4543      	cmp	r3, r8
 8005a02:	f77f af79 	ble.w	80058f8 <_printf_float+0x23c>
 8005a06:	2301      	movs	r3, #1
 8005a08:	465a      	mov	r2, fp
 8005a0a:	4631      	mov	r1, r6
 8005a0c:	4628      	mov	r0, r5
 8005a0e:	47b8      	blx	r7
 8005a10:	3001      	adds	r0, #1
 8005a12:	f43f aeae 	beq.w	8005772 <_printf_float+0xb6>
 8005a16:	f108 0801 	add.w	r8, r8, #1
 8005a1a:	e7ec      	b.n	80059f6 <_printf_float+0x33a>
 8005a1c:	4642      	mov	r2, r8
 8005a1e:	4631      	mov	r1, r6
 8005a20:	4628      	mov	r0, r5
 8005a22:	47b8      	blx	r7
 8005a24:	3001      	adds	r0, #1
 8005a26:	d1c2      	bne.n	80059ae <_printf_float+0x2f2>
 8005a28:	e6a3      	b.n	8005772 <_printf_float+0xb6>
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	4631      	mov	r1, r6
 8005a2e:	4628      	mov	r0, r5
 8005a30:	9206      	str	r2, [sp, #24]
 8005a32:	47b8      	blx	r7
 8005a34:	3001      	adds	r0, #1
 8005a36:	f43f ae9c 	beq.w	8005772 <_printf_float+0xb6>
 8005a3a:	9a06      	ldr	r2, [sp, #24]
 8005a3c:	f10b 0b01 	add.w	fp, fp, #1
 8005a40:	e7bb      	b.n	80059ba <_printf_float+0x2fe>
 8005a42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a46:	4631      	mov	r1, r6
 8005a48:	4628      	mov	r0, r5
 8005a4a:	47b8      	blx	r7
 8005a4c:	3001      	adds	r0, #1
 8005a4e:	d1c0      	bne.n	80059d2 <_printf_float+0x316>
 8005a50:	e68f      	b.n	8005772 <_printf_float+0xb6>
 8005a52:	9a06      	ldr	r2, [sp, #24]
 8005a54:	464b      	mov	r3, r9
 8005a56:	4442      	add	r2, r8
 8005a58:	4631      	mov	r1, r6
 8005a5a:	4628      	mov	r0, r5
 8005a5c:	47b8      	blx	r7
 8005a5e:	3001      	adds	r0, #1
 8005a60:	d1c3      	bne.n	80059ea <_printf_float+0x32e>
 8005a62:	e686      	b.n	8005772 <_printf_float+0xb6>
 8005a64:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005a68:	f1ba 0f01 	cmp.w	sl, #1
 8005a6c:	dc01      	bgt.n	8005a72 <_printf_float+0x3b6>
 8005a6e:	07db      	lsls	r3, r3, #31
 8005a70:	d536      	bpl.n	8005ae0 <_printf_float+0x424>
 8005a72:	2301      	movs	r3, #1
 8005a74:	4642      	mov	r2, r8
 8005a76:	4631      	mov	r1, r6
 8005a78:	4628      	mov	r0, r5
 8005a7a:	47b8      	blx	r7
 8005a7c:	3001      	adds	r0, #1
 8005a7e:	f43f ae78 	beq.w	8005772 <_printf_float+0xb6>
 8005a82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a86:	4631      	mov	r1, r6
 8005a88:	4628      	mov	r0, r5
 8005a8a:	47b8      	blx	r7
 8005a8c:	3001      	adds	r0, #1
 8005a8e:	f43f ae70 	beq.w	8005772 <_printf_float+0xb6>
 8005a92:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005a96:	2200      	movs	r2, #0
 8005a98:	2300      	movs	r3, #0
 8005a9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005a9e:	f7fb f83b 	bl	8000b18 <__aeabi_dcmpeq>
 8005aa2:	b9c0      	cbnz	r0, 8005ad6 <_printf_float+0x41a>
 8005aa4:	4653      	mov	r3, sl
 8005aa6:	f108 0201 	add.w	r2, r8, #1
 8005aaa:	4631      	mov	r1, r6
 8005aac:	4628      	mov	r0, r5
 8005aae:	47b8      	blx	r7
 8005ab0:	3001      	adds	r0, #1
 8005ab2:	d10c      	bne.n	8005ace <_printf_float+0x412>
 8005ab4:	e65d      	b.n	8005772 <_printf_float+0xb6>
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	465a      	mov	r2, fp
 8005aba:	4631      	mov	r1, r6
 8005abc:	4628      	mov	r0, r5
 8005abe:	47b8      	blx	r7
 8005ac0:	3001      	adds	r0, #1
 8005ac2:	f43f ae56 	beq.w	8005772 <_printf_float+0xb6>
 8005ac6:	f108 0801 	add.w	r8, r8, #1
 8005aca:	45d0      	cmp	r8, sl
 8005acc:	dbf3      	blt.n	8005ab6 <_printf_float+0x3fa>
 8005ace:	464b      	mov	r3, r9
 8005ad0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005ad4:	e6df      	b.n	8005896 <_printf_float+0x1da>
 8005ad6:	f04f 0800 	mov.w	r8, #0
 8005ada:	f104 0b1a 	add.w	fp, r4, #26
 8005ade:	e7f4      	b.n	8005aca <_printf_float+0x40e>
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	4642      	mov	r2, r8
 8005ae4:	e7e1      	b.n	8005aaa <_printf_float+0x3ee>
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	464a      	mov	r2, r9
 8005aea:	4631      	mov	r1, r6
 8005aec:	4628      	mov	r0, r5
 8005aee:	47b8      	blx	r7
 8005af0:	3001      	adds	r0, #1
 8005af2:	f43f ae3e 	beq.w	8005772 <_printf_float+0xb6>
 8005af6:	f108 0801 	add.w	r8, r8, #1
 8005afa:	68e3      	ldr	r3, [r4, #12]
 8005afc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005afe:	1a5b      	subs	r3, r3, r1
 8005b00:	4543      	cmp	r3, r8
 8005b02:	dcf0      	bgt.n	8005ae6 <_printf_float+0x42a>
 8005b04:	e6fc      	b.n	8005900 <_printf_float+0x244>
 8005b06:	f04f 0800 	mov.w	r8, #0
 8005b0a:	f104 0919 	add.w	r9, r4, #25
 8005b0e:	e7f4      	b.n	8005afa <_printf_float+0x43e>

08005b10 <_printf_common>:
 8005b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b14:	4616      	mov	r6, r2
 8005b16:	4698      	mov	r8, r3
 8005b18:	688a      	ldr	r2, [r1, #8]
 8005b1a:	690b      	ldr	r3, [r1, #16]
 8005b1c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005b20:	4293      	cmp	r3, r2
 8005b22:	bfb8      	it	lt
 8005b24:	4613      	movlt	r3, r2
 8005b26:	6033      	str	r3, [r6, #0]
 8005b28:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005b2c:	4607      	mov	r7, r0
 8005b2e:	460c      	mov	r4, r1
 8005b30:	b10a      	cbz	r2, 8005b36 <_printf_common+0x26>
 8005b32:	3301      	adds	r3, #1
 8005b34:	6033      	str	r3, [r6, #0]
 8005b36:	6823      	ldr	r3, [r4, #0]
 8005b38:	0699      	lsls	r1, r3, #26
 8005b3a:	bf42      	ittt	mi
 8005b3c:	6833      	ldrmi	r3, [r6, #0]
 8005b3e:	3302      	addmi	r3, #2
 8005b40:	6033      	strmi	r3, [r6, #0]
 8005b42:	6825      	ldr	r5, [r4, #0]
 8005b44:	f015 0506 	ands.w	r5, r5, #6
 8005b48:	d106      	bne.n	8005b58 <_printf_common+0x48>
 8005b4a:	f104 0a19 	add.w	sl, r4, #25
 8005b4e:	68e3      	ldr	r3, [r4, #12]
 8005b50:	6832      	ldr	r2, [r6, #0]
 8005b52:	1a9b      	subs	r3, r3, r2
 8005b54:	42ab      	cmp	r3, r5
 8005b56:	dc26      	bgt.n	8005ba6 <_printf_common+0x96>
 8005b58:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005b5c:	6822      	ldr	r2, [r4, #0]
 8005b5e:	3b00      	subs	r3, #0
 8005b60:	bf18      	it	ne
 8005b62:	2301      	movne	r3, #1
 8005b64:	0692      	lsls	r2, r2, #26
 8005b66:	d42b      	bmi.n	8005bc0 <_printf_common+0xb0>
 8005b68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005b6c:	4641      	mov	r1, r8
 8005b6e:	4638      	mov	r0, r7
 8005b70:	47c8      	blx	r9
 8005b72:	3001      	adds	r0, #1
 8005b74:	d01e      	beq.n	8005bb4 <_printf_common+0xa4>
 8005b76:	6823      	ldr	r3, [r4, #0]
 8005b78:	6922      	ldr	r2, [r4, #16]
 8005b7a:	f003 0306 	and.w	r3, r3, #6
 8005b7e:	2b04      	cmp	r3, #4
 8005b80:	bf02      	ittt	eq
 8005b82:	68e5      	ldreq	r5, [r4, #12]
 8005b84:	6833      	ldreq	r3, [r6, #0]
 8005b86:	1aed      	subeq	r5, r5, r3
 8005b88:	68a3      	ldr	r3, [r4, #8]
 8005b8a:	bf0c      	ite	eq
 8005b8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b90:	2500      	movne	r5, #0
 8005b92:	4293      	cmp	r3, r2
 8005b94:	bfc4      	itt	gt
 8005b96:	1a9b      	subgt	r3, r3, r2
 8005b98:	18ed      	addgt	r5, r5, r3
 8005b9a:	2600      	movs	r6, #0
 8005b9c:	341a      	adds	r4, #26
 8005b9e:	42b5      	cmp	r5, r6
 8005ba0:	d11a      	bne.n	8005bd8 <_printf_common+0xc8>
 8005ba2:	2000      	movs	r0, #0
 8005ba4:	e008      	b.n	8005bb8 <_printf_common+0xa8>
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	4652      	mov	r2, sl
 8005baa:	4641      	mov	r1, r8
 8005bac:	4638      	mov	r0, r7
 8005bae:	47c8      	blx	r9
 8005bb0:	3001      	adds	r0, #1
 8005bb2:	d103      	bne.n	8005bbc <_printf_common+0xac>
 8005bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8005bb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bbc:	3501      	adds	r5, #1
 8005bbe:	e7c6      	b.n	8005b4e <_printf_common+0x3e>
 8005bc0:	18e1      	adds	r1, r4, r3
 8005bc2:	1c5a      	adds	r2, r3, #1
 8005bc4:	2030      	movs	r0, #48	@ 0x30
 8005bc6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005bca:	4422      	add	r2, r4
 8005bcc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005bd0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005bd4:	3302      	adds	r3, #2
 8005bd6:	e7c7      	b.n	8005b68 <_printf_common+0x58>
 8005bd8:	2301      	movs	r3, #1
 8005bda:	4622      	mov	r2, r4
 8005bdc:	4641      	mov	r1, r8
 8005bde:	4638      	mov	r0, r7
 8005be0:	47c8      	blx	r9
 8005be2:	3001      	adds	r0, #1
 8005be4:	d0e6      	beq.n	8005bb4 <_printf_common+0xa4>
 8005be6:	3601      	adds	r6, #1
 8005be8:	e7d9      	b.n	8005b9e <_printf_common+0x8e>
	...

08005bec <_printf_i>:
 8005bec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005bf0:	7e0f      	ldrb	r7, [r1, #24]
 8005bf2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005bf4:	2f78      	cmp	r7, #120	@ 0x78
 8005bf6:	4691      	mov	r9, r2
 8005bf8:	4680      	mov	r8, r0
 8005bfa:	460c      	mov	r4, r1
 8005bfc:	469a      	mov	sl, r3
 8005bfe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005c02:	d807      	bhi.n	8005c14 <_printf_i+0x28>
 8005c04:	2f62      	cmp	r7, #98	@ 0x62
 8005c06:	d80a      	bhi.n	8005c1e <_printf_i+0x32>
 8005c08:	2f00      	cmp	r7, #0
 8005c0a:	f000 80d1 	beq.w	8005db0 <_printf_i+0x1c4>
 8005c0e:	2f58      	cmp	r7, #88	@ 0x58
 8005c10:	f000 80b8 	beq.w	8005d84 <_printf_i+0x198>
 8005c14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005c18:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005c1c:	e03a      	b.n	8005c94 <_printf_i+0xa8>
 8005c1e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005c22:	2b15      	cmp	r3, #21
 8005c24:	d8f6      	bhi.n	8005c14 <_printf_i+0x28>
 8005c26:	a101      	add	r1, pc, #4	@ (adr r1, 8005c2c <_printf_i+0x40>)
 8005c28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c2c:	08005c85 	.word	0x08005c85
 8005c30:	08005c99 	.word	0x08005c99
 8005c34:	08005c15 	.word	0x08005c15
 8005c38:	08005c15 	.word	0x08005c15
 8005c3c:	08005c15 	.word	0x08005c15
 8005c40:	08005c15 	.word	0x08005c15
 8005c44:	08005c99 	.word	0x08005c99
 8005c48:	08005c15 	.word	0x08005c15
 8005c4c:	08005c15 	.word	0x08005c15
 8005c50:	08005c15 	.word	0x08005c15
 8005c54:	08005c15 	.word	0x08005c15
 8005c58:	08005d97 	.word	0x08005d97
 8005c5c:	08005cc3 	.word	0x08005cc3
 8005c60:	08005d51 	.word	0x08005d51
 8005c64:	08005c15 	.word	0x08005c15
 8005c68:	08005c15 	.word	0x08005c15
 8005c6c:	08005db9 	.word	0x08005db9
 8005c70:	08005c15 	.word	0x08005c15
 8005c74:	08005cc3 	.word	0x08005cc3
 8005c78:	08005c15 	.word	0x08005c15
 8005c7c:	08005c15 	.word	0x08005c15
 8005c80:	08005d59 	.word	0x08005d59
 8005c84:	6833      	ldr	r3, [r6, #0]
 8005c86:	1d1a      	adds	r2, r3, #4
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	6032      	str	r2, [r6, #0]
 8005c8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005c90:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005c94:	2301      	movs	r3, #1
 8005c96:	e09c      	b.n	8005dd2 <_printf_i+0x1e6>
 8005c98:	6833      	ldr	r3, [r6, #0]
 8005c9a:	6820      	ldr	r0, [r4, #0]
 8005c9c:	1d19      	adds	r1, r3, #4
 8005c9e:	6031      	str	r1, [r6, #0]
 8005ca0:	0606      	lsls	r6, r0, #24
 8005ca2:	d501      	bpl.n	8005ca8 <_printf_i+0xbc>
 8005ca4:	681d      	ldr	r5, [r3, #0]
 8005ca6:	e003      	b.n	8005cb0 <_printf_i+0xc4>
 8005ca8:	0645      	lsls	r5, r0, #25
 8005caa:	d5fb      	bpl.n	8005ca4 <_printf_i+0xb8>
 8005cac:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005cb0:	2d00      	cmp	r5, #0
 8005cb2:	da03      	bge.n	8005cbc <_printf_i+0xd0>
 8005cb4:	232d      	movs	r3, #45	@ 0x2d
 8005cb6:	426d      	negs	r5, r5
 8005cb8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005cbc:	4858      	ldr	r0, [pc, #352]	@ (8005e20 <_printf_i+0x234>)
 8005cbe:	230a      	movs	r3, #10
 8005cc0:	e011      	b.n	8005ce6 <_printf_i+0xfa>
 8005cc2:	6821      	ldr	r1, [r4, #0]
 8005cc4:	6833      	ldr	r3, [r6, #0]
 8005cc6:	0608      	lsls	r0, r1, #24
 8005cc8:	f853 5b04 	ldr.w	r5, [r3], #4
 8005ccc:	d402      	bmi.n	8005cd4 <_printf_i+0xe8>
 8005cce:	0649      	lsls	r1, r1, #25
 8005cd0:	bf48      	it	mi
 8005cd2:	b2ad      	uxthmi	r5, r5
 8005cd4:	2f6f      	cmp	r7, #111	@ 0x6f
 8005cd6:	4852      	ldr	r0, [pc, #328]	@ (8005e20 <_printf_i+0x234>)
 8005cd8:	6033      	str	r3, [r6, #0]
 8005cda:	bf14      	ite	ne
 8005cdc:	230a      	movne	r3, #10
 8005cde:	2308      	moveq	r3, #8
 8005ce0:	2100      	movs	r1, #0
 8005ce2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005ce6:	6866      	ldr	r6, [r4, #4]
 8005ce8:	60a6      	str	r6, [r4, #8]
 8005cea:	2e00      	cmp	r6, #0
 8005cec:	db05      	blt.n	8005cfa <_printf_i+0x10e>
 8005cee:	6821      	ldr	r1, [r4, #0]
 8005cf0:	432e      	orrs	r6, r5
 8005cf2:	f021 0104 	bic.w	r1, r1, #4
 8005cf6:	6021      	str	r1, [r4, #0]
 8005cf8:	d04b      	beq.n	8005d92 <_printf_i+0x1a6>
 8005cfa:	4616      	mov	r6, r2
 8005cfc:	fbb5 f1f3 	udiv	r1, r5, r3
 8005d00:	fb03 5711 	mls	r7, r3, r1, r5
 8005d04:	5dc7      	ldrb	r7, [r0, r7]
 8005d06:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005d0a:	462f      	mov	r7, r5
 8005d0c:	42bb      	cmp	r3, r7
 8005d0e:	460d      	mov	r5, r1
 8005d10:	d9f4      	bls.n	8005cfc <_printf_i+0x110>
 8005d12:	2b08      	cmp	r3, #8
 8005d14:	d10b      	bne.n	8005d2e <_printf_i+0x142>
 8005d16:	6823      	ldr	r3, [r4, #0]
 8005d18:	07df      	lsls	r7, r3, #31
 8005d1a:	d508      	bpl.n	8005d2e <_printf_i+0x142>
 8005d1c:	6923      	ldr	r3, [r4, #16]
 8005d1e:	6861      	ldr	r1, [r4, #4]
 8005d20:	4299      	cmp	r1, r3
 8005d22:	bfde      	ittt	le
 8005d24:	2330      	movle	r3, #48	@ 0x30
 8005d26:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005d2a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005d2e:	1b92      	subs	r2, r2, r6
 8005d30:	6122      	str	r2, [r4, #16]
 8005d32:	f8cd a000 	str.w	sl, [sp]
 8005d36:	464b      	mov	r3, r9
 8005d38:	aa03      	add	r2, sp, #12
 8005d3a:	4621      	mov	r1, r4
 8005d3c:	4640      	mov	r0, r8
 8005d3e:	f7ff fee7 	bl	8005b10 <_printf_common>
 8005d42:	3001      	adds	r0, #1
 8005d44:	d14a      	bne.n	8005ddc <_printf_i+0x1f0>
 8005d46:	f04f 30ff 	mov.w	r0, #4294967295
 8005d4a:	b004      	add	sp, #16
 8005d4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d50:	6823      	ldr	r3, [r4, #0]
 8005d52:	f043 0320 	orr.w	r3, r3, #32
 8005d56:	6023      	str	r3, [r4, #0]
 8005d58:	4832      	ldr	r0, [pc, #200]	@ (8005e24 <_printf_i+0x238>)
 8005d5a:	2778      	movs	r7, #120	@ 0x78
 8005d5c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005d60:	6823      	ldr	r3, [r4, #0]
 8005d62:	6831      	ldr	r1, [r6, #0]
 8005d64:	061f      	lsls	r7, r3, #24
 8005d66:	f851 5b04 	ldr.w	r5, [r1], #4
 8005d6a:	d402      	bmi.n	8005d72 <_printf_i+0x186>
 8005d6c:	065f      	lsls	r7, r3, #25
 8005d6e:	bf48      	it	mi
 8005d70:	b2ad      	uxthmi	r5, r5
 8005d72:	6031      	str	r1, [r6, #0]
 8005d74:	07d9      	lsls	r1, r3, #31
 8005d76:	bf44      	itt	mi
 8005d78:	f043 0320 	orrmi.w	r3, r3, #32
 8005d7c:	6023      	strmi	r3, [r4, #0]
 8005d7e:	b11d      	cbz	r5, 8005d88 <_printf_i+0x19c>
 8005d80:	2310      	movs	r3, #16
 8005d82:	e7ad      	b.n	8005ce0 <_printf_i+0xf4>
 8005d84:	4826      	ldr	r0, [pc, #152]	@ (8005e20 <_printf_i+0x234>)
 8005d86:	e7e9      	b.n	8005d5c <_printf_i+0x170>
 8005d88:	6823      	ldr	r3, [r4, #0]
 8005d8a:	f023 0320 	bic.w	r3, r3, #32
 8005d8e:	6023      	str	r3, [r4, #0]
 8005d90:	e7f6      	b.n	8005d80 <_printf_i+0x194>
 8005d92:	4616      	mov	r6, r2
 8005d94:	e7bd      	b.n	8005d12 <_printf_i+0x126>
 8005d96:	6833      	ldr	r3, [r6, #0]
 8005d98:	6825      	ldr	r5, [r4, #0]
 8005d9a:	6961      	ldr	r1, [r4, #20]
 8005d9c:	1d18      	adds	r0, r3, #4
 8005d9e:	6030      	str	r0, [r6, #0]
 8005da0:	062e      	lsls	r6, r5, #24
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	d501      	bpl.n	8005daa <_printf_i+0x1be>
 8005da6:	6019      	str	r1, [r3, #0]
 8005da8:	e002      	b.n	8005db0 <_printf_i+0x1c4>
 8005daa:	0668      	lsls	r0, r5, #25
 8005dac:	d5fb      	bpl.n	8005da6 <_printf_i+0x1ba>
 8005dae:	8019      	strh	r1, [r3, #0]
 8005db0:	2300      	movs	r3, #0
 8005db2:	6123      	str	r3, [r4, #16]
 8005db4:	4616      	mov	r6, r2
 8005db6:	e7bc      	b.n	8005d32 <_printf_i+0x146>
 8005db8:	6833      	ldr	r3, [r6, #0]
 8005dba:	1d1a      	adds	r2, r3, #4
 8005dbc:	6032      	str	r2, [r6, #0]
 8005dbe:	681e      	ldr	r6, [r3, #0]
 8005dc0:	6862      	ldr	r2, [r4, #4]
 8005dc2:	2100      	movs	r1, #0
 8005dc4:	4630      	mov	r0, r6
 8005dc6:	f7fa fa2b 	bl	8000220 <memchr>
 8005dca:	b108      	cbz	r0, 8005dd0 <_printf_i+0x1e4>
 8005dcc:	1b80      	subs	r0, r0, r6
 8005dce:	6060      	str	r0, [r4, #4]
 8005dd0:	6863      	ldr	r3, [r4, #4]
 8005dd2:	6123      	str	r3, [r4, #16]
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005dda:	e7aa      	b.n	8005d32 <_printf_i+0x146>
 8005ddc:	6923      	ldr	r3, [r4, #16]
 8005dde:	4632      	mov	r2, r6
 8005de0:	4649      	mov	r1, r9
 8005de2:	4640      	mov	r0, r8
 8005de4:	47d0      	blx	sl
 8005de6:	3001      	adds	r0, #1
 8005de8:	d0ad      	beq.n	8005d46 <_printf_i+0x15a>
 8005dea:	6823      	ldr	r3, [r4, #0]
 8005dec:	079b      	lsls	r3, r3, #30
 8005dee:	d413      	bmi.n	8005e18 <_printf_i+0x22c>
 8005df0:	68e0      	ldr	r0, [r4, #12]
 8005df2:	9b03      	ldr	r3, [sp, #12]
 8005df4:	4298      	cmp	r0, r3
 8005df6:	bfb8      	it	lt
 8005df8:	4618      	movlt	r0, r3
 8005dfa:	e7a6      	b.n	8005d4a <_printf_i+0x15e>
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	4632      	mov	r2, r6
 8005e00:	4649      	mov	r1, r9
 8005e02:	4640      	mov	r0, r8
 8005e04:	47d0      	blx	sl
 8005e06:	3001      	adds	r0, #1
 8005e08:	d09d      	beq.n	8005d46 <_printf_i+0x15a>
 8005e0a:	3501      	adds	r5, #1
 8005e0c:	68e3      	ldr	r3, [r4, #12]
 8005e0e:	9903      	ldr	r1, [sp, #12]
 8005e10:	1a5b      	subs	r3, r3, r1
 8005e12:	42ab      	cmp	r3, r5
 8005e14:	dcf2      	bgt.n	8005dfc <_printf_i+0x210>
 8005e16:	e7eb      	b.n	8005df0 <_printf_i+0x204>
 8005e18:	2500      	movs	r5, #0
 8005e1a:	f104 0619 	add.w	r6, r4, #25
 8005e1e:	e7f5      	b.n	8005e0c <_printf_i+0x220>
 8005e20:	08009d9e 	.word	0x08009d9e
 8005e24:	08009daf 	.word	0x08009daf

08005e28 <_scanf_float>:
 8005e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e2c:	b087      	sub	sp, #28
 8005e2e:	4691      	mov	r9, r2
 8005e30:	9303      	str	r3, [sp, #12]
 8005e32:	688b      	ldr	r3, [r1, #8]
 8005e34:	1e5a      	subs	r2, r3, #1
 8005e36:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005e3a:	bf81      	itttt	hi
 8005e3c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005e40:	eb03 0b05 	addhi.w	fp, r3, r5
 8005e44:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005e48:	608b      	strhi	r3, [r1, #8]
 8005e4a:	680b      	ldr	r3, [r1, #0]
 8005e4c:	460a      	mov	r2, r1
 8005e4e:	f04f 0500 	mov.w	r5, #0
 8005e52:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8005e56:	f842 3b1c 	str.w	r3, [r2], #28
 8005e5a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005e5e:	4680      	mov	r8, r0
 8005e60:	460c      	mov	r4, r1
 8005e62:	bf98      	it	ls
 8005e64:	f04f 0b00 	movls.w	fp, #0
 8005e68:	9201      	str	r2, [sp, #4]
 8005e6a:	4616      	mov	r6, r2
 8005e6c:	46aa      	mov	sl, r5
 8005e6e:	462f      	mov	r7, r5
 8005e70:	9502      	str	r5, [sp, #8]
 8005e72:	68a2      	ldr	r2, [r4, #8]
 8005e74:	b15a      	cbz	r2, 8005e8e <_scanf_float+0x66>
 8005e76:	f8d9 3000 	ldr.w	r3, [r9]
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	2b4e      	cmp	r3, #78	@ 0x4e
 8005e7e:	d863      	bhi.n	8005f48 <_scanf_float+0x120>
 8005e80:	2b40      	cmp	r3, #64	@ 0x40
 8005e82:	d83b      	bhi.n	8005efc <_scanf_float+0xd4>
 8005e84:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8005e88:	b2c8      	uxtb	r0, r1
 8005e8a:	280e      	cmp	r0, #14
 8005e8c:	d939      	bls.n	8005f02 <_scanf_float+0xda>
 8005e8e:	b11f      	cbz	r7, 8005e98 <_scanf_float+0x70>
 8005e90:	6823      	ldr	r3, [r4, #0]
 8005e92:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e96:	6023      	str	r3, [r4, #0]
 8005e98:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005e9c:	f1ba 0f01 	cmp.w	sl, #1
 8005ea0:	f200 8114 	bhi.w	80060cc <_scanf_float+0x2a4>
 8005ea4:	9b01      	ldr	r3, [sp, #4]
 8005ea6:	429e      	cmp	r6, r3
 8005ea8:	f200 8105 	bhi.w	80060b6 <_scanf_float+0x28e>
 8005eac:	2001      	movs	r0, #1
 8005eae:	b007      	add	sp, #28
 8005eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eb4:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8005eb8:	2a0d      	cmp	r2, #13
 8005eba:	d8e8      	bhi.n	8005e8e <_scanf_float+0x66>
 8005ebc:	a101      	add	r1, pc, #4	@ (adr r1, 8005ec4 <_scanf_float+0x9c>)
 8005ebe:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005ec2:	bf00      	nop
 8005ec4:	0800600d 	.word	0x0800600d
 8005ec8:	08005e8f 	.word	0x08005e8f
 8005ecc:	08005e8f 	.word	0x08005e8f
 8005ed0:	08005e8f 	.word	0x08005e8f
 8005ed4:	08006069 	.word	0x08006069
 8005ed8:	08006043 	.word	0x08006043
 8005edc:	08005e8f 	.word	0x08005e8f
 8005ee0:	08005e8f 	.word	0x08005e8f
 8005ee4:	0800601b 	.word	0x0800601b
 8005ee8:	08005e8f 	.word	0x08005e8f
 8005eec:	08005e8f 	.word	0x08005e8f
 8005ef0:	08005e8f 	.word	0x08005e8f
 8005ef4:	08005e8f 	.word	0x08005e8f
 8005ef8:	08005fd7 	.word	0x08005fd7
 8005efc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8005f00:	e7da      	b.n	8005eb8 <_scanf_float+0x90>
 8005f02:	290e      	cmp	r1, #14
 8005f04:	d8c3      	bhi.n	8005e8e <_scanf_float+0x66>
 8005f06:	a001      	add	r0, pc, #4	@ (adr r0, 8005f0c <_scanf_float+0xe4>)
 8005f08:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005f0c:	08005fc7 	.word	0x08005fc7
 8005f10:	08005e8f 	.word	0x08005e8f
 8005f14:	08005fc7 	.word	0x08005fc7
 8005f18:	08006057 	.word	0x08006057
 8005f1c:	08005e8f 	.word	0x08005e8f
 8005f20:	08005f69 	.word	0x08005f69
 8005f24:	08005fad 	.word	0x08005fad
 8005f28:	08005fad 	.word	0x08005fad
 8005f2c:	08005fad 	.word	0x08005fad
 8005f30:	08005fad 	.word	0x08005fad
 8005f34:	08005fad 	.word	0x08005fad
 8005f38:	08005fad 	.word	0x08005fad
 8005f3c:	08005fad 	.word	0x08005fad
 8005f40:	08005fad 	.word	0x08005fad
 8005f44:	08005fad 	.word	0x08005fad
 8005f48:	2b6e      	cmp	r3, #110	@ 0x6e
 8005f4a:	d809      	bhi.n	8005f60 <_scanf_float+0x138>
 8005f4c:	2b60      	cmp	r3, #96	@ 0x60
 8005f4e:	d8b1      	bhi.n	8005eb4 <_scanf_float+0x8c>
 8005f50:	2b54      	cmp	r3, #84	@ 0x54
 8005f52:	d07b      	beq.n	800604c <_scanf_float+0x224>
 8005f54:	2b59      	cmp	r3, #89	@ 0x59
 8005f56:	d19a      	bne.n	8005e8e <_scanf_float+0x66>
 8005f58:	2d07      	cmp	r5, #7
 8005f5a:	d198      	bne.n	8005e8e <_scanf_float+0x66>
 8005f5c:	2508      	movs	r5, #8
 8005f5e:	e02f      	b.n	8005fc0 <_scanf_float+0x198>
 8005f60:	2b74      	cmp	r3, #116	@ 0x74
 8005f62:	d073      	beq.n	800604c <_scanf_float+0x224>
 8005f64:	2b79      	cmp	r3, #121	@ 0x79
 8005f66:	e7f6      	b.n	8005f56 <_scanf_float+0x12e>
 8005f68:	6821      	ldr	r1, [r4, #0]
 8005f6a:	05c8      	lsls	r0, r1, #23
 8005f6c:	d51e      	bpl.n	8005fac <_scanf_float+0x184>
 8005f6e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8005f72:	6021      	str	r1, [r4, #0]
 8005f74:	3701      	adds	r7, #1
 8005f76:	f1bb 0f00 	cmp.w	fp, #0
 8005f7a:	d003      	beq.n	8005f84 <_scanf_float+0x15c>
 8005f7c:	3201      	adds	r2, #1
 8005f7e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005f82:	60a2      	str	r2, [r4, #8]
 8005f84:	68a3      	ldr	r3, [r4, #8]
 8005f86:	3b01      	subs	r3, #1
 8005f88:	60a3      	str	r3, [r4, #8]
 8005f8a:	6923      	ldr	r3, [r4, #16]
 8005f8c:	3301      	adds	r3, #1
 8005f8e:	6123      	str	r3, [r4, #16]
 8005f90:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8005f94:	3b01      	subs	r3, #1
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	f8c9 3004 	str.w	r3, [r9, #4]
 8005f9c:	f340 8082 	ble.w	80060a4 <_scanf_float+0x27c>
 8005fa0:	f8d9 3000 	ldr.w	r3, [r9]
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	f8c9 3000 	str.w	r3, [r9]
 8005faa:	e762      	b.n	8005e72 <_scanf_float+0x4a>
 8005fac:	eb1a 0105 	adds.w	r1, sl, r5
 8005fb0:	f47f af6d 	bne.w	8005e8e <_scanf_float+0x66>
 8005fb4:	6822      	ldr	r2, [r4, #0]
 8005fb6:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8005fba:	6022      	str	r2, [r4, #0]
 8005fbc:	460d      	mov	r5, r1
 8005fbe:	468a      	mov	sl, r1
 8005fc0:	f806 3b01 	strb.w	r3, [r6], #1
 8005fc4:	e7de      	b.n	8005f84 <_scanf_float+0x15c>
 8005fc6:	6822      	ldr	r2, [r4, #0]
 8005fc8:	0610      	lsls	r0, r2, #24
 8005fca:	f57f af60 	bpl.w	8005e8e <_scanf_float+0x66>
 8005fce:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005fd2:	6022      	str	r2, [r4, #0]
 8005fd4:	e7f4      	b.n	8005fc0 <_scanf_float+0x198>
 8005fd6:	f1ba 0f00 	cmp.w	sl, #0
 8005fda:	d10c      	bne.n	8005ff6 <_scanf_float+0x1ce>
 8005fdc:	b977      	cbnz	r7, 8005ffc <_scanf_float+0x1d4>
 8005fde:	6822      	ldr	r2, [r4, #0]
 8005fe0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005fe4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005fe8:	d108      	bne.n	8005ffc <_scanf_float+0x1d4>
 8005fea:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005fee:	6022      	str	r2, [r4, #0]
 8005ff0:	f04f 0a01 	mov.w	sl, #1
 8005ff4:	e7e4      	b.n	8005fc0 <_scanf_float+0x198>
 8005ff6:	f1ba 0f02 	cmp.w	sl, #2
 8005ffa:	d050      	beq.n	800609e <_scanf_float+0x276>
 8005ffc:	2d01      	cmp	r5, #1
 8005ffe:	d002      	beq.n	8006006 <_scanf_float+0x1de>
 8006000:	2d04      	cmp	r5, #4
 8006002:	f47f af44 	bne.w	8005e8e <_scanf_float+0x66>
 8006006:	3501      	adds	r5, #1
 8006008:	b2ed      	uxtb	r5, r5
 800600a:	e7d9      	b.n	8005fc0 <_scanf_float+0x198>
 800600c:	f1ba 0f01 	cmp.w	sl, #1
 8006010:	f47f af3d 	bne.w	8005e8e <_scanf_float+0x66>
 8006014:	f04f 0a02 	mov.w	sl, #2
 8006018:	e7d2      	b.n	8005fc0 <_scanf_float+0x198>
 800601a:	b975      	cbnz	r5, 800603a <_scanf_float+0x212>
 800601c:	2f00      	cmp	r7, #0
 800601e:	f47f af37 	bne.w	8005e90 <_scanf_float+0x68>
 8006022:	6822      	ldr	r2, [r4, #0]
 8006024:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006028:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800602c:	f040 8103 	bne.w	8006236 <_scanf_float+0x40e>
 8006030:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006034:	6022      	str	r2, [r4, #0]
 8006036:	2501      	movs	r5, #1
 8006038:	e7c2      	b.n	8005fc0 <_scanf_float+0x198>
 800603a:	2d03      	cmp	r5, #3
 800603c:	d0e3      	beq.n	8006006 <_scanf_float+0x1de>
 800603e:	2d05      	cmp	r5, #5
 8006040:	e7df      	b.n	8006002 <_scanf_float+0x1da>
 8006042:	2d02      	cmp	r5, #2
 8006044:	f47f af23 	bne.w	8005e8e <_scanf_float+0x66>
 8006048:	2503      	movs	r5, #3
 800604a:	e7b9      	b.n	8005fc0 <_scanf_float+0x198>
 800604c:	2d06      	cmp	r5, #6
 800604e:	f47f af1e 	bne.w	8005e8e <_scanf_float+0x66>
 8006052:	2507      	movs	r5, #7
 8006054:	e7b4      	b.n	8005fc0 <_scanf_float+0x198>
 8006056:	6822      	ldr	r2, [r4, #0]
 8006058:	0591      	lsls	r1, r2, #22
 800605a:	f57f af18 	bpl.w	8005e8e <_scanf_float+0x66>
 800605e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006062:	6022      	str	r2, [r4, #0]
 8006064:	9702      	str	r7, [sp, #8]
 8006066:	e7ab      	b.n	8005fc0 <_scanf_float+0x198>
 8006068:	6822      	ldr	r2, [r4, #0]
 800606a:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800606e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006072:	d005      	beq.n	8006080 <_scanf_float+0x258>
 8006074:	0550      	lsls	r0, r2, #21
 8006076:	f57f af0a 	bpl.w	8005e8e <_scanf_float+0x66>
 800607a:	2f00      	cmp	r7, #0
 800607c:	f000 80db 	beq.w	8006236 <_scanf_float+0x40e>
 8006080:	0591      	lsls	r1, r2, #22
 8006082:	bf58      	it	pl
 8006084:	9902      	ldrpl	r1, [sp, #8]
 8006086:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800608a:	bf58      	it	pl
 800608c:	1a79      	subpl	r1, r7, r1
 800608e:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006092:	bf58      	it	pl
 8006094:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006098:	6022      	str	r2, [r4, #0]
 800609a:	2700      	movs	r7, #0
 800609c:	e790      	b.n	8005fc0 <_scanf_float+0x198>
 800609e:	f04f 0a03 	mov.w	sl, #3
 80060a2:	e78d      	b.n	8005fc0 <_scanf_float+0x198>
 80060a4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80060a8:	4649      	mov	r1, r9
 80060aa:	4640      	mov	r0, r8
 80060ac:	4798      	blx	r3
 80060ae:	2800      	cmp	r0, #0
 80060b0:	f43f aedf 	beq.w	8005e72 <_scanf_float+0x4a>
 80060b4:	e6eb      	b.n	8005e8e <_scanf_float+0x66>
 80060b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80060ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80060be:	464a      	mov	r2, r9
 80060c0:	4640      	mov	r0, r8
 80060c2:	4798      	blx	r3
 80060c4:	6923      	ldr	r3, [r4, #16]
 80060c6:	3b01      	subs	r3, #1
 80060c8:	6123      	str	r3, [r4, #16]
 80060ca:	e6eb      	b.n	8005ea4 <_scanf_float+0x7c>
 80060cc:	1e6b      	subs	r3, r5, #1
 80060ce:	2b06      	cmp	r3, #6
 80060d0:	d824      	bhi.n	800611c <_scanf_float+0x2f4>
 80060d2:	2d02      	cmp	r5, #2
 80060d4:	d836      	bhi.n	8006144 <_scanf_float+0x31c>
 80060d6:	9b01      	ldr	r3, [sp, #4]
 80060d8:	429e      	cmp	r6, r3
 80060da:	f67f aee7 	bls.w	8005eac <_scanf_float+0x84>
 80060de:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80060e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80060e6:	464a      	mov	r2, r9
 80060e8:	4640      	mov	r0, r8
 80060ea:	4798      	blx	r3
 80060ec:	6923      	ldr	r3, [r4, #16]
 80060ee:	3b01      	subs	r3, #1
 80060f0:	6123      	str	r3, [r4, #16]
 80060f2:	e7f0      	b.n	80060d6 <_scanf_float+0x2ae>
 80060f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80060f8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80060fc:	464a      	mov	r2, r9
 80060fe:	4640      	mov	r0, r8
 8006100:	4798      	blx	r3
 8006102:	6923      	ldr	r3, [r4, #16]
 8006104:	3b01      	subs	r3, #1
 8006106:	6123      	str	r3, [r4, #16]
 8006108:	f10a 3aff 	add.w	sl, sl, #4294967295
 800610c:	fa5f fa8a 	uxtb.w	sl, sl
 8006110:	f1ba 0f02 	cmp.w	sl, #2
 8006114:	d1ee      	bne.n	80060f4 <_scanf_float+0x2cc>
 8006116:	3d03      	subs	r5, #3
 8006118:	b2ed      	uxtb	r5, r5
 800611a:	1b76      	subs	r6, r6, r5
 800611c:	6823      	ldr	r3, [r4, #0]
 800611e:	05da      	lsls	r2, r3, #23
 8006120:	d530      	bpl.n	8006184 <_scanf_float+0x35c>
 8006122:	055b      	lsls	r3, r3, #21
 8006124:	d511      	bpl.n	800614a <_scanf_float+0x322>
 8006126:	9b01      	ldr	r3, [sp, #4]
 8006128:	429e      	cmp	r6, r3
 800612a:	f67f aebf 	bls.w	8005eac <_scanf_float+0x84>
 800612e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006132:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006136:	464a      	mov	r2, r9
 8006138:	4640      	mov	r0, r8
 800613a:	4798      	blx	r3
 800613c:	6923      	ldr	r3, [r4, #16]
 800613e:	3b01      	subs	r3, #1
 8006140:	6123      	str	r3, [r4, #16]
 8006142:	e7f0      	b.n	8006126 <_scanf_float+0x2fe>
 8006144:	46aa      	mov	sl, r5
 8006146:	46b3      	mov	fp, r6
 8006148:	e7de      	b.n	8006108 <_scanf_float+0x2e0>
 800614a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800614e:	6923      	ldr	r3, [r4, #16]
 8006150:	2965      	cmp	r1, #101	@ 0x65
 8006152:	f103 33ff 	add.w	r3, r3, #4294967295
 8006156:	f106 35ff 	add.w	r5, r6, #4294967295
 800615a:	6123      	str	r3, [r4, #16]
 800615c:	d00c      	beq.n	8006178 <_scanf_float+0x350>
 800615e:	2945      	cmp	r1, #69	@ 0x45
 8006160:	d00a      	beq.n	8006178 <_scanf_float+0x350>
 8006162:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006166:	464a      	mov	r2, r9
 8006168:	4640      	mov	r0, r8
 800616a:	4798      	blx	r3
 800616c:	6923      	ldr	r3, [r4, #16]
 800616e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006172:	3b01      	subs	r3, #1
 8006174:	1eb5      	subs	r5, r6, #2
 8006176:	6123      	str	r3, [r4, #16]
 8006178:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800617c:	464a      	mov	r2, r9
 800617e:	4640      	mov	r0, r8
 8006180:	4798      	blx	r3
 8006182:	462e      	mov	r6, r5
 8006184:	6822      	ldr	r2, [r4, #0]
 8006186:	f012 0210 	ands.w	r2, r2, #16
 800618a:	d001      	beq.n	8006190 <_scanf_float+0x368>
 800618c:	2000      	movs	r0, #0
 800618e:	e68e      	b.n	8005eae <_scanf_float+0x86>
 8006190:	7032      	strb	r2, [r6, #0]
 8006192:	6823      	ldr	r3, [r4, #0]
 8006194:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006198:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800619c:	d125      	bne.n	80061ea <_scanf_float+0x3c2>
 800619e:	9b02      	ldr	r3, [sp, #8]
 80061a0:	429f      	cmp	r7, r3
 80061a2:	d00a      	beq.n	80061ba <_scanf_float+0x392>
 80061a4:	1bda      	subs	r2, r3, r7
 80061a6:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80061aa:	429e      	cmp	r6, r3
 80061ac:	bf28      	it	cs
 80061ae:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80061b2:	4922      	ldr	r1, [pc, #136]	@ (800623c <_scanf_float+0x414>)
 80061b4:	4630      	mov	r0, r6
 80061b6:	f000 f907 	bl	80063c8 <siprintf>
 80061ba:	9901      	ldr	r1, [sp, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	4640      	mov	r0, r8
 80061c0:	f002 fbfa 	bl	80089b8 <_strtod_r>
 80061c4:	9b03      	ldr	r3, [sp, #12]
 80061c6:	6821      	ldr	r1, [r4, #0]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f011 0f02 	tst.w	r1, #2
 80061ce:	ec57 6b10 	vmov	r6, r7, d0
 80061d2:	f103 0204 	add.w	r2, r3, #4
 80061d6:	d015      	beq.n	8006204 <_scanf_float+0x3dc>
 80061d8:	9903      	ldr	r1, [sp, #12]
 80061da:	600a      	str	r2, [r1, #0]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	e9c3 6700 	strd	r6, r7, [r3]
 80061e2:	68e3      	ldr	r3, [r4, #12]
 80061e4:	3301      	adds	r3, #1
 80061e6:	60e3      	str	r3, [r4, #12]
 80061e8:	e7d0      	b.n	800618c <_scanf_float+0x364>
 80061ea:	9b04      	ldr	r3, [sp, #16]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d0e4      	beq.n	80061ba <_scanf_float+0x392>
 80061f0:	9905      	ldr	r1, [sp, #20]
 80061f2:	230a      	movs	r3, #10
 80061f4:	3101      	adds	r1, #1
 80061f6:	4640      	mov	r0, r8
 80061f8:	f002 fc5e 	bl	8008ab8 <_strtol_r>
 80061fc:	9b04      	ldr	r3, [sp, #16]
 80061fe:	9e05      	ldr	r6, [sp, #20]
 8006200:	1ac2      	subs	r2, r0, r3
 8006202:	e7d0      	b.n	80061a6 <_scanf_float+0x37e>
 8006204:	f011 0f04 	tst.w	r1, #4
 8006208:	9903      	ldr	r1, [sp, #12]
 800620a:	600a      	str	r2, [r1, #0]
 800620c:	d1e6      	bne.n	80061dc <_scanf_float+0x3b4>
 800620e:	681d      	ldr	r5, [r3, #0]
 8006210:	4632      	mov	r2, r6
 8006212:	463b      	mov	r3, r7
 8006214:	4630      	mov	r0, r6
 8006216:	4639      	mov	r1, r7
 8006218:	f7fa fcb0 	bl	8000b7c <__aeabi_dcmpun>
 800621c:	b128      	cbz	r0, 800622a <_scanf_float+0x402>
 800621e:	4808      	ldr	r0, [pc, #32]	@ (8006240 <_scanf_float+0x418>)
 8006220:	f000 f9c0 	bl	80065a4 <nanf>
 8006224:	ed85 0a00 	vstr	s0, [r5]
 8006228:	e7db      	b.n	80061e2 <_scanf_float+0x3ba>
 800622a:	4630      	mov	r0, r6
 800622c:	4639      	mov	r1, r7
 800622e:	f7fa fd03 	bl	8000c38 <__aeabi_d2f>
 8006232:	6028      	str	r0, [r5, #0]
 8006234:	e7d5      	b.n	80061e2 <_scanf_float+0x3ba>
 8006236:	2700      	movs	r7, #0
 8006238:	e62e      	b.n	8005e98 <_scanf_float+0x70>
 800623a:	bf00      	nop
 800623c:	08009dc0 	.word	0x08009dc0
 8006240:	08009f01 	.word	0x08009f01

08006244 <std>:
 8006244:	2300      	movs	r3, #0
 8006246:	b510      	push	{r4, lr}
 8006248:	4604      	mov	r4, r0
 800624a:	e9c0 3300 	strd	r3, r3, [r0]
 800624e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006252:	6083      	str	r3, [r0, #8]
 8006254:	8181      	strh	r1, [r0, #12]
 8006256:	6643      	str	r3, [r0, #100]	@ 0x64
 8006258:	81c2      	strh	r2, [r0, #14]
 800625a:	6183      	str	r3, [r0, #24]
 800625c:	4619      	mov	r1, r3
 800625e:	2208      	movs	r2, #8
 8006260:	305c      	adds	r0, #92	@ 0x5c
 8006262:	f000 f916 	bl	8006492 <memset>
 8006266:	4b0d      	ldr	r3, [pc, #52]	@ (800629c <std+0x58>)
 8006268:	6263      	str	r3, [r4, #36]	@ 0x24
 800626a:	4b0d      	ldr	r3, [pc, #52]	@ (80062a0 <std+0x5c>)
 800626c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800626e:	4b0d      	ldr	r3, [pc, #52]	@ (80062a4 <std+0x60>)
 8006270:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006272:	4b0d      	ldr	r3, [pc, #52]	@ (80062a8 <std+0x64>)
 8006274:	6323      	str	r3, [r4, #48]	@ 0x30
 8006276:	4b0d      	ldr	r3, [pc, #52]	@ (80062ac <std+0x68>)
 8006278:	6224      	str	r4, [r4, #32]
 800627a:	429c      	cmp	r4, r3
 800627c:	d006      	beq.n	800628c <std+0x48>
 800627e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006282:	4294      	cmp	r4, r2
 8006284:	d002      	beq.n	800628c <std+0x48>
 8006286:	33d0      	adds	r3, #208	@ 0xd0
 8006288:	429c      	cmp	r4, r3
 800628a:	d105      	bne.n	8006298 <std+0x54>
 800628c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006294:	f000 b97a 	b.w	800658c <__retarget_lock_init_recursive>
 8006298:	bd10      	pop	{r4, pc}
 800629a:	bf00      	nop
 800629c:	0800640d 	.word	0x0800640d
 80062a0:	0800642f 	.word	0x0800642f
 80062a4:	08006467 	.word	0x08006467
 80062a8:	0800648b 	.word	0x0800648b
 80062ac:	20000354 	.word	0x20000354

080062b0 <stdio_exit_handler>:
 80062b0:	4a02      	ldr	r2, [pc, #8]	@ (80062bc <stdio_exit_handler+0xc>)
 80062b2:	4903      	ldr	r1, [pc, #12]	@ (80062c0 <stdio_exit_handler+0x10>)
 80062b4:	4803      	ldr	r0, [pc, #12]	@ (80062c4 <stdio_exit_handler+0x14>)
 80062b6:	f000 b869 	b.w	800638c <_fwalk_sglue>
 80062ba:	bf00      	nop
 80062bc:	2000000c 	.word	0x2000000c
 80062c0:	08008e75 	.word	0x08008e75
 80062c4:	2000001c 	.word	0x2000001c

080062c8 <cleanup_stdio>:
 80062c8:	6841      	ldr	r1, [r0, #4]
 80062ca:	4b0c      	ldr	r3, [pc, #48]	@ (80062fc <cleanup_stdio+0x34>)
 80062cc:	4299      	cmp	r1, r3
 80062ce:	b510      	push	{r4, lr}
 80062d0:	4604      	mov	r4, r0
 80062d2:	d001      	beq.n	80062d8 <cleanup_stdio+0x10>
 80062d4:	f002 fdce 	bl	8008e74 <_fflush_r>
 80062d8:	68a1      	ldr	r1, [r4, #8]
 80062da:	4b09      	ldr	r3, [pc, #36]	@ (8006300 <cleanup_stdio+0x38>)
 80062dc:	4299      	cmp	r1, r3
 80062de:	d002      	beq.n	80062e6 <cleanup_stdio+0x1e>
 80062e0:	4620      	mov	r0, r4
 80062e2:	f002 fdc7 	bl	8008e74 <_fflush_r>
 80062e6:	68e1      	ldr	r1, [r4, #12]
 80062e8:	4b06      	ldr	r3, [pc, #24]	@ (8006304 <cleanup_stdio+0x3c>)
 80062ea:	4299      	cmp	r1, r3
 80062ec:	d004      	beq.n	80062f8 <cleanup_stdio+0x30>
 80062ee:	4620      	mov	r0, r4
 80062f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062f4:	f002 bdbe 	b.w	8008e74 <_fflush_r>
 80062f8:	bd10      	pop	{r4, pc}
 80062fa:	bf00      	nop
 80062fc:	20000354 	.word	0x20000354
 8006300:	200003bc 	.word	0x200003bc
 8006304:	20000424 	.word	0x20000424

08006308 <global_stdio_init.part.0>:
 8006308:	b510      	push	{r4, lr}
 800630a:	4b0b      	ldr	r3, [pc, #44]	@ (8006338 <global_stdio_init.part.0+0x30>)
 800630c:	4c0b      	ldr	r4, [pc, #44]	@ (800633c <global_stdio_init.part.0+0x34>)
 800630e:	4a0c      	ldr	r2, [pc, #48]	@ (8006340 <global_stdio_init.part.0+0x38>)
 8006310:	601a      	str	r2, [r3, #0]
 8006312:	4620      	mov	r0, r4
 8006314:	2200      	movs	r2, #0
 8006316:	2104      	movs	r1, #4
 8006318:	f7ff ff94 	bl	8006244 <std>
 800631c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006320:	2201      	movs	r2, #1
 8006322:	2109      	movs	r1, #9
 8006324:	f7ff ff8e 	bl	8006244 <std>
 8006328:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800632c:	2202      	movs	r2, #2
 800632e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006332:	2112      	movs	r1, #18
 8006334:	f7ff bf86 	b.w	8006244 <std>
 8006338:	2000048c 	.word	0x2000048c
 800633c:	20000354 	.word	0x20000354
 8006340:	080062b1 	.word	0x080062b1

08006344 <__sfp_lock_acquire>:
 8006344:	4801      	ldr	r0, [pc, #4]	@ (800634c <__sfp_lock_acquire+0x8>)
 8006346:	f000 b922 	b.w	800658e <__retarget_lock_acquire_recursive>
 800634a:	bf00      	nop
 800634c:	20000495 	.word	0x20000495

08006350 <__sfp_lock_release>:
 8006350:	4801      	ldr	r0, [pc, #4]	@ (8006358 <__sfp_lock_release+0x8>)
 8006352:	f000 b91d 	b.w	8006590 <__retarget_lock_release_recursive>
 8006356:	bf00      	nop
 8006358:	20000495 	.word	0x20000495

0800635c <__sinit>:
 800635c:	b510      	push	{r4, lr}
 800635e:	4604      	mov	r4, r0
 8006360:	f7ff fff0 	bl	8006344 <__sfp_lock_acquire>
 8006364:	6a23      	ldr	r3, [r4, #32]
 8006366:	b11b      	cbz	r3, 8006370 <__sinit+0x14>
 8006368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800636c:	f7ff bff0 	b.w	8006350 <__sfp_lock_release>
 8006370:	4b04      	ldr	r3, [pc, #16]	@ (8006384 <__sinit+0x28>)
 8006372:	6223      	str	r3, [r4, #32]
 8006374:	4b04      	ldr	r3, [pc, #16]	@ (8006388 <__sinit+0x2c>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d1f5      	bne.n	8006368 <__sinit+0xc>
 800637c:	f7ff ffc4 	bl	8006308 <global_stdio_init.part.0>
 8006380:	e7f2      	b.n	8006368 <__sinit+0xc>
 8006382:	bf00      	nop
 8006384:	080062c9 	.word	0x080062c9
 8006388:	2000048c 	.word	0x2000048c

0800638c <_fwalk_sglue>:
 800638c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006390:	4607      	mov	r7, r0
 8006392:	4688      	mov	r8, r1
 8006394:	4614      	mov	r4, r2
 8006396:	2600      	movs	r6, #0
 8006398:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800639c:	f1b9 0901 	subs.w	r9, r9, #1
 80063a0:	d505      	bpl.n	80063ae <_fwalk_sglue+0x22>
 80063a2:	6824      	ldr	r4, [r4, #0]
 80063a4:	2c00      	cmp	r4, #0
 80063a6:	d1f7      	bne.n	8006398 <_fwalk_sglue+0xc>
 80063a8:	4630      	mov	r0, r6
 80063aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063ae:	89ab      	ldrh	r3, [r5, #12]
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d907      	bls.n	80063c4 <_fwalk_sglue+0x38>
 80063b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80063b8:	3301      	adds	r3, #1
 80063ba:	d003      	beq.n	80063c4 <_fwalk_sglue+0x38>
 80063bc:	4629      	mov	r1, r5
 80063be:	4638      	mov	r0, r7
 80063c0:	47c0      	blx	r8
 80063c2:	4306      	orrs	r6, r0
 80063c4:	3568      	adds	r5, #104	@ 0x68
 80063c6:	e7e9      	b.n	800639c <_fwalk_sglue+0x10>

080063c8 <siprintf>:
 80063c8:	b40e      	push	{r1, r2, r3}
 80063ca:	b510      	push	{r4, lr}
 80063cc:	b09d      	sub	sp, #116	@ 0x74
 80063ce:	ab1f      	add	r3, sp, #124	@ 0x7c
 80063d0:	9002      	str	r0, [sp, #8]
 80063d2:	9006      	str	r0, [sp, #24]
 80063d4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80063d8:	480a      	ldr	r0, [pc, #40]	@ (8006404 <siprintf+0x3c>)
 80063da:	9107      	str	r1, [sp, #28]
 80063dc:	9104      	str	r1, [sp, #16]
 80063de:	490a      	ldr	r1, [pc, #40]	@ (8006408 <siprintf+0x40>)
 80063e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80063e4:	9105      	str	r1, [sp, #20]
 80063e6:	2400      	movs	r4, #0
 80063e8:	a902      	add	r1, sp, #8
 80063ea:	6800      	ldr	r0, [r0, #0]
 80063ec:	9301      	str	r3, [sp, #4]
 80063ee:	941b      	str	r4, [sp, #108]	@ 0x6c
 80063f0:	f002 fbc0 	bl	8008b74 <_svfiprintf_r>
 80063f4:	9b02      	ldr	r3, [sp, #8]
 80063f6:	701c      	strb	r4, [r3, #0]
 80063f8:	b01d      	add	sp, #116	@ 0x74
 80063fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063fe:	b003      	add	sp, #12
 8006400:	4770      	bx	lr
 8006402:	bf00      	nop
 8006404:	20000018 	.word	0x20000018
 8006408:	ffff0208 	.word	0xffff0208

0800640c <__sread>:
 800640c:	b510      	push	{r4, lr}
 800640e:	460c      	mov	r4, r1
 8006410:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006414:	f000 f86c 	bl	80064f0 <_read_r>
 8006418:	2800      	cmp	r0, #0
 800641a:	bfab      	itete	ge
 800641c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800641e:	89a3      	ldrhlt	r3, [r4, #12]
 8006420:	181b      	addge	r3, r3, r0
 8006422:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006426:	bfac      	ite	ge
 8006428:	6563      	strge	r3, [r4, #84]	@ 0x54
 800642a:	81a3      	strhlt	r3, [r4, #12]
 800642c:	bd10      	pop	{r4, pc}

0800642e <__swrite>:
 800642e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006432:	461f      	mov	r7, r3
 8006434:	898b      	ldrh	r3, [r1, #12]
 8006436:	05db      	lsls	r3, r3, #23
 8006438:	4605      	mov	r5, r0
 800643a:	460c      	mov	r4, r1
 800643c:	4616      	mov	r6, r2
 800643e:	d505      	bpl.n	800644c <__swrite+0x1e>
 8006440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006444:	2302      	movs	r3, #2
 8006446:	2200      	movs	r2, #0
 8006448:	f000 f840 	bl	80064cc <_lseek_r>
 800644c:	89a3      	ldrh	r3, [r4, #12]
 800644e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006452:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006456:	81a3      	strh	r3, [r4, #12]
 8006458:	4632      	mov	r2, r6
 800645a:	463b      	mov	r3, r7
 800645c:	4628      	mov	r0, r5
 800645e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006462:	f000 b857 	b.w	8006514 <_write_r>

08006466 <__sseek>:
 8006466:	b510      	push	{r4, lr}
 8006468:	460c      	mov	r4, r1
 800646a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800646e:	f000 f82d 	bl	80064cc <_lseek_r>
 8006472:	1c43      	adds	r3, r0, #1
 8006474:	89a3      	ldrh	r3, [r4, #12]
 8006476:	bf15      	itete	ne
 8006478:	6560      	strne	r0, [r4, #84]	@ 0x54
 800647a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800647e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006482:	81a3      	strheq	r3, [r4, #12]
 8006484:	bf18      	it	ne
 8006486:	81a3      	strhne	r3, [r4, #12]
 8006488:	bd10      	pop	{r4, pc}

0800648a <__sclose>:
 800648a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800648e:	f000 b80d 	b.w	80064ac <_close_r>

08006492 <memset>:
 8006492:	4402      	add	r2, r0
 8006494:	4603      	mov	r3, r0
 8006496:	4293      	cmp	r3, r2
 8006498:	d100      	bne.n	800649c <memset+0xa>
 800649a:	4770      	bx	lr
 800649c:	f803 1b01 	strb.w	r1, [r3], #1
 80064a0:	e7f9      	b.n	8006496 <memset+0x4>
	...

080064a4 <_localeconv_r>:
 80064a4:	4800      	ldr	r0, [pc, #0]	@ (80064a8 <_localeconv_r+0x4>)
 80064a6:	4770      	bx	lr
 80064a8:	20000158 	.word	0x20000158

080064ac <_close_r>:
 80064ac:	b538      	push	{r3, r4, r5, lr}
 80064ae:	4d06      	ldr	r5, [pc, #24]	@ (80064c8 <_close_r+0x1c>)
 80064b0:	2300      	movs	r3, #0
 80064b2:	4604      	mov	r4, r0
 80064b4:	4608      	mov	r0, r1
 80064b6:	602b      	str	r3, [r5, #0]
 80064b8:	f7fb faf8 	bl	8001aac <_close>
 80064bc:	1c43      	adds	r3, r0, #1
 80064be:	d102      	bne.n	80064c6 <_close_r+0x1a>
 80064c0:	682b      	ldr	r3, [r5, #0]
 80064c2:	b103      	cbz	r3, 80064c6 <_close_r+0x1a>
 80064c4:	6023      	str	r3, [r4, #0]
 80064c6:	bd38      	pop	{r3, r4, r5, pc}
 80064c8:	20000490 	.word	0x20000490

080064cc <_lseek_r>:
 80064cc:	b538      	push	{r3, r4, r5, lr}
 80064ce:	4d07      	ldr	r5, [pc, #28]	@ (80064ec <_lseek_r+0x20>)
 80064d0:	4604      	mov	r4, r0
 80064d2:	4608      	mov	r0, r1
 80064d4:	4611      	mov	r1, r2
 80064d6:	2200      	movs	r2, #0
 80064d8:	602a      	str	r2, [r5, #0]
 80064da:	461a      	mov	r2, r3
 80064dc:	f7fb fb0d 	bl	8001afa <_lseek>
 80064e0:	1c43      	adds	r3, r0, #1
 80064e2:	d102      	bne.n	80064ea <_lseek_r+0x1e>
 80064e4:	682b      	ldr	r3, [r5, #0]
 80064e6:	b103      	cbz	r3, 80064ea <_lseek_r+0x1e>
 80064e8:	6023      	str	r3, [r4, #0]
 80064ea:	bd38      	pop	{r3, r4, r5, pc}
 80064ec:	20000490 	.word	0x20000490

080064f0 <_read_r>:
 80064f0:	b538      	push	{r3, r4, r5, lr}
 80064f2:	4d07      	ldr	r5, [pc, #28]	@ (8006510 <_read_r+0x20>)
 80064f4:	4604      	mov	r4, r0
 80064f6:	4608      	mov	r0, r1
 80064f8:	4611      	mov	r1, r2
 80064fa:	2200      	movs	r2, #0
 80064fc:	602a      	str	r2, [r5, #0]
 80064fe:	461a      	mov	r2, r3
 8006500:	f7fb fa9b 	bl	8001a3a <_read>
 8006504:	1c43      	adds	r3, r0, #1
 8006506:	d102      	bne.n	800650e <_read_r+0x1e>
 8006508:	682b      	ldr	r3, [r5, #0]
 800650a:	b103      	cbz	r3, 800650e <_read_r+0x1e>
 800650c:	6023      	str	r3, [r4, #0]
 800650e:	bd38      	pop	{r3, r4, r5, pc}
 8006510:	20000490 	.word	0x20000490

08006514 <_write_r>:
 8006514:	b538      	push	{r3, r4, r5, lr}
 8006516:	4d07      	ldr	r5, [pc, #28]	@ (8006534 <_write_r+0x20>)
 8006518:	4604      	mov	r4, r0
 800651a:	4608      	mov	r0, r1
 800651c:	4611      	mov	r1, r2
 800651e:	2200      	movs	r2, #0
 8006520:	602a      	str	r2, [r5, #0]
 8006522:	461a      	mov	r2, r3
 8006524:	f7fb faa6 	bl	8001a74 <_write>
 8006528:	1c43      	adds	r3, r0, #1
 800652a:	d102      	bne.n	8006532 <_write_r+0x1e>
 800652c:	682b      	ldr	r3, [r5, #0]
 800652e:	b103      	cbz	r3, 8006532 <_write_r+0x1e>
 8006530:	6023      	str	r3, [r4, #0]
 8006532:	bd38      	pop	{r3, r4, r5, pc}
 8006534:	20000490 	.word	0x20000490

08006538 <__errno>:
 8006538:	4b01      	ldr	r3, [pc, #4]	@ (8006540 <__errno+0x8>)
 800653a:	6818      	ldr	r0, [r3, #0]
 800653c:	4770      	bx	lr
 800653e:	bf00      	nop
 8006540:	20000018 	.word	0x20000018

08006544 <__libc_init_array>:
 8006544:	b570      	push	{r4, r5, r6, lr}
 8006546:	4d0d      	ldr	r5, [pc, #52]	@ (800657c <__libc_init_array+0x38>)
 8006548:	4c0d      	ldr	r4, [pc, #52]	@ (8006580 <__libc_init_array+0x3c>)
 800654a:	1b64      	subs	r4, r4, r5
 800654c:	10a4      	asrs	r4, r4, #2
 800654e:	2600      	movs	r6, #0
 8006550:	42a6      	cmp	r6, r4
 8006552:	d109      	bne.n	8006568 <__libc_init_array+0x24>
 8006554:	4d0b      	ldr	r5, [pc, #44]	@ (8006584 <__libc_init_array+0x40>)
 8006556:	4c0c      	ldr	r4, [pc, #48]	@ (8006588 <__libc_init_array+0x44>)
 8006558:	f003 fb7c 	bl	8009c54 <_init>
 800655c:	1b64      	subs	r4, r4, r5
 800655e:	10a4      	asrs	r4, r4, #2
 8006560:	2600      	movs	r6, #0
 8006562:	42a6      	cmp	r6, r4
 8006564:	d105      	bne.n	8006572 <__libc_init_array+0x2e>
 8006566:	bd70      	pop	{r4, r5, r6, pc}
 8006568:	f855 3b04 	ldr.w	r3, [r5], #4
 800656c:	4798      	blx	r3
 800656e:	3601      	adds	r6, #1
 8006570:	e7ee      	b.n	8006550 <__libc_init_array+0xc>
 8006572:	f855 3b04 	ldr.w	r3, [r5], #4
 8006576:	4798      	blx	r3
 8006578:	3601      	adds	r6, #1
 800657a:	e7f2      	b.n	8006562 <__libc_init_array+0x1e>
 800657c:	0800a1bc 	.word	0x0800a1bc
 8006580:	0800a1bc 	.word	0x0800a1bc
 8006584:	0800a1bc 	.word	0x0800a1bc
 8006588:	0800a1c0 	.word	0x0800a1c0

0800658c <__retarget_lock_init_recursive>:
 800658c:	4770      	bx	lr

0800658e <__retarget_lock_acquire_recursive>:
 800658e:	4770      	bx	lr

08006590 <__retarget_lock_release_recursive>:
 8006590:	4770      	bx	lr

08006592 <strcpy>:
 8006592:	4603      	mov	r3, r0
 8006594:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006598:	f803 2b01 	strb.w	r2, [r3], #1
 800659c:	2a00      	cmp	r2, #0
 800659e:	d1f9      	bne.n	8006594 <strcpy+0x2>
 80065a0:	4770      	bx	lr
	...

080065a4 <nanf>:
 80065a4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80065ac <nanf+0x8>
 80065a8:	4770      	bx	lr
 80065aa:	bf00      	nop
 80065ac:	7fc00000 	.word	0x7fc00000

080065b0 <quorem>:
 80065b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065b4:	6903      	ldr	r3, [r0, #16]
 80065b6:	690c      	ldr	r4, [r1, #16]
 80065b8:	42a3      	cmp	r3, r4
 80065ba:	4607      	mov	r7, r0
 80065bc:	db7e      	blt.n	80066bc <quorem+0x10c>
 80065be:	3c01      	subs	r4, #1
 80065c0:	f101 0814 	add.w	r8, r1, #20
 80065c4:	00a3      	lsls	r3, r4, #2
 80065c6:	f100 0514 	add.w	r5, r0, #20
 80065ca:	9300      	str	r3, [sp, #0]
 80065cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80065d0:	9301      	str	r3, [sp, #4]
 80065d2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80065d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80065da:	3301      	adds	r3, #1
 80065dc:	429a      	cmp	r2, r3
 80065de:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80065e2:	fbb2 f6f3 	udiv	r6, r2, r3
 80065e6:	d32e      	bcc.n	8006646 <quorem+0x96>
 80065e8:	f04f 0a00 	mov.w	sl, #0
 80065ec:	46c4      	mov	ip, r8
 80065ee:	46ae      	mov	lr, r5
 80065f0:	46d3      	mov	fp, sl
 80065f2:	f85c 3b04 	ldr.w	r3, [ip], #4
 80065f6:	b298      	uxth	r0, r3
 80065f8:	fb06 a000 	mla	r0, r6, r0, sl
 80065fc:	0c02      	lsrs	r2, r0, #16
 80065fe:	0c1b      	lsrs	r3, r3, #16
 8006600:	fb06 2303 	mla	r3, r6, r3, r2
 8006604:	f8de 2000 	ldr.w	r2, [lr]
 8006608:	b280      	uxth	r0, r0
 800660a:	b292      	uxth	r2, r2
 800660c:	1a12      	subs	r2, r2, r0
 800660e:	445a      	add	r2, fp
 8006610:	f8de 0000 	ldr.w	r0, [lr]
 8006614:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006618:	b29b      	uxth	r3, r3
 800661a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800661e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006622:	b292      	uxth	r2, r2
 8006624:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006628:	45e1      	cmp	r9, ip
 800662a:	f84e 2b04 	str.w	r2, [lr], #4
 800662e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006632:	d2de      	bcs.n	80065f2 <quorem+0x42>
 8006634:	9b00      	ldr	r3, [sp, #0]
 8006636:	58eb      	ldr	r3, [r5, r3]
 8006638:	b92b      	cbnz	r3, 8006646 <quorem+0x96>
 800663a:	9b01      	ldr	r3, [sp, #4]
 800663c:	3b04      	subs	r3, #4
 800663e:	429d      	cmp	r5, r3
 8006640:	461a      	mov	r2, r3
 8006642:	d32f      	bcc.n	80066a4 <quorem+0xf4>
 8006644:	613c      	str	r4, [r7, #16]
 8006646:	4638      	mov	r0, r7
 8006648:	f001 f9c6 	bl	80079d8 <__mcmp>
 800664c:	2800      	cmp	r0, #0
 800664e:	db25      	blt.n	800669c <quorem+0xec>
 8006650:	4629      	mov	r1, r5
 8006652:	2000      	movs	r0, #0
 8006654:	f858 2b04 	ldr.w	r2, [r8], #4
 8006658:	f8d1 c000 	ldr.w	ip, [r1]
 800665c:	fa1f fe82 	uxth.w	lr, r2
 8006660:	fa1f f38c 	uxth.w	r3, ip
 8006664:	eba3 030e 	sub.w	r3, r3, lr
 8006668:	4403      	add	r3, r0
 800666a:	0c12      	lsrs	r2, r2, #16
 800666c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006670:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006674:	b29b      	uxth	r3, r3
 8006676:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800667a:	45c1      	cmp	r9, r8
 800667c:	f841 3b04 	str.w	r3, [r1], #4
 8006680:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006684:	d2e6      	bcs.n	8006654 <quorem+0xa4>
 8006686:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800668a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800668e:	b922      	cbnz	r2, 800669a <quorem+0xea>
 8006690:	3b04      	subs	r3, #4
 8006692:	429d      	cmp	r5, r3
 8006694:	461a      	mov	r2, r3
 8006696:	d30b      	bcc.n	80066b0 <quorem+0x100>
 8006698:	613c      	str	r4, [r7, #16]
 800669a:	3601      	adds	r6, #1
 800669c:	4630      	mov	r0, r6
 800669e:	b003      	add	sp, #12
 80066a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066a4:	6812      	ldr	r2, [r2, #0]
 80066a6:	3b04      	subs	r3, #4
 80066a8:	2a00      	cmp	r2, #0
 80066aa:	d1cb      	bne.n	8006644 <quorem+0x94>
 80066ac:	3c01      	subs	r4, #1
 80066ae:	e7c6      	b.n	800663e <quorem+0x8e>
 80066b0:	6812      	ldr	r2, [r2, #0]
 80066b2:	3b04      	subs	r3, #4
 80066b4:	2a00      	cmp	r2, #0
 80066b6:	d1ef      	bne.n	8006698 <quorem+0xe8>
 80066b8:	3c01      	subs	r4, #1
 80066ba:	e7ea      	b.n	8006692 <quorem+0xe2>
 80066bc:	2000      	movs	r0, #0
 80066be:	e7ee      	b.n	800669e <quorem+0xee>

080066c0 <_dtoa_r>:
 80066c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066c4:	69c7      	ldr	r7, [r0, #28]
 80066c6:	b097      	sub	sp, #92	@ 0x5c
 80066c8:	ed8d 0b04 	vstr	d0, [sp, #16]
 80066cc:	ec55 4b10 	vmov	r4, r5, d0
 80066d0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80066d2:	9107      	str	r1, [sp, #28]
 80066d4:	4681      	mov	r9, r0
 80066d6:	920c      	str	r2, [sp, #48]	@ 0x30
 80066d8:	9311      	str	r3, [sp, #68]	@ 0x44
 80066da:	b97f      	cbnz	r7, 80066fc <_dtoa_r+0x3c>
 80066dc:	2010      	movs	r0, #16
 80066de:	f000 fe09 	bl	80072f4 <malloc>
 80066e2:	4602      	mov	r2, r0
 80066e4:	f8c9 001c 	str.w	r0, [r9, #28]
 80066e8:	b920      	cbnz	r0, 80066f4 <_dtoa_r+0x34>
 80066ea:	4ba9      	ldr	r3, [pc, #676]	@ (8006990 <_dtoa_r+0x2d0>)
 80066ec:	21ef      	movs	r1, #239	@ 0xef
 80066ee:	48a9      	ldr	r0, [pc, #676]	@ (8006994 <_dtoa_r+0x2d4>)
 80066f0:	f002 fc3a 	bl	8008f68 <__assert_func>
 80066f4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80066f8:	6007      	str	r7, [r0, #0]
 80066fa:	60c7      	str	r7, [r0, #12]
 80066fc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006700:	6819      	ldr	r1, [r3, #0]
 8006702:	b159      	cbz	r1, 800671c <_dtoa_r+0x5c>
 8006704:	685a      	ldr	r2, [r3, #4]
 8006706:	604a      	str	r2, [r1, #4]
 8006708:	2301      	movs	r3, #1
 800670a:	4093      	lsls	r3, r2
 800670c:	608b      	str	r3, [r1, #8]
 800670e:	4648      	mov	r0, r9
 8006710:	f000 fee6 	bl	80074e0 <_Bfree>
 8006714:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006718:	2200      	movs	r2, #0
 800671a:	601a      	str	r2, [r3, #0]
 800671c:	1e2b      	subs	r3, r5, #0
 800671e:	bfb9      	ittee	lt
 8006720:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006724:	9305      	strlt	r3, [sp, #20]
 8006726:	2300      	movge	r3, #0
 8006728:	6033      	strge	r3, [r6, #0]
 800672a:	9f05      	ldr	r7, [sp, #20]
 800672c:	4b9a      	ldr	r3, [pc, #616]	@ (8006998 <_dtoa_r+0x2d8>)
 800672e:	bfbc      	itt	lt
 8006730:	2201      	movlt	r2, #1
 8006732:	6032      	strlt	r2, [r6, #0]
 8006734:	43bb      	bics	r3, r7
 8006736:	d112      	bne.n	800675e <_dtoa_r+0x9e>
 8006738:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800673a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800673e:	6013      	str	r3, [r2, #0]
 8006740:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006744:	4323      	orrs	r3, r4
 8006746:	f000 855a 	beq.w	80071fe <_dtoa_r+0xb3e>
 800674a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800674c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80069ac <_dtoa_r+0x2ec>
 8006750:	2b00      	cmp	r3, #0
 8006752:	f000 855c 	beq.w	800720e <_dtoa_r+0xb4e>
 8006756:	f10a 0303 	add.w	r3, sl, #3
 800675a:	f000 bd56 	b.w	800720a <_dtoa_r+0xb4a>
 800675e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006762:	2200      	movs	r2, #0
 8006764:	ec51 0b17 	vmov	r0, r1, d7
 8006768:	2300      	movs	r3, #0
 800676a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800676e:	f7fa f9d3 	bl	8000b18 <__aeabi_dcmpeq>
 8006772:	4680      	mov	r8, r0
 8006774:	b158      	cbz	r0, 800678e <_dtoa_r+0xce>
 8006776:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006778:	2301      	movs	r3, #1
 800677a:	6013      	str	r3, [r2, #0]
 800677c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800677e:	b113      	cbz	r3, 8006786 <_dtoa_r+0xc6>
 8006780:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006782:	4b86      	ldr	r3, [pc, #536]	@ (800699c <_dtoa_r+0x2dc>)
 8006784:	6013      	str	r3, [r2, #0]
 8006786:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80069b0 <_dtoa_r+0x2f0>
 800678a:	f000 bd40 	b.w	800720e <_dtoa_r+0xb4e>
 800678e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8006792:	aa14      	add	r2, sp, #80	@ 0x50
 8006794:	a915      	add	r1, sp, #84	@ 0x54
 8006796:	4648      	mov	r0, r9
 8006798:	f001 fa3e 	bl	8007c18 <__d2b>
 800679c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80067a0:	9002      	str	r0, [sp, #8]
 80067a2:	2e00      	cmp	r6, #0
 80067a4:	d078      	beq.n	8006898 <_dtoa_r+0x1d8>
 80067a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80067a8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80067ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80067b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80067b4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80067b8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80067bc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80067c0:	4619      	mov	r1, r3
 80067c2:	2200      	movs	r2, #0
 80067c4:	4b76      	ldr	r3, [pc, #472]	@ (80069a0 <_dtoa_r+0x2e0>)
 80067c6:	f7f9 fd87 	bl	80002d8 <__aeabi_dsub>
 80067ca:	a36b      	add	r3, pc, #428	@ (adr r3, 8006978 <_dtoa_r+0x2b8>)
 80067cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d0:	f7f9 ff3a 	bl	8000648 <__aeabi_dmul>
 80067d4:	a36a      	add	r3, pc, #424	@ (adr r3, 8006980 <_dtoa_r+0x2c0>)
 80067d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067da:	f7f9 fd7f 	bl	80002dc <__adddf3>
 80067de:	4604      	mov	r4, r0
 80067e0:	4630      	mov	r0, r6
 80067e2:	460d      	mov	r5, r1
 80067e4:	f7f9 fec6 	bl	8000574 <__aeabi_i2d>
 80067e8:	a367      	add	r3, pc, #412	@ (adr r3, 8006988 <_dtoa_r+0x2c8>)
 80067ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ee:	f7f9 ff2b 	bl	8000648 <__aeabi_dmul>
 80067f2:	4602      	mov	r2, r0
 80067f4:	460b      	mov	r3, r1
 80067f6:	4620      	mov	r0, r4
 80067f8:	4629      	mov	r1, r5
 80067fa:	f7f9 fd6f 	bl	80002dc <__adddf3>
 80067fe:	4604      	mov	r4, r0
 8006800:	460d      	mov	r5, r1
 8006802:	f7fa f9d1 	bl	8000ba8 <__aeabi_d2iz>
 8006806:	2200      	movs	r2, #0
 8006808:	4607      	mov	r7, r0
 800680a:	2300      	movs	r3, #0
 800680c:	4620      	mov	r0, r4
 800680e:	4629      	mov	r1, r5
 8006810:	f7fa f98c 	bl	8000b2c <__aeabi_dcmplt>
 8006814:	b140      	cbz	r0, 8006828 <_dtoa_r+0x168>
 8006816:	4638      	mov	r0, r7
 8006818:	f7f9 feac 	bl	8000574 <__aeabi_i2d>
 800681c:	4622      	mov	r2, r4
 800681e:	462b      	mov	r3, r5
 8006820:	f7fa f97a 	bl	8000b18 <__aeabi_dcmpeq>
 8006824:	b900      	cbnz	r0, 8006828 <_dtoa_r+0x168>
 8006826:	3f01      	subs	r7, #1
 8006828:	2f16      	cmp	r7, #22
 800682a:	d852      	bhi.n	80068d2 <_dtoa_r+0x212>
 800682c:	4b5d      	ldr	r3, [pc, #372]	@ (80069a4 <_dtoa_r+0x2e4>)
 800682e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006836:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800683a:	f7fa f977 	bl	8000b2c <__aeabi_dcmplt>
 800683e:	2800      	cmp	r0, #0
 8006840:	d049      	beq.n	80068d6 <_dtoa_r+0x216>
 8006842:	3f01      	subs	r7, #1
 8006844:	2300      	movs	r3, #0
 8006846:	9310      	str	r3, [sp, #64]	@ 0x40
 8006848:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800684a:	1b9b      	subs	r3, r3, r6
 800684c:	1e5a      	subs	r2, r3, #1
 800684e:	bf45      	ittet	mi
 8006850:	f1c3 0301 	rsbmi	r3, r3, #1
 8006854:	9300      	strmi	r3, [sp, #0]
 8006856:	2300      	movpl	r3, #0
 8006858:	2300      	movmi	r3, #0
 800685a:	9206      	str	r2, [sp, #24]
 800685c:	bf54      	ite	pl
 800685e:	9300      	strpl	r3, [sp, #0]
 8006860:	9306      	strmi	r3, [sp, #24]
 8006862:	2f00      	cmp	r7, #0
 8006864:	db39      	blt.n	80068da <_dtoa_r+0x21a>
 8006866:	9b06      	ldr	r3, [sp, #24]
 8006868:	970d      	str	r7, [sp, #52]	@ 0x34
 800686a:	443b      	add	r3, r7
 800686c:	9306      	str	r3, [sp, #24]
 800686e:	2300      	movs	r3, #0
 8006870:	9308      	str	r3, [sp, #32]
 8006872:	9b07      	ldr	r3, [sp, #28]
 8006874:	2b09      	cmp	r3, #9
 8006876:	d863      	bhi.n	8006940 <_dtoa_r+0x280>
 8006878:	2b05      	cmp	r3, #5
 800687a:	bfc4      	itt	gt
 800687c:	3b04      	subgt	r3, #4
 800687e:	9307      	strgt	r3, [sp, #28]
 8006880:	9b07      	ldr	r3, [sp, #28]
 8006882:	f1a3 0302 	sub.w	r3, r3, #2
 8006886:	bfcc      	ite	gt
 8006888:	2400      	movgt	r4, #0
 800688a:	2401      	movle	r4, #1
 800688c:	2b03      	cmp	r3, #3
 800688e:	d863      	bhi.n	8006958 <_dtoa_r+0x298>
 8006890:	e8df f003 	tbb	[pc, r3]
 8006894:	2b375452 	.word	0x2b375452
 8006898:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800689c:	441e      	add	r6, r3
 800689e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80068a2:	2b20      	cmp	r3, #32
 80068a4:	bfc1      	itttt	gt
 80068a6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80068aa:	409f      	lslgt	r7, r3
 80068ac:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80068b0:	fa24 f303 	lsrgt.w	r3, r4, r3
 80068b4:	bfd6      	itet	le
 80068b6:	f1c3 0320 	rsble	r3, r3, #32
 80068ba:	ea47 0003 	orrgt.w	r0, r7, r3
 80068be:	fa04 f003 	lslle.w	r0, r4, r3
 80068c2:	f7f9 fe47 	bl	8000554 <__aeabi_ui2d>
 80068c6:	2201      	movs	r2, #1
 80068c8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80068cc:	3e01      	subs	r6, #1
 80068ce:	9212      	str	r2, [sp, #72]	@ 0x48
 80068d0:	e776      	b.n	80067c0 <_dtoa_r+0x100>
 80068d2:	2301      	movs	r3, #1
 80068d4:	e7b7      	b.n	8006846 <_dtoa_r+0x186>
 80068d6:	9010      	str	r0, [sp, #64]	@ 0x40
 80068d8:	e7b6      	b.n	8006848 <_dtoa_r+0x188>
 80068da:	9b00      	ldr	r3, [sp, #0]
 80068dc:	1bdb      	subs	r3, r3, r7
 80068de:	9300      	str	r3, [sp, #0]
 80068e0:	427b      	negs	r3, r7
 80068e2:	9308      	str	r3, [sp, #32]
 80068e4:	2300      	movs	r3, #0
 80068e6:	930d      	str	r3, [sp, #52]	@ 0x34
 80068e8:	e7c3      	b.n	8006872 <_dtoa_r+0x1b2>
 80068ea:	2301      	movs	r3, #1
 80068ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80068ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80068f0:	eb07 0b03 	add.w	fp, r7, r3
 80068f4:	f10b 0301 	add.w	r3, fp, #1
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	9303      	str	r3, [sp, #12]
 80068fc:	bfb8      	it	lt
 80068fe:	2301      	movlt	r3, #1
 8006900:	e006      	b.n	8006910 <_dtoa_r+0x250>
 8006902:	2301      	movs	r3, #1
 8006904:	9309      	str	r3, [sp, #36]	@ 0x24
 8006906:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006908:	2b00      	cmp	r3, #0
 800690a:	dd28      	ble.n	800695e <_dtoa_r+0x29e>
 800690c:	469b      	mov	fp, r3
 800690e:	9303      	str	r3, [sp, #12]
 8006910:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8006914:	2100      	movs	r1, #0
 8006916:	2204      	movs	r2, #4
 8006918:	f102 0514 	add.w	r5, r2, #20
 800691c:	429d      	cmp	r5, r3
 800691e:	d926      	bls.n	800696e <_dtoa_r+0x2ae>
 8006920:	6041      	str	r1, [r0, #4]
 8006922:	4648      	mov	r0, r9
 8006924:	f000 fd9c 	bl	8007460 <_Balloc>
 8006928:	4682      	mov	sl, r0
 800692a:	2800      	cmp	r0, #0
 800692c:	d142      	bne.n	80069b4 <_dtoa_r+0x2f4>
 800692e:	4b1e      	ldr	r3, [pc, #120]	@ (80069a8 <_dtoa_r+0x2e8>)
 8006930:	4602      	mov	r2, r0
 8006932:	f240 11af 	movw	r1, #431	@ 0x1af
 8006936:	e6da      	b.n	80066ee <_dtoa_r+0x2e>
 8006938:	2300      	movs	r3, #0
 800693a:	e7e3      	b.n	8006904 <_dtoa_r+0x244>
 800693c:	2300      	movs	r3, #0
 800693e:	e7d5      	b.n	80068ec <_dtoa_r+0x22c>
 8006940:	2401      	movs	r4, #1
 8006942:	2300      	movs	r3, #0
 8006944:	9307      	str	r3, [sp, #28]
 8006946:	9409      	str	r4, [sp, #36]	@ 0x24
 8006948:	f04f 3bff 	mov.w	fp, #4294967295
 800694c:	2200      	movs	r2, #0
 800694e:	f8cd b00c 	str.w	fp, [sp, #12]
 8006952:	2312      	movs	r3, #18
 8006954:	920c      	str	r2, [sp, #48]	@ 0x30
 8006956:	e7db      	b.n	8006910 <_dtoa_r+0x250>
 8006958:	2301      	movs	r3, #1
 800695a:	9309      	str	r3, [sp, #36]	@ 0x24
 800695c:	e7f4      	b.n	8006948 <_dtoa_r+0x288>
 800695e:	f04f 0b01 	mov.w	fp, #1
 8006962:	f8cd b00c 	str.w	fp, [sp, #12]
 8006966:	465b      	mov	r3, fp
 8006968:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800696c:	e7d0      	b.n	8006910 <_dtoa_r+0x250>
 800696e:	3101      	adds	r1, #1
 8006970:	0052      	lsls	r2, r2, #1
 8006972:	e7d1      	b.n	8006918 <_dtoa_r+0x258>
 8006974:	f3af 8000 	nop.w
 8006978:	636f4361 	.word	0x636f4361
 800697c:	3fd287a7 	.word	0x3fd287a7
 8006980:	8b60c8b3 	.word	0x8b60c8b3
 8006984:	3fc68a28 	.word	0x3fc68a28
 8006988:	509f79fb 	.word	0x509f79fb
 800698c:	3fd34413 	.word	0x3fd34413
 8006990:	08009dd2 	.word	0x08009dd2
 8006994:	08009de9 	.word	0x08009de9
 8006998:	7ff00000 	.word	0x7ff00000
 800699c:	08009d9d 	.word	0x08009d9d
 80069a0:	3ff80000 	.word	0x3ff80000
 80069a4:	08009f98 	.word	0x08009f98
 80069a8:	08009e41 	.word	0x08009e41
 80069ac:	08009dce 	.word	0x08009dce
 80069b0:	08009d9c 	.word	0x08009d9c
 80069b4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80069b8:	6018      	str	r0, [r3, #0]
 80069ba:	9b03      	ldr	r3, [sp, #12]
 80069bc:	2b0e      	cmp	r3, #14
 80069be:	f200 80a1 	bhi.w	8006b04 <_dtoa_r+0x444>
 80069c2:	2c00      	cmp	r4, #0
 80069c4:	f000 809e 	beq.w	8006b04 <_dtoa_r+0x444>
 80069c8:	2f00      	cmp	r7, #0
 80069ca:	dd33      	ble.n	8006a34 <_dtoa_r+0x374>
 80069cc:	4b9c      	ldr	r3, [pc, #624]	@ (8006c40 <_dtoa_r+0x580>)
 80069ce:	f007 020f 	and.w	r2, r7, #15
 80069d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80069d6:	ed93 7b00 	vldr	d7, [r3]
 80069da:	05f8      	lsls	r0, r7, #23
 80069dc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80069e0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80069e4:	d516      	bpl.n	8006a14 <_dtoa_r+0x354>
 80069e6:	4b97      	ldr	r3, [pc, #604]	@ (8006c44 <_dtoa_r+0x584>)
 80069e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80069ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80069f0:	f7f9 ff54 	bl	800089c <__aeabi_ddiv>
 80069f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80069f8:	f004 040f 	and.w	r4, r4, #15
 80069fc:	2603      	movs	r6, #3
 80069fe:	4d91      	ldr	r5, [pc, #580]	@ (8006c44 <_dtoa_r+0x584>)
 8006a00:	b954      	cbnz	r4, 8006a18 <_dtoa_r+0x358>
 8006a02:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006a06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a0a:	f7f9 ff47 	bl	800089c <__aeabi_ddiv>
 8006a0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006a12:	e028      	b.n	8006a66 <_dtoa_r+0x3a6>
 8006a14:	2602      	movs	r6, #2
 8006a16:	e7f2      	b.n	80069fe <_dtoa_r+0x33e>
 8006a18:	07e1      	lsls	r1, r4, #31
 8006a1a:	d508      	bpl.n	8006a2e <_dtoa_r+0x36e>
 8006a1c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006a20:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006a24:	f7f9 fe10 	bl	8000648 <__aeabi_dmul>
 8006a28:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006a2c:	3601      	adds	r6, #1
 8006a2e:	1064      	asrs	r4, r4, #1
 8006a30:	3508      	adds	r5, #8
 8006a32:	e7e5      	b.n	8006a00 <_dtoa_r+0x340>
 8006a34:	f000 80af 	beq.w	8006b96 <_dtoa_r+0x4d6>
 8006a38:	427c      	negs	r4, r7
 8006a3a:	4b81      	ldr	r3, [pc, #516]	@ (8006c40 <_dtoa_r+0x580>)
 8006a3c:	4d81      	ldr	r5, [pc, #516]	@ (8006c44 <_dtoa_r+0x584>)
 8006a3e:	f004 020f 	and.w	r2, r4, #15
 8006a42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a4a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006a4e:	f7f9 fdfb 	bl	8000648 <__aeabi_dmul>
 8006a52:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006a56:	1124      	asrs	r4, r4, #4
 8006a58:	2300      	movs	r3, #0
 8006a5a:	2602      	movs	r6, #2
 8006a5c:	2c00      	cmp	r4, #0
 8006a5e:	f040 808f 	bne.w	8006b80 <_dtoa_r+0x4c0>
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d1d3      	bne.n	8006a0e <_dtoa_r+0x34e>
 8006a66:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006a68:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	f000 8094 	beq.w	8006b9a <_dtoa_r+0x4da>
 8006a72:	4b75      	ldr	r3, [pc, #468]	@ (8006c48 <_dtoa_r+0x588>)
 8006a74:	2200      	movs	r2, #0
 8006a76:	4620      	mov	r0, r4
 8006a78:	4629      	mov	r1, r5
 8006a7a:	f7fa f857 	bl	8000b2c <__aeabi_dcmplt>
 8006a7e:	2800      	cmp	r0, #0
 8006a80:	f000 808b 	beq.w	8006b9a <_dtoa_r+0x4da>
 8006a84:	9b03      	ldr	r3, [sp, #12]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	f000 8087 	beq.w	8006b9a <_dtoa_r+0x4da>
 8006a8c:	f1bb 0f00 	cmp.w	fp, #0
 8006a90:	dd34      	ble.n	8006afc <_dtoa_r+0x43c>
 8006a92:	4620      	mov	r0, r4
 8006a94:	4b6d      	ldr	r3, [pc, #436]	@ (8006c4c <_dtoa_r+0x58c>)
 8006a96:	2200      	movs	r2, #0
 8006a98:	4629      	mov	r1, r5
 8006a9a:	f7f9 fdd5 	bl	8000648 <__aeabi_dmul>
 8006a9e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006aa2:	f107 38ff 	add.w	r8, r7, #4294967295
 8006aa6:	3601      	adds	r6, #1
 8006aa8:	465c      	mov	r4, fp
 8006aaa:	4630      	mov	r0, r6
 8006aac:	f7f9 fd62 	bl	8000574 <__aeabi_i2d>
 8006ab0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ab4:	f7f9 fdc8 	bl	8000648 <__aeabi_dmul>
 8006ab8:	4b65      	ldr	r3, [pc, #404]	@ (8006c50 <_dtoa_r+0x590>)
 8006aba:	2200      	movs	r2, #0
 8006abc:	f7f9 fc0e 	bl	80002dc <__adddf3>
 8006ac0:	4605      	mov	r5, r0
 8006ac2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006ac6:	2c00      	cmp	r4, #0
 8006ac8:	d16a      	bne.n	8006ba0 <_dtoa_r+0x4e0>
 8006aca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ace:	4b61      	ldr	r3, [pc, #388]	@ (8006c54 <_dtoa_r+0x594>)
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f7f9 fc01 	bl	80002d8 <__aeabi_dsub>
 8006ad6:	4602      	mov	r2, r0
 8006ad8:	460b      	mov	r3, r1
 8006ada:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006ade:	462a      	mov	r2, r5
 8006ae0:	4633      	mov	r3, r6
 8006ae2:	f7fa f841 	bl	8000b68 <__aeabi_dcmpgt>
 8006ae6:	2800      	cmp	r0, #0
 8006ae8:	f040 8298 	bne.w	800701c <_dtoa_r+0x95c>
 8006aec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006af0:	462a      	mov	r2, r5
 8006af2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006af6:	f7fa f819 	bl	8000b2c <__aeabi_dcmplt>
 8006afa:	bb38      	cbnz	r0, 8006b4c <_dtoa_r+0x48c>
 8006afc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8006b00:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006b04:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	f2c0 8157 	blt.w	8006dba <_dtoa_r+0x6fa>
 8006b0c:	2f0e      	cmp	r7, #14
 8006b0e:	f300 8154 	bgt.w	8006dba <_dtoa_r+0x6fa>
 8006b12:	4b4b      	ldr	r3, [pc, #300]	@ (8006c40 <_dtoa_r+0x580>)
 8006b14:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006b18:	ed93 7b00 	vldr	d7, [r3]
 8006b1c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	ed8d 7b00 	vstr	d7, [sp]
 8006b24:	f280 80e5 	bge.w	8006cf2 <_dtoa_r+0x632>
 8006b28:	9b03      	ldr	r3, [sp, #12]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	f300 80e1 	bgt.w	8006cf2 <_dtoa_r+0x632>
 8006b30:	d10c      	bne.n	8006b4c <_dtoa_r+0x48c>
 8006b32:	4b48      	ldr	r3, [pc, #288]	@ (8006c54 <_dtoa_r+0x594>)
 8006b34:	2200      	movs	r2, #0
 8006b36:	ec51 0b17 	vmov	r0, r1, d7
 8006b3a:	f7f9 fd85 	bl	8000648 <__aeabi_dmul>
 8006b3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b42:	f7fa f807 	bl	8000b54 <__aeabi_dcmpge>
 8006b46:	2800      	cmp	r0, #0
 8006b48:	f000 8266 	beq.w	8007018 <_dtoa_r+0x958>
 8006b4c:	2400      	movs	r4, #0
 8006b4e:	4625      	mov	r5, r4
 8006b50:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006b52:	4656      	mov	r6, sl
 8006b54:	ea6f 0803 	mvn.w	r8, r3
 8006b58:	2700      	movs	r7, #0
 8006b5a:	4621      	mov	r1, r4
 8006b5c:	4648      	mov	r0, r9
 8006b5e:	f000 fcbf 	bl	80074e0 <_Bfree>
 8006b62:	2d00      	cmp	r5, #0
 8006b64:	f000 80bd 	beq.w	8006ce2 <_dtoa_r+0x622>
 8006b68:	b12f      	cbz	r7, 8006b76 <_dtoa_r+0x4b6>
 8006b6a:	42af      	cmp	r7, r5
 8006b6c:	d003      	beq.n	8006b76 <_dtoa_r+0x4b6>
 8006b6e:	4639      	mov	r1, r7
 8006b70:	4648      	mov	r0, r9
 8006b72:	f000 fcb5 	bl	80074e0 <_Bfree>
 8006b76:	4629      	mov	r1, r5
 8006b78:	4648      	mov	r0, r9
 8006b7a:	f000 fcb1 	bl	80074e0 <_Bfree>
 8006b7e:	e0b0      	b.n	8006ce2 <_dtoa_r+0x622>
 8006b80:	07e2      	lsls	r2, r4, #31
 8006b82:	d505      	bpl.n	8006b90 <_dtoa_r+0x4d0>
 8006b84:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006b88:	f7f9 fd5e 	bl	8000648 <__aeabi_dmul>
 8006b8c:	3601      	adds	r6, #1
 8006b8e:	2301      	movs	r3, #1
 8006b90:	1064      	asrs	r4, r4, #1
 8006b92:	3508      	adds	r5, #8
 8006b94:	e762      	b.n	8006a5c <_dtoa_r+0x39c>
 8006b96:	2602      	movs	r6, #2
 8006b98:	e765      	b.n	8006a66 <_dtoa_r+0x3a6>
 8006b9a:	9c03      	ldr	r4, [sp, #12]
 8006b9c:	46b8      	mov	r8, r7
 8006b9e:	e784      	b.n	8006aaa <_dtoa_r+0x3ea>
 8006ba0:	4b27      	ldr	r3, [pc, #156]	@ (8006c40 <_dtoa_r+0x580>)
 8006ba2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006ba4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006ba8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006bac:	4454      	add	r4, sl
 8006bae:	2900      	cmp	r1, #0
 8006bb0:	d054      	beq.n	8006c5c <_dtoa_r+0x59c>
 8006bb2:	4929      	ldr	r1, [pc, #164]	@ (8006c58 <_dtoa_r+0x598>)
 8006bb4:	2000      	movs	r0, #0
 8006bb6:	f7f9 fe71 	bl	800089c <__aeabi_ddiv>
 8006bba:	4633      	mov	r3, r6
 8006bbc:	462a      	mov	r2, r5
 8006bbe:	f7f9 fb8b 	bl	80002d8 <__aeabi_dsub>
 8006bc2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006bc6:	4656      	mov	r6, sl
 8006bc8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006bcc:	f7f9 ffec 	bl	8000ba8 <__aeabi_d2iz>
 8006bd0:	4605      	mov	r5, r0
 8006bd2:	f7f9 fccf 	bl	8000574 <__aeabi_i2d>
 8006bd6:	4602      	mov	r2, r0
 8006bd8:	460b      	mov	r3, r1
 8006bda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006bde:	f7f9 fb7b 	bl	80002d8 <__aeabi_dsub>
 8006be2:	3530      	adds	r5, #48	@ 0x30
 8006be4:	4602      	mov	r2, r0
 8006be6:	460b      	mov	r3, r1
 8006be8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006bec:	f806 5b01 	strb.w	r5, [r6], #1
 8006bf0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006bf4:	f7f9 ff9a 	bl	8000b2c <__aeabi_dcmplt>
 8006bf8:	2800      	cmp	r0, #0
 8006bfa:	d172      	bne.n	8006ce2 <_dtoa_r+0x622>
 8006bfc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c00:	4911      	ldr	r1, [pc, #68]	@ (8006c48 <_dtoa_r+0x588>)
 8006c02:	2000      	movs	r0, #0
 8006c04:	f7f9 fb68 	bl	80002d8 <__aeabi_dsub>
 8006c08:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006c0c:	f7f9 ff8e 	bl	8000b2c <__aeabi_dcmplt>
 8006c10:	2800      	cmp	r0, #0
 8006c12:	f040 80b4 	bne.w	8006d7e <_dtoa_r+0x6be>
 8006c16:	42a6      	cmp	r6, r4
 8006c18:	f43f af70 	beq.w	8006afc <_dtoa_r+0x43c>
 8006c1c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006c20:	4b0a      	ldr	r3, [pc, #40]	@ (8006c4c <_dtoa_r+0x58c>)
 8006c22:	2200      	movs	r2, #0
 8006c24:	f7f9 fd10 	bl	8000648 <__aeabi_dmul>
 8006c28:	4b08      	ldr	r3, [pc, #32]	@ (8006c4c <_dtoa_r+0x58c>)
 8006c2a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006c2e:	2200      	movs	r2, #0
 8006c30:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c34:	f7f9 fd08 	bl	8000648 <__aeabi_dmul>
 8006c38:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c3c:	e7c4      	b.n	8006bc8 <_dtoa_r+0x508>
 8006c3e:	bf00      	nop
 8006c40:	08009f98 	.word	0x08009f98
 8006c44:	08009f70 	.word	0x08009f70
 8006c48:	3ff00000 	.word	0x3ff00000
 8006c4c:	40240000 	.word	0x40240000
 8006c50:	401c0000 	.word	0x401c0000
 8006c54:	40140000 	.word	0x40140000
 8006c58:	3fe00000 	.word	0x3fe00000
 8006c5c:	4631      	mov	r1, r6
 8006c5e:	4628      	mov	r0, r5
 8006c60:	f7f9 fcf2 	bl	8000648 <__aeabi_dmul>
 8006c64:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006c68:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006c6a:	4656      	mov	r6, sl
 8006c6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c70:	f7f9 ff9a 	bl	8000ba8 <__aeabi_d2iz>
 8006c74:	4605      	mov	r5, r0
 8006c76:	f7f9 fc7d 	bl	8000574 <__aeabi_i2d>
 8006c7a:	4602      	mov	r2, r0
 8006c7c:	460b      	mov	r3, r1
 8006c7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c82:	f7f9 fb29 	bl	80002d8 <__aeabi_dsub>
 8006c86:	3530      	adds	r5, #48	@ 0x30
 8006c88:	f806 5b01 	strb.w	r5, [r6], #1
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	460b      	mov	r3, r1
 8006c90:	42a6      	cmp	r6, r4
 8006c92:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006c96:	f04f 0200 	mov.w	r2, #0
 8006c9a:	d124      	bne.n	8006ce6 <_dtoa_r+0x626>
 8006c9c:	4baf      	ldr	r3, [pc, #700]	@ (8006f5c <_dtoa_r+0x89c>)
 8006c9e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006ca2:	f7f9 fb1b 	bl	80002dc <__adddf3>
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	460b      	mov	r3, r1
 8006caa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006cae:	f7f9 ff5b 	bl	8000b68 <__aeabi_dcmpgt>
 8006cb2:	2800      	cmp	r0, #0
 8006cb4:	d163      	bne.n	8006d7e <_dtoa_r+0x6be>
 8006cb6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006cba:	49a8      	ldr	r1, [pc, #672]	@ (8006f5c <_dtoa_r+0x89c>)
 8006cbc:	2000      	movs	r0, #0
 8006cbe:	f7f9 fb0b 	bl	80002d8 <__aeabi_dsub>
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	460b      	mov	r3, r1
 8006cc6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006cca:	f7f9 ff2f 	bl	8000b2c <__aeabi_dcmplt>
 8006cce:	2800      	cmp	r0, #0
 8006cd0:	f43f af14 	beq.w	8006afc <_dtoa_r+0x43c>
 8006cd4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006cd6:	1e73      	subs	r3, r6, #1
 8006cd8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006cda:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006cde:	2b30      	cmp	r3, #48	@ 0x30
 8006ce0:	d0f8      	beq.n	8006cd4 <_dtoa_r+0x614>
 8006ce2:	4647      	mov	r7, r8
 8006ce4:	e03b      	b.n	8006d5e <_dtoa_r+0x69e>
 8006ce6:	4b9e      	ldr	r3, [pc, #632]	@ (8006f60 <_dtoa_r+0x8a0>)
 8006ce8:	f7f9 fcae 	bl	8000648 <__aeabi_dmul>
 8006cec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006cf0:	e7bc      	b.n	8006c6c <_dtoa_r+0x5ac>
 8006cf2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006cf6:	4656      	mov	r6, sl
 8006cf8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006cfc:	4620      	mov	r0, r4
 8006cfe:	4629      	mov	r1, r5
 8006d00:	f7f9 fdcc 	bl	800089c <__aeabi_ddiv>
 8006d04:	f7f9 ff50 	bl	8000ba8 <__aeabi_d2iz>
 8006d08:	4680      	mov	r8, r0
 8006d0a:	f7f9 fc33 	bl	8000574 <__aeabi_i2d>
 8006d0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d12:	f7f9 fc99 	bl	8000648 <__aeabi_dmul>
 8006d16:	4602      	mov	r2, r0
 8006d18:	460b      	mov	r3, r1
 8006d1a:	4620      	mov	r0, r4
 8006d1c:	4629      	mov	r1, r5
 8006d1e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006d22:	f7f9 fad9 	bl	80002d8 <__aeabi_dsub>
 8006d26:	f806 4b01 	strb.w	r4, [r6], #1
 8006d2a:	9d03      	ldr	r5, [sp, #12]
 8006d2c:	eba6 040a 	sub.w	r4, r6, sl
 8006d30:	42a5      	cmp	r5, r4
 8006d32:	4602      	mov	r2, r0
 8006d34:	460b      	mov	r3, r1
 8006d36:	d133      	bne.n	8006da0 <_dtoa_r+0x6e0>
 8006d38:	f7f9 fad0 	bl	80002dc <__adddf3>
 8006d3c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d40:	4604      	mov	r4, r0
 8006d42:	460d      	mov	r5, r1
 8006d44:	f7f9 ff10 	bl	8000b68 <__aeabi_dcmpgt>
 8006d48:	b9c0      	cbnz	r0, 8006d7c <_dtoa_r+0x6bc>
 8006d4a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d4e:	4620      	mov	r0, r4
 8006d50:	4629      	mov	r1, r5
 8006d52:	f7f9 fee1 	bl	8000b18 <__aeabi_dcmpeq>
 8006d56:	b110      	cbz	r0, 8006d5e <_dtoa_r+0x69e>
 8006d58:	f018 0f01 	tst.w	r8, #1
 8006d5c:	d10e      	bne.n	8006d7c <_dtoa_r+0x6bc>
 8006d5e:	9902      	ldr	r1, [sp, #8]
 8006d60:	4648      	mov	r0, r9
 8006d62:	f000 fbbd 	bl	80074e0 <_Bfree>
 8006d66:	2300      	movs	r3, #0
 8006d68:	7033      	strb	r3, [r6, #0]
 8006d6a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006d6c:	3701      	adds	r7, #1
 8006d6e:	601f      	str	r7, [r3, #0]
 8006d70:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	f000 824b 	beq.w	800720e <_dtoa_r+0xb4e>
 8006d78:	601e      	str	r6, [r3, #0]
 8006d7a:	e248      	b.n	800720e <_dtoa_r+0xb4e>
 8006d7c:	46b8      	mov	r8, r7
 8006d7e:	4633      	mov	r3, r6
 8006d80:	461e      	mov	r6, r3
 8006d82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d86:	2a39      	cmp	r2, #57	@ 0x39
 8006d88:	d106      	bne.n	8006d98 <_dtoa_r+0x6d8>
 8006d8a:	459a      	cmp	sl, r3
 8006d8c:	d1f8      	bne.n	8006d80 <_dtoa_r+0x6c0>
 8006d8e:	2230      	movs	r2, #48	@ 0x30
 8006d90:	f108 0801 	add.w	r8, r8, #1
 8006d94:	f88a 2000 	strb.w	r2, [sl]
 8006d98:	781a      	ldrb	r2, [r3, #0]
 8006d9a:	3201      	adds	r2, #1
 8006d9c:	701a      	strb	r2, [r3, #0]
 8006d9e:	e7a0      	b.n	8006ce2 <_dtoa_r+0x622>
 8006da0:	4b6f      	ldr	r3, [pc, #444]	@ (8006f60 <_dtoa_r+0x8a0>)
 8006da2:	2200      	movs	r2, #0
 8006da4:	f7f9 fc50 	bl	8000648 <__aeabi_dmul>
 8006da8:	2200      	movs	r2, #0
 8006daa:	2300      	movs	r3, #0
 8006dac:	4604      	mov	r4, r0
 8006dae:	460d      	mov	r5, r1
 8006db0:	f7f9 feb2 	bl	8000b18 <__aeabi_dcmpeq>
 8006db4:	2800      	cmp	r0, #0
 8006db6:	d09f      	beq.n	8006cf8 <_dtoa_r+0x638>
 8006db8:	e7d1      	b.n	8006d5e <_dtoa_r+0x69e>
 8006dba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006dbc:	2a00      	cmp	r2, #0
 8006dbe:	f000 80ea 	beq.w	8006f96 <_dtoa_r+0x8d6>
 8006dc2:	9a07      	ldr	r2, [sp, #28]
 8006dc4:	2a01      	cmp	r2, #1
 8006dc6:	f300 80cd 	bgt.w	8006f64 <_dtoa_r+0x8a4>
 8006dca:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006dcc:	2a00      	cmp	r2, #0
 8006dce:	f000 80c1 	beq.w	8006f54 <_dtoa_r+0x894>
 8006dd2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006dd6:	9c08      	ldr	r4, [sp, #32]
 8006dd8:	9e00      	ldr	r6, [sp, #0]
 8006dda:	9a00      	ldr	r2, [sp, #0]
 8006ddc:	441a      	add	r2, r3
 8006dde:	9200      	str	r2, [sp, #0]
 8006de0:	9a06      	ldr	r2, [sp, #24]
 8006de2:	2101      	movs	r1, #1
 8006de4:	441a      	add	r2, r3
 8006de6:	4648      	mov	r0, r9
 8006de8:	9206      	str	r2, [sp, #24]
 8006dea:	f000 fc77 	bl	80076dc <__i2b>
 8006dee:	4605      	mov	r5, r0
 8006df0:	b166      	cbz	r6, 8006e0c <_dtoa_r+0x74c>
 8006df2:	9b06      	ldr	r3, [sp, #24]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	dd09      	ble.n	8006e0c <_dtoa_r+0x74c>
 8006df8:	42b3      	cmp	r3, r6
 8006dfa:	9a00      	ldr	r2, [sp, #0]
 8006dfc:	bfa8      	it	ge
 8006dfe:	4633      	movge	r3, r6
 8006e00:	1ad2      	subs	r2, r2, r3
 8006e02:	9200      	str	r2, [sp, #0]
 8006e04:	9a06      	ldr	r2, [sp, #24]
 8006e06:	1af6      	subs	r6, r6, r3
 8006e08:	1ad3      	subs	r3, r2, r3
 8006e0a:	9306      	str	r3, [sp, #24]
 8006e0c:	9b08      	ldr	r3, [sp, #32]
 8006e0e:	b30b      	cbz	r3, 8006e54 <_dtoa_r+0x794>
 8006e10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	f000 80c6 	beq.w	8006fa4 <_dtoa_r+0x8e4>
 8006e18:	2c00      	cmp	r4, #0
 8006e1a:	f000 80c0 	beq.w	8006f9e <_dtoa_r+0x8de>
 8006e1e:	4629      	mov	r1, r5
 8006e20:	4622      	mov	r2, r4
 8006e22:	4648      	mov	r0, r9
 8006e24:	f000 fd12 	bl	800784c <__pow5mult>
 8006e28:	9a02      	ldr	r2, [sp, #8]
 8006e2a:	4601      	mov	r1, r0
 8006e2c:	4605      	mov	r5, r0
 8006e2e:	4648      	mov	r0, r9
 8006e30:	f000 fc6a 	bl	8007708 <__multiply>
 8006e34:	9902      	ldr	r1, [sp, #8]
 8006e36:	4680      	mov	r8, r0
 8006e38:	4648      	mov	r0, r9
 8006e3a:	f000 fb51 	bl	80074e0 <_Bfree>
 8006e3e:	9b08      	ldr	r3, [sp, #32]
 8006e40:	1b1b      	subs	r3, r3, r4
 8006e42:	9308      	str	r3, [sp, #32]
 8006e44:	f000 80b1 	beq.w	8006faa <_dtoa_r+0x8ea>
 8006e48:	9a08      	ldr	r2, [sp, #32]
 8006e4a:	4641      	mov	r1, r8
 8006e4c:	4648      	mov	r0, r9
 8006e4e:	f000 fcfd 	bl	800784c <__pow5mult>
 8006e52:	9002      	str	r0, [sp, #8]
 8006e54:	2101      	movs	r1, #1
 8006e56:	4648      	mov	r0, r9
 8006e58:	f000 fc40 	bl	80076dc <__i2b>
 8006e5c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006e5e:	4604      	mov	r4, r0
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	f000 81d8 	beq.w	8007216 <_dtoa_r+0xb56>
 8006e66:	461a      	mov	r2, r3
 8006e68:	4601      	mov	r1, r0
 8006e6a:	4648      	mov	r0, r9
 8006e6c:	f000 fcee 	bl	800784c <__pow5mult>
 8006e70:	9b07      	ldr	r3, [sp, #28]
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	4604      	mov	r4, r0
 8006e76:	f300 809f 	bgt.w	8006fb8 <_dtoa_r+0x8f8>
 8006e7a:	9b04      	ldr	r3, [sp, #16]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	f040 8097 	bne.w	8006fb0 <_dtoa_r+0x8f0>
 8006e82:	9b05      	ldr	r3, [sp, #20]
 8006e84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	f040 8093 	bne.w	8006fb4 <_dtoa_r+0x8f4>
 8006e8e:	9b05      	ldr	r3, [sp, #20]
 8006e90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006e94:	0d1b      	lsrs	r3, r3, #20
 8006e96:	051b      	lsls	r3, r3, #20
 8006e98:	b133      	cbz	r3, 8006ea8 <_dtoa_r+0x7e8>
 8006e9a:	9b00      	ldr	r3, [sp, #0]
 8006e9c:	3301      	adds	r3, #1
 8006e9e:	9300      	str	r3, [sp, #0]
 8006ea0:	9b06      	ldr	r3, [sp, #24]
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	9306      	str	r3, [sp, #24]
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	9308      	str	r3, [sp, #32]
 8006eaa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	f000 81b8 	beq.w	8007222 <_dtoa_r+0xb62>
 8006eb2:	6923      	ldr	r3, [r4, #16]
 8006eb4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006eb8:	6918      	ldr	r0, [r3, #16]
 8006eba:	f000 fbc3 	bl	8007644 <__hi0bits>
 8006ebe:	f1c0 0020 	rsb	r0, r0, #32
 8006ec2:	9b06      	ldr	r3, [sp, #24]
 8006ec4:	4418      	add	r0, r3
 8006ec6:	f010 001f 	ands.w	r0, r0, #31
 8006eca:	f000 8082 	beq.w	8006fd2 <_dtoa_r+0x912>
 8006ece:	f1c0 0320 	rsb	r3, r0, #32
 8006ed2:	2b04      	cmp	r3, #4
 8006ed4:	dd73      	ble.n	8006fbe <_dtoa_r+0x8fe>
 8006ed6:	9b00      	ldr	r3, [sp, #0]
 8006ed8:	f1c0 001c 	rsb	r0, r0, #28
 8006edc:	4403      	add	r3, r0
 8006ede:	9300      	str	r3, [sp, #0]
 8006ee0:	9b06      	ldr	r3, [sp, #24]
 8006ee2:	4403      	add	r3, r0
 8006ee4:	4406      	add	r6, r0
 8006ee6:	9306      	str	r3, [sp, #24]
 8006ee8:	9b00      	ldr	r3, [sp, #0]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	dd05      	ble.n	8006efa <_dtoa_r+0x83a>
 8006eee:	9902      	ldr	r1, [sp, #8]
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	4648      	mov	r0, r9
 8006ef4:	f000 fd04 	bl	8007900 <__lshift>
 8006ef8:	9002      	str	r0, [sp, #8]
 8006efa:	9b06      	ldr	r3, [sp, #24]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	dd05      	ble.n	8006f0c <_dtoa_r+0x84c>
 8006f00:	4621      	mov	r1, r4
 8006f02:	461a      	mov	r2, r3
 8006f04:	4648      	mov	r0, r9
 8006f06:	f000 fcfb 	bl	8007900 <__lshift>
 8006f0a:	4604      	mov	r4, r0
 8006f0c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d061      	beq.n	8006fd6 <_dtoa_r+0x916>
 8006f12:	9802      	ldr	r0, [sp, #8]
 8006f14:	4621      	mov	r1, r4
 8006f16:	f000 fd5f 	bl	80079d8 <__mcmp>
 8006f1a:	2800      	cmp	r0, #0
 8006f1c:	da5b      	bge.n	8006fd6 <_dtoa_r+0x916>
 8006f1e:	2300      	movs	r3, #0
 8006f20:	9902      	ldr	r1, [sp, #8]
 8006f22:	220a      	movs	r2, #10
 8006f24:	4648      	mov	r0, r9
 8006f26:	f000 fafd 	bl	8007524 <__multadd>
 8006f2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f2c:	9002      	str	r0, [sp, #8]
 8006f2e:	f107 38ff 	add.w	r8, r7, #4294967295
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	f000 8177 	beq.w	8007226 <_dtoa_r+0xb66>
 8006f38:	4629      	mov	r1, r5
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	220a      	movs	r2, #10
 8006f3e:	4648      	mov	r0, r9
 8006f40:	f000 faf0 	bl	8007524 <__multadd>
 8006f44:	f1bb 0f00 	cmp.w	fp, #0
 8006f48:	4605      	mov	r5, r0
 8006f4a:	dc6f      	bgt.n	800702c <_dtoa_r+0x96c>
 8006f4c:	9b07      	ldr	r3, [sp, #28]
 8006f4e:	2b02      	cmp	r3, #2
 8006f50:	dc49      	bgt.n	8006fe6 <_dtoa_r+0x926>
 8006f52:	e06b      	b.n	800702c <_dtoa_r+0x96c>
 8006f54:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006f56:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006f5a:	e73c      	b.n	8006dd6 <_dtoa_r+0x716>
 8006f5c:	3fe00000 	.word	0x3fe00000
 8006f60:	40240000 	.word	0x40240000
 8006f64:	9b03      	ldr	r3, [sp, #12]
 8006f66:	1e5c      	subs	r4, r3, #1
 8006f68:	9b08      	ldr	r3, [sp, #32]
 8006f6a:	42a3      	cmp	r3, r4
 8006f6c:	db09      	blt.n	8006f82 <_dtoa_r+0x8c2>
 8006f6e:	1b1c      	subs	r4, r3, r4
 8006f70:	9b03      	ldr	r3, [sp, #12]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	f6bf af30 	bge.w	8006dd8 <_dtoa_r+0x718>
 8006f78:	9b00      	ldr	r3, [sp, #0]
 8006f7a:	9a03      	ldr	r2, [sp, #12]
 8006f7c:	1a9e      	subs	r6, r3, r2
 8006f7e:	2300      	movs	r3, #0
 8006f80:	e72b      	b.n	8006dda <_dtoa_r+0x71a>
 8006f82:	9b08      	ldr	r3, [sp, #32]
 8006f84:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006f86:	9408      	str	r4, [sp, #32]
 8006f88:	1ae3      	subs	r3, r4, r3
 8006f8a:	441a      	add	r2, r3
 8006f8c:	9e00      	ldr	r6, [sp, #0]
 8006f8e:	9b03      	ldr	r3, [sp, #12]
 8006f90:	920d      	str	r2, [sp, #52]	@ 0x34
 8006f92:	2400      	movs	r4, #0
 8006f94:	e721      	b.n	8006dda <_dtoa_r+0x71a>
 8006f96:	9c08      	ldr	r4, [sp, #32]
 8006f98:	9e00      	ldr	r6, [sp, #0]
 8006f9a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8006f9c:	e728      	b.n	8006df0 <_dtoa_r+0x730>
 8006f9e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006fa2:	e751      	b.n	8006e48 <_dtoa_r+0x788>
 8006fa4:	9a08      	ldr	r2, [sp, #32]
 8006fa6:	9902      	ldr	r1, [sp, #8]
 8006fa8:	e750      	b.n	8006e4c <_dtoa_r+0x78c>
 8006faa:	f8cd 8008 	str.w	r8, [sp, #8]
 8006fae:	e751      	b.n	8006e54 <_dtoa_r+0x794>
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	e779      	b.n	8006ea8 <_dtoa_r+0x7e8>
 8006fb4:	9b04      	ldr	r3, [sp, #16]
 8006fb6:	e777      	b.n	8006ea8 <_dtoa_r+0x7e8>
 8006fb8:	2300      	movs	r3, #0
 8006fba:	9308      	str	r3, [sp, #32]
 8006fbc:	e779      	b.n	8006eb2 <_dtoa_r+0x7f2>
 8006fbe:	d093      	beq.n	8006ee8 <_dtoa_r+0x828>
 8006fc0:	9a00      	ldr	r2, [sp, #0]
 8006fc2:	331c      	adds	r3, #28
 8006fc4:	441a      	add	r2, r3
 8006fc6:	9200      	str	r2, [sp, #0]
 8006fc8:	9a06      	ldr	r2, [sp, #24]
 8006fca:	441a      	add	r2, r3
 8006fcc:	441e      	add	r6, r3
 8006fce:	9206      	str	r2, [sp, #24]
 8006fd0:	e78a      	b.n	8006ee8 <_dtoa_r+0x828>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	e7f4      	b.n	8006fc0 <_dtoa_r+0x900>
 8006fd6:	9b03      	ldr	r3, [sp, #12]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	46b8      	mov	r8, r7
 8006fdc:	dc20      	bgt.n	8007020 <_dtoa_r+0x960>
 8006fde:	469b      	mov	fp, r3
 8006fe0:	9b07      	ldr	r3, [sp, #28]
 8006fe2:	2b02      	cmp	r3, #2
 8006fe4:	dd1e      	ble.n	8007024 <_dtoa_r+0x964>
 8006fe6:	f1bb 0f00 	cmp.w	fp, #0
 8006fea:	f47f adb1 	bne.w	8006b50 <_dtoa_r+0x490>
 8006fee:	4621      	mov	r1, r4
 8006ff0:	465b      	mov	r3, fp
 8006ff2:	2205      	movs	r2, #5
 8006ff4:	4648      	mov	r0, r9
 8006ff6:	f000 fa95 	bl	8007524 <__multadd>
 8006ffa:	4601      	mov	r1, r0
 8006ffc:	4604      	mov	r4, r0
 8006ffe:	9802      	ldr	r0, [sp, #8]
 8007000:	f000 fcea 	bl	80079d8 <__mcmp>
 8007004:	2800      	cmp	r0, #0
 8007006:	f77f ada3 	ble.w	8006b50 <_dtoa_r+0x490>
 800700a:	4656      	mov	r6, sl
 800700c:	2331      	movs	r3, #49	@ 0x31
 800700e:	f806 3b01 	strb.w	r3, [r6], #1
 8007012:	f108 0801 	add.w	r8, r8, #1
 8007016:	e59f      	b.n	8006b58 <_dtoa_r+0x498>
 8007018:	9c03      	ldr	r4, [sp, #12]
 800701a:	46b8      	mov	r8, r7
 800701c:	4625      	mov	r5, r4
 800701e:	e7f4      	b.n	800700a <_dtoa_r+0x94a>
 8007020:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8007024:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007026:	2b00      	cmp	r3, #0
 8007028:	f000 8101 	beq.w	800722e <_dtoa_r+0xb6e>
 800702c:	2e00      	cmp	r6, #0
 800702e:	dd05      	ble.n	800703c <_dtoa_r+0x97c>
 8007030:	4629      	mov	r1, r5
 8007032:	4632      	mov	r2, r6
 8007034:	4648      	mov	r0, r9
 8007036:	f000 fc63 	bl	8007900 <__lshift>
 800703a:	4605      	mov	r5, r0
 800703c:	9b08      	ldr	r3, [sp, #32]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d05c      	beq.n	80070fc <_dtoa_r+0xa3c>
 8007042:	6869      	ldr	r1, [r5, #4]
 8007044:	4648      	mov	r0, r9
 8007046:	f000 fa0b 	bl	8007460 <_Balloc>
 800704a:	4606      	mov	r6, r0
 800704c:	b928      	cbnz	r0, 800705a <_dtoa_r+0x99a>
 800704e:	4b82      	ldr	r3, [pc, #520]	@ (8007258 <_dtoa_r+0xb98>)
 8007050:	4602      	mov	r2, r0
 8007052:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007056:	f7ff bb4a 	b.w	80066ee <_dtoa_r+0x2e>
 800705a:	692a      	ldr	r2, [r5, #16]
 800705c:	3202      	adds	r2, #2
 800705e:	0092      	lsls	r2, r2, #2
 8007060:	f105 010c 	add.w	r1, r5, #12
 8007064:	300c      	adds	r0, #12
 8007066:	f001 ff69 	bl	8008f3c <memcpy>
 800706a:	2201      	movs	r2, #1
 800706c:	4631      	mov	r1, r6
 800706e:	4648      	mov	r0, r9
 8007070:	f000 fc46 	bl	8007900 <__lshift>
 8007074:	f10a 0301 	add.w	r3, sl, #1
 8007078:	9300      	str	r3, [sp, #0]
 800707a:	eb0a 030b 	add.w	r3, sl, fp
 800707e:	9308      	str	r3, [sp, #32]
 8007080:	9b04      	ldr	r3, [sp, #16]
 8007082:	f003 0301 	and.w	r3, r3, #1
 8007086:	462f      	mov	r7, r5
 8007088:	9306      	str	r3, [sp, #24]
 800708a:	4605      	mov	r5, r0
 800708c:	9b00      	ldr	r3, [sp, #0]
 800708e:	9802      	ldr	r0, [sp, #8]
 8007090:	4621      	mov	r1, r4
 8007092:	f103 3bff 	add.w	fp, r3, #4294967295
 8007096:	f7ff fa8b 	bl	80065b0 <quorem>
 800709a:	4603      	mov	r3, r0
 800709c:	3330      	adds	r3, #48	@ 0x30
 800709e:	9003      	str	r0, [sp, #12]
 80070a0:	4639      	mov	r1, r7
 80070a2:	9802      	ldr	r0, [sp, #8]
 80070a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80070a6:	f000 fc97 	bl	80079d8 <__mcmp>
 80070aa:	462a      	mov	r2, r5
 80070ac:	9004      	str	r0, [sp, #16]
 80070ae:	4621      	mov	r1, r4
 80070b0:	4648      	mov	r0, r9
 80070b2:	f000 fcad 	bl	8007a10 <__mdiff>
 80070b6:	68c2      	ldr	r2, [r0, #12]
 80070b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070ba:	4606      	mov	r6, r0
 80070bc:	bb02      	cbnz	r2, 8007100 <_dtoa_r+0xa40>
 80070be:	4601      	mov	r1, r0
 80070c0:	9802      	ldr	r0, [sp, #8]
 80070c2:	f000 fc89 	bl	80079d8 <__mcmp>
 80070c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070c8:	4602      	mov	r2, r0
 80070ca:	4631      	mov	r1, r6
 80070cc:	4648      	mov	r0, r9
 80070ce:	920c      	str	r2, [sp, #48]	@ 0x30
 80070d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80070d2:	f000 fa05 	bl	80074e0 <_Bfree>
 80070d6:	9b07      	ldr	r3, [sp, #28]
 80070d8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80070da:	9e00      	ldr	r6, [sp, #0]
 80070dc:	ea42 0103 	orr.w	r1, r2, r3
 80070e0:	9b06      	ldr	r3, [sp, #24]
 80070e2:	4319      	orrs	r1, r3
 80070e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070e6:	d10d      	bne.n	8007104 <_dtoa_r+0xa44>
 80070e8:	2b39      	cmp	r3, #57	@ 0x39
 80070ea:	d027      	beq.n	800713c <_dtoa_r+0xa7c>
 80070ec:	9a04      	ldr	r2, [sp, #16]
 80070ee:	2a00      	cmp	r2, #0
 80070f0:	dd01      	ble.n	80070f6 <_dtoa_r+0xa36>
 80070f2:	9b03      	ldr	r3, [sp, #12]
 80070f4:	3331      	adds	r3, #49	@ 0x31
 80070f6:	f88b 3000 	strb.w	r3, [fp]
 80070fa:	e52e      	b.n	8006b5a <_dtoa_r+0x49a>
 80070fc:	4628      	mov	r0, r5
 80070fe:	e7b9      	b.n	8007074 <_dtoa_r+0x9b4>
 8007100:	2201      	movs	r2, #1
 8007102:	e7e2      	b.n	80070ca <_dtoa_r+0xa0a>
 8007104:	9904      	ldr	r1, [sp, #16]
 8007106:	2900      	cmp	r1, #0
 8007108:	db04      	blt.n	8007114 <_dtoa_r+0xa54>
 800710a:	9807      	ldr	r0, [sp, #28]
 800710c:	4301      	orrs	r1, r0
 800710e:	9806      	ldr	r0, [sp, #24]
 8007110:	4301      	orrs	r1, r0
 8007112:	d120      	bne.n	8007156 <_dtoa_r+0xa96>
 8007114:	2a00      	cmp	r2, #0
 8007116:	ddee      	ble.n	80070f6 <_dtoa_r+0xa36>
 8007118:	9902      	ldr	r1, [sp, #8]
 800711a:	9300      	str	r3, [sp, #0]
 800711c:	2201      	movs	r2, #1
 800711e:	4648      	mov	r0, r9
 8007120:	f000 fbee 	bl	8007900 <__lshift>
 8007124:	4621      	mov	r1, r4
 8007126:	9002      	str	r0, [sp, #8]
 8007128:	f000 fc56 	bl	80079d8 <__mcmp>
 800712c:	2800      	cmp	r0, #0
 800712e:	9b00      	ldr	r3, [sp, #0]
 8007130:	dc02      	bgt.n	8007138 <_dtoa_r+0xa78>
 8007132:	d1e0      	bne.n	80070f6 <_dtoa_r+0xa36>
 8007134:	07da      	lsls	r2, r3, #31
 8007136:	d5de      	bpl.n	80070f6 <_dtoa_r+0xa36>
 8007138:	2b39      	cmp	r3, #57	@ 0x39
 800713a:	d1da      	bne.n	80070f2 <_dtoa_r+0xa32>
 800713c:	2339      	movs	r3, #57	@ 0x39
 800713e:	f88b 3000 	strb.w	r3, [fp]
 8007142:	4633      	mov	r3, r6
 8007144:	461e      	mov	r6, r3
 8007146:	3b01      	subs	r3, #1
 8007148:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800714c:	2a39      	cmp	r2, #57	@ 0x39
 800714e:	d04e      	beq.n	80071ee <_dtoa_r+0xb2e>
 8007150:	3201      	adds	r2, #1
 8007152:	701a      	strb	r2, [r3, #0]
 8007154:	e501      	b.n	8006b5a <_dtoa_r+0x49a>
 8007156:	2a00      	cmp	r2, #0
 8007158:	dd03      	ble.n	8007162 <_dtoa_r+0xaa2>
 800715a:	2b39      	cmp	r3, #57	@ 0x39
 800715c:	d0ee      	beq.n	800713c <_dtoa_r+0xa7c>
 800715e:	3301      	adds	r3, #1
 8007160:	e7c9      	b.n	80070f6 <_dtoa_r+0xa36>
 8007162:	9a00      	ldr	r2, [sp, #0]
 8007164:	9908      	ldr	r1, [sp, #32]
 8007166:	f802 3c01 	strb.w	r3, [r2, #-1]
 800716a:	428a      	cmp	r2, r1
 800716c:	d028      	beq.n	80071c0 <_dtoa_r+0xb00>
 800716e:	9902      	ldr	r1, [sp, #8]
 8007170:	2300      	movs	r3, #0
 8007172:	220a      	movs	r2, #10
 8007174:	4648      	mov	r0, r9
 8007176:	f000 f9d5 	bl	8007524 <__multadd>
 800717a:	42af      	cmp	r7, r5
 800717c:	9002      	str	r0, [sp, #8]
 800717e:	f04f 0300 	mov.w	r3, #0
 8007182:	f04f 020a 	mov.w	r2, #10
 8007186:	4639      	mov	r1, r7
 8007188:	4648      	mov	r0, r9
 800718a:	d107      	bne.n	800719c <_dtoa_r+0xadc>
 800718c:	f000 f9ca 	bl	8007524 <__multadd>
 8007190:	4607      	mov	r7, r0
 8007192:	4605      	mov	r5, r0
 8007194:	9b00      	ldr	r3, [sp, #0]
 8007196:	3301      	adds	r3, #1
 8007198:	9300      	str	r3, [sp, #0]
 800719a:	e777      	b.n	800708c <_dtoa_r+0x9cc>
 800719c:	f000 f9c2 	bl	8007524 <__multadd>
 80071a0:	4629      	mov	r1, r5
 80071a2:	4607      	mov	r7, r0
 80071a4:	2300      	movs	r3, #0
 80071a6:	220a      	movs	r2, #10
 80071a8:	4648      	mov	r0, r9
 80071aa:	f000 f9bb 	bl	8007524 <__multadd>
 80071ae:	4605      	mov	r5, r0
 80071b0:	e7f0      	b.n	8007194 <_dtoa_r+0xad4>
 80071b2:	f1bb 0f00 	cmp.w	fp, #0
 80071b6:	bfcc      	ite	gt
 80071b8:	465e      	movgt	r6, fp
 80071ba:	2601      	movle	r6, #1
 80071bc:	4456      	add	r6, sl
 80071be:	2700      	movs	r7, #0
 80071c0:	9902      	ldr	r1, [sp, #8]
 80071c2:	9300      	str	r3, [sp, #0]
 80071c4:	2201      	movs	r2, #1
 80071c6:	4648      	mov	r0, r9
 80071c8:	f000 fb9a 	bl	8007900 <__lshift>
 80071cc:	4621      	mov	r1, r4
 80071ce:	9002      	str	r0, [sp, #8]
 80071d0:	f000 fc02 	bl	80079d8 <__mcmp>
 80071d4:	2800      	cmp	r0, #0
 80071d6:	dcb4      	bgt.n	8007142 <_dtoa_r+0xa82>
 80071d8:	d102      	bne.n	80071e0 <_dtoa_r+0xb20>
 80071da:	9b00      	ldr	r3, [sp, #0]
 80071dc:	07db      	lsls	r3, r3, #31
 80071de:	d4b0      	bmi.n	8007142 <_dtoa_r+0xa82>
 80071e0:	4633      	mov	r3, r6
 80071e2:	461e      	mov	r6, r3
 80071e4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80071e8:	2a30      	cmp	r2, #48	@ 0x30
 80071ea:	d0fa      	beq.n	80071e2 <_dtoa_r+0xb22>
 80071ec:	e4b5      	b.n	8006b5a <_dtoa_r+0x49a>
 80071ee:	459a      	cmp	sl, r3
 80071f0:	d1a8      	bne.n	8007144 <_dtoa_r+0xa84>
 80071f2:	2331      	movs	r3, #49	@ 0x31
 80071f4:	f108 0801 	add.w	r8, r8, #1
 80071f8:	f88a 3000 	strb.w	r3, [sl]
 80071fc:	e4ad      	b.n	8006b5a <_dtoa_r+0x49a>
 80071fe:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007200:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800725c <_dtoa_r+0xb9c>
 8007204:	b11b      	cbz	r3, 800720e <_dtoa_r+0xb4e>
 8007206:	f10a 0308 	add.w	r3, sl, #8
 800720a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800720c:	6013      	str	r3, [r2, #0]
 800720e:	4650      	mov	r0, sl
 8007210:	b017      	add	sp, #92	@ 0x5c
 8007212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007216:	9b07      	ldr	r3, [sp, #28]
 8007218:	2b01      	cmp	r3, #1
 800721a:	f77f ae2e 	ble.w	8006e7a <_dtoa_r+0x7ba>
 800721e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007220:	9308      	str	r3, [sp, #32]
 8007222:	2001      	movs	r0, #1
 8007224:	e64d      	b.n	8006ec2 <_dtoa_r+0x802>
 8007226:	f1bb 0f00 	cmp.w	fp, #0
 800722a:	f77f aed9 	ble.w	8006fe0 <_dtoa_r+0x920>
 800722e:	4656      	mov	r6, sl
 8007230:	9802      	ldr	r0, [sp, #8]
 8007232:	4621      	mov	r1, r4
 8007234:	f7ff f9bc 	bl	80065b0 <quorem>
 8007238:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800723c:	f806 3b01 	strb.w	r3, [r6], #1
 8007240:	eba6 020a 	sub.w	r2, r6, sl
 8007244:	4593      	cmp	fp, r2
 8007246:	ddb4      	ble.n	80071b2 <_dtoa_r+0xaf2>
 8007248:	9902      	ldr	r1, [sp, #8]
 800724a:	2300      	movs	r3, #0
 800724c:	220a      	movs	r2, #10
 800724e:	4648      	mov	r0, r9
 8007250:	f000 f968 	bl	8007524 <__multadd>
 8007254:	9002      	str	r0, [sp, #8]
 8007256:	e7eb      	b.n	8007230 <_dtoa_r+0xb70>
 8007258:	08009e41 	.word	0x08009e41
 800725c:	08009dc5 	.word	0x08009dc5

08007260 <_free_r>:
 8007260:	b538      	push	{r3, r4, r5, lr}
 8007262:	4605      	mov	r5, r0
 8007264:	2900      	cmp	r1, #0
 8007266:	d041      	beq.n	80072ec <_free_r+0x8c>
 8007268:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800726c:	1f0c      	subs	r4, r1, #4
 800726e:	2b00      	cmp	r3, #0
 8007270:	bfb8      	it	lt
 8007272:	18e4      	addlt	r4, r4, r3
 8007274:	f000 f8e8 	bl	8007448 <__malloc_lock>
 8007278:	4a1d      	ldr	r2, [pc, #116]	@ (80072f0 <_free_r+0x90>)
 800727a:	6813      	ldr	r3, [r2, #0]
 800727c:	b933      	cbnz	r3, 800728c <_free_r+0x2c>
 800727e:	6063      	str	r3, [r4, #4]
 8007280:	6014      	str	r4, [r2, #0]
 8007282:	4628      	mov	r0, r5
 8007284:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007288:	f000 b8e4 	b.w	8007454 <__malloc_unlock>
 800728c:	42a3      	cmp	r3, r4
 800728e:	d908      	bls.n	80072a2 <_free_r+0x42>
 8007290:	6820      	ldr	r0, [r4, #0]
 8007292:	1821      	adds	r1, r4, r0
 8007294:	428b      	cmp	r3, r1
 8007296:	bf01      	itttt	eq
 8007298:	6819      	ldreq	r1, [r3, #0]
 800729a:	685b      	ldreq	r3, [r3, #4]
 800729c:	1809      	addeq	r1, r1, r0
 800729e:	6021      	streq	r1, [r4, #0]
 80072a0:	e7ed      	b.n	800727e <_free_r+0x1e>
 80072a2:	461a      	mov	r2, r3
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	b10b      	cbz	r3, 80072ac <_free_r+0x4c>
 80072a8:	42a3      	cmp	r3, r4
 80072aa:	d9fa      	bls.n	80072a2 <_free_r+0x42>
 80072ac:	6811      	ldr	r1, [r2, #0]
 80072ae:	1850      	adds	r0, r2, r1
 80072b0:	42a0      	cmp	r0, r4
 80072b2:	d10b      	bne.n	80072cc <_free_r+0x6c>
 80072b4:	6820      	ldr	r0, [r4, #0]
 80072b6:	4401      	add	r1, r0
 80072b8:	1850      	adds	r0, r2, r1
 80072ba:	4283      	cmp	r3, r0
 80072bc:	6011      	str	r1, [r2, #0]
 80072be:	d1e0      	bne.n	8007282 <_free_r+0x22>
 80072c0:	6818      	ldr	r0, [r3, #0]
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	6053      	str	r3, [r2, #4]
 80072c6:	4408      	add	r0, r1
 80072c8:	6010      	str	r0, [r2, #0]
 80072ca:	e7da      	b.n	8007282 <_free_r+0x22>
 80072cc:	d902      	bls.n	80072d4 <_free_r+0x74>
 80072ce:	230c      	movs	r3, #12
 80072d0:	602b      	str	r3, [r5, #0]
 80072d2:	e7d6      	b.n	8007282 <_free_r+0x22>
 80072d4:	6820      	ldr	r0, [r4, #0]
 80072d6:	1821      	adds	r1, r4, r0
 80072d8:	428b      	cmp	r3, r1
 80072da:	bf04      	itt	eq
 80072dc:	6819      	ldreq	r1, [r3, #0]
 80072de:	685b      	ldreq	r3, [r3, #4]
 80072e0:	6063      	str	r3, [r4, #4]
 80072e2:	bf04      	itt	eq
 80072e4:	1809      	addeq	r1, r1, r0
 80072e6:	6021      	streq	r1, [r4, #0]
 80072e8:	6054      	str	r4, [r2, #4]
 80072ea:	e7ca      	b.n	8007282 <_free_r+0x22>
 80072ec:	bd38      	pop	{r3, r4, r5, pc}
 80072ee:	bf00      	nop
 80072f0:	2000049c 	.word	0x2000049c

080072f4 <malloc>:
 80072f4:	4b02      	ldr	r3, [pc, #8]	@ (8007300 <malloc+0xc>)
 80072f6:	4601      	mov	r1, r0
 80072f8:	6818      	ldr	r0, [r3, #0]
 80072fa:	f000 b825 	b.w	8007348 <_malloc_r>
 80072fe:	bf00      	nop
 8007300:	20000018 	.word	0x20000018

08007304 <sbrk_aligned>:
 8007304:	b570      	push	{r4, r5, r6, lr}
 8007306:	4e0f      	ldr	r6, [pc, #60]	@ (8007344 <sbrk_aligned+0x40>)
 8007308:	460c      	mov	r4, r1
 800730a:	6831      	ldr	r1, [r6, #0]
 800730c:	4605      	mov	r5, r0
 800730e:	b911      	cbnz	r1, 8007316 <sbrk_aligned+0x12>
 8007310:	f001 fe04 	bl	8008f1c <_sbrk_r>
 8007314:	6030      	str	r0, [r6, #0]
 8007316:	4621      	mov	r1, r4
 8007318:	4628      	mov	r0, r5
 800731a:	f001 fdff 	bl	8008f1c <_sbrk_r>
 800731e:	1c43      	adds	r3, r0, #1
 8007320:	d103      	bne.n	800732a <sbrk_aligned+0x26>
 8007322:	f04f 34ff 	mov.w	r4, #4294967295
 8007326:	4620      	mov	r0, r4
 8007328:	bd70      	pop	{r4, r5, r6, pc}
 800732a:	1cc4      	adds	r4, r0, #3
 800732c:	f024 0403 	bic.w	r4, r4, #3
 8007330:	42a0      	cmp	r0, r4
 8007332:	d0f8      	beq.n	8007326 <sbrk_aligned+0x22>
 8007334:	1a21      	subs	r1, r4, r0
 8007336:	4628      	mov	r0, r5
 8007338:	f001 fdf0 	bl	8008f1c <_sbrk_r>
 800733c:	3001      	adds	r0, #1
 800733e:	d1f2      	bne.n	8007326 <sbrk_aligned+0x22>
 8007340:	e7ef      	b.n	8007322 <sbrk_aligned+0x1e>
 8007342:	bf00      	nop
 8007344:	20000498 	.word	0x20000498

08007348 <_malloc_r>:
 8007348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800734c:	1ccd      	adds	r5, r1, #3
 800734e:	f025 0503 	bic.w	r5, r5, #3
 8007352:	3508      	adds	r5, #8
 8007354:	2d0c      	cmp	r5, #12
 8007356:	bf38      	it	cc
 8007358:	250c      	movcc	r5, #12
 800735a:	2d00      	cmp	r5, #0
 800735c:	4606      	mov	r6, r0
 800735e:	db01      	blt.n	8007364 <_malloc_r+0x1c>
 8007360:	42a9      	cmp	r1, r5
 8007362:	d904      	bls.n	800736e <_malloc_r+0x26>
 8007364:	230c      	movs	r3, #12
 8007366:	6033      	str	r3, [r6, #0]
 8007368:	2000      	movs	r0, #0
 800736a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800736e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007444 <_malloc_r+0xfc>
 8007372:	f000 f869 	bl	8007448 <__malloc_lock>
 8007376:	f8d8 3000 	ldr.w	r3, [r8]
 800737a:	461c      	mov	r4, r3
 800737c:	bb44      	cbnz	r4, 80073d0 <_malloc_r+0x88>
 800737e:	4629      	mov	r1, r5
 8007380:	4630      	mov	r0, r6
 8007382:	f7ff ffbf 	bl	8007304 <sbrk_aligned>
 8007386:	1c43      	adds	r3, r0, #1
 8007388:	4604      	mov	r4, r0
 800738a:	d158      	bne.n	800743e <_malloc_r+0xf6>
 800738c:	f8d8 4000 	ldr.w	r4, [r8]
 8007390:	4627      	mov	r7, r4
 8007392:	2f00      	cmp	r7, #0
 8007394:	d143      	bne.n	800741e <_malloc_r+0xd6>
 8007396:	2c00      	cmp	r4, #0
 8007398:	d04b      	beq.n	8007432 <_malloc_r+0xea>
 800739a:	6823      	ldr	r3, [r4, #0]
 800739c:	4639      	mov	r1, r7
 800739e:	4630      	mov	r0, r6
 80073a0:	eb04 0903 	add.w	r9, r4, r3
 80073a4:	f001 fdba 	bl	8008f1c <_sbrk_r>
 80073a8:	4581      	cmp	r9, r0
 80073aa:	d142      	bne.n	8007432 <_malloc_r+0xea>
 80073ac:	6821      	ldr	r1, [r4, #0]
 80073ae:	1a6d      	subs	r5, r5, r1
 80073b0:	4629      	mov	r1, r5
 80073b2:	4630      	mov	r0, r6
 80073b4:	f7ff ffa6 	bl	8007304 <sbrk_aligned>
 80073b8:	3001      	adds	r0, #1
 80073ba:	d03a      	beq.n	8007432 <_malloc_r+0xea>
 80073bc:	6823      	ldr	r3, [r4, #0]
 80073be:	442b      	add	r3, r5
 80073c0:	6023      	str	r3, [r4, #0]
 80073c2:	f8d8 3000 	ldr.w	r3, [r8]
 80073c6:	685a      	ldr	r2, [r3, #4]
 80073c8:	bb62      	cbnz	r2, 8007424 <_malloc_r+0xdc>
 80073ca:	f8c8 7000 	str.w	r7, [r8]
 80073ce:	e00f      	b.n	80073f0 <_malloc_r+0xa8>
 80073d0:	6822      	ldr	r2, [r4, #0]
 80073d2:	1b52      	subs	r2, r2, r5
 80073d4:	d420      	bmi.n	8007418 <_malloc_r+0xd0>
 80073d6:	2a0b      	cmp	r2, #11
 80073d8:	d917      	bls.n	800740a <_malloc_r+0xc2>
 80073da:	1961      	adds	r1, r4, r5
 80073dc:	42a3      	cmp	r3, r4
 80073de:	6025      	str	r5, [r4, #0]
 80073e0:	bf18      	it	ne
 80073e2:	6059      	strne	r1, [r3, #4]
 80073e4:	6863      	ldr	r3, [r4, #4]
 80073e6:	bf08      	it	eq
 80073e8:	f8c8 1000 	streq.w	r1, [r8]
 80073ec:	5162      	str	r2, [r4, r5]
 80073ee:	604b      	str	r3, [r1, #4]
 80073f0:	4630      	mov	r0, r6
 80073f2:	f000 f82f 	bl	8007454 <__malloc_unlock>
 80073f6:	f104 000b 	add.w	r0, r4, #11
 80073fa:	1d23      	adds	r3, r4, #4
 80073fc:	f020 0007 	bic.w	r0, r0, #7
 8007400:	1ac2      	subs	r2, r0, r3
 8007402:	bf1c      	itt	ne
 8007404:	1a1b      	subne	r3, r3, r0
 8007406:	50a3      	strne	r3, [r4, r2]
 8007408:	e7af      	b.n	800736a <_malloc_r+0x22>
 800740a:	6862      	ldr	r2, [r4, #4]
 800740c:	42a3      	cmp	r3, r4
 800740e:	bf0c      	ite	eq
 8007410:	f8c8 2000 	streq.w	r2, [r8]
 8007414:	605a      	strne	r2, [r3, #4]
 8007416:	e7eb      	b.n	80073f0 <_malloc_r+0xa8>
 8007418:	4623      	mov	r3, r4
 800741a:	6864      	ldr	r4, [r4, #4]
 800741c:	e7ae      	b.n	800737c <_malloc_r+0x34>
 800741e:	463c      	mov	r4, r7
 8007420:	687f      	ldr	r7, [r7, #4]
 8007422:	e7b6      	b.n	8007392 <_malloc_r+0x4a>
 8007424:	461a      	mov	r2, r3
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	42a3      	cmp	r3, r4
 800742a:	d1fb      	bne.n	8007424 <_malloc_r+0xdc>
 800742c:	2300      	movs	r3, #0
 800742e:	6053      	str	r3, [r2, #4]
 8007430:	e7de      	b.n	80073f0 <_malloc_r+0xa8>
 8007432:	230c      	movs	r3, #12
 8007434:	6033      	str	r3, [r6, #0]
 8007436:	4630      	mov	r0, r6
 8007438:	f000 f80c 	bl	8007454 <__malloc_unlock>
 800743c:	e794      	b.n	8007368 <_malloc_r+0x20>
 800743e:	6005      	str	r5, [r0, #0]
 8007440:	e7d6      	b.n	80073f0 <_malloc_r+0xa8>
 8007442:	bf00      	nop
 8007444:	2000049c 	.word	0x2000049c

08007448 <__malloc_lock>:
 8007448:	4801      	ldr	r0, [pc, #4]	@ (8007450 <__malloc_lock+0x8>)
 800744a:	f7ff b8a0 	b.w	800658e <__retarget_lock_acquire_recursive>
 800744e:	bf00      	nop
 8007450:	20000494 	.word	0x20000494

08007454 <__malloc_unlock>:
 8007454:	4801      	ldr	r0, [pc, #4]	@ (800745c <__malloc_unlock+0x8>)
 8007456:	f7ff b89b 	b.w	8006590 <__retarget_lock_release_recursive>
 800745a:	bf00      	nop
 800745c:	20000494 	.word	0x20000494

08007460 <_Balloc>:
 8007460:	b570      	push	{r4, r5, r6, lr}
 8007462:	69c6      	ldr	r6, [r0, #28]
 8007464:	4604      	mov	r4, r0
 8007466:	460d      	mov	r5, r1
 8007468:	b976      	cbnz	r6, 8007488 <_Balloc+0x28>
 800746a:	2010      	movs	r0, #16
 800746c:	f7ff ff42 	bl	80072f4 <malloc>
 8007470:	4602      	mov	r2, r0
 8007472:	61e0      	str	r0, [r4, #28]
 8007474:	b920      	cbnz	r0, 8007480 <_Balloc+0x20>
 8007476:	4b18      	ldr	r3, [pc, #96]	@ (80074d8 <_Balloc+0x78>)
 8007478:	4818      	ldr	r0, [pc, #96]	@ (80074dc <_Balloc+0x7c>)
 800747a:	216b      	movs	r1, #107	@ 0x6b
 800747c:	f001 fd74 	bl	8008f68 <__assert_func>
 8007480:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007484:	6006      	str	r6, [r0, #0]
 8007486:	60c6      	str	r6, [r0, #12]
 8007488:	69e6      	ldr	r6, [r4, #28]
 800748a:	68f3      	ldr	r3, [r6, #12]
 800748c:	b183      	cbz	r3, 80074b0 <_Balloc+0x50>
 800748e:	69e3      	ldr	r3, [r4, #28]
 8007490:	68db      	ldr	r3, [r3, #12]
 8007492:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007496:	b9b8      	cbnz	r0, 80074c8 <_Balloc+0x68>
 8007498:	2101      	movs	r1, #1
 800749a:	fa01 f605 	lsl.w	r6, r1, r5
 800749e:	1d72      	adds	r2, r6, #5
 80074a0:	0092      	lsls	r2, r2, #2
 80074a2:	4620      	mov	r0, r4
 80074a4:	f001 fd7e 	bl	8008fa4 <_calloc_r>
 80074a8:	b160      	cbz	r0, 80074c4 <_Balloc+0x64>
 80074aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80074ae:	e00e      	b.n	80074ce <_Balloc+0x6e>
 80074b0:	2221      	movs	r2, #33	@ 0x21
 80074b2:	2104      	movs	r1, #4
 80074b4:	4620      	mov	r0, r4
 80074b6:	f001 fd75 	bl	8008fa4 <_calloc_r>
 80074ba:	69e3      	ldr	r3, [r4, #28]
 80074bc:	60f0      	str	r0, [r6, #12]
 80074be:	68db      	ldr	r3, [r3, #12]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d1e4      	bne.n	800748e <_Balloc+0x2e>
 80074c4:	2000      	movs	r0, #0
 80074c6:	bd70      	pop	{r4, r5, r6, pc}
 80074c8:	6802      	ldr	r2, [r0, #0]
 80074ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80074ce:	2300      	movs	r3, #0
 80074d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80074d4:	e7f7      	b.n	80074c6 <_Balloc+0x66>
 80074d6:	bf00      	nop
 80074d8:	08009dd2 	.word	0x08009dd2
 80074dc:	08009e52 	.word	0x08009e52

080074e0 <_Bfree>:
 80074e0:	b570      	push	{r4, r5, r6, lr}
 80074e2:	69c6      	ldr	r6, [r0, #28]
 80074e4:	4605      	mov	r5, r0
 80074e6:	460c      	mov	r4, r1
 80074e8:	b976      	cbnz	r6, 8007508 <_Bfree+0x28>
 80074ea:	2010      	movs	r0, #16
 80074ec:	f7ff ff02 	bl	80072f4 <malloc>
 80074f0:	4602      	mov	r2, r0
 80074f2:	61e8      	str	r0, [r5, #28]
 80074f4:	b920      	cbnz	r0, 8007500 <_Bfree+0x20>
 80074f6:	4b09      	ldr	r3, [pc, #36]	@ (800751c <_Bfree+0x3c>)
 80074f8:	4809      	ldr	r0, [pc, #36]	@ (8007520 <_Bfree+0x40>)
 80074fa:	218f      	movs	r1, #143	@ 0x8f
 80074fc:	f001 fd34 	bl	8008f68 <__assert_func>
 8007500:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007504:	6006      	str	r6, [r0, #0]
 8007506:	60c6      	str	r6, [r0, #12]
 8007508:	b13c      	cbz	r4, 800751a <_Bfree+0x3a>
 800750a:	69eb      	ldr	r3, [r5, #28]
 800750c:	6862      	ldr	r2, [r4, #4]
 800750e:	68db      	ldr	r3, [r3, #12]
 8007510:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007514:	6021      	str	r1, [r4, #0]
 8007516:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800751a:	bd70      	pop	{r4, r5, r6, pc}
 800751c:	08009dd2 	.word	0x08009dd2
 8007520:	08009e52 	.word	0x08009e52

08007524 <__multadd>:
 8007524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007528:	690d      	ldr	r5, [r1, #16]
 800752a:	4607      	mov	r7, r0
 800752c:	460c      	mov	r4, r1
 800752e:	461e      	mov	r6, r3
 8007530:	f101 0c14 	add.w	ip, r1, #20
 8007534:	2000      	movs	r0, #0
 8007536:	f8dc 3000 	ldr.w	r3, [ip]
 800753a:	b299      	uxth	r1, r3
 800753c:	fb02 6101 	mla	r1, r2, r1, r6
 8007540:	0c1e      	lsrs	r6, r3, #16
 8007542:	0c0b      	lsrs	r3, r1, #16
 8007544:	fb02 3306 	mla	r3, r2, r6, r3
 8007548:	b289      	uxth	r1, r1
 800754a:	3001      	adds	r0, #1
 800754c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007550:	4285      	cmp	r5, r0
 8007552:	f84c 1b04 	str.w	r1, [ip], #4
 8007556:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800755a:	dcec      	bgt.n	8007536 <__multadd+0x12>
 800755c:	b30e      	cbz	r6, 80075a2 <__multadd+0x7e>
 800755e:	68a3      	ldr	r3, [r4, #8]
 8007560:	42ab      	cmp	r3, r5
 8007562:	dc19      	bgt.n	8007598 <__multadd+0x74>
 8007564:	6861      	ldr	r1, [r4, #4]
 8007566:	4638      	mov	r0, r7
 8007568:	3101      	adds	r1, #1
 800756a:	f7ff ff79 	bl	8007460 <_Balloc>
 800756e:	4680      	mov	r8, r0
 8007570:	b928      	cbnz	r0, 800757e <__multadd+0x5a>
 8007572:	4602      	mov	r2, r0
 8007574:	4b0c      	ldr	r3, [pc, #48]	@ (80075a8 <__multadd+0x84>)
 8007576:	480d      	ldr	r0, [pc, #52]	@ (80075ac <__multadd+0x88>)
 8007578:	21ba      	movs	r1, #186	@ 0xba
 800757a:	f001 fcf5 	bl	8008f68 <__assert_func>
 800757e:	6922      	ldr	r2, [r4, #16]
 8007580:	3202      	adds	r2, #2
 8007582:	f104 010c 	add.w	r1, r4, #12
 8007586:	0092      	lsls	r2, r2, #2
 8007588:	300c      	adds	r0, #12
 800758a:	f001 fcd7 	bl	8008f3c <memcpy>
 800758e:	4621      	mov	r1, r4
 8007590:	4638      	mov	r0, r7
 8007592:	f7ff ffa5 	bl	80074e0 <_Bfree>
 8007596:	4644      	mov	r4, r8
 8007598:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800759c:	3501      	adds	r5, #1
 800759e:	615e      	str	r6, [r3, #20]
 80075a0:	6125      	str	r5, [r4, #16]
 80075a2:	4620      	mov	r0, r4
 80075a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075a8:	08009e41 	.word	0x08009e41
 80075ac:	08009e52 	.word	0x08009e52

080075b0 <__s2b>:
 80075b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075b4:	460c      	mov	r4, r1
 80075b6:	4615      	mov	r5, r2
 80075b8:	461f      	mov	r7, r3
 80075ba:	2209      	movs	r2, #9
 80075bc:	3308      	adds	r3, #8
 80075be:	4606      	mov	r6, r0
 80075c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80075c4:	2100      	movs	r1, #0
 80075c6:	2201      	movs	r2, #1
 80075c8:	429a      	cmp	r2, r3
 80075ca:	db09      	blt.n	80075e0 <__s2b+0x30>
 80075cc:	4630      	mov	r0, r6
 80075ce:	f7ff ff47 	bl	8007460 <_Balloc>
 80075d2:	b940      	cbnz	r0, 80075e6 <__s2b+0x36>
 80075d4:	4602      	mov	r2, r0
 80075d6:	4b19      	ldr	r3, [pc, #100]	@ (800763c <__s2b+0x8c>)
 80075d8:	4819      	ldr	r0, [pc, #100]	@ (8007640 <__s2b+0x90>)
 80075da:	21d3      	movs	r1, #211	@ 0xd3
 80075dc:	f001 fcc4 	bl	8008f68 <__assert_func>
 80075e0:	0052      	lsls	r2, r2, #1
 80075e2:	3101      	adds	r1, #1
 80075e4:	e7f0      	b.n	80075c8 <__s2b+0x18>
 80075e6:	9b08      	ldr	r3, [sp, #32]
 80075e8:	6143      	str	r3, [r0, #20]
 80075ea:	2d09      	cmp	r5, #9
 80075ec:	f04f 0301 	mov.w	r3, #1
 80075f0:	6103      	str	r3, [r0, #16]
 80075f2:	dd16      	ble.n	8007622 <__s2b+0x72>
 80075f4:	f104 0909 	add.w	r9, r4, #9
 80075f8:	46c8      	mov	r8, r9
 80075fa:	442c      	add	r4, r5
 80075fc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007600:	4601      	mov	r1, r0
 8007602:	3b30      	subs	r3, #48	@ 0x30
 8007604:	220a      	movs	r2, #10
 8007606:	4630      	mov	r0, r6
 8007608:	f7ff ff8c 	bl	8007524 <__multadd>
 800760c:	45a0      	cmp	r8, r4
 800760e:	d1f5      	bne.n	80075fc <__s2b+0x4c>
 8007610:	f1a5 0408 	sub.w	r4, r5, #8
 8007614:	444c      	add	r4, r9
 8007616:	1b2d      	subs	r5, r5, r4
 8007618:	1963      	adds	r3, r4, r5
 800761a:	42bb      	cmp	r3, r7
 800761c:	db04      	blt.n	8007628 <__s2b+0x78>
 800761e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007622:	340a      	adds	r4, #10
 8007624:	2509      	movs	r5, #9
 8007626:	e7f6      	b.n	8007616 <__s2b+0x66>
 8007628:	f814 3b01 	ldrb.w	r3, [r4], #1
 800762c:	4601      	mov	r1, r0
 800762e:	3b30      	subs	r3, #48	@ 0x30
 8007630:	220a      	movs	r2, #10
 8007632:	4630      	mov	r0, r6
 8007634:	f7ff ff76 	bl	8007524 <__multadd>
 8007638:	e7ee      	b.n	8007618 <__s2b+0x68>
 800763a:	bf00      	nop
 800763c:	08009e41 	.word	0x08009e41
 8007640:	08009e52 	.word	0x08009e52

08007644 <__hi0bits>:
 8007644:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007648:	4603      	mov	r3, r0
 800764a:	bf36      	itet	cc
 800764c:	0403      	lslcc	r3, r0, #16
 800764e:	2000      	movcs	r0, #0
 8007650:	2010      	movcc	r0, #16
 8007652:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007656:	bf3c      	itt	cc
 8007658:	021b      	lslcc	r3, r3, #8
 800765a:	3008      	addcc	r0, #8
 800765c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007660:	bf3c      	itt	cc
 8007662:	011b      	lslcc	r3, r3, #4
 8007664:	3004      	addcc	r0, #4
 8007666:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800766a:	bf3c      	itt	cc
 800766c:	009b      	lslcc	r3, r3, #2
 800766e:	3002      	addcc	r0, #2
 8007670:	2b00      	cmp	r3, #0
 8007672:	db05      	blt.n	8007680 <__hi0bits+0x3c>
 8007674:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007678:	f100 0001 	add.w	r0, r0, #1
 800767c:	bf08      	it	eq
 800767e:	2020      	moveq	r0, #32
 8007680:	4770      	bx	lr

08007682 <__lo0bits>:
 8007682:	6803      	ldr	r3, [r0, #0]
 8007684:	4602      	mov	r2, r0
 8007686:	f013 0007 	ands.w	r0, r3, #7
 800768a:	d00b      	beq.n	80076a4 <__lo0bits+0x22>
 800768c:	07d9      	lsls	r1, r3, #31
 800768e:	d421      	bmi.n	80076d4 <__lo0bits+0x52>
 8007690:	0798      	lsls	r0, r3, #30
 8007692:	bf49      	itett	mi
 8007694:	085b      	lsrmi	r3, r3, #1
 8007696:	089b      	lsrpl	r3, r3, #2
 8007698:	2001      	movmi	r0, #1
 800769a:	6013      	strmi	r3, [r2, #0]
 800769c:	bf5c      	itt	pl
 800769e:	6013      	strpl	r3, [r2, #0]
 80076a0:	2002      	movpl	r0, #2
 80076a2:	4770      	bx	lr
 80076a4:	b299      	uxth	r1, r3
 80076a6:	b909      	cbnz	r1, 80076ac <__lo0bits+0x2a>
 80076a8:	0c1b      	lsrs	r3, r3, #16
 80076aa:	2010      	movs	r0, #16
 80076ac:	b2d9      	uxtb	r1, r3
 80076ae:	b909      	cbnz	r1, 80076b4 <__lo0bits+0x32>
 80076b0:	3008      	adds	r0, #8
 80076b2:	0a1b      	lsrs	r3, r3, #8
 80076b4:	0719      	lsls	r1, r3, #28
 80076b6:	bf04      	itt	eq
 80076b8:	091b      	lsreq	r3, r3, #4
 80076ba:	3004      	addeq	r0, #4
 80076bc:	0799      	lsls	r1, r3, #30
 80076be:	bf04      	itt	eq
 80076c0:	089b      	lsreq	r3, r3, #2
 80076c2:	3002      	addeq	r0, #2
 80076c4:	07d9      	lsls	r1, r3, #31
 80076c6:	d403      	bmi.n	80076d0 <__lo0bits+0x4e>
 80076c8:	085b      	lsrs	r3, r3, #1
 80076ca:	f100 0001 	add.w	r0, r0, #1
 80076ce:	d003      	beq.n	80076d8 <__lo0bits+0x56>
 80076d0:	6013      	str	r3, [r2, #0]
 80076d2:	4770      	bx	lr
 80076d4:	2000      	movs	r0, #0
 80076d6:	4770      	bx	lr
 80076d8:	2020      	movs	r0, #32
 80076da:	4770      	bx	lr

080076dc <__i2b>:
 80076dc:	b510      	push	{r4, lr}
 80076de:	460c      	mov	r4, r1
 80076e0:	2101      	movs	r1, #1
 80076e2:	f7ff febd 	bl	8007460 <_Balloc>
 80076e6:	4602      	mov	r2, r0
 80076e8:	b928      	cbnz	r0, 80076f6 <__i2b+0x1a>
 80076ea:	4b05      	ldr	r3, [pc, #20]	@ (8007700 <__i2b+0x24>)
 80076ec:	4805      	ldr	r0, [pc, #20]	@ (8007704 <__i2b+0x28>)
 80076ee:	f240 1145 	movw	r1, #325	@ 0x145
 80076f2:	f001 fc39 	bl	8008f68 <__assert_func>
 80076f6:	2301      	movs	r3, #1
 80076f8:	6144      	str	r4, [r0, #20]
 80076fa:	6103      	str	r3, [r0, #16]
 80076fc:	bd10      	pop	{r4, pc}
 80076fe:	bf00      	nop
 8007700:	08009e41 	.word	0x08009e41
 8007704:	08009e52 	.word	0x08009e52

08007708 <__multiply>:
 8007708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800770c:	4617      	mov	r7, r2
 800770e:	690a      	ldr	r2, [r1, #16]
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	429a      	cmp	r2, r3
 8007714:	bfa8      	it	ge
 8007716:	463b      	movge	r3, r7
 8007718:	4689      	mov	r9, r1
 800771a:	bfa4      	itt	ge
 800771c:	460f      	movge	r7, r1
 800771e:	4699      	movge	r9, r3
 8007720:	693d      	ldr	r5, [r7, #16]
 8007722:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	6879      	ldr	r1, [r7, #4]
 800772a:	eb05 060a 	add.w	r6, r5, sl
 800772e:	42b3      	cmp	r3, r6
 8007730:	b085      	sub	sp, #20
 8007732:	bfb8      	it	lt
 8007734:	3101      	addlt	r1, #1
 8007736:	f7ff fe93 	bl	8007460 <_Balloc>
 800773a:	b930      	cbnz	r0, 800774a <__multiply+0x42>
 800773c:	4602      	mov	r2, r0
 800773e:	4b41      	ldr	r3, [pc, #260]	@ (8007844 <__multiply+0x13c>)
 8007740:	4841      	ldr	r0, [pc, #260]	@ (8007848 <__multiply+0x140>)
 8007742:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007746:	f001 fc0f 	bl	8008f68 <__assert_func>
 800774a:	f100 0414 	add.w	r4, r0, #20
 800774e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007752:	4623      	mov	r3, r4
 8007754:	2200      	movs	r2, #0
 8007756:	4573      	cmp	r3, lr
 8007758:	d320      	bcc.n	800779c <__multiply+0x94>
 800775a:	f107 0814 	add.w	r8, r7, #20
 800775e:	f109 0114 	add.w	r1, r9, #20
 8007762:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8007766:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800776a:	9302      	str	r3, [sp, #8]
 800776c:	1beb      	subs	r3, r5, r7
 800776e:	3b15      	subs	r3, #21
 8007770:	f023 0303 	bic.w	r3, r3, #3
 8007774:	3304      	adds	r3, #4
 8007776:	3715      	adds	r7, #21
 8007778:	42bd      	cmp	r5, r7
 800777a:	bf38      	it	cc
 800777c:	2304      	movcc	r3, #4
 800777e:	9301      	str	r3, [sp, #4]
 8007780:	9b02      	ldr	r3, [sp, #8]
 8007782:	9103      	str	r1, [sp, #12]
 8007784:	428b      	cmp	r3, r1
 8007786:	d80c      	bhi.n	80077a2 <__multiply+0x9a>
 8007788:	2e00      	cmp	r6, #0
 800778a:	dd03      	ble.n	8007794 <__multiply+0x8c>
 800778c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007790:	2b00      	cmp	r3, #0
 8007792:	d055      	beq.n	8007840 <__multiply+0x138>
 8007794:	6106      	str	r6, [r0, #16]
 8007796:	b005      	add	sp, #20
 8007798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800779c:	f843 2b04 	str.w	r2, [r3], #4
 80077a0:	e7d9      	b.n	8007756 <__multiply+0x4e>
 80077a2:	f8b1 a000 	ldrh.w	sl, [r1]
 80077a6:	f1ba 0f00 	cmp.w	sl, #0
 80077aa:	d01f      	beq.n	80077ec <__multiply+0xe4>
 80077ac:	46c4      	mov	ip, r8
 80077ae:	46a1      	mov	r9, r4
 80077b0:	2700      	movs	r7, #0
 80077b2:	f85c 2b04 	ldr.w	r2, [ip], #4
 80077b6:	f8d9 3000 	ldr.w	r3, [r9]
 80077ba:	fa1f fb82 	uxth.w	fp, r2
 80077be:	b29b      	uxth	r3, r3
 80077c0:	fb0a 330b 	mla	r3, sl, fp, r3
 80077c4:	443b      	add	r3, r7
 80077c6:	f8d9 7000 	ldr.w	r7, [r9]
 80077ca:	0c12      	lsrs	r2, r2, #16
 80077cc:	0c3f      	lsrs	r7, r7, #16
 80077ce:	fb0a 7202 	mla	r2, sl, r2, r7
 80077d2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80077dc:	4565      	cmp	r5, ip
 80077de:	f849 3b04 	str.w	r3, [r9], #4
 80077e2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80077e6:	d8e4      	bhi.n	80077b2 <__multiply+0xaa>
 80077e8:	9b01      	ldr	r3, [sp, #4]
 80077ea:	50e7      	str	r7, [r4, r3]
 80077ec:	9b03      	ldr	r3, [sp, #12]
 80077ee:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80077f2:	3104      	adds	r1, #4
 80077f4:	f1b9 0f00 	cmp.w	r9, #0
 80077f8:	d020      	beq.n	800783c <__multiply+0x134>
 80077fa:	6823      	ldr	r3, [r4, #0]
 80077fc:	4647      	mov	r7, r8
 80077fe:	46a4      	mov	ip, r4
 8007800:	f04f 0a00 	mov.w	sl, #0
 8007804:	f8b7 b000 	ldrh.w	fp, [r7]
 8007808:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800780c:	fb09 220b 	mla	r2, r9, fp, r2
 8007810:	4452      	add	r2, sl
 8007812:	b29b      	uxth	r3, r3
 8007814:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007818:	f84c 3b04 	str.w	r3, [ip], #4
 800781c:	f857 3b04 	ldr.w	r3, [r7], #4
 8007820:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007824:	f8bc 3000 	ldrh.w	r3, [ip]
 8007828:	fb09 330a 	mla	r3, r9, sl, r3
 800782c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007830:	42bd      	cmp	r5, r7
 8007832:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007836:	d8e5      	bhi.n	8007804 <__multiply+0xfc>
 8007838:	9a01      	ldr	r2, [sp, #4]
 800783a:	50a3      	str	r3, [r4, r2]
 800783c:	3404      	adds	r4, #4
 800783e:	e79f      	b.n	8007780 <__multiply+0x78>
 8007840:	3e01      	subs	r6, #1
 8007842:	e7a1      	b.n	8007788 <__multiply+0x80>
 8007844:	08009e41 	.word	0x08009e41
 8007848:	08009e52 	.word	0x08009e52

0800784c <__pow5mult>:
 800784c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007850:	4615      	mov	r5, r2
 8007852:	f012 0203 	ands.w	r2, r2, #3
 8007856:	4607      	mov	r7, r0
 8007858:	460e      	mov	r6, r1
 800785a:	d007      	beq.n	800786c <__pow5mult+0x20>
 800785c:	4c25      	ldr	r4, [pc, #148]	@ (80078f4 <__pow5mult+0xa8>)
 800785e:	3a01      	subs	r2, #1
 8007860:	2300      	movs	r3, #0
 8007862:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007866:	f7ff fe5d 	bl	8007524 <__multadd>
 800786a:	4606      	mov	r6, r0
 800786c:	10ad      	asrs	r5, r5, #2
 800786e:	d03d      	beq.n	80078ec <__pow5mult+0xa0>
 8007870:	69fc      	ldr	r4, [r7, #28]
 8007872:	b97c      	cbnz	r4, 8007894 <__pow5mult+0x48>
 8007874:	2010      	movs	r0, #16
 8007876:	f7ff fd3d 	bl	80072f4 <malloc>
 800787a:	4602      	mov	r2, r0
 800787c:	61f8      	str	r0, [r7, #28]
 800787e:	b928      	cbnz	r0, 800788c <__pow5mult+0x40>
 8007880:	4b1d      	ldr	r3, [pc, #116]	@ (80078f8 <__pow5mult+0xac>)
 8007882:	481e      	ldr	r0, [pc, #120]	@ (80078fc <__pow5mult+0xb0>)
 8007884:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007888:	f001 fb6e 	bl	8008f68 <__assert_func>
 800788c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007890:	6004      	str	r4, [r0, #0]
 8007892:	60c4      	str	r4, [r0, #12]
 8007894:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007898:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800789c:	b94c      	cbnz	r4, 80078b2 <__pow5mult+0x66>
 800789e:	f240 2171 	movw	r1, #625	@ 0x271
 80078a2:	4638      	mov	r0, r7
 80078a4:	f7ff ff1a 	bl	80076dc <__i2b>
 80078a8:	2300      	movs	r3, #0
 80078aa:	f8c8 0008 	str.w	r0, [r8, #8]
 80078ae:	4604      	mov	r4, r0
 80078b0:	6003      	str	r3, [r0, #0]
 80078b2:	f04f 0900 	mov.w	r9, #0
 80078b6:	07eb      	lsls	r3, r5, #31
 80078b8:	d50a      	bpl.n	80078d0 <__pow5mult+0x84>
 80078ba:	4631      	mov	r1, r6
 80078bc:	4622      	mov	r2, r4
 80078be:	4638      	mov	r0, r7
 80078c0:	f7ff ff22 	bl	8007708 <__multiply>
 80078c4:	4631      	mov	r1, r6
 80078c6:	4680      	mov	r8, r0
 80078c8:	4638      	mov	r0, r7
 80078ca:	f7ff fe09 	bl	80074e0 <_Bfree>
 80078ce:	4646      	mov	r6, r8
 80078d0:	106d      	asrs	r5, r5, #1
 80078d2:	d00b      	beq.n	80078ec <__pow5mult+0xa0>
 80078d4:	6820      	ldr	r0, [r4, #0]
 80078d6:	b938      	cbnz	r0, 80078e8 <__pow5mult+0x9c>
 80078d8:	4622      	mov	r2, r4
 80078da:	4621      	mov	r1, r4
 80078dc:	4638      	mov	r0, r7
 80078de:	f7ff ff13 	bl	8007708 <__multiply>
 80078e2:	6020      	str	r0, [r4, #0]
 80078e4:	f8c0 9000 	str.w	r9, [r0]
 80078e8:	4604      	mov	r4, r0
 80078ea:	e7e4      	b.n	80078b6 <__pow5mult+0x6a>
 80078ec:	4630      	mov	r0, r6
 80078ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078f2:	bf00      	nop
 80078f4:	08009f64 	.word	0x08009f64
 80078f8:	08009dd2 	.word	0x08009dd2
 80078fc:	08009e52 	.word	0x08009e52

08007900 <__lshift>:
 8007900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007904:	460c      	mov	r4, r1
 8007906:	6849      	ldr	r1, [r1, #4]
 8007908:	6923      	ldr	r3, [r4, #16]
 800790a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800790e:	68a3      	ldr	r3, [r4, #8]
 8007910:	4607      	mov	r7, r0
 8007912:	4691      	mov	r9, r2
 8007914:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007918:	f108 0601 	add.w	r6, r8, #1
 800791c:	42b3      	cmp	r3, r6
 800791e:	db0b      	blt.n	8007938 <__lshift+0x38>
 8007920:	4638      	mov	r0, r7
 8007922:	f7ff fd9d 	bl	8007460 <_Balloc>
 8007926:	4605      	mov	r5, r0
 8007928:	b948      	cbnz	r0, 800793e <__lshift+0x3e>
 800792a:	4602      	mov	r2, r0
 800792c:	4b28      	ldr	r3, [pc, #160]	@ (80079d0 <__lshift+0xd0>)
 800792e:	4829      	ldr	r0, [pc, #164]	@ (80079d4 <__lshift+0xd4>)
 8007930:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007934:	f001 fb18 	bl	8008f68 <__assert_func>
 8007938:	3101      	adds	r1, #1
 800793a:	005b      	lsls	r3, r3, #1
 800793c:	e7ee      	b.n	800791c <__lshift+0x1c>
 800793e:	2300      	movs	r3, #0
 8007940:	f100 0114 	add.w	r1, r0, #20
 8007944:	f100 0210 	add.w	r2, r0, #16
 8007948:	4618      	mov	r0, r3
 800794a:	4553      	cmp	r3, sl
 800794c:	db33      	blt.n	80079b6 <__lshift+0xb6>
 800794e:	6920      	ldr	r0, [r4, #16]
 8007950:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007954:	f104 0314 	add.w	r3, r4, #20
 8007958:	f019 091f 	ands.w	r9, r9, #31
 800795c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007960:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007964:	d02b      	beq.n	80079be <__lshift+0xbe>
 8007966:	f1c9 0e20 	rsb	lr, r9, #32
 800796a:	468a      	mov	sl, r1
 800796c:	2200      	movs	r2, #0
 800796e:	6818      	ldr	r0, [r3, #0]
 8007970:	fa00 f009 	lsl.w	r0, r0, r9
 8007974:	4310      	orrs	r0, r2
 8007976:	f84a 0b04 	str.w	r0, [sl], #4
 800797a:	f853 2b04 	ldr.w	r2, [r3], #4
 800797e:	459c      	cmp	ip, r3
 8007980:	fa22 f20e 	lsr.w	r2, r2, lr
 8007984:	d8f3      	bhi.n	800796e <__lshift+0x6e>
 8007986:	ebac 0304 	sub.w	r3, ip, r4
 800798a:	3b15      	subs	r3, #21
 800798c:	f023 0303 	bic.w	r3, r3, #3
 8007990:	3304      	adds	r3, #4
 8007992:	f104 0015 	add.w	r0, r4, #21
 8007996:	4560      	cmp	r0, ip
 8007998:	bf88      	it	hi
 800799a:	2304      	movhi	r3, #4
 800799c:	50ca      	str	r2, [r1, r3]
 800799e:	b10a      	cbz	r2, 80079a4 <__lshift+0xa4>
 80079a0:	f108 0602 	add.w	r6, r8, #2
 80079a4:	3e01      	subs	r6, #1
 80079a6:	4638      	mov	r0, r7
 80079a8:	612e      	str	r6, [r5, #16]
 80079aa:	4621      	mov	r1, r4
 80079ac:	f7ff fd98 	bl	80074e0 <_Bfree>
 80079b0:	4628      	mov	r0, r5
 80079b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079b6:	f842 0f04 	str.w	r0, [r2, #4]!
 80079ba:	3301      	adds	r3, #1
 80079bc:	e7c5      	b.n	800794a <__lshift+0x4a>
 80079be:	3904      	subs	r1, #4
 80079c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80079c4:	f841 2f04 	str.w	r2, [r1, #4]!
 80079c8:	459c      	cmp	ip, r3
 80079ca:	d8f9      	bhi.n	80079c0 <__lshift+0xc0>
 80079cc:	e7ea      	b.n	80079a4 <__lshift+0xa4>
 80079ce:	bf00      	nop
 80079d0:	08009e41 	.word	0x08009e41
 80079d4:	08009e52 	.word	0x08009e52

080079d8 <__mcmp>:
 80079d8:	690a      	ldr	r2, [r1, #16]
 80079da:	4603      	mov	r3, r0
 80079dc:	6900      	ldr	r0, [r0, #16]
 80079de:	1a80      	subs	r0, r0, r2
 80079e0:	b530      	push	{r4, r5, lr}
 80079e2:	d10e      	bne.n	8007a02 <__mcmp+0x2a>
 80079e4:	3314      	adds	r3, #20
 80079e6:	3114      	adds	r1, #20
 80079e8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80079ec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80079f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80079f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80079f8:	4295      	cmp	r5, r2
 80079fa:	d003      	beq.n	8007a04 <__mcmp+0x2c>
 80079fc:	d205      	bcs.n	8007a0a <__mcmp+0x32>
 80079fe:	f04f 30ff 	mov.w	r0, #4294967295
 8007a02:	bd30      	pop	{r4, r5, pc}
 8007a04:	42a3      	cmp	r3, r4
 8007a06:	d3f3      	bcc.n	80079f0 <__mcmp+0x18>
 8007a08:	e7fb      	b.n	8007a02 <__mcmp+0x2a>
 8007a0a:	2001      	movs	r0, #1
 8007a0c:	e7f9      	b.n	8007a02 <__mcmp+0x2a>
	...

08007a10 <__mdiff>:
 8007a10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a14:	4689      	mov	r9, r1
 8007a16:	4606      	mov	r6, r0
 8007a18:	4611      	mov	r1, r2
 8007a1a:	4648      	mov	r0, r9
 8007a1c:	4614      	mov	r4, r2
 8007a1e:	f7ff ffdb 	bl	80079d8 <__mcmp>
 8007a22:	1e05      	subs	r5, r0, #0
 8007a24:	d112      	bne.n	8007a4c <__mdiff+0x3c>
 8007a26:	4629      	mov	r1, r5
 8007a28:	4630      	mov	r0, r6
 8007a2a:	f7ff fd19 	bl	8007460 <_Balloc>
 8007a2e:	4602      	mov	r2, r0
 8007a30:	b928      	cbnz	r0, 8007a3e <__mdiff+0x2e>
 8007a32:	4b3f      	ldr	r3, [pc, #252]	@ (8007b30 <__mdiff+0x120>)
 8007a34:	f240 2137 	movw	r1, #567	@ 0x237
 8007a38:	483e      	ldr	r0, [pc, #248]	@ (8007b34 <__mdiff+0x124>)
 8007a3a:	f001 fa95 	bl	8008f68 <__assert_func>
 8007a3e:	2301      	movs	r3, #1
 8007a40:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007a44:	4610      	mov	r0, r2
 8007a46:	b003      	add	sp, #12
 8007a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a4c:	bfbc      	itt	lt
 8007a4e:	464b      	movlt	r3, r9
 8007a50:	46a1      	movlt	r9, r4
 8007a52:	4630      	mov	r0, r6
 8007a54:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007a58:	bfba      	itte	lt
 8007a5a:	461c      	movlt	r4, r3
 8007a5c:	2501      	movlt	r5, #1
 8007a5e:	2500      	movge	r5, #0
 8007a60:	f7ff fcfe 	bl	8007460 <_Balloc>
 8007a64:	4602      	mov	r2, r0
 8007a66:	b918      	cbnz	r0, 8007a70 <__mdiff+0x60>
 8007a68:	4b31      	ldr	r3, [pc, #196]	@ (8007b30 <__mdiff+0x120>)
 8007a6a:	f240 2145 	movw	r1, #581	@ 0x245
 8007a6e:	e7e3      	b.n	8007a38 <__mdiff+0x28>
 8007a70:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007a74:	6926      	ldr	r6, [r4, #16]
 8007a76:	60c5      	str	r5, [r0, #12]
 8007a78:	f109 0310 	add.w	r3, r9, #16
 8007a7c:	f109 0514 	add.w	r5, r9, #20
 8007a80:	f104 0e14 	add.w	lr, r4, #20
 8007a84:	f100 0b14 	add.w	fp, r0, #20
 8007a88:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007a8c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007a90:	9301      	str	r3, [sp, #4]
 8007a92:	46d9      	mov	r9, fp
 8007a94:	f04f 0c00 	mov.w	ip, #0
 8007a98:	9b01      	ldr	r3, [sp, #4]
 8007a9a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007a9e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007aa2:	9301      	str	r3, [sp, #4]
 8007aa4:	fa1f f38a 	uxth.w	r3, sl
 8007aa8:	4619      	mov	r1, r3
 8007aaa:	b283      	uxth	r3, r0
 8007aac:	1acb      	subs	r3, r1, r3
 8007aae:	0c00      	lsrs	r0, r0, #16
 8007ab0:	4463      	add	r3, ip
 8007ab2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007ab6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007ac0:	4576      	cmp	r6, lr
 8007ac2:	f849 3b04 	str.w	r3, [r9], #4
 8007ac6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007aca:	d8e5      	bhi.n	8007a98 <__mdiff+0x88>
 8007acc:	1b33      	subs	r3, r6, r4
 8007ace:	3b15      	subs	r3, #21
 8007ad0:	f023 0303 	bic.w	r3, r3, #3
 8007ad4:	3415      	adds	r4, #21
 8007ad6:	3304      	adds	r3, #4
 8007ad8:	42a6      	cmp	r6, r4
 8007ada:	bf38      	it	cc
 8007adc:	2304      	movcc	r3, #4
 8007ade:	441d      	add	r5, r3
 8007ae0:	445b      	add	r3, fp
 8007ae2:	461e      	mov	r6, r3
 8007ae4:	462c      	mov	r4, r5
 8007ae6:	4544      	cmp	r4, r8
 8007ae8:	d30e      	bcc.n	8007b08 <__mdiff+0xf8>
 8007aea:	f108 0103 	add.w	r1, r8, #3
 8007aee:	1b49      	subs	r1, r1, r5
 8007af0:	f021 0103 	bic.w	r1, r1, #3
 8007af4:	3d03      	subs	r5, #3
 8007af6:	45a8      	cmp	r8, r5
 8007af8:	bf38      	it	cc
 8007afa:	2100      	movcc	r1, #0
 8007afc:	440b      	add	r3, r1
 8007afe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007b02:	b191      	cbz	r1, 8007b2a <__mdiff+0x11a>
 8007b04:	6117      	str	r7, [r2, #16]
 8007b06:	e79d      	b.n	8007a44 <__mdiff+0x34>
 8007b08:	f854 1b04 	ldr.w	r1, [r4], #4
 8007b0c:	46e6      	mov	lr, ip
 8007b0e:	0c08      	lsrs	r0, r1, #16
 8007b10:	fa1c fc81 	uxtah	ip, ip, r1
 8007b14:	4471      	add	r1, lr
 8007b16:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007b1a:	b289      	uxth	r1, r1
 8007b1c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007b20:	f846 1b04 	str.w	r1, [r6], #4
 8007b24:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007b28:	e7dd      	b.n	8007ae6 <__mdiff+0xd6>
 8007b2a:	3f01      	subs	r7, #1
 8007b2c:	e7e7      	b.n	8007afe <__mdiff+0xee>
 8007b2e:	bf00      	nop
 8007b30:	08009e41 	.word	0x08009e41
 8007b34:	08009e52 	.word	0x08009e52

08007b38 <__ulp>:
 8007b38:	b082      	sub	sp, #8
 8007b3a:	ed8d 0b00 	vstr	d0, [sp]
 8007b3e:	9a01      	ldr	r2, [sp, #4]
 8007b40:	4b0f      	ldr	r3, [pc, #60]	@ (8007b80 <__ulp+0x48>)
 8007b42:	4013      	ands	r3, r2
 8007b44:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	dc08      	bgt.n	8007b5e <__ulp+0x26>
 8007b4c:	425b      	negs	r3, r3
 8007b4e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8007b52:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007b56:	da04      	bge.n	8007b62 <__ulp+0x2a>
 8007b58:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007b5c:	4113      	asrs	r3, r2
 8007b5e:	2200      	movs	r2, #0
 8007b60:	e008      	b.n	8007b74 <__ulp+0x3c>
 8007b62:	f1a2 0314 	sub.w	r3, r2, #20
 8007b66:	2b1e      	cmp	r3, #30
 8007b68:	bfda      	itte	le
 8007b6a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8007b6e:	40da      	lsrle	r2, r3
 8007b70:	2201      	movgt	r2, #1
 8007b72:	2300      	movs	r3, #0
 8007b74:	4619      	mov	r1, r3
 8007b76:	4610      	mov	r0, r2
 8007b78:	ec41 0b10 	vmov	d0, r0, r1
 8007b7c:	b002      	add	sp, #8
 8007b7e:	4770      	bx	lr
 8007b80:	7ff00000 	.word	0x7ff00000

08007b84 <__b2d>:
 8007b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b88:	6906      	ldr	r6, [r0, #16]
 8007b8a:	f100 0814 	add.w	r8, r0, #20
 8007b8e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8007b92:	1f37      	subs	r7, r6, #4
 8007b94:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007b98:	4610      	mov	r0, r2
 8007b9a:	f7ff fd53 	bl	8007644 <__hi0bits>
 8007b9e:	f1c0 0320 	rsb	r3, r0, #32
 8007ba2:	280a      	cmp	r0, #10
 8007ba4:	600b      	str	r3, [r1, #0]
 8007ba6:	491b      	ldr	r1, [pc, #108]	@ (8007c14 <__b2d+0x90>)
 8007ba8:	dc15      	bgt.n	8007bd6 <__b2d+0x52>
 8007baa:	f1c0 0c0b 	rsb	ip, r0, #11
 8007bae:	fa22 f30c 	lsr.w	r3, r2, ip
 8007bb2:	45b8      	cmp	r8, r7
 8007bb4:	ea43 0501 	orr.w	r5, r3, r1
 8007bb8:	bf34      	ite	cc
 8007bba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007bbe:	2300      	movcs	r3, #0
 8007bc0:	3015      	adds	r0, #21
 8007bc2:	fa02 f000 	lsl.w	r0, r2, r0
 8007bc6:	fa23 f30c 	lsr.w	r3, r3, ip
 8007bca:	4303      	orrs	r3, r0
 8007bcc:	461c      	mov	r4, r3
 8007bce:	ec45 4b10 	vmov	d0, r4, r5
 8007bd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bd6:	45b8      	cmp	r8, r7
 8007bd8:	bf3a      	itte	cc
 8007bda:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007bde:	f1a6 0708 	subcc.w	r7, r6, #8
 8007be2:	2300      	movcs	r3, #0
 8007be4:	380b      	subs	r0, #11
 8007be6:	d012      	beq.n	8007c0e <__b2d+0x8a>
 8007be8:	f1c0 0120 	rsb	r1, r0, #32
 8007bec:	fa23 f401 	lsr.w	r4, r3, r1
 8007bf0:	4082      	lsls	r2, r0
 8007bf2:	4322      	orrs	r2, r4
 8007bf4:	4547      	cmp	r7, r8
 8007bf6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8007bfa:	bf8c      	ite	hi
 8007bfc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007c00:	2200      	movls	r2, #0
 8007c02:	4083      	lsls	r3, r0
 8007c04:	40ca      	lsrs	r2, r1
 8007c06:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	e7de      	b.n	8007bcc <__b2d+0x48>
 8007c0e:	ea42 0501 	orr.w	r5, r2, r1
 8007c12:	e7db      	b.n	8007bcc <__b2d+0x48>
 8007c14:	3ff00000 	.word	0x3ff00000

08007c18 <__d2b>:
 8007c18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007c1c:	460f      	mov	r7, r1
 8007c1e:	2101      	movs	r1, #1
 8007c20:	ec59 8b10 	vmov	r8, r9, d0
 8007c24:	4616      	mov	r6, r2
 8007c26:	f7ff fc1b 	bl	8007460 <_Balloc>
 8007c2a:	4604      	mov	r4, r0
 8007c2c:	b930      	cbnz	r0, 8007c3c <__d2b+0x24>
 8007c2e:	4602      	mov	r2, r0
 8007c30:	4b23      	ldr	r3, [pc, #140]	@ (8007cc0 <__d2b+0xa8>)
 8007c32:	4824      	ldr	r0, [pc, #144]	@ (8007cc4 <__d2b+0xac>)
 8007c34:	f240 310f 	movw	r1, #783	@ 0x30f
 8007c38:	f001 f996 	bl	8008f68 <__assert_func>
 8007c3c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007c40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007c44:	b10d      	cbz	r5, 8007c4a <__d2b+0x32>
 8007c46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007c4a:	9301      	str	r3, [sp, #4]
 8007c4c:	f1b8 0300 	subs.w	r3, r8, #0
 8007c50:	d023      	beq.n	8007c9a <__d2b+0x82>
 8007c52:	4668      	mov	r0, sp
 8007c54:	9300      	str	r3, [sp, #0]
 8007c56:	f7ff fd14 	bl	8007682 <__lo0bits>
 8007c5a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007c5e:	b1d0      	cbz	r0, 8007c96 <__d2b+0x7e>
 8007c60:	f1c0 0320 	rsb	r3, r0, #32
 8007c64:	fa02 f303 	lsl.w	r3, r2, r3
 8007c68:	430b      	orrs	r3, r1
 8007c6a:	40c2      	lsrs	r2, r0
 8007c6c:	6163      	str	r3, [r4, #20]
 8007c6e:	9201      	str	r2, [sp, #4]
 8007c70:	9b01      	ldr	r3, [sp, #4]
 8007c72:	61a3      	str	r3, [r4, #24]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	bf0c      	ite	eq
 8007c78:	2201      	moveq	r2, #1
 8007c7a:	2202      	movne	r2, #2
 8007c7c:	6122      	str	r2, [r4, #16]
 8007c7e:	b1a5      	cbz	r5, 8007caa <__d2b+0x92>
 8007c80:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007c84:	4405      	add	r5, r0
 8007c86:	603d      	str	r5, [r7, #0]
 8007c88:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007c8c:	6030      	str	r0, [r6, #0]
 8007c8e:	4620      	mov	r0, r4
 8007c90:	b003      	add	sp, #12
 8007c92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c96:	6161      	str	r1, [r4, #20]
 8007c98:	e7ea      	b.n	8007c70 <__d2b+0x58>
 8007c9a:	a801      	add	r0, sp, #4
 8007c9c:	f7ff fcf1 	bl	8007682 <__lo0bits>
 8007ca0:	9b01      	ldr	r3, [sp, #4]
 8007ca2:	6163      	str	r3, [r4, #20]
 8007ca4:	3020      	adds	r0, #32
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	e7e8      	b.n	8007c7c <__d2b+0x64>
 8007caa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007cae:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007cb2:	6038      	str	r0, [r7, #0]
 8007cb4:	6918      	ldr	r0, [r3, #16]
 8007cb6:	f7ff fcc5 	bl	8007644 <__hi0bits>
 8007cba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007cbe:	e7e5      	b.n	8007c8c <__d2b+0x74>
 8007cc0:	08009e41 	.word	0x08009e41
 8007cc4:	08009e52 	.word	0x08009e52

08007cc8 <__ratio>:
 8007cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ccc:	b085      	sub	sp, #20
 8007cce:	e9cd 1000 	strd	r1, r0, [sp]
 8007cd2:	a902      	add	r1, sp, #8
 8007cd4:	f7ff ff56 	bl	8007b84 <__b2d>
 8007cd8:	9800      	ldr	r0, [sp, #0]
 8007cda:	a903      	add	r1, sp, #12
 8007cdc:	ec55 4b10 	vmov	r4, r5, d0
 8007ce0:	f7ff ff50 	bl	8007b84 <__b2d>
 8007ce4:	9b01      	ldr	r3, [sp, #4]
 8007ce6:	6919      	ldr	r1, [r3, #16]
 8007ce8:	9b00      	ldr	r3, [sp, #0]
 8007cea:	691b      	ldr	r3, [r3, #16]
 8007cec:	1ac9      	subs	r1, r1, r3
 8007cee:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007cf2:	1a9b      	subs	r3, r3, r2
 8007cf4:	ec5b ab10 	vmov	sl, fp, d0
 8007cf8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	bfce      	itee	gt
 8007d00:	462a      	movgt	r2, r5
 8007d02:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007d06:	465a      	movle	r2, fp
 8007d08:	462f      	mov	r7, r5
 8007d0a:	46d9      	mov	r9, fp
 8007d0c:	bfcc      	ite	gt
 8007d0e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007d12:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8007d16:	464b      	mov	r3, r9
 8007d18:	4652      	mov	r2, sl
 8007d1a:	4620      	mov	r0, r4
 8007d1c:	4639      	mov	r1, r7
 8007d1e:	f7f8 fdbd 	bl	800089c <__aeabi_ddiv>
 8007d22:	ec41 0b10 	vmov	d0, r0, r1
 8007d26:	b005      	add	sp, #20
 8007d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007d2c <__copybits>:
 8007d2c:	3901      	subs	r1, #1
 8007d2e:	b570      	push	{r4, r5, r6, lr}
 8007d30:	1149      	asrs	r1, r1, #5
 8007d32:	6914      	ldr	r4, [r2, #16]
 8007d34:	3101      	adds	r1, #1
 8007d36:	f102 0314 	add.w	r3, r2, #20
 8007d3a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007d3e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007d42:	1f05      	subs	r5, r0, #4
 8007d44:	42a3      	cmp	r3, r4
 8007d46:	d30c      	bcc.n	8007d62 <__copybits+0x36>
 8007d48:	1aa3      	subs	r3, r4, r2
 8007d4a:	3b11      	subs	r3, #17
 8007d4c:	f023 0303 	bic.w	r3, r3, #3
 8007d50:	3211      	adds	r2, #17
 8007d52:	42a2      	cmp	r2, r4
 8007d54:	bf88      	it	hi
 8007d56:	2300      	movhi	r3, #0
 8007d58:	4418      	add	r0, r3
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	4288      	cmp	r0, r1
 8007d5e:	d305      	bcc.n	8007d6c <__copybits+0x40>
 8007d60:	bd70      	pop	{r4, r5, r6, pc}
 8007d62:	f853 6b04 	ldr.w	r6, [r3], #4
 8007d66:	f845 6f04 	str.w	r6, [r5, #4]!
 8007d6a:	e7eb      	b.n	8007d44 <__copybits+0x18>
 8007d6c:	f840 3b04 	str.w	r3, [r0], #4
 8007d70:	e7f4      	b.n	8007d5c <__copybits+0x30>

08007d72 <__any_on>:
 8007d72:	f100 0214 	add.w	r2, r0, #20
 8007d76:	6900      	ldr	r0, [r0, #16]
 8007d78:	114b      	asrs	r3, r1, #5
 8007d7a:	4298      	cmp	r0, r3
 8007d7c:	b510      	push	{r4, lr}
 8007d7e:	db11      	blt.n	8007da4 <__any_on+0x32>
 8007d80:	dd0a      	ble.n	8007d98 <__any_on+0x26>
 8007d82:	f011 011f 	ands.w	r1, r1, #31
 8007d86:	d007      	beq.n	8007d98 <__any_on+0x26>
 8007d88:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007d8c:	fa24 f001 	lsr.w	r0, r4, r1
 8007d90:	fa00 f101 	lsl.w	r1, r0, r1
 8007d94:	428c      	cmp	r4, r1
 8007d96:	d10b      	bne.n	8007db0 <__any_on+0x3e>
 8007d98:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d803      	bhi.n	8007da8 <__any_on+0x36>
 8007da0:	2000      	movs	r0, #0
 8007da2:	bd10      	pop	{r4, pc}
 8007da4:	4603      	mov	r3, r0
 8007da6:	e7f7      	b.n	8007d98 <__any_on+0x26>
 8007da8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007dac:	2900      	cmp	r1, #0
 8007dae:	d0f5      	beq.n	8007d9c <__any_on+0x2a>
 8007db0:	2001      	movs	r0, #1
 8007db2:	e7f6      	b.n	8007da2 <__any_on+0x30>

08007db4 <sulp>:
 8007db4:	b570      	push	{r4, r5, r6, lr}
 8007db6:	4604      	mov	r4, r0
 8007db8:	460d      	mov	r5, r1
 8007dba:	ec45 4b10 	vmov	d0, r4, r5
 8007dbe:	4616      	mov	r6, r2
 8007dc0:	f7ff feba 	bl	8007b38 <__ulp>
 8007dc4:	ec51 0b10 	vmov	r0, r1, d0
 8007dc8:	b17e      	cbz	r6, 8007dea <sulp+0x36>
 8007dca:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007dce:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	dd09      	ble.n	8007dea <sulp+0x36>
 8007dd6:	051b      	lsls	r3, r3, #20
 8007dd8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007ddc:	2400      	movs	r4, #0
 8007dde:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007de2:	4622      	mov	r2, r4
 8007de4:	462b      	mov	r3, r5
 8007de6:	f7f8 fc2f 	bl	8000648 <__aeabi_dmul>
 8007dea:	ec41 0b10 	vmov	d0, r0, r1
 8007dee:	bd70      	pop	{r4, r5, r6, pc}

08007df0 <_strtod_l>:
 8007df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007df4:	b09f      	sub	sp, #124	@ 0x7c
 8007df6:	460c      	mov	r4, r1
 8007df8:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	921a      	str	r2, [sp, #104]	@ 0x68
 8007dfe:	9005      	str	r0, [sp, #20]
 8007e00:	f04f 0a00 	mov.w	sl, #0
 8007e04:	f04f 0b00 	mov.w	fp, #0
 8007e08:	460a      	mov	r2, r1
 8007e0a:	9219      	str	r2, [sp, #100]	@ 0x64
 8007e0c:	7811      	ldrb	r1, [r2, #0]
 8007e0e:	292b      	cmp	r1, #43	@ 0x2b
 8007e10:	d04a      	beq.n	8007ea8 <_strtod_l+0xb8>
 8007e12:	d838      	bhi.n	8007e86 <_strtod_l+0x96>
 8007e14:	290d      	cmp	r1, #13
 8007e16:	d832      	bhi.n	8007e7e <_strtod_l+0x8e>
 8007e18:	2908      	cmp	r1, #8
 8007e1a:	d832      	bhi.n	8007e82 <_strtod_l+0x92>
 8007e1c:	2900      	cmp	r1, #0
 8007e1e:	d03b      	beq.n	8007e98 <_strtod_l+0xa8>
 8007e20:	2200      	movs	r2, #0
 8007e22:	920e      	str	r2, [sp, #56]	@ 0x38
 8007e24:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007e26:	782a      	ldrb	r2, [r5, #0]
 8007e28:	2a30      	cmp	r2, #48	@ 0x30
 8007e2a:	f040 80b2 	bne.w	8007f92 <_strtod_l+0x1a2>
 8007e2e:	786a      	ldrb	r2, [r5, #1]
 8007e30:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007e34:	2a58      	cmp	r2, #88	@ 0x58
 8007e36:	d16e      	bne.n	8007f16 <_strtod_l+0x126>
 8007e38:	9302      	str	r3, [sp, #8]
 8007e3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e3c:	9301      	str	r3, [sp, #4]
 8007e3e:	ab1a      	add	r3, sp, #104	@ 0x68
 8007e40:	9300      	str	r3, [sp, #0]
 8007e42:	4a8f      	ldr	r2, [pc, #572]	@ (8008080 <_strtod_l+0x290>)
 8007e44:	9805      	ldr	r0, [sp, #20]
 8007e46:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007e48:	a919      	add	r1, sp, #100	@ 0x64
 8007e4a:	f001 f927 	bl	800909c <__gethex>
 8007e4e:	f010 060f 	ands.w	r6, r0, #15
 8007e52:	4604      	mov	r4, r0
 8007e54:	d005      	beq.n	8007e62 <_strtod_l+0x72>
 8007e56:	2e06      	cmp	r6, #6
 8007e58:	d128      	bne.n	8007eac <_strtod_l+0xbc>
 8007e5a:	3501      	adds	r5, #1
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	9519      	str	r5, [sp, #100]	@ 0x64
 8007e60:	930e      	str	r3, [sp, #56]	@ 0x38
 8007e62:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	f040 858e 	bne.w	8008986 <_strtod_l+0xb96>
 8007e6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e6c:	b1cb      	cbz	r3, 8007ea2 <_strtod_l+0xb2>
 8007e6e:	4652      	mov	r2, sl
 8007e70:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8007e74:	ec43 2b10 	vmov	d0, r2, r3
 8007e78:	b01f      	add	sp, #124	@ 0x7c
 8007e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e7e:	2920      	cmp	r1, #32
 8007e80:	d1ce      	bne.n	8007e20 <_strtod_l+0x30>
 8007e82:	3201      	adds	r2, #1
 8007e84:	e7c1      	b.n	8007e0a <_strtod_l+0x1a>
 8007e86:	292d      	cmp	r1, #45	@ 0x2d
 8007e88:	d1ca      	bne.n	8007e20 <_strtod_l+0x30>
 8007e8a:	2101      	movs	r1, #1
 8007e8c:	910e      	str	r1, [sp, #56]	@ 0x38
 8007e8e:	1c51      	adds	r1, r2, #1
 8007e90:	9119      	str	r1, [sp, #100]	@ 0x64
 8007e92:	7852      	ldrb	r2, [r2, #1]
 8007e94:	2a00      	cmp	r2, #0
 8007e96:	d1c5      	bne.n	8007e24 <_strtod_l+0x34>
 8007e98:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007e9a:	9419      	str	r4, [sp, #100]	@ 0x64
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	f040 8570 	bne.w	8008982 <_strtod_l+0xb92>
 8007ea2:	4652      	mov	r2, sl
 8007ea4:	465b      	mov	r3, fp
 8007ea6:	e7e5      	b.n	8007e74 <_strtod_l+0x84>
 8007ea8:	2100      	movs	r1, #0
 8007eaa:	e7ef      	b.n	8007e8c <_strtod_l+0x9c>
 8007eac:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007eae:	b13a      	cbz	r2, 8007ec0 <_strtod_l+0xd0>
 8007eb0:	2135      	movs	r1, #53	@ 0x35
 8007eb2:	a81c      	add	r0, sp, #112	@ 0x70
 8007eb4:	f7ff ff3a 	bl	8007d2c <__copybits>
 8007eb8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007eba:	9805      	ldr	r0, [sp, #20]
 8007ebc:	f7ff fb10 	bl	80074e0 <_Bfree>
 8007ec0:	3e01      	subs	r6, #1
 8007ec2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007ec4:	2e04      	cmp	r6, #4
 8007ec6:	d806      	bhi.n	8007ed6 <_strtod_l+0xe6>
 8007ec8:	e8df f006 	tbb	[pc, r6]
 8007ecc:	201d0314 	.word	0x201d0314
 8007ed0:	14          	.byte	0x14
 8007ed1:	00          	.byte	0x00
 8007ed2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007ed6:	05e1      	lsls	r1, r4, #23
 8007ed8:	bf48      	it	mi
 8007eda:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007ede:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007ee2:	0d1b      	lsrs	r3, r3, #20
 8007ee4:	051b      	lsls	r3, r3, #20
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d1bb      	bne.n	8007e62 <_strtod_l+0x72>
 8007eea:	f7fe fb25 	bl	8006538 <__errno>
 8007eee:	2322      	movs	r3, #34	@ 0x22
 8007ef0:	6003      	str	r3, [r0, #0]
 8007ef2:	e7b6      	b.n	8007e62 <_strtod_l+0x72>
 8007ef4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007ef8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007efc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007f00:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007f04:	e7e7      	b.n	8007ed6 <_strtod_l+0xe6>
 8007f06:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8008088 <_strtod_l+0x298>
 8007f0a:	e7e4      	b.n	8007ed6 <_strtod_l+0xe6>
 8007f0c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007f10:	f04f 3aff 	mov.w	sl, #4294967295
 8007f14:	e7df      	b.n	8007ed6 <_strtod_l+0xe6>
 8007f16:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007f18:	1c5a      	adds	r2, r3, #1
 8007f1a:	9219      	str	r2, [sp, #100]	@ 0x64
 8007f1c:	785b      	ldrb	r3, [r3, #1]
 8007f1e:	2b30      	cmp	r3, #48	@ 0x30
 8007f20:	d0f9      	beq.n	8007f16 <_strtod_l+0x126>
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d09d      	beq.n	8007e62 <_strtod_l+0x72>
 8007f26:	2301      	movs	r3, #1
 8007f28:	2700      	movs	r7, #0
 8007f2a:	9308      	str	r3, [sp, #32]
 8007f2c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007f2e:	930c      	str	r3, [sp, #48]	@ 0x30
 8007f30:	970b      	str	r7, [sp, #44]	@ 0x2c
 8007f32:	46b9      	mov	r9, r7
 8007f34:	220a      	movs	r2, #10
 8007f36:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007f38:	7805      	ldrb	r5, [r0, #0]
 8007f3a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007f3e:	b2d9      	uxtb	r1, r3
 8007f40:	2909      	cmp	r1, #9
 8007f42:	d928      	bls.n	8007f96 <_strtod_l+0x1a6>
 8007f44:	494f      	ldr	r1, [pc, #316]	@ (8008084 <_strtod_l+0x294>)
 8007f46:	2201      	movs	r2, #1
 8007f48:	f000 ffd6 	bl	8008ef8 <strncmp>
 8007f4c:	2800      	cmp	r0, #0
 8007f4e:	d032      	beq.n	8007fb6 <_strtod_l+0x1c6>
 8007f50:	2000      	movs	r0, #0
 8007f52:	462a      	mov	r2, r5
 8007f54:	900a      	str	r0, [sp, #40]	@ 0x28
 8007f56:	464d      	mov	r5, r9
 8007f58:	4603      	mov	r3, r0
 8007f5a:	2a65      	cmp	r2, #101	@ 0x65
 8007f5c:	d001      	beq.n	8007f62 <_strtod_l+0x172>
 8007f5e:	2a45      	cmp	r2, #69	@ 0x45
 8007f60:	d114      	bne.n	8007f8c <_strtod_l+0x19c>
 8007f62:	b91d      	cbnz	r5, 8007f6c <_strtod_l+0x17c>
 8007f64:	9a08      	ldr	r2, [sp, #32]
 8007f66:	4302      	orrs	r2, r0
 8007f68:	d096      	beq.n	8007e98 <_strtod_l+0xa8>
 8007f6a:	2500      	movs	r5, #0
 8007f6c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007f6e:	1c62      	adds	r2, r4, #1
 8007f70:	9219      	str	r2, [sp, #100]	@ 0x64
 8007f72:	7862      	ldrb	r2, [r4, #1]
 8007f74:	2a2b      	cmp	r2, #43	@ 0x2b
 8007f76:	d07a      	beq.n	800806e <_strtod_l+0x27e>
 8007f78:	2a2d      	cmp	r2, #45	@ 0x2d
 8007f7a:	d07e      	beq.n	800807a <_strtod_l+0x28a>
 8007f7c:	f04f 0c00 	mov.w	ip, #0
 8007f80:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007f84:	2909      	cmp	r1, #9
 8007f86:	f240 8085 	bls.w	8008094 <_strtod_l+0x2a4>
 8007f8a:	9419      	str	r4, [sp, #100]	@ 0x64
 8007f8c:	f04f 0800 	mov.w	r8, #0
 8007f90:	e0a5      	b.n	80080de <_strtod_l+0x2ee>
 8007f92:	2300      	movs	r3, #0
 8007f94:	e7c8      	b.n	8007f28 <_strtod_l+0x138>
 8007f96:	f1b9 0f08 	cmp.w	r9, #8
 8007f9a:	bfd8      	it	le
 8007f9c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8007f9e:	f100 0001 	add.w	r0, r0, #1
 8007fa2:	bfda      	itte	le
 8007fa4:	fb02 3301 	mlale	r3, r2, r1, r3
 8007fa8:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8007faa:	fb02 3707 	mlagt	r7, r2, r7, r3
 8007fae:	f109 0901 	add.w	r9, r9, #1
 8007fb2:	9019      	str	r0, [sp, #100]	@ 0x64
 8007fb4:	e7bf      	b.n	8007f36 <_strtod_l+0x146>
 8007fb6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007fb8:	1c5a      	adds	r2, r3, #1
 8007fba:	9219      	str	r2, [sp, #100]	@ 0x64
 8007fbc:	785a      	ldrb	r2, [r3, #1]
 8007fbe:	f1b9 0f00 	cmp.w	r9, #0
 8007fc2:	d03b      	beq.n	800803c <_strtod_l+0x24c>
 8007fc4:	900a      	str	r0, [sp, #40]	@ 0x28
 8007fc6:	464d      	mov	r5, r9
 8007fc8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007fcc:	2b09      	cmp	r3, #9
 8007fce:	d912      	bls.n	8007ff6 <_strtod_l+0x206>
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	e7c2      	b.n	8007f5a <_strtod_l+0x16a>
 8007fd4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007fd6:	1c5a      	adds	r2, r3, #1
 8007fd8:	9219      	str	r2, [sp, #100]	@ 0x64
 8007fda:	785a      	ldrb	r2, [r3, #1]
 8007fdc:	3001      	adds	r0, #1
 8007fde:	2a30      	cmp	r2, #48	@ 0x30
 8007fe0:	d0f8      	beq.n	8007fd4 <_strtod_l+0x1e4>
 8007fe2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007fe6:	2b08      	cmp	r3, #8
 8007fe8:	f200 84d2 	bhi.w	8008990 <_strtod_l+0xba0>
 8007fec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007fee:	900a      	str	r0, [sp, #40]	@ 0x28
 8007ff0:	2000      	movs	r0, #0
 8007ff2:	930c      	str	r3, [sp, #48]	@ 0x30
 8007ff4:	4605      	mov	r5, r0
 8007ff6:	3a30      	subs	r2, #48	@ 0x30
 8007ff8:	f100 0301 	add.w	r3, r0, #1
 8007ffc:	d018      	beq.n	8008030 <_strtod_l+0x240>
 8007ffe:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008000:	4419      	add	r1, r3
 8008002:	910a      	str	r1, [sp, #40]	@ 0x28
 8008004:	462e      	mov	r6, r5
 8008006:	f04f 0e0a 	mov.w	lr, #10
 800800a:	1c71      	adds	r1, r6, #1
 800800c:	eba1 0c05 	sub.w	ip, r1, r5
 8008010:	4563      	cmp	r3, ip
 8008012:	dc15      	bgt.n	8008040 <_strtod_l+0x250>
 8008014:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8008018:	182b      	adds	r3, r5, r0
 800801a:	2b08      	cmp	r3, #8
 800801c:	f105 0501 	add.w	r5, r5, #1
 8008020:	4405      	add	r5, r0
 8008022:	dc1a      	bgt.n	800805a <_strtod_l+0x26a>
 8008024:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008026:	230a      	movs	r3, #10
 8008028:	fb03 2301 	mla	r3, r3, r1, r2
 800802c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800802e:	2300      	movs	r3, #0
 8008030:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008032:	1c51      	adds	r1, r2, #1
 8008034:	9119      	str	r1, [sp, #100]	@ 0x64
 8008036:	7852      	ldrb	r2, [r2, #1]
 8008038:	4618      	mov	r0, r3
 800803a:	e7c5      	b.n	8007fc8 <_strtod_l+0x1d8>
 800803c:	4648      	mov	r0, r9
 800803e:	e7ce      	b.n	8007fde <_strtod_l+0x1ee>
 8008040:	2e08      	cmp	r6, #8
 8008042:	dc05      	bgt.n	8008050 <_strtod_l+0x260>
 8008044:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008046:	fb0e f606 	mul.w	r6, lr, r6
 800804a:	960b      	str	r6, [sp, #44]	@ 0x2c
 800804c:	460e      	mov	r6, r1
 800804e:	e7dc      	b.n	800800a <_strtod_l+0x21a>
 8008050:	2910      	cmp	r1, #16
 8008052:	bfd8      	it	le
 8008054:	fb0e f707 	mulle.w	r7, lr, r7
 8008058:	e7f8      	b.n	800804c <_strtod_l+0x25c>
 800805a:	2b0f      	cmp	r3, #15
 800805c:	bfdc      	itt	le
 800805e:	230a      	movle	r3, #10
 8008060:	fb03 2707 	mlale	r7, r3, r7, r2
 8008064:	e7e3      	b.n	800802e <_strtod_l+0x23e>
 8008066:	2300      	movs	r3, #0
 8008068:	930a      	str	r3, [sp, #40]	@ 0x28
 800806a:	2301      	movs	r3, #1
 800806c:	e77a      	b.n	8007f64 <_strtod_l+0x174>
 800806e:	f04f 0c00 	mov.w	ip, #0
 8008072:	1ca2      	adds	r2, r4, #2
 8008074:	9219      	str	r2, [sp, #100]	@ 0x64
 8008076:	78a2      	ldrb	r2, [r4, #2]
 8008078:	e782      	b.n	8007f80 <_strtod_l+0x190>
 800807a:	f04f 0c01 	mov.w	ip, #1
 800807e:	e7f8      	b.n	8008072 <_strtod_l+0x282>
 8008080:	0800a074 	.word	0x0800a074
 8008084:	08009eab 	.word	0x08009eab
 8008088:	7ff00000 	.word	0x7ff00000
 800808c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800808e:	1c51      	adds	r1, r2, #1
 8008090:	9119      	str	r1, [sp, #100]	@ 0x64
 8008092:	7852      	ldrb	r2, [r2, #1]
 8008094:	2a30      	cmp	r2, #48	@ 0x30
 8008096:	d0f9      	beq.n	800808c <_strtod_l+0x29c>
 8008098:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800809c:	2908      	cmp	r1, #8
 800809e:	f63f af75 	bhi.w	8007f8c <_strtod_l+0x19c>
 80080a2:	3a30      	subs	r2, #48	@ 0x30
 80080a4:	9209      	str	r2, [sp, #36]	@ 0x24
 80080a6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80080a8:	920f      	str	r2, [sp, #60]	@ 0x3c
 80080aa:	f04f 080a 	mov.w	r8, #10
 80080ae:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80080b0:	1c56      	adds	r6, r2, #1
 80080b2:	9619      	str	r6, [sp, #100]	@ 0x64
 80080b4:	7852      	ldrb	r2, [r2, #1]
 80080b6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80080ba:	f1be 0f09 	cmp.w	lr, #9
 80080be:	d939      	bls.n	8008134 <_strtod_l+0x344>
 80080c0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80080c2:	1a76      	subs	r6, r6, r1
 80080c4:	2e08      	cmp	r6, #8
 80080c6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80080ca:	dc03      	bgt.n	80080d4 <_strtod_l+0x2e4>
 80080cc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80080ce:	4588      	cmp	r8, r1
 80080d0:	bfa8      	it	ge
 80080d2:	4688      	movge	r8, r1
 80080d4:	f1bc 0f00 	cmp.w	ip, #0
 80080d8:	d001      	beq.n	80080de <_strtod_l+0x2ee>
 80080da:	f1c8 0800 	rsb	r8, r8, #0
 80080de:	2d00      	cmp	r5, #0
 80080e0:	d14e      	bne.n	8008180 <_strtod_l+0x390>
 80080e2:	9908      	ldr	r1, [sp, #32]
 80080e4:	4308      	orrs	r0, r1
 80080e6:	f47f aebc 	bne.w	8007e62 <_strtod_l+0x72>
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	f47f aed4 	bne.w	8007e98 <_strtod_l+0xa8>
 80080f0:	2a69      	cmp	r2, #105	@ 0x69
 80080f2:	d028      	beq.n	8008146 <_strtod_l+0x356>
 80080f4:	dc25      	bgt.n	8008142 <_strtod_l+0x352>
 80080f6:	2a49      	cmp	r2, #73	@ 0x49
 80080f8:	d025      	beq.n	8008146 <_strtod_l+0x356>
 80080fa:	2a4e      	cmp	r2, #78	@ 0x4e
 80080fc:	f47f aecc 	bne.w	8007e98 <_strtod_l+0xa8>
 8008100:	499a      	ldr	r1, [pc, #616]	@ (800836c <_strtod_l+0x57c>)
 8008102:	a819      	add	r0, sp, #100	@ 0x64
 8008104:	f001 f9ec 	bl	80094e0 <__match>
 8008108:	2800      	cmp	r0, #0
 800810a:	f43f aec5 	beq.w	8007e98 <_strtod_l+0xa8>
 800810e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	2b28      	cmp	r3, #40	@ 0x28
 8008114:	d12e      	bne.n	8008174 <_strtod_l+0x384>
 8008116:	4996      	ldr	r1, [pc, #600]	@ (8008370 <_strtod_l+0x580>)
 8008118:	aa1c      	add	r2, sp, #112	@ 0x70
 800811a:	a819      	add	r0, sp, #100	@ 0x64
 800811c:	f001 f9f4 	bl	8009508 <__hexnan>
 8008120:	2805      	cmp	r0, #5
 8008122:	d127      	bne.n	8008174 <_strtod_l+0x384>
 8008124:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008126:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800812a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800812e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008132:	e696      	b.n	8007e62 <_strtod_l+0x72>
 8008134:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008136:	fb08 2101 	mla	r1, r8, r1, r2
 800813a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800813e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008140:	e7b5      	b.n	80080ae <_strtod_l+0x2be>
 8008142:	2a6e      	cmp	r2, #110	@ 0x6e
 8008144:	e7da      	b.n	80080fc <_strtod_l+0x30c>
 8008146:	498b      	ldr	r1, [pc, #556]	@ (8008374 <_strtod_l+0x584>)
 8008148:	a819      	add	r0, sp, #100	@ 0x64
 800814a:	f001 f9c9 	bl	80094e0 <__match>
 800814e:	2800      	cmp	r0, #0
 8008150:	f43f aea2 	beq.w	8007e98 <_strtod_l+0xa8>
 8008154:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008156:	4988      	ldr	r1, [pc, #544]	@ (8008378 <_strtod_l+0x588>)
 8008158:	3b01      	subs	r3, #1
 800815a:	a819      	add	r0, sp, #100	@ 0x64
 800815c:	9319      	str	r3, [sp, #100]	@ 0x64
 800815e:	f001 f9bf 	bl	80094e0 <__match>
 8008162:	b910      	cbnz	r0, 800816a <_strtod_l+0x37a>
 8008164:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008166:	3301      	adds	r3, #1
 8008168:	9319      	str	r3, [sp, #100]	@ 0x64
 800816a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8008388 <_strtod_l+0x598>
 800816e:	f04f 0a00 	mov.w	sl, #0
 8008172:	e676      	b.n	8007e62 <_strtod_l+0x72>
 8008174:	4881      	ldr	r0, [pc, #516]	@ (800837c <_strtod_l+0x58c>)
 8008176:	f000 feef 	bl	8008f58 <nan>
 800817a:	ec5b ab10 	vmov	sl, fp, d0
 800817e:	e670      	b.n	8007e62 <_strtod_l+0x72>
 8008180:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008182:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8008184:	eba8 0303 	sub.w	r3, r8, r3
 8008188:	f1b9 0f00 	cmp.w	r9, #0
 800818c:	bf08      	it	eq
 800818e:	46a9      	moveq	r9, r5
 8008190:	2d10      	cmp	r5, #16
 8008192:	9309      	str	r3, [sp, #36]	@ 0x24
 8008194:	462c      	mov	r4, r5
 8008196:	bfa8      	it	ge
 8008198:	2410      	movge	r4, #16
 800819a:	f7f8 f9db 	bl	8000554 <__aeabi_ui2d>
 800819e:	2d09      	cmp	r5, #9
 80081a0:	4682      	mov	sl, r0
 80081a2:	468b      	mov	fp, r1
 80081a4:	dc13      	bgt.n	80081ce <_strtod_l+0x3de>
 80081a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	f43f ae5a 	beq.w	8007e62 <_strtod_l+0x72>
 80081ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081b0:	dd78      	ble.n	80082a4 <_strtod_l+0x4b4>
 80081b2:	2b16      	cmp	r3, #22
 80081b4:	dc5f      	bgt.n	8008276 <_strtod_l+0x486>
 80081b6:	4972      	ldr	r1, [pc, #456]	@ (8008380 <_strtod_l+0x590>)
 80081b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80081bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081c0:	4652      	mov	r2, sl
 80081c2:	465b      	mov	r3, fp
 80081c4:	f7f8 fa40 	bl	8000648 <__aeabi_dmul>
 80081c8:	4682      	mov	sl, r0
 80081ca:	468b      	mov	fp, r1
 80081cc:	e649      	b.n	8007e62 <_strtod_l+0x72>
 80081ce:	4b6c      	ldr	r3, [pc, #432]	@ (8008380 <_strtod_l+0x590>)
 80081d0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80081d4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80081d8:	f7f8 fa36 	bl	8000648 <__aeabi_dmul>
 80081dc:	4682      	mov	sl, r0
 80081de:	4638      	mov	r0, r7
 80081e0:	468b      	mov	fp, r1
 80081e2:	f7f8 f9b7 	bl	8000554 <__aeabi_ui2d>
 80081e6:	4602      	mov	r2, r0
 80081e8:	460b      	mov	r3, r1
 80081ea:	4650      	mov	r0, sl
 80081ec:	4659      	mov	r1, fp
 80081ee:	f7f8 f875 	bl	80002dc <__adddf3>
 80081f2:	2d0f      	cmp	r5, #15
 80081f4:	4682      	mov	sl, r0
 80081f6:	468b      	mov	fp, r1
 80081f8:	ddd5      	ble.n	80081a6 <_strtod_l+0x3b6>
 80081fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081fc:	1b2c      	subs	r4, r5, r4
 80081fe:	441c      	add	r4, r3
 8008200:	2c00      	cmp	r4, #0
 8008202:	f340 8093 	ble.w	800832c <_strtod_l+0x53c>
 8008206:	f014 030f 	ands.w	r3, r4, #15
 800820a:	d00a      	beq.n	8008222 <_strtod_l+0x432>
 800820c:	495c      	ldr	r1, [pc, #368]	@ (8008380 <_strtod_l+0x590>)
 800820e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008212:	4652      	mov	r2, sl
 8008214:	465b      	mov	r3, fp
 8008216:	e9d1 0100 	ldrd	r0, r1, [r1]
 800821a:	f7f8 fa15 	bl	8000648 <__aeabi_dmul>
 800821e:	4682      	mov	sl, r0
 8008220:	468b      	mov	fp, r1
 8008222:	f034 040f 	bics.w	r4, r4, #15
 8008226:	d073      	beq.n	8008310 <_strtod_l+0x520>
 8008228:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800822c:	dd49      	ble.n	80082c2 <_strtod_l+0x4d2>
 800822e:	2400      	movs	r4, #0
 8008230:	46a0      	mov	r8, r4
 8008232:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008234:	46a1      	mov	r9, r4
 8008236:	9a05      	ldr	r2, [sp, #20]
 8008238:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8008388 <_strtod_l+0x598>
 800823c:	2322      	movs	r3, #34	@ 0x22
 800823e:	6013      	str	r3, [r2, #0]
 8008240:	f04f 0a00 	mov.w	sl, #0
 8008244:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008246:	2b00      	cmp	r3, #0
 8008248:	f43f ae0b 	beq.w	8007e62 <_strtod_l+0x72>
 800824c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800824e:	9805      	ldr	r0, [sp, #20]
 8008250:	f7ff f946 	bl	80074e0 <_Bfree>
 8008254:	9805      	ldr	r0, [sp, #20]
 8008256:	4649      	mov	r1, r9
 8008258:	f7ff f942 	bl	80074e0 <_Bfree>
 800825c:	9805      	ldr	r0, [sp, #20]
 800825e:	4641      	mov	r1, r8
 8008260:	f7ff f93e 	bl	80074e0 <_Bfree>
 8008264:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008266:	9805      	ldr	r0, [sp, #20]
 8008268:	f7ff f93a 	bl	80074e0 <_Bfree>
 800826c:	9805      	ldr	r0, [sp, #20]
 800826e:	4621      	mov	r1, r4
 8008270:	f7ff f936 	bl	80074e0 <_Bfree>
 8008274:	e5f5      	b.n	8007e62 <_strtod_l+0x72>
 8008276:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008278:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800827c:	4293      	cmp	r3, r2
 800827e:	dbbc      	blt.n	80081fa <_strtod_l+0x40a>
 8008280:	4c3f      	ldr	r4, [pc, #252]	@ (8008380 <_strtod_l+0x590>)
 8008282:	f1c5 050f 	rsb	r5, r5, #15
 8008286:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800828a:	4652      	mov	r2, sl
 800828c:	465b      	mov	r3, fp
 800828e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008292:	f7f8 f9d9 	bl	8000648 <__aeabi_dmul>
 8008296:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008298:	1b5d      	subs	r5, r3, r5
 800829a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800829e:	e9d4 2300 	ldrd	r2, r3, [r4]
 80082a2:	e78f      	b.n	80081c4 <_strtod_l+0x3d4>
 80082a4:	3316      	adds	r3, #22
 80082a6:	dba8      	blt.n	80081fa <_strtod_l+0x40a>
 80082a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80082aa:	eba3 0808 	sub.w	r8, r3, r8
 80082ae:	4b34      	ldr	r3, [pc, #208]	@ (8008380 <_strtod_l+0x590>)
 80082b0:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80082b4:	e9d8 2300 	ldrd	r2, r3, [r8]
 80082b8:	4650      	mov	r0, sl
 80082ba:	4659      	mov	r1, fp
 80082bc:	f7f8 faee 	bl	800089c <__aeabi_ddiv>
 80082c0:	e782      	b.n	80081c8 <_strtod_l+0x3d8>
 80082c2:	2300      	movs	r3, #0
 80082c4:	4f2f      	ldr	r7, [pc, #188]	@ (8008384 <_strtod_l+0x594>)
 80082c6:	1124      	asrs	r4, r4, #4
 80082c8:	4650      	mov	r0, sl
 80082ca:	4659      	mov	r1, fp
 80082cc:	461e      	mov	r6, r3
 80082ce:	2c01      	cmp	r4, #1
 80082d0:	dc21      	bgt.n	8008316 <_strtod_l+0x526>
 80082d2:	b10b      	cbz	r3, 80082d8 <_strtod_l+0x4e8>
 80082d4:	4682      	mov	sl, r0
 80082d6:	468b      	mov	fp, r1
 80082d8:	492a      	ldr	r1, [pc, #168]	@ (8008384 <_strtod_l+0x594>)
 80082da:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80082de:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80082e2:	4652      	mov	r2, sl
 80082e4:	465b      	mov	r3, fp
 80082e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082ea:	f7f8 f9ad 	bl	8000648 <__aeabi_dmul>
 80082ee:	4b26      	ldr	r3, [pc, #152]	@ (8008388 <_strtod_l+0x598>)
 80082f0:	460a      	mov	r2, r1
 80082f2:	400b      	ands	r3, r1
 80082f4:	4925      	ldr	r1, [pc, #148]	@ (800838c <_strtod_l+0x59c>)
 80082f6:	428b      	cmp	r3, r1
 80082f8:	4682      	mov	sl, r0
 80082fa:	d898      	bhi.n	800822e <_strtod_l+0x43e>
 80082fc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008300:	428b      	cmp	r3, r1
 8008302:	bf86      	itte	hi
 8008304:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8008390 <_strtod_l+0x5a0>
 8008308:	f04f 3aff 	movhi.w	sl, #4294967295
 800830c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008310:	2300      	movs	r3, #0
 8008312:	9308      	str	r3, [sp, #32]
 8008314:	e076      	b.n	8008404 <_strtod_l+0x614>
 8008316:	07e2      	lsls	r2, r4, #31
 8008318:	d504      	bpl.n	8008324 <_strtod_l+0x534>
 800831a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800831e:	f7f8 f993 	bl	8000648 <__aeabi_dmul>
 8008322:	2301      	movs	r3, #1
 8008324:	3601      	adds	r6, #1
 8008326:	1064      	asrs	r4, r4, #1
 8008328:	3708      	adds	r7, #8
 800832a:	e7d0      	b.n	80082ce <_strtod_l+0x4de>
 800832c:	d0f0      	beq.n	8008310 <_strtod_l+0x520>
 800832e:	4264      	negs	r4, r4
 8008330:	f014 020f 	ands.w	r2, r4, #15
 8008334:	d00a      	beq.n	800834c <_strtod_l+0x55c>
 8008336:	4b12      	ldr	r3, [pc, #72]	@ (8008380 <_strtod_l+0x590>)
 8008338:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800833c:	4650      	mov	r0, sl
 800833e:	4659      	mov	r1, fp
 8008340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008344:	f7f8 faaa 	bl	800089c <__aeabi_ddiv>
 8008348:	4682      	mov	sl, r0
 800834a:	468b      	mov	fp, r1
 800834c:	1124      	asrs	r4, r4, #4
 800834e:	d0df      	beq.n	8008310 <_strtod_l+0x520>
 8008350:	2c1f      	cmp	r4, #31
 8008352:	dd1f      	ble.n	8008394 <_strtod_l+0x5a4>
 8008354:	2400      	movs	r4, #0
 8008356:	46a0      	mov	r8, r4
 8008358:	940b      	str	r4, [sp, #44]	@ 0x2c
 800835a:	46a1      	mov	r9, r4
 800835c:	9a05      	ldr	r2, [sp, #20]
 800835e:	2322      	movs	r3, #34	@ 0x22
 8008360:	f04f 0a00 	mov.w	sl, #0
 8008364:	f04f 0b00 	mov.w	fp, #0
 8008368:	6013      	str	r3, [r2, #0]
 800836a:	e76b      	b.n	8008244 <_strtod_l+0x454>
 800836c:	08009d99 	.word	0x08009d99
 8008370:	0800a060 	.word	0x0800a060
 8008374:	08009d91 	.word	0x08009d91
 8008378:	08009dc8 	.word	0x08009dc8
 800837c:	08009f01 	.word	0x08009f01
 8008380:	08009f98 	.word	0x08009f98
 8008384:	08009f70 	.word	0x08009f70
 8008388:	7ff00000 	.word	0x7ff00000
 800838c:	7ca00000 	.word	0x7ca00000
 8008390:	7fefffff 	.word	0x7fefffff
 8008394:	f014 0310 	ands.w	r3, r4, #16
 8008398:	bf18      	it	ne
 800839a:	236a      	movne	r3, #106	@ 0x6a
 800839c:	4ea9      	ldr	r6, [pc, #676]	@ (8008644 <_strtod_l+0x854>)
 800839e:	9308      	str	r3, [sp, #32]
 80083a0:	4650      	mov	r0, sl
 80083a2:	4659      	mov	r1, fp
 80083a4:	2300      	movs	r3, #0
 80083a6:	07e7      	lsls	r7, r4, #31
 80083a8:	d504      	bpl.n	80083b4 <_strtod_l+0x5c4>
 80083aa:	e9d6 2300 	ldrd	r2, r3, [r6]
 80083ae:	f7f8 f94b 	bl	8000648 <__aeabi_dmul>
 80083b2:	2301      	movs	r3, #1
 80083b4:	1064      	asrs	r4, r4, #1
 80083b6:	f106 0608 	add.w	r6, r6, #8
 80083ba:	d1f4      	bne.n	80083a6 <_strtod_l+0x5b6>
 80083bc:	b10b      	cbz	r3, 80083c2 <_strtod_l+0x5d2>
 80083be:	4682      	mov	sl, r0
 80083c0:	468b      	mov	fp, r1
 80083c2:	9b08      	ldr	r3, [sp, #32]
 80083c4:	b1b3      	cbz	r3, 80083f4 <_strtod_l+0x604>
 80083c6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80083ca:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	4659      	mov	r1, fp
 80083d2:	dd0f      	ble.n	80083f4 <_strtod_l+0x604>
 80083d4:	2b1f      	cmp	r3, #31
 80083d6:	dd56      	ble.n	8008486 <_strtod_l+0x696>
 80083d8:	2b34      	cmp	r3, #52	@ 0x34
 80083da:	bfde      	ittt	le
 80083dc:	f04f 33ff 	movle.w	r3, #4294967295
 80083e0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80083e4:	4093      	lslle	r3, r2
 80083e6:	f04f 0a00 	mov.w	sl, #0
 80083ea:	bfcc      	ite	gt
 80083ec:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80083f0:	ea03 0b01 	andle.w	fp, r3, r1
 80083f4:	2200      	movs	r2, #0
 80083f6:	2300      	movs	r3, #0
 80083f8:	4650      	mov	r0, sl
 80083fa:	4659      	mov	r1, fp
 80083fc:	f7f8 fb8c 	bl	8000b18 <__aeabi_dcmpeq>
 8008400:	2800      	cmp	r0, #0
 8008402:	d1a7      	bne.n	8008354 <_strtod_l+0x564>
 8008404:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008406:	9300      	str	r3, [sp, #0]
 8008408:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800840a:	9805      	ldr	r0, [sp, #20]
 800840c:	462b      	mov	r3, r5
 800840e:	464a      	mov	r2, r9
 8008410:	f7ff f8ce 	bl	80075b0 <__s2b>
 8008414:	900b      	str	r0, [sp, #44]	@ 0x2c
 8008416:	2800      	cmp	r0, #0
 8008418:	f43f af09 	beq.w	800822e <_strtod_l+0x43e>
 800841c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800841e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008420:	2a00      	cmp	r2, #0
 8008422:	eba3 0308 	sub.w	r3, r3, r8
 8008426:	bfa8      	it	ge
 8008428:	2300      	movge	r3, #0
 800842a:	9312      	str	r3, [sp, #72]	@ 0x48
 800842c:	2400      	movs	r4, #0
 800842e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008432:	9316      	str	r3, [sp, #88]	@ 0x58
 8008434:	46a0      	mov	r8, r4
 8008436:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008438:	9805      	ldr	r0, [sp, #20]
 800843a:	6859      	ldr	r1, [r3, #4]
 800843c:	f7ff f810 	bl	8007460 <_Balloc>
 8008440:	4681      	mov	r9, r0
 8008442:	2800      	cmp	r0, #0
 8008444:	f43f aef7 	beq.w	8008236 <_strtod_l+0x446>
 8008448:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800844a:	691a      	ldr	r2, [r3, #16]
 800844c:	3202      	adds	r2, #2
 800844e:	f103 010c 	add.w	r1, r3, #12
 8008452:	0092      	lsls	r2, r2, #2
 8008454:	300c      	adds	r0, #12
 8008456:	f000 fd71 	bl	8008f3c <memcpy>
 800845a:	ec4b ab10 	vmov	d0, sl, fp
 800845e:	9805      	ldr	r0, [sp, #20]
 8008460:	aa1c      	add	r2, sp, #112	@ 0x70
 8008462:	a91b      	add	r1, sp, #108	@ 0x6c
 8008464:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008468:	f7ff fbd6 	bl	8007c18 <__d2b>
 800846c:	901a      	str	r0, [sp, #104]	@ 0x68
 800846e:	2800      	cmp	r0, #0
 8008470:	f43f aee1 	beq.w	8008236 <_strtod_l+0x446>
 8008474:	9805      	ldr	r0, [sp, #20]
 8008476:	2101      	movs	r1, #1
 8008478:	f7ff f930 	bl	80076dc <__i2b>
 800847c:	4680      	mov	r8, r0
 800847e:	b948      	cbnz	r0, 8008494 <_strtod_l+0x6a4>
 8008480:	f04f 0800 	mov.w	r8, #0
 8008484:	e6d7      	b.n	8008236 <_strtod_l+0x446>
 8008486:	f04f 32ff 	mov.w	r2, #4294967295
 800848a:	fa02 f303 	lsl.w	r3, r2, r3
 800848e:	ea03 0a0a 	and.w	sl, r3, sl
 8008492:	e7af      	b.n	80083f4 <_strtod_l+0x604>
 8008494:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008496:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008498:	2d00      	cmp	r5, #0
 800849a:	bfab      	itete	ge
 800849c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800849e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80084a0:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80084a2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80084a4:	bfac      	ite	ge
 80084a6:	18ef      	addge	r7, r5, r3
 80084a8:	1b5e      	sublt	r6, r3, r5
 80084aa:	9b08      	ldr	r3, [sp, #32]
 80084ac:	1aed      	subs	r5, r5, r3
 80084ae:	4415      	add	r5, r2
 80084b0:	4b65      	ldr	r3, [pc, #404]	@ (8008648 <_strtod_l+0x858>)
 80084b2:	3d01      	subs	r5, #1
 80084b4:	429d      	cmp	r5, r3
 80084b6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80084ba:	da50      	bge.n	800855e <_strtod_l+0x76e>
 80084bc:	1b5b      	subs	r3, r3, r5
 80084be:	2b1f      	cmp	r3, #31
 80084c0:	eba2 0203 	sub.w	r2, r2, r3
 80084c4:	f04f 0101 	mov.w	r1, #1
 80084c8:	dc3d      	bgt.n	8008546 <_strtod_l+0x756>
 80084ca:	fa01 f303 	lsl.w	r3, r1, r3
 80084ce:	9313      	str	r3, [sp, #76]	@ 0x4c
 80084d0:	2300      	movs	r3, #0
 80084d2:	9310      	str	r3, [sp, #64]	@ 0x40
 80084d4:	18bd      	adds	r5, r7, r2
 80084d6:	9b08      	ldr	r3, [sp, #32]
 80084d8:	42af      	cmp	r7, r5
 80084da:	4416      	add	r6, r2
 80084dc:	441e      	add	r6, r3
 80084de:	463b      	mov	r3, r7
 80084e0:	bfa8      	it	ge
 80084e2:	462b      	movge	r3, r5
 80084e4:	42b3      	cmp	r3, r6
 80084e6:	bfa8      	it	ge
 80084e8:	4633      	movge	r3, r6
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	bfc2      	ittt	gt
 80084ee:	1aed      	subgt	r5, r5, r3
 80084f0:	1af6      	subgt	r6, r6, r3
 80084f2:	1aff      	subgt	r7, r7, r3
 80084f4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	dd16      	ble.n	8008528 <_strtod_l+0x738>
 80084fa:	4641      	mov	r1, r8
 80084fc:	9805      	ldr	r0, [sp, #20]
 80084fe:	461a      	mov	r2, r3
 8008500:	f7ff f9a4 	bl	800784c <__pow5mult>
 8008504:	4680      	mov	r8, r0
 8008506:	2800      	cmp	r0, #0
 8008508:	d0ba      	beq.n	8008480 <_strtod_l+0x690>
 800850a:	4601      	mov	r1, r0
 800850c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800850e:	9805      	ldr	r0, [sp, #20]
 8008510:	f7ff f8fa 	bl	8007708 <__multiply>
 8008514:	900a      	str	r0, [sp, #40]	@ 0x28
 8008516:	2800      	cmp	r0, #0
 8008518:	f43f ae8d 	beq.w	8008236 <_strtod_l+0x446>
 800851c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800851e:	9805      	ldr	r0, [sp, #20]
 8008520:	f7fe ffde 	bl	80074e0 <_Bfree>
 8008524:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008526:	931a      	str	r3, [sp, #104]	@ 0x68
 8008528:	2d00      	cmp	r5, #0
 800852a:	dc1d      	bgt.n	8008568 <_strtod_l+0x778>
 800852c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800852e:	2b00      	cmp	r3, #0
 8008530:	dd23      	ble.n	800857a <_strtod_l+0x78a>
 8008532:	4649      	mov	r1, r9
 8008534:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008536:	9805      	ldr	r0, [sp, #20]
 8008538:	f7ff f988 	bl	800784c <__pow5mult>
 800853c:	4681      	mov	r9, r0
 800853e:	b9e0      	cbnz	r0, 800857a <_strtod_l+0x78a>
 8008540:	f04f 0900 	mov.w	r9, #0
 8008544:	e677      	b.n	8008236 <_strtod_l+0x446>
 8008546:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800854a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800854e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008552:	35e2      	adds	r5, #226	@ 0xe2
 8008554:	fa01 f305 	lsl.w	r3, r1, r5
 8008558:	9310      	str	r3, [sp, #64]	@ 0x40
 800855a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800855c:	e7ba      	b.n	80084d4 <_strtod_l+0x6e4>
 800855e:	2300      	movs	r3, #0
 8008560:	9310      	str	r3, [sp, #64]	@ 0x40
 8008562:	2301      	movs	r3, #1
 8008564:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008566:	e7b5      	b.n	80084d4 <_strtod_l+0x6e4>
 8008568:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800856a:	9805      	ldr	r0, [sp, #20]
 800856c:	462a      	mov	r2, r5
 800856e:	f7ff f9c7 	bl	8007900 <__lshift>
 8008572:	901a      	str	r0, [sp, #104]	@ 0x68
 8008574:	2800      	cmp	r0, #0
 8008576:	d1d9      	bne.n	800852c <_strtod_l+0x73c>
 8008578:	e65d      	b.n	8008236 <_strtod_l+0x446>
 800857a:	2e00      	cmp	r6, #0
 800857c:	dd07      	ble.n	800858e <_strtod_l+0x79e>
 800857e:	4649      	mov	r1, r9
 8008580:	9805      	ldr	r0, [sp, #20]
 8008582:	4632      	mov	r2, r6
 8008584:	f7ff f9bc 	bl	8007900 <__lshift>
 8008588:	4681      	mov	r9, r0
 800858a:	2800      	cmp	r0, #0
 800858c:	d0d8      	beq.n	8008540 <_strtod_l+0x750>
 800858e:	2f00      	cmp	r7, #0
 8008590:	dd08      	ble.n	80085a4 <_strtod_l+0x7b4>
 8008592:	4641      	mov	r1, r8
 8008594:	9805      	ldr	r0, [sp, #20]
 8008596:	463a      	mov	r2, r7
 8008598:	f7ff f9b2 	bl	8007900 <__lshift>
 800859c:	4680      	mov	r8, r0
 800859e:	2800      	cmp	r0, #0
 80085a0:	f43f ae49 	beq.w	8008236 <_strtod_l+0x446>
 80085a4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80085a6:	9805      	ldr	r0, [sp, #20]
 80085a8:	464a      	mov	r2, r9
 80085aa:	f7ff fa31 	bl	8007a10 <__mdiff>
 80085ae:	4604      	mov	r4, r0
 80085b0:	2800      	cmp	r0, #0
 80085b2:	f43f ae40 	beq.w	8008236 <_strtod_l+0x446>
 80085b6:	68c3      	ldr	r3, [r0, #12]
 80085b8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80085ba:	2300      	movs	r3, #0
 80085bc:	60c3      	str	r3, [r0, #12]
 80085be:	4641      	mov	r1, r8
 80085c0:	f7ff fa0a 	bl	80079d8 <__mcmp>
 80085c4:	2800      	cmp	r0, #0
 80085c6:	da45      	bge.n	8008654 <_strtod_l+0x864>
 80085c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80085ca:	ea53 030a 	orrs.w	r3, r3, sl
 80085ce:	d16b      	bne.n	80086a8 <_strtod_l+0x8b8>
 80085d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d167      	bne.n	80086a8 <_strtod_l+0x8b8>
 80085d8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80085dc:	0d1b      	lsrs	r3, r3, #20
 80085de:	051b      	lsls	r3, r3, #20
 80085e0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80085e4:	d960      	bls.n	80086a8 <_strtod_l+0x8b8>
 80085e6:	6963      	ldr	r3, [r4, #20]
 80085e8:	b913      	cbnz	r3, 80085f0 <_strtod_l+0x800>
 80085ea:	6923      	ldr	r3, [r4, #16]
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	dd5b      	ble.n	80086a8 <_strtod_l+0x8b8>
 80085f0:	4621      	mov	r1, r4
 80085f2:	2201      	movs	r2, #1
 80085f4:	9805      	ldr	r0, [sp, #20]
 80085f6:	f7ff f983 	bl	8007900 <__lshift>
 80085fa:	4641      	mov	r1, r8
 80085fc:	4604      	mov	r4, r0
 80085fe:	f7ff f9eb 	bl	80079d8 <__mcmp>
 8008602:	2800      	cmp	r0, #0
 8008604:	dd50      	ble.n	80086a8 <_strtod_l+0x8b8>
 8008606:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800860a:	9a08      	ldr	r2, [sp, #32]
 800860c:	0d1b      	lsrs	r3, r3, #20
 800860e:	051b      	lsls	r3, r3, #20
 8008610:	2a00      	cmp	r2, #0
 8008612:	d06a      	beq.n	80086ea <_strtod_l+0x8fa>
 8008614:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008618:	d867      	bhi.n	80086ea <_strtod_l+0x8fa>
 800861a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800861e:	f67f ae9d 	bls.w	800835c <_strtod_l+0x56c>
 8008622:	4b0a      	ldr	r3, [pc, #40]	@ (800864c <_strtod_l+0x85c>)
 8008624:	4650      	mov	r0, sl
 8008626:	4659      	mov	r1, fp
 8008628:	2200      	movs	r2, #0
 800862a:	f7f8 f80d 	bl	8000648 <__aeabi_dmul>
 800862e:	4b08      	ldr	r3, [pc, #32]	@ (8008650 <_strtod_l+0x860>)
 8008630:	400b      	ands	r3, r1
 8008632:	4682      	mov	sl, r0
 8008634:	468b      	mov	fp, r1
 8008636:	2b00      	cmp	r3, #0
 8008638:	f47f ae08 	bne.w	800824c <_strtod_l+0x45c>
 800863c:	9a05      	ldr	r2, [sp, #20]
 800863e:	2322      	movs	r3, #34	@ 0x22
 8008640:	6013      	str	r3, [r2, #0]
 8008642:	e603      	b.n	800824c <_strtod_l+0x45c>
 8008644:	0800a088 	.word	0x0800a088
 8008648:	fffffc02 	.word	0xfffffc02
 800864c:	39500000 	.word	0x39500000
 8008650:	7ff00000 	.word	0x7ff00000
 8008654:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8008658:	d165      	bne.n	8008726 <_strtod_l+0x936>
 800865a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800865c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008660:	b35a      	cbz	r2, 80086ba <_strtod_l+0x8ca>
 8008662:	4a9f      	ldr	r2, [pc, #636]	@ (80088e0 <_strtod_l+0xaf0>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d12b      	bne.n	80086c0 <_strtod_l+0x8d0>
 8008668:	9b08      	ldr	r3, [sp, #32]
 800866a:	4651      	mov	r1, sl
 800866c:	b303      	cbz	r3, 80086b0 <_strtod_l+0x8c0>
 800866e:	4b9d      	ldr	r3, [pc, #628]	@ (80088e4 <_strtod_l+0xaf4>)
 8008670:	465a      	mov	r2, fp
 8008672:	4013      	ands	r3, r2
 8008674:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008678:	f04f 32ff 	mov.w	r2, #4294967295
 800867c:	d81b      	bhi.n	80086b6 <_strtod_l+0x8c6>
 800867e:	0d1b      	lsrs	r3, r3, #20
 8008680:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008684:	fa02 f303 	lsl.w	r3, r2, r3
 8008688:	4299      	cmp	r1, r3
 800868a:	d119      	bne.n	80086c0 <_strtod_l+0x8d0>
 800868c:	4b96      	ldr	r3, [pc, #600]	@ (80088e8 <_strtod_l+0xaf8>)
 800868e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008690:	429a      	cmp	r2, r3
 8008692:	d102      	bne.n	800869a <_strtod_l+0x8aa>
 8008694:	3101      	adds	r1, #1
 8008696:	f43f adce 	beq.w	8008236 <_strtod_l+0x446>
 800869a:	4b92      	ldr	r3, [pc, #584]	@ (80088e4 <_strtod_l+0xaf4>)
 800869c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800869e:	401a      	ands	r2, r3
 80086a0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80086a4:	f04f 0a00 	mov.w	sl, #0
 80086a8:	9b08      	ldr	r3, [sp, #32]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d1b9      	bne.n	8008622 <_strtod_l+0x832>
 80086ae:	e5cd      	b.n	800824c <_strtod_l+0x45c>
 80086b0:	f04f 33ff 	mov.w	r3, #4294967295
 80086b4:	e7e8      	b.n	8008688 <_strtod_l+0x898>
 80086b6:	4613      	mov	r3, r2
 80086b8:	e7e6      	b.n	8008688 <_strtod_l+0x898>
 80086ba:	ea53 030a 	orrs.w	r3, r3, sl
 80086be:	d0a2      	beq.n	8008606 <_strtod_l+0x816>
 80086c0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80086c2:	b1db      	cbz	r3, 80086fc <_strtod_l+0x90c>
 80086c4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80086c6:	4213      	tst	r3, r2
 80086c8:	d0ee      	beq.n	80086a8 <_strtod_l+0x8b8>
 80086ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80086cc:	9a08      	ldr	r2, [sp, #32]
 80086ce:	4650      	mov	r0, sl
 80086d0:	4659      	mov	r1, fp
 80086d2:	b1bb      	cbz	r3, 8008704 <_strtod_l+0x914>
 80086d4:	f7ff fb6e 	bl	8007db4 <sulp>
 80086d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80086dc:	ec53 2b10 	vmov	r2, r3, d0
 80086e0:	f7f7 fdfc 	bl	80002dc <__adddf3>
 80086e4:	4682      	mov	sl, r0
 80086e6:	468b      	mov	fp, r1
 80086e8:	e7de      	b.n	80086a8 <_strtod_l+0x8b8>
 80086ea:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80086ee:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80086f2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80086f6:	f04f 3aff 	mov.w	sl, #4294967295
 80086fa:	e7d5      	b.n	80086a8 <_strtod_l+0x8b8>
 80086fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80086fe:	ea13 0f0a 	tst.w	r3, sl
 8008702:	e7e1      	b.n	80086c8 <_strtod_l+0x8d8>
 8008704:	f7ff fb56 	bl	8007db4 <sulp>
 8008708:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800870c:	ec53 2b10 	vmov	r2, r3, d0
 8008710:	f7f7 fde2 	bl	80002d8 <__aeabi_dsub>
 8008714:	2200      	movs	r2, #0
 8008716:	2300      	movs	r3, #0
 8008718:	4682      	mov	sl, r0
 800871a:	468b      	mov	fp, r1
 800871c:	f7f8 f9fc 	bl	8000b18 <__aeabi_dcmpeq>
 8008720:	2800      	cmp	r0, #0
 8008722:	d0c1      	beq.n	80086a8 <_strtod_l+0x8b8>
 8008724:	e61a      	b.n	800835c <_strtod_l+0x56c>
 8008726:	4641      	mov	r1, r8
 8008728:	4620      	mov	r0, r4
 800872a:	f7ff facd 	bl	8007cc8 <__ratio>
 800872e:	ec57 6b10 	vmov	r6, r7, d0
 8008732:	2200      	movs	r2, #0
 8008734:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008738:	4630      	mov	r0, r6
 800873a:	4639      	mov	r1, r7
 800873c:	f7f8 fa00 	bl	8000b40 <__aeabi_dcmple>
 8008740:	2800      	cmp	r0, #0
 8008742:	d06f      	beq.n	8008824 <_strtod_l+0xa34>
 8008744:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008746:	2b00      	cmp	r3, #0
 8008748:	d17a      	bne.n	8008840 <_strtod_l+0xa50>
 800874a:	f1ba 0f00 	cmp.w	sl, #0
 800874e:	d158      	bne.n	8008802 <_strtod_l+0xa12>
 8008750:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008752:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008756:	2b00      	cmp	r3, #0
 8008758:	d15a      	bne.n	8008810 <_strtod_l+0xa20>
 800875a:	4b64      	ldr	r3, [pc, #400]	@ (80088ec <_strtod_l+0xafc>)
 800875c:	2200      	movs	r2, #0
 800875e:	4630      	mov	r0, r6
 8008760:	4639      	mov	r1, r7
 8008762:	f7f8 f9e3 	bl	8000b2c <__aeabi_dcmplt>
 8008766:	2800      	cmp	r0, #0
 8008768:	d159      	bne.n	800881e <_strtod_l+0xa2e>
 800876a:	4630      	mov	r0, r6
 800876c:	4639      	mov	r1, r7
 800876e:	4b60      	ldr	r3, [pc, #384]	@ (80088f0 <_strtod_l+0xb00>)
 8008770:	2200      	movs	r2, #0
 8008772:	f7f7 ff69 	bl	8000648 <__aeabi_dmul>
 8008776:	4606      	mov	r6, r0
 8008778:	460f      	mov	r7, r1
 800877a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800877e:	9606      	str	r6, [sp, #24]
 8008780:	9307      	str	r3, [sp, #28]
 8008782:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008786:	4d57      	ldr	r5, [pc, #348]	@ (80088e4 <_strtod_l+0xaf4>)
 8008788:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800878c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800878e:	401d      	ands	r5, r3
 8008790:	4b58      	ldr	r3, [pc, #352]	@ (80088f4 <_strtod_l+0xb04>)
 8008792:	429d      	cmp	r5, r3
 8008794:	f040 80b2 	bne.w	80088fc <_strtod_l+0xb0c>
 8008798:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800879a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800879e:	ec4b ab10 	vmov	d0, sl, fp
 80087a2:	f7ff f9c9 	bl	8007b38 <__ulp>
 80087a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80087aa:	ec51 0b10 	vmov	r0, r1, d0
 80087ae:	f7f7 ff4b 	bl	8000648 <__aeabi_dmul>
 80087b2:	4652      	mov	r2, sl
 80087b4:	465b      	mov	r3, fp
 80087b6:	f7f7 fd91 	bl	80002dc <__adddf3>
 80087ba:	460b      	mov	r3, r1
 80087bc:	4949      	ldr	r1, [pc, #292]	@ (80088e4 <_strtod_l+0xaf4>)
 80087be:	4a4e      	ldr	r2, [pc, #312]	@ (80088f8 <_strtod_l+0xb08>)
 80087c0:	4019      	ands	r1, r3
 80087c2:	4291      	cmp	r1, r2
 80087c4:	4682      	mov	sl, r0
 80087c6:	d942      	bls.n	800884e <_strtod_l+0xa5e>
 80087c8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80087ca:	4b47      	ldr	r3, [pc, #284]	@ (80088e8 <_strtod_l+0xaf8>)
 80087cc:	429a      	cmp	r2, r3
 80087ce:	d103      	bne.n	80087d8 <_strtod_l+0x9e8>
 80087d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80087d2:	3301      	adds	r3, #1
 80087d4:	f43f ad2f 	beq.w	8008236 <_strtod_l+0x446>
 80087d8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80088e8 <_strtod_l+0xaf8>
 80087dc:	f04f 3aff 	mov.w	sl, #4294967295
 80087e0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80087e2:	9805      	ldr	r0, [sp, #20]
 80087e4:	f7fe fe7c 	bl	80074e0 <_Bfree>
 80087e8:	9805      	ldr	r0, [sp, #20]
 80087ea:	4649      	mov	r1, r9
 80087ec:	f7fe fe78 	bl	80074e0 <_Bfree>
 80087f0:	9805      	ldr	r0, [sp, #20]
 80087f2:	4641      	mov	r1, r8
 80087f4:	f7fe fe74 	bl	80074e0 <_Bfree>
 80087f8:	9805      	ldr	r0, [sp, #20]
 80087fa:	4621      	mov	r1, r4
 80087fc:	f7fe fe70 	bl	80074e0 <_Bfree>
 8008800:	e619      	b.n	8008436 <_strtod_l+0x646>
 8008802:	f1ba 0f01 	cmp.w	sl, #1
 8008806:	d103      	bne.n	8008810 <_strtod_l+0xa20>
 8008808:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800880a:	2b00      	cmp	r3, #0
 800880c:	f43f ada6 	beq.w	800835c <_strtod_l+0x56c>
 8008810:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80088c0 <_strtod_l+0xad0>
 8008814:	4f35      	ldr	r7, [pc, #212]	@ (80088ec <_strtod_l+0xafc>)
 8008816:	ed8d 7b06 	vstr	d7, [sp, #24]
 800881a:	2600      	movs	r6, #0
 800881c:	e7b1      	b.n	8008782 <_strtod_l+0x992>
 800881e:	4f34      	ldr	r7, [pc, #208]	@ (80088f0 <_strtod_l+0xb00>)
 8008820:	2600      	movs	r6, #0
 8008822:	e7aa      	b.n	800877a <_strtod_l+0x98a>
 8008824:	4b32      	ldr	r3, [pc, #200]	@ (80088f0 <_strtod_l+0xb00>)
 8008826:	4630      	mov	r0, r6
 8008828:	4639      	mov	r1, r7
 800882a:	2200      	movs	r2, #0
 800882c:	f7f7 ff0c 	bl	8000648 <__aeabi_dmul>
 8008830:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008832:	4606      	mov	r6, r0
 8008834:	460f      	mov	r7, r1
 8008836:	2b00      	cmp	r3, #0
 8008838:	d09f      	beq.n	800877a <_strtod_l+0x98a>
 800883a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800883e:	e7a0      	b.n	8008782 <_strtod_l+0x992>
 8008840:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80088c8 <_strtod_l+0xad8>
 8008844:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008848:	ec57 6b17 	vmov	r6, r7, d7
 800884c:	e799      	b.n	8008782 <_strtod_l+0x992>
 800884e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008852:	9b08      	ldr	r3, [sp, #32]
 8008854:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8008858:	2b00      	cmp	r3, #0
 800885a:	d1c1      	bne.n	80087e0 <_strtod_l+0x9f0>
 800885c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008860:	0d1b      	lsrs	r3, r3, #20
 8008862:	051b      	lsls	r3, r3, #20
 8008864:	429d      	cmp	r5, r3
 8008866:	d1bb      	bne.n	80087e0 <_strtod_l+0x9f0>
 8008868:	4630      	mov	r0, r6
 800886a:	4639      	mov	r1, r7
 800886c:	f7f8 fa4c 	bl	8000d08 <__aeabi_d2lz>
 8008870:	f7f7 febc 	bl	80005ec <__aeabi_l2d>
 8008874:	4602      	mov	r2, r0
 8008876:	460b      	mov	r3, r1
 8008878:	4630      	mov	r0, r6
 800887a:	4639      	mov	r1, r7
 800887c:	f7f7 fd2c 	bl	80002d8 <__aeabi_dsub>
 8008880:	460b      	mov	r3, r1
 8008882:	4602      	mov	r2, r0
 8008884:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008888:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800888c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800888e:	ea46 060a 	orr.w	r6, r6, sl
 8008892:	431e      	orrs	r6, r3
 8008894:	d06f      	beq.n	8008976 <_strtod_l+0xb86>
 8008896:	a30e      	add	r3, pc, #56	@ (adr r3, 80088d0 <_strtod_l+0xae0>)
 8008898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800889c:	f7f8 f946 	bl	8000b2c <__aeabi_dcmplt>
 80088a0:	2800      	cmp	r0, #0
 80088a2:	f47f acd3 	bne.w	800824c <_strtod_l+0x45c>
 80088a6:	a30c      	add	r3, pc, #48	@ (adr r3, 80088d8 <_strtod_l+0xae8>)
 80088a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80088b0:	f7f8 f95a 	bl	8000b68 <__aeabi_dcmpgt>
 80088b4:	2800      	cmp	r0, #0
 80088b6:	d093      	beq.n	80087e0 <_strtod_l+0x9f0>
 80088b8:	e4c8      	b.n	800824c <_strtod_l+0x45c>
 80088ba:	bf00      	nop
 80088bc:	f3af 8000 	nop.w
 80088c0:	00000000 	.word	0x00000000
 80088c4:	bff00000 	.word	0xbff00000
 80088c8:	00000000 	.word	0x00000000
 80088cc:	3ff00000 	.word	0x3ff00000
 80088d0:	94a03595 	.word	0x94a03595
 80088d4:	3fdfffff 	.word	0x3fdfffff
 80088d8:	35afe535 	.word	0x35afe535
 80088dc:	3fe00000 	.word	0x3fe00000
 80088e0:	000fffff 	.word	0x000fffff
 80088e4:	7ff00000 	.word	0x7ff00000
 80088e8:	7fefffff 	.word	0x7fefffff
 80088ec:	3ff00000 	.word	0x3ff00000
 80088f0:	3fe00000 	.word	0x3fe00000
 80088f4:	7fe00000 	.word	0x7fe00000
 80088f8:	7c9fffff 	.word	0x7c9fffff
 80088fc:	9b08      	ldr	r3, [sp, #32]
 80088fe:	b323      	cbz	r3, 800894a <_strtod_l+0xb5a>
 8008900:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008904:	d821      	bhi.n	800894a <_strtod_l+0xb5a>
 8008906:	a328      	add	r3, pc, #160	@ (adr r3, 80089a8 <_strtod_l+0xbb8>)
 8008908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800890c:	4630      	mov	r0, r6
 800890e:	4639      	mov	r1, r7
 8008910:	f7f8 f916 	bl	8000b40 <__aeabi_dcmple>
 8008914:	b1a0      	cbz	r0, 8008940 <_strtod_l+0xb50>
 8008916:	4639      	mov	r1, r7
 8008918:	4630      	mov	r0, r6
 800891a:	f7f8 f96d 	bl	8000bf8 <__aeabi_d2uiz>
 800891e:	2801      	cmp	r0, #1
 8008920:	bf38      	it	cc
 8008922:	2001      	movcc	r0, #1
 8008924:	f7f7 fe16 	bl	8000554 <__aeabi_ui2d>
 8008928:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800892a:	4606      	mov	r6, r0
 800892c:	460f      	mov	r7, r1
 800892e:	b9fb      	cbnz	r3, 8008970 <_strtod_l+0xb80>
 8008930:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008934:	9014      	str	r0, [sp, #80]	@ 0x50
 8008936:	9315      	str	r3, [sp, #84]	@ 0x54
 8008938:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800893c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008940:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008942:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008946:	1b5b      	subs	r3, r3, r5
 8008948:	9311      	str	r3, [sp, #68]	@ 0x44
 800894a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800894e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008952:	f7ff f8f1 	bl	8007b38 <__ulp>
 8008956:	4650      	mov	r0, sl
 8008958:	ec53 2b10 	vmov	r2, r3, d0
 800895c:	4659      	mov	r1, fp
 800895e:	f7f7 fe73 	bl	8000648 <__aeabi_dmul>
 8008962:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008966:	f7f7 fcb9 	bl	80002dc <__adddf3>
 800896a:	4682      	mov	sl, r0
 800896c:	468b      	mov	fp, r1
 800896e:	e770      	b.n	8008852 <_strtod_l+0xa62>
 8008970:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008974:	e7e0      	b.n	8008938 <_strtod_l+0xb48>
 8008976:	a30e      	add	r3, pc, #56	@ (adr r3, 80089b0 <_strtod_l+0xbc0>)
 8008978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800897c:	f7f8 f8d6 	bl	8000b2c <__aeabi_dcmplt>
 8008980:	e798      	b.n	80088b4 <_strtod_l+0xac4>
 8008982:	2300      	movs	r3, #0
 8008984:	930e      	str	r3, [sp, #56]	@ 0x38
 8008986:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008988:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800898a:	6013      	str	r3, [r2, #0]
 800898c:	f7ff ba6d 	b.w	8007e6a <_strtod_l+0x7a>
 8008990:	2a65      	cmp	r2, #101	@ 0x65
 8008992:	f43f ab68 	beq.w	8008066 <_strtod_l+0x276>
 8008996:	2a45      	cmp	r2, #69	@ 0x45
 8008998:	f43f ab65 	beq.w	8008066 <_strtod_l+0x276>
 800899c:	2301      	movs	r3, #1
 800899e:	f7ff bba0 	b.w	80080e2 <_strtod_l+0x2f2>
 80089a2:	bf00      	nop
 80089a4:	f3af 8000 	nop.w
 80089a8:	ffc00000 	.word	0xffc00000
 80089ac:	41dfffff 	.word	0x41dfffff
 80089b0:	94a03595 	.word	0x94a03595
 80089b4:	3fcfffff 	.word	0x3fcfffff

080089b8 <_strtod_r>:
 80089b8:	4b01      	ldr	r3, [pc, #4]	@ (80089c0 <_strtod_r+0x8>)
 80089ba:	f7ff ba19 	b.w	8007df0 <_strtod_l>
 80089be:	bf00      	nop
 80089c0:	20000068 	.word	0x20000068

080089c4 <_strtol_l.isra.0>:
 80089c4:	2b24      	cmp	r3, #36	@ 0x24
 80089c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089ca:	4686      	mov	lr, r0
 80089cc:	4690      	mov	r8, r2
 80089ce:	d801      	bhi.n	80089d4 <_strtol_l.isra.0+0x10>
 80089d0:	2b01      	cmp	r3, #1
 80089d2:	d106      	bne.n	80089e2 <_strtol_l.isra.0+0x1e>
 80089d4:	f7fd fdb0 	bl	8006538 <__errno>
 80089d8:	2316      	movs	r3, #22
 80089da:	6003      	str	r3, [r0, #0]
 80089dc:	2000      	movs	r0, #0
 80089de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089e2:	4834      	ldr	r0, [pc, #208]	@ (8008ab4 <_strtol_l.isra.0+0xf0>)
 80089e4:	460d      	mov	r5, r1
 80089e6:	462a      	mov	r2, r5
 80089e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80089ec:	5d06      	ldrb	r6, [r0, r4]
 80089ee:	f016 0608 	ands.w	r6, r6, #8
 80089f2:	d1f8      	bne.n	80089e6 <_strtol_l.isra.0+0x22>
 80089f4:	2c2d      	cmp	r4, #45	@ 0x2d
 80089f6:	d110      	bne.n	8008a1a <_strtol_l.isra.0+0x56>
 80089f8:	782c      	ldrb	r4, [r5, #0]
 80089fa:	2601      	movs	r6, #1
 80089fc:	1c95      	adds	r5, r2, #2
 80089fe:	f033 0210 	bics.w	r2, r3, #16
 8008a02:	d115      	bne.n	8008a30 <_strtol_l.isra.0+0x6c>
 8008a04:	2c30      	cmp	r4, #48	@ 0x30
 8008a06:	d10d      	bne.n	8008a24 <_strtol_l.isra.0+0x60>
 8008a08:	782a      	ldrb	r2, [r5, #0]
 8008a0a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008a0e:	2a58      	cmp	r2, #88	@ 0x58
 8008a10:	d108      	bne.n	8008a24 <_strtol_l.isra.0+0x60>
 8008a12:	786c      	ldrb	r4, [r5, #1]
 8008a14:	3502      	adds	r5, #2
 8008a16:	2310      	movs	r3, #16
 8008a18:	e00a      	b.n	8008a30 <_strtol_l.isra.0+0x6c>
 8008a1a:	2c2b      	cmp	r4, #43	@ 0x2b
 8008a1c:	bf04      	itt	eq
 8008a1e:	782c      	ldrbeq	r4, [r5, #0]
 8008a20:	1c95      	addeq	r5, r2, #2
 8008a22:	e7ec      	b.n	80089fe <_strtol_l.isra.0+0x3a>
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d1f6      	bne.n	8008a16 <_strtol_l.isra.0+0x52>
 8008a28:	2c30      	cmp	r4, #48	@ 0x30
 8008a2a:	bf14      	ite	ne
 8008a2c:	230a      	movne	r3, #10
 8008a2e:	2308      	moveq	r3, #8
 8008a30:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008a34:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008a38:	2200      	movs	r2, #0
 8008a3a:	fbbc f9f3 	udiv	r9, ip, r3
 8008a3e:	4610      	mov	r0, r2
 8008a40:	fb03 ca19 	mls	sl, r3, r9, ip
 8008a44:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008a48:	2f09      	cmp	r7, #9
 8008a4a:	d80f      	bhi.n	8008a6c <_strtol_l.isra.0+0xa8>
 8008a4c:	463c      	mov	r4, r7
 8008a4e:	42a3      	cmp	r3, r4
 8008a50:	dd1b      	ble.n	8008a8a <_strtol_l.isra.0+0xc6>
 8008a52:	1c57      	adds	r7, r2, #1
 8008a54:	d007      	beq.n	8008a66 <_strtol_l.isra.0+0xa2>
 8008a56:	4581      	cmp	r9, r0
 8008a58:	d314      	bcc.n	8008a84 <_strtol_l.isra.0+0xc0>
 8008a5a:	d101      	bne.n	8008a60 <_strtol_l.isra.0+0x9c>
 8008a5c:	45a2      	cmp	sl, r4
 8008a5e:	db11      	blt.n	8008a84 <_strtol_l.isra.0+0xc0>
 8008a60:	fb00 4003 	mla	r0, r0, r3, r4
 8008a64:	2201      	movs	r2, #1
 8008a66:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008a6a:	e7eb      	b.n	8008a44 <_strtol_l.isra.0+0x80>
 8008a6c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008a70:	2f19      	cmp	r7, #25
 8008a72:	d801      	bhi.n	8008a78 <_strtol_l.isra.0+0xb4>
 8008a74:	3c37      	subs	r4, #55	@ 0x37
 8008a76:	e7ea      	b.n	8008a4e <_strtol_l.isra.0+0x8a>
 8008a78:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008a7c:	2f19      	cmp	r7, #25
 8008a7e:	d804      	bhi.n	8008a8a <_strtol_l.isra.0+0xc6>
 8008a80:	3c57      	subs	r4, #87	@ 0x57
 8008a82:	e7e4      	b.n	8008a4e <_strtol_l.isra.0+0x8a>
 8008a84:	f04f 32ff 	mov.w	r2, #4294967295
 8008a88:	e7ed      	b.n	8008a66 <_strtol_l.isra.0+0xa2>
 8008a8a:	1c53      	adds	r3, r2, #1
 8008a8c:	d108      	bne.n	8008aa0 <_strtol_l.isra.0+0xdc>
 8008a8e:	2322      	movs	r3, #34	@ 0x22
 8008a90:	f8ce 3000 	str.w	r3, [lr]
 8008a94:	4660      	mov	r0, ip
 8008a96:	f1b8 0f00 	cmp.w	r8, #0
 8008a9a:	d0a0      	beq.n	80089de <_strtol_l.isra.0+0x1a>
 8008a9c:	1e69      	subs	r1, r5, #1
 8008a9e:	e006      	b.n	8008aae <_strtol_l.isra.0+0xea>
 8008aa0:	b106      	cbz	r6, 8008aa4 <_strtol_l.isra.0+0xe0>
 8008aa2:	4240      	negs	r0, r0
 8008aa4:	f1b8 0f00 	cmp.w	r8, #0
 8008aa8:	d099      	beq.n	80089de <_strtol_l.isra.0+0x1a>
 8008aaa:	2a00      	cmp	r2, #0
 8008aac:	d1f6      	bne.n	8008a9c <_strtol_l.isra.0+0xd8>
 8008aae:	f8c8 1000 	str.w	r1, [r8]
 8008ab2:	e794      	b.n	80089de <_strtol_l.isra.0+0x1a>
 8008ab4:	0800a0b1 	.word	0x0800a0b1

08008ab8 <_strtol_r>:
 8008ab8:	f7ff bf84 	b.w	80089c4 <_strtol_l.isra.0>

08008abc <__ssputs_r>:
 8008abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ac0:	688e      	ldr	r6, [r1, #8]
 8008ac2:	461f      	mov	r7, r3
 8008ac4:	42be      	cmp	r6, r7
 8008ac6:	680b      	ldr	r3, [r1, #0]
 8008ac8:	4682      	mov	sl, r0
 8008aca:	460c      	mov	r4, r1
 8008acc:	4690      	mov	r8, r2
 8008ace:	d82d      	bhi.n	8008b2c <__ssputs_r+0x70>
 8008ad0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008ad4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008ad8:	d026      	beq.n	8008b28 <__ssputs_r+0x6c>
 8008ada:	6965      	ldr	r5, [r4, #20]
 8008adc:	6909      	ldr	r1, [r1, #16]
 8008ade:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008ae2:	eba3 0901 	sub.w	r9, r3, r1
 8008ae6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008aea:	1c7b      	adds	r3, r7, #1
 8008aec:	444b      	add	r3, r9
 8008aee:	106d      	asrs	r5, r5, #1
 8008af0:	429d      	cmp	r5, r3
 8008af2:	bf38      	it	cc
 8008af4:	461d      	movcc	r5, r3
 8008af6:	0553      	lsls	r3, r2, #21
 8008af8:	d527      	bpl.n	8008b4a <__ssputs_r+0x8e>
 8008afa:	4629      	mov	r1, r5
 8008afc:	f7fe fc24 	bl	8007348 <_malloc_r>
 8008b00:	4606      	mov	r6, r0
 8008b02:	b360      	cbz	r0, 8008b5e <__ssputs_r+0xa2>
 8008b04:	6921      	ldr	r1, [r4, #16]
 8008b06:	464a      	mov	r2, r9
 8008b08:	f000 fa18 	bl	8008f3c <memcpy>
 8008b0c:	89a3      	ldrh	r3, [r4, #12]
 8008b0e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008b12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b16:	81a3      	strh	r3, [r4, #12]
 8008b18:	6126      	str	r6, [r4, #16]
 8008b1a:	6165      	str	r5, [r4, #20]
 8008b1c:	444e      	add	r6, r9
 8008b1e:	eba5 0509 	sub.w	r5, r5, r9
 8008b22:	6026      	str	r6, [r4, #0]
 8008b24:	60a5      	str	r5, [r4, #8]
 8008b26:	463e      	mov	r6, r7
 8008b28:	42be      	cmp	r6, r7
 8008b2a:	d900      	bls.n	8008b2e <__ssputs_r+0x72>
 8008b2c:	463e      	mov	r6, r7
 8008b2e:	6820      	ldr	r0, [r4, #0]
 8008b30:	4632      	mov	r2, r6
 8008b32:	4641      	mov	r1, r8
 8008b34:	f000 f9c6 	bl	8008ec4 <memmove>
 8008b38:	68a3      	ldr	r3, [r4, #8]
 8008b3a:	1b9b      	subs	r3, r3, r6
 8008b3c:	60a3      	str	r3, [r4, #8]
 8008b3e:	6823      	ldr	r3, [r4, #0]
 8008b40:	4433      	add	r3, r6
 8008b42:	6023      	str	r3, [r4, #0]
 8008b44:	2000      	movs	r0, #0
 8008b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b4a:	462a      	mov	r2, r5
 8008b4c:	f000 fd89 	bl	8009662 <_realloc_r>
 8008b50:	4606      	mov	r6, r0
 8008b52:	2800      	cmp	r0, #0
 8008b54:	d1e0      	bne.n	8008b18 <__ssputs_r+0x5c>
 8008b56:	6921      	ldr	r1, [r4, #16]
 8008b58:	4650      	mov	r0, sl
 8008b5a:	f7fe fb81 	bl	8007260 <_free_r>
 8008b5e:	230c      	movs	r3, #12
 8008b60:	f8ca 3000 	str.w	r3, [sl]
 8008b64:	89a3      	ldrh	r3, [r4, #12]
 8008b66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b6a:	81a3      	strh	r3, [r4, #12]
 8008b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b70:	e7e9      	b.n	8008b46 <__ssputs_r+0x8a>
	...

08008b74 <_svfiprintf_r>:
 8008b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b78:	4698      	mov	r8, r3
 8008b7a:	898b      	ldrh	r3, [r1, #12]
 8008b7c:	061b      	lsls	r3, r3, #24
 8008b7e:	b09d      	sub	sp, #116	@ 0x74
 8008b80:	4607      	mov	r7, r0
 8008b82:	460d      	mov	r5, r1
 8008b84:	4614      	mov	r4, r2
 8008b86:	d510      	bpl.n	8008baa <_svfiprintf_r+0x36>
 8008b88:	690b      	ldr	r3, [r1, #16]
 8008b8a:	b973      	cbnz	r3, 8008baa <_svfiprintf_r+0x36>
 8008b8c:	2140      	movs	r1, #64	@ 0x40
 8008b8e:	f7fe fbdb 	bl	8007348 <_malloc_r>
 8008b92:	6028      	str	r0, [r5, #0]
 8008b94:	6128      	str	r0, [r5, #16]
 8008b96:	b930      	cbnz	r0, 8008ba6 <_svfiprintf_r+0x32>
 8008b98:	230c      	movs	r3, #12
 8008b9a:	603b      	str	r3, [r7, #0]
 8008b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8008ba0:	b01d      	add	sp, #116	@ 0x74
 8008ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ba6:	2340      	movs	r3, #64	@ 0x40
 8008ba8:	616b      	str	r3, [r5, #20]
 8008baa:	2300      	movs	r3, #0
 8008bac:	9309      	str	r3, [sp, #36]	@ 0x24
 8008bae:	2320      	movs	r3, #32
 8008bb0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008bb4:	f8cd 800c 	str.w	r8, [sp, #12]
 8008bb8:	2330      	movs	r3, #48	@ 0x30
 8008bba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008d58 <_svfiprintf_r+0x1e4>
 8008bbe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008bc2:	f04f 0901 	mov.w	r9, #1
 8008bc6:	4623      	mov	r3, r4
 8008bc8:	469a      	mov	sl, r3
 8008bca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008bce:	b10a      	cbz	r2, 8008bd4 <_svfiprintf_r+0x60>
 8008bd0:	2a25      	cmp	r2, #37	@ 0x25
 8008bd2:	d1f9      	bne.n	8008bc8 <_svfiprintf_r+0x54>
 8008bd4:	ebba 0b04 	subs.w	fp, sl, r4
 8008bd8:	d00b      	beq.n	8008bf2 <_svfiprintf_r+0x7e>
 8008bda:	465b      	mov	r3, fp
 8008bdc:	4622      	mov	r2, r4
 8008bde:	4629      	mov	r1, r5
 8008be0:	4638      	mov	r0, r7
 8008be2:	f7ff ff6b 	bl	8008abc <__ssputs_r>
 8008be6:	3001      	adds	r0, #1
 8008be8:	f000 80a7 	beq.w	8008d3a <_svfiprintf_r+0x1c6>
 8008bec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008bee:	445a      	add	r2, fp
 8008bf0:	9209      	str	r2, [sp, #36]	@ 0x24
 8008bf2:	f89a 3000 	ldrb.w	r3, [sl]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	f000 809f 	beq.w	8008d3a <_svfiprintf_r+0x1c6>
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	f04f 32ff 	mov.w	r2, #4294967295
 8008c02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c06:	f10a 0a01 	add.w	sl, sl, #1
 8008c0a:	9304      	str	r3, [sp, #16]
 8008c0c:	9307      	str	r3, [sp, #28]
 8008c0e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008c12:	931a      	str	r3, [sp, #104]	@ 0x68
 8008c14:	4654      	mov	r4, sl
 8008c16:	2205      	movs	r2, #5
 8008c18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c1c:	484e      	ldr	r0, [pc, #312]	@ (8008d58 <_svfiprintf_r+0x1e4>)
 8008c1e:	f7f7 faff 	bl	8000220 <memchr>
 8008c22:	9a04      	ldr	r2, [sp, #16]
 8008c24:	b9d8      	cbnz	r0, 8008c5e <_svfiprintf_r+0xea>
 8008c26:	06d0      	lsls	r0, r2, #27
 8008c28:	bf44      	itt	mi
 8008c2a:	2320      	movmi	r3, #32
 8008c2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008c30:	0711      	lsls	r1, r2, #28
 8008c32:	bf44      	itt	mi
 8008c34:	232b      	movmi	r3, #43	@ 0x2b
 8008c36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008c3a:	f89a 3000 	ldrb.w	r3, [sl]
 8008c3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c40:	d015      	beq.n	8008c6e <_svfiprintf_r+0xfa>
 8008c42:	9a07      	ldr	r2, [sp, #28]
 8008c44:	4654      	mov	r4, sl
 8008c46:	2000      	movs	r0, #0
 8008c48:	f04f 0c0a 	mov.w	ip, #10
 8008c4c:	4621      	mov	r1, r4
 8008c4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c52:	3b30      	subs	r3, #48	@ 0x30
 8008c54:	2b09      	cmp	r3, #9
 8008c56:	d94b      	bls.n	8008cf0 <_svfiprintf_r+0x17c>
 8008c58:	b1b0      	cbz	r0, 8008c88 <_svfiprintf_r+0x114>
 8008c5a:	9207      	str	r2, [sp, #28]
 8008c5c:	e014      	b.n	8008c88 <_svfiprintf_r+0x114>
 8008c5e:	eba0 0308 	sub.w	r3, r0, r8
 8008c62:	fa09 f303 	lsl.w	r3, r9, r3
 8008c66:	4313      	orrs	r3, r2
 8008c68:	9304      	str	r3, [sp, #16]
 8008c6a:	46a2      	mov	sl, r4
 8008c6c:	e7d2      	b.n	8008c14 <_svfiprintf_r+0xa0>
 8008c6e:	9b03      	ldr	r3, [sp, #12]
 8008c70:	1d19      	adds	r1, r3, #4
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	9103      	str	r1, [sp, #12]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	bfbb      	ittet	lt
 8008c7a:	425b      	neglt	r3, r3
 8008c7c:	f042 0202 	orrlt.w	r2, r2, #2
 8008c80:	9307      	strge	r3, [sp, #28]
 8008c82:	9307      	strlt	r3, [sp, #28]
 8008c84:	bfb8      	it	lt
 8008c86:	9204      	strlt	r2, [sp, #16]
 8008c88:	7823      	ldrb	r3, [r4, #0]
 8008c8a:	2b2e      	cmp	r3, #46	@ 0x2e
 8008c8c:	d10a      	bne.n	8008ca4 <_svfiprintf_r+0x130>
 8008c8e:	7863      	ldrb	r3, [r4, #1]
 8008c90:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c92:	d132      	bne.n	8008cfa <_svfiprintf_r+0x186>
 8008c94:	9b03      	ldr	r3, [sp, #12]
 8008c96:	1d1a      	adds	r2, r3, #4
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	9203      	str	r2, [sp, #12]
 8008c9c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008ca0:	3402      	adds	r4, #2
 8008ca2:	9305      	str	r3, [sp, #20]
 8008ca4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008d68 <_svfiprintf_r+0x1f4>
 8008ca8:	7821      	ldrb	r1, [r4, #0]
 8008caa:	2203      	movs	r2, #3
 8008cac:	4650      	mov	r0, sl
 8008cae:	f7f7 fab7 	bl	8000220 <memchr>
 8008cb2:	b138      	cbz	r0, 8008cc4 <_svfiprintf_r+0x150>
 8008cb4:	9b04      	ldr	r3, [sp, #16]
 8008cb6:	eba0 000a 	sub.w	r0, r0, sl
 8008cba:	2240      	movs	r2, #64	@ 0x40
 8008cbc:	4082      	lsls	r2, r0
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	3401      	adds	r4, #1
 8008cc2:	9304      	str	r3, [sp, #16]
 8008cc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cc8:	4824      	ldr	r0, [pc, #144]	@ (8008d5c <_svfiprintf_r+0x1e8>)
 8008cca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008cce:	2206      	movs	r2, #6
 8008cd0:	f7f7 faa6 	bl	8000220 <memchr>
 8008cd4:	2800      	cmp	r0, #0
 8008cd6:	d036      	beq.n	8008d46 <_svfiprintf_r+0x1d2>
 8008cd8:	4b21      	ldr	r3, [pc, #132]	@ (8008d60 <_svfiprintf_r+0x1ec>)
 8008cda:	bb1b      	cbnz	r3, 8008d24 <_svfiprintf_r+0x1b0>
 8008cdc:	9b03      	ldr	r3, [sp, #12]
 8008cde:	3307      	adds	r3, #7
 8008ce0:	f023 0307 	bic.w	r3, r3, #7
 8008ce4:	3308      	adds	r3, #8
 8008ce6:	9303      	str	r3, [sp, #12]
 8008ce8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cea:	4433      	add	r3, r6
 8008cec:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cee:	e76a      	b.n	8008bc6 <_svfiprintf_r+0x52>
 8008cf0:	fb0c 3202 	mla	r2, ip, r2, r3
 8008cf4:	460c      	mov	r4, r1
 8008cf6:	2001      	movs	r0, #1
 8008cf8:	e7a8      	b.n	8008c4c <_svfiprintf_r+0xd8>
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	3401      	adds	r4, #1
 8008cfe:	9305      	str	r3, [sp, #20]
 8008d00:	4619      	mov	r1, r3
 8008d02:	f04f 0c0a 	mov.w	ip, #10
 8008d06:	4620      	mov	r0, r4
 8008d08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d0c:	3a30      	subs	r2, #48	@ 0x30
 8008d0e:	2a09      	cmp	r2, #9
 8008d10:	d903      	bls.n	8008d1a <_svfiprintf_r+0x1a6>
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d0c6      	beq.n	8008ca4 <_svfiprintf_r+0x130>
 8008d16:	9105      	str	r1, [sp, #20]
 8008d18:	e7c4      	b.n	8008ca4 <_svfiprintf_r+0x130>
 8008d1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d1e:	4604      	mov	r4, r0
 8008d20:	2301      	movs	r3, #1
 8008d22:	e7f0      	b.n	8008d06 <_svfiprintf_r+0x192>
 8008d24:	ab03      	add	r3, sp, #12
 8008d26:	9300      	str	r3, [sp, #0]
 8008d28:	462a      	mov	r2, r5
 8008d2a:	4b0e      	ldr	r3, [pc, #56]	@ (8008d64 <_svfiprintf_r+0x1f0>)
 8008d2c:	a904      	add	r1, sp, #16
 8008d2e:	4638      	mov	r0, r7
 8008d30:	f7fc fcc4 	bl	80056bc <_printf_float>
 8008d34:	1c42      	adds	r2, r0, #1
 8008d36:	4606      	mov	r6, r0
 8008d38:	d1d6      	bne.n	8008ce8 <_svfiprintf_r+0x174>
 8008d3a:	89ab      	ldrh	r3, [r5, #12]
 8008d3c:	065b      	lsls	r3, r3, #25
 8008d3e:	f53f af2d 	bmi.w	8008b9c <_svfiprintf_r+0x28>
 8008d42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008d44:	e72c      	b.n	8008ba0 <_svfiprintf_r+0x2c>
 8008d46:	ab03      	add	r3, sp, #12
 8008d48:	9300      	str	r3, [sp, #0]
 8008d4a:	462a      	mov	r2, r5
 8008d4c:	4b05      	ldr	r3, [pc, #20]	@ (8008d64 <_svfiprintf_r+0x1f0>)
 8008d4e:	a904      	add	r1, sp, #16
 8008d50:	4638      	mov	r0, r7
 8008d52:	f7fc ff4b 	bl	8005bec <_printf_i>
 8008d56:	e7ed      	b.n	8008d34 <_svfiprintf_r+0x1c0>
 8008d58:	08009ead 	.word	0x08009ead
 8008d5c:	08009eb7 	.word	0x08009eb7
 8008d60:	080056bd 	.word	0x080056bd
 8008d64:	08008abd 	.word	0x08008abd
 8008d68:	08009eb3 	.word	0x08009eb3

08008d6c <__sflush_r>:
 8008d6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d74:	0716      	lsls	r6, r2, #28
 8008d76:	4605      	mov	r5, r0
 8008d78:	460c      	mov	r4, r1
 8008d7a:	d454      	bmi.n	8008e26 <__sflush_r+0xba>
 8008d7c:	684b      	ldr	r3, [r1, #4]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	dc02      	bgt.n	8008d88 <__sflush_r+0x1c>
 8008d82:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	dd48      	ble.n	8008e1a <__sflush_r+0xae>
 8008d88:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008d8a:	2e00      	cmp	r6, #0
 8008d8c:	d045      	beq.n	8008e1a <__sflush_r+0xae>
 8008d8e:	2300      	movs	r3, #0
 8008d90:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008d94:	682f      	ldr	r7, [r5, #0]
 8008d96:	6a21      	ldr	r1, [r4, #32]
 8008d98:	602b      	str	r3, [r5, #0]
 8008d9a:	d030      	beq.n	8008dfe <__sflush_r+0x92>
 8008d9c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008d9e:	89a3      	ldrh	r3, [r4, #12]
 8008da0:	0759      	lsls	r1, r3, #29
 8008da2:	d505      	bpl.n	8008db0 <__sflush_r+0x44>
 8008da4:	6863      	ldr	r3, [r4, #4]
 8008da6:	1ad2      	subs	r2, r2, r3
 8008da8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008daa:	b10b      	cbz	r3, 8008db0 <__sflush_r+0x44>
 8008dac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008dae:	1ad2      	subs	r2, r2, r3
 8008db0:	2300      	movs	r3, #0
 8008db2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008db4:	6a21      	ldr	r1, [r4, #32]
 8008db6:	4628      	mov	r0, r5
 8008db8:	47b0      	blx	r6
 8008dba:	1c43      	adds	r3, r0, #1
 8008dbc:	89a3      	ldrh	r3, [r4, #12]
 8008dbe:	d106      	bne.n	8008dce <__sflush_r+0x62>
 8008dc0:	6829      	ldr	r1, [r5, #0]
 8008dc2:	291d      	cmp	r1, #29
 8008dc4:	d82b      	bhi.n	8008e1e <__sflush_r+0xb2>
 8008dc6:	4a2a      	ldr	r2, [pc, #168]	@ (8008e70 <__sflush_r+0x104>)
 8008dc8:	40ca      	lsrs	r2, r1
 8008dca:	07d6      	lsls	r6, r2, #31
 8008dcc:	d527      	bpl.n	8008e1e <__sflush_r+0xb2>
 8008dce:	2200      	movs	r2, #0
 8008dd0:	6062      	str	r2, [r4, #4]
 8008dd2:	04d9      	lsls	r1, r3, #19
 8008dd4:	6922      	ldr	r2, [r4, #16]
 8008dd6:	6022      	str	r2, [r4, #0]
 8008dd8:	d504      	bpl.n	8008de4 <__sflush_r+0x78>
 8008dda:	1c42      	adds	r2, r0, #1
 8008ddc:	d101      	bne.n	8008de2 <__sflush_r+0x76>
 8008dde:	682b      	ldr	r3, [r5, #0]
 8008de0:	b903      	cbnz	r3, 8008de4 <__sflush_r+0x78>
 8008de2:	6560      	str	r0, [r4, #84]	@ 0x54
 8008de4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008de6:	602f      	str	r7, [r5, #0]
 8008de8:	b1b9      	cbz	r1, 8008e1a <__sflush_r+0xae>
 8008dea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008dee:	4299      	cmp	r1, r3
 8008df0:	d002      	beq.n	8008df8 <__sflush_r+0x8c>
 8008df2:	4628      	mov	r0, r5
 8008df4:	f7fe fa34 	bl	8007260 <_free_r>
 8008df8:	2300      	movs	r3, #0
 8008dfa:	6363      	str	r3, [r4, #52]	@ 0x34
 8008dfc:	e00d      	b.n	8008e1a <__sflush_r+0xae>
 8008dfe:	2301      	movs	r3, #1
 8008e00:	4628      	mov	r0, r5
 8008e02:	47b0      	blx	r6
 8008e04:	4602      	mov	r2, r0
 8008e06:	1c50      	adds	r0, r2, #1
 8008e08:	d1c9      	bne.n	8008d9e <__sflush_r+0x32>
 8008e0a:	682b      	ldr	r3, [r5, #0]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d0c6      	beq.n	8008d9e <__sflush_r+0x32>
 8008e10:	2b1d      	cmp	r3, #29
 8008e12:	d001      	beq.n	8008e18 <__sflush_r+0xac>
 8008e14:	2b16      	cmp	r3, #22
 8008e16:	d11e      	bne.n	8008e56 <__sflush_r+0xea>
 8008e18:	602f      	str	r7, [r5, #0]
 8008e1a:	2000      	movs	r0, #0
 8008e1c:	e022      	b.n	8008e64 <__sflush_r+0xf8>
 8008e1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e22:	b21b      	sxth	r3, r3
 8008e24:	e01b      	b.n	8008e5e <__sflush_r+0xf2>
 8008e26:	690f      	ldr	r7, [r1, #16]
 8008e28:	2f00      	cmp	r7, #0
 8008e2a:	d0f6      	beq.n	8008e1a <__sflush_r+0xae>
 8008e2c:	0793      	lsls	r3, r2, #30
 8008e2e:	680e      	ldr	r6, [r1, #0]
 8008e30:	bf08      	it	eq
 8008e32:	694b      	ldreq	r3, [r1, #20]
 8008e34:	600f      	str	r7, [r1, #0]
 8008e36:	bf18      	it	ne
 8008e38:	2300      	movne	r3, #0
 8008e3a:	eba6 0807 	sub.w	r8, r6, r7
 8008e3e:	608b      	str	r3, [r1, #8]
 8008e40:	f1b8 0f00 	cmp.w	r8, #0
 8008e44:	dde9      	ble.n	8008e1a <__sflush_r+0xae>
 8008e46:	6a21      	ldr	r1, [r4, #32]
 8008e48:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008e4a:	4643      	mov	r3, r8
 8008e4c:	463a      	mov	r2, r7
 8008e4e:	4628      	mov	r0, r5
 8008e50:	47b0      	blx	r6
 8008e52:	2800      	cmp	r0, #0
 8008e54:	dc08      	bgt.n	8008e68 <__sflush_r+0xfc>
 8008e56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e5e:	81a3      	strh	r3, [r4, #12]
 8008e60:	f04f 30ff 	mov.w	r0, #4294967295
 8008e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e68:	4407      	add	r7, r0
 8008e6a:	eba8 0800 	sub.w	r8, r8, r0
 8008e6e:	e7e7      	b.n	8008e40 <__sflush_r+0xd4>
 8008e70:	20400001 	.word	0x20400001

08008e74 <_fflush_r>:
 8008e74:	b538      	push	{r3, r4, r5, lr}
 8008e76:	690b      	ldr	r3, [r1, #16]
 8008e78:	4605      	mov	r5, r0
 8008e7a:	460c      	mov	r4, r1
 8008e7c:	b913      	cbnz	r3, 8008e84 <_fflush_r+0x10>
 8008e7e:	2500      	movs	r5, #0
 8008e80:	4628      	mov	r0, r5
 8008e82:	bd38      	pop	{r3, r4, r5, pc}
 8008e84:	b118      	cbz	r0, 8008e8e <_fflush_r+0x1a>
 8008e86:	6a03      	ldr	r3, [r0, #32]
 8008e88:	b90b      	cbnz	r3, 8008e8e <_fflush_r+0x1a>
 8008e8a:	f7fd fa67 	bl	800635c <__sinit>
 8008e8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d0f3      	beq.n	8008e7e <_fflush_r+0xa>
 8008e96:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008e98:	07d0      	lsls	r0, r2, #31
 8008e9a:	d404      	bmi.n	8008ea6 <_fflush_r+0x32>
 8008e9c:	0599      	lsls	r1, r3, #22
 8008e9e:	d402      	bmi.n	8008ea6 <_fflush_r+0x32>
 8008ea0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008ea2:	f7fd fb74 	bl	800658e <__retarget_lock_acquire_recursive>
 8008ea6:	4628      	mov	r0, r5
 8008ea8:	4621      	mov	r1, r4
 8008eaa:	f7ff ff5f 	bl	8008d6c <__sflush_r>
 8008eae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008eb0:	07da      	lsls	r2, r3, #31
 8008eb2:	4605      	mov	r5, r0
 8008eb4:	d4e4      	bmi.n	8008e80 <_fflush_r+0xc>
 8008eb6:	89a3      	ldrh	r3, [r4, #12]
 8008eb8:	059b      	lsls	r3, r3, #22
 8008eba:	d4e1      	bmi.n	8008e80 <_fflush_r+0xc>
 8008ebc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008ebe:	f7fd fb67 	bl	8006590 <__retarget_lock_release_recursive>
 8008ec2:	e7dd      	b.n	8008e80 <_fflush_r+0xc>

08008ec4 <memmove>:
 8008ec4:	4288      	cmp	r0, r1
 8008ec6:	b510      	push	{r4, lr}
 8008ec8:	eb01 0402 	add.w	r4, r1, r2
 8008ecc:	d902      	bls.n	8008ed4 <memmove+0x10>
 8008ece:	4284      	cmp	r4, r0
 8008ed0:	4623      	mov	r3, r4
 8008ed2:	d807      	bhi.n	8008ee4 <memmove+0x20>
 8008ed4:	1e43      	subs	r3, r0, #1
 8008ed6:	42a1      	cmp	r1, r4
 8008ed8:	d008      	beq.n	8008eec <memmove+0x28>
 8008eda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ede:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008ee2:	e7f8      	b.n	8008ed6 <memmove+0x12>
 8008ee4:	4402      	add	r2, r0
 8008ee6:	4601      	mov	r1, r0
 8008ee8:	428a      	cmp	r2, r1
 8008eea:	d100      	bne.n	8008eee <memmove+0x2a>
 8008eec:	bd10      	pop	{r4, pc}
 8008eee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008ef2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008ef6:	e7f7      	b.n	8008ee8 <memmove+0x24>

08008ef8 <strncmp>:
 8008ef8:	b510      	push	{r4, lr}
 8008efa:	b16a      	cbz	r2, 8008f18 <strncmp+0x20>
 8008efc:	3901      	subs	r1, #1
 8008efe:	1884      	adds	r4, r0, r2
 8008f00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f04:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008f08:	429a      	cmp	r2, r3
 8008f0a:	d103      	bne.n	8008f14 <strncmp+0x1c>
 8008f0c:	42a0      	cmp	r0, r4
 8008f0e:	d001      	beq.n	8008f14 <strncmp+0x1c>
 8008f10:	2a00      	cmp	r2, #0
 8008f12:	d1f5      	bne.n	8008f00 <strncmp+0x8>
 8008f14:	1ad0      	subs	r0, r2, r3
 8008f16:	bd10      	pop	{r4, pc}
 8008f18:	4610      	mov	r0, r2
 8008f1a:	e7fc      	b.n	8008f16 <strncmp+0x1e>

08008f1c <_sbrk_r>:
 8008f1c:	b538      	push	{r3, r4, r5, lr}
 8008f1e:	4d06      	ldr	r5, [pc, #24]	@ (8008f38 <_sbrk_r+0x1c>)
 8008f20:	2300      	movs	r3, #0
 8008f22:	4604      	mov	r4, r0
 8008f24:	4608      	mov	r0, r1
 8008f26:	602b      	str	r3, [r5, #0]
 8008f28:	f7f8 fdf4 	bl	8001b14 <_sbrk>
 8008f2c:	1c43      	adds	r3, r0, #1
 8008f2e:	d102      	bne.n	8008f36 <_sbrk_r+0x1a>
 8008f30:	682b      	ldr	r3, [r5, #0]
 8008f32:	b103      	cbz	r3, 8008f36 <_sbrk_r+0x1a>
 8008f34:	6023      	str	r3, [r4, #0]
 8008f36:	bd38      	pop	{r3, r4, r5, pc}
 8008f38:	20000490 	.word	0x20000490

08008f3c <memcpy>:
 8008f3c:	440a      	add	r2, r1
 8008f3e:	4291      	cmp	r1, r2
 8008f40:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f44:	d100      	bne.n	8008f48 <memcpy+0xc>
 8008f46:	4770      	bx	lr
 8008f48:	b510      	push	{r4, lr}
 8008f4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f52:	4291      	cmp	r1, r2
 8008f54:	d1f9      	bne.n	8008f4a <memcpy+0xe>
 8008f56:	bd10      	pop	{r4, pc}

08008f58 <nan>:
 8008f58:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008f60 <nan+0x8>
 8008f5c:	4770      	bx	lr
 8008f5e:	bf00      	nop
 8008f60:	00000000 	.word	0x00000000
 8008f64:	7ff80000 	.word	0x7ff80000

08008f68 <__assert_func>:
 8008f68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008f6a:	4614      	mov	r4, r2
 8008f6c:	461a      	mov	r2, r3
 8008f6e:	4b09      	ldr	r3, [pc, #36]	@ (8008f94 <__assert_func+0x2c>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	4605      	mov	r5, r0
 8008f74:	68d8      	ldr	r0, [r3, #12]
 8008f76:	b14c      	cbz	r4, 8008f8c <__assert_func+0x24>
 8008f78:	4b07      	ldr	r3, [pc, #28]	@ (8008f98 <__assert_func+0x30>)
 8008f7a:	9100      	str	r1, [sp, #0]
 8008f7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008f80:	4906      	ldr	r1, [pc, #24]	@ (8008f9c <__assert_func+0x34>)
 8008f82:	462b      	mov	r3, r5
 8008f84:	f000 fba8 	bl	80096d8 <fiprintf>
 8008f88:	f000 fbb8 	bl	80096fc <abort>
 8008f8c:	4b04      	ldr	r3, [pc, #16]	@ (8008fa0 <__assert_func+0x38>)
 8008f8e:	461c      	mov	r4, r3
 8008f90:	e7f3      	b.n	8008f7a <__assert_func+0x12>
 8008f92:	bf00      	nop
 8008f94:	20000018 	.word	0x20000018
 8008f98:	08009ec6 	.word	0x08009ec6
 8008f9c:	08009ed3 	.word	0x08009ed3
 8008fa0:	08009f01 	.word	0x08009f01

08008fa4 <_calloc_r>:
 8008fa4:	b570      	push	{r4, r5, r6, lr}
 8008fa6:	fba1 5402 	umull	r5, r4, r1, r2
 8008faa:	b934      	cbnz	r4, 8008fba <_calloc_r+0x16>
 8008fac:	4629      	mov	r1, r5
 8008fae:	f7fe f9cb 	bl	8007348 <_malloc_r>
 8008fb2:	4606      	mov	r6, r0
 8008fb4:	b928      	cbnz	r0, 8008fc2 <_calloc_r+0x1e>
 8008fb6:	4630      	mov	r0, r6
 8008fb8:	bd70      	pop	{r4, r5, r6, pc}
 8008fba:	220c      	movs	r2, #12
 8008fbc:	6002      	str	r2, [r0, #0]
 8008fbe:	2600      	movs	r6, #0
 8008fc0:	e7f9      	b.n	8008fb6 <_calloc_r+0x12>
 8008fc2:	462a      	mov	r2, r5
 8008fc4:	4621      	mov	r1, r4
 8008fc6:	f7fd fa64 	bl	8006492 <memset>
 8008fca:	e7f4      	b.n	8008fb6 <_calloc_r+0x12>

08008fcc <rshift>:
 8008fcc:	6903      	ldr	r3, [r0, #16]
 8008fce:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008fd2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008fd6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008fda:	f100 0414 	add.w	r4, r0, #20
 8008fde:	dd45      	ble.n	800906c <rshift+0xa0>
 8008fe0:	f011 011f 	ands.w	r1, r1, #31
 8008fe4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008fe8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008fec:	d10c      	bne.n	8009008 <rshift+0x3c>
 8008fee:	f100 0710 	add.w	r7, r0, #16
 8008ff2:	4629      	mov	r1, r5
 8008ff4:	42b1      	cmp	r1, r6
 8008ff6:	d334      	bcc.n	8009062 <rshift+0x96>
 8008ff8:	1a9b      	subs	r3, r3, r2
 8008ffa:	009b      	lsls	r3, r3, #2
 8008ffc:	1eea      	subs	r2, r5, #3
 8008ffe:	4296      	cmp	r6, r2
 8009000:	bf38      	it	cc
 8009002:	2300      	movcc	r3, #0
 8009004:	4423      	add	r3, r4
 8009006:	e015      	b.n	8009034 <rshift+0x68>
 8009008:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800900c:	f1c1 0820 	rsb	r8, r1, #32
 8009010:	40cf      	lsrs	r7, r1
 8009012:	f105 0e04 	add.w	lr, r5, #4
 8009016:	46a1      	mov	r9, r4
 8009018:	4576      	cmp	r6, lr
 800901a:	46f4      	mov	ip, lr
 800901c:	d815      	bhi.n	800904a <rshift+0x7e>
 800901e:	1a9a      	subs	r2, r3, r2
 8009020:	0092      	lsls	r2, r2, #2
 8009022:	3a04      	subs	r2, #4
 8009024:	3501      	adds	r5, #1
 8009026:	42ae      	cmp	r6, r5
 8009028:	bf38      	it	cc
 800902a:	2200      	movcc	r2, #0
 800902c:	18a3      	adds	r3, r4, r2
 800902e:	50a7      	str	r7, [r4, r2]
 8009030:	b107      	cbz	r7, 8009034 <rshift+0x68>
 8009032:	3304      	adds	r3, #4
 8009034:	1b1a      	subs	r2, r3, r4
 8009036:	42a3      	cmp	r3, r4
 8009038:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800903c:	bf08      	it	eq
 800903e:	2300      	moveq	r3, #0
 8009040:	6102      	str	r2, [r0, #16]
 8009042:	bf08      	it	eq
 8009044:	6143      	streq	r3, [r0, #20]
 8009046:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800904a:	f8dc c000 	ldr.w	ip, [ip]
 800904e:	fa0c fc08 	lsl.w	ip, ip, r8
 8009052:	ea4c 0707 	orr.w	r7, ip, r7
 8009056:	f849 7b04 	str.w	r7, [r9], #4
 800905a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800905e:	40cf      	lsrs	r7, r1
 8009060:	e7da      	b.n	8009018 <rshift+0x4c>
 8009062:	f851 cb04 	ldr.w	ip, [r1], #4
 8009066:	f847 cf04 	str.w	ip, [r7, #4]!
 800906a:	e7c3      	b.n	8008ff4 <rshift+0x28>
 800906c:	4623      	mov	r3, r4
 800906e:	e7e1      	b.n	8009034 <rshift+0x68>

08009070 <__hexdig_fun>:
 8009070:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009074:	2b09      	cmp	r3, #9
 8009076:	d802      	bhi.n	800907e <__hexdig_fun+0xe>
 8009078:	3820      	subs	r0, #32
 800907a:	b2c0      	uxtb	r0, r0
 800907c:	4770      	bx	lr
 800907e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009082:	2b05      	cmp	r3, #5
 8009084:	d801      	bhi.n	800908a <__hexdig_fun+0x1a>
 8009086:	3847      	subs	r0, #71	@ 0x47
 8009088:	e7f7      	b.n	800907a <__hexdig_fun+0xa>
 800908a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800908e:	2b05      	cmp	r3, #5
 8009090:	d801      	bhi.n	8009096 <__hexdig_fun+0x26>
 8009092:	3827      	subs	r0, #39	@ 0x27
 8009094:	e7f1      	b.n	800907a <__hexdig_fun+0xa>
 8009096:	2000      	movs	r0, #0
 8009098:	4770      	bx	lr
	...

0800909c <__gethex>:
 800909c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090a0:	b085      	sub	sp, #20
 80090a2:	468a      	mov	sl, r1
 80090a4:	9302      	str	r3, [sp, #8]
 80090a6:	680b      	ldr	r3, [r1, #0]
 80090a8:	9001      	str	r0, [sp, #4]
 80090aa:	4690      	mov	r8, r2
 80090ac:	1c9c      	adds	r4, r3, #2
 80090ae:	46a1      	mov	r9, r4
 80090b0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80090b4:	2830      	cmp	r0, #48	@ 0x30
 80090b6:	d0fa      	beq.n	80090ae <__gethex+0x12>
 80090b8:	eba9 0303 	sub.w	r3, r9, r3
 80090bc:	f1a3 0b02 	sub.w	fp, r3, #2
 80090c0:	f7ff ffd6 	bl	8009070 <__hexdig_fun>
 80090c4:	4605      	mov	r5, r0
 80090c6:	2800      	cmp	r0, #0
 80090c8:	d168      	bne.n	800919c <__gethex+0x100>
 80090ca:	49a0      	ldr	r1, [pc, #640]	@ (800934c <__gethex+0x2b0>)
 80090cc:	2201      	movs	r2, #1
 80090ce:	4648      	mov	r0, r9
 80090d0:	f7ff ff12 	bl	8008ef8 <strncmp>
 80090d4:	4607      	mov	r7, r0
 80090d6:	2800      	cmp	r0, #0
 80090d8:	d167      	bne.n	80091aa <__gethex+0x10e>
 80090da:	f899 0001 	ldrb.w	r0, [r9, #1]
 80090de:	4626      	mov	r6, r4
 80090e0:	f7ff ffc6 	bl	8009070 <__hexdig_fun>
 80090e4:	2800      	cmp	r0, #0
 80090e6:	d062      	beq.n	80091ae <__gethex+0x112>
 80090e8:	4623      	mov	r3, r4
 80090ea:	7818      	ldrb	r0, [r3, #0]
 80090ec:	2830      	cmp	r0, #48	@ 0x30
 80090ee:	4699      	mov	r9, r3
 80090f0:	f103 0301 	add.w	r3, r3, #1
 80090f4:	d0f9      	beq.n	80090ea <__gethex+0x4e>
 80090f6:	f7ff ffbb 	bl	8009070 <__hexdig_fun>
 80090fa:	fab0 f580 	clz	r5, r0
 80090fe:	096d      	lsrs	r5, r5, #5
 8009100:	f04f 0b01 	mov.w	fp, #1
 8009104:	464a      	mov	r2, r9
 8009106:	4616      	mov	r6, r2
 8009108:	3201      	adds	r2, #1
 800910a:	7830      	ldrb	r0, [r6, #0]
 800910c:	f7ff ffb0 	bl	8009070 <__hexdig_fun>
 8009110:	2800      	cmp	r0, #0
 8009112:	d1f8      	bne.n	8009106 <__gethex+0x6a>
 8009114:	498d      	ldr	r1, [pc, #564]	@ (800934c <__gethex+0x2b0>)
 8009116:	2201      	movs	r2, #1
 8009118:	4630      	mov	r0, r6
 800911a:	f7ff feed 	bl	8008ef8 <strncmp>
 800911e:	2800      	cmp	r0, #0
 8009120:	d13f      	bne.n	80091a2 <__gethex+0x106>
 8009122:	b944      	cbnz	r4, 8009136 <__gethex+0x9a>
 8009124:	1c74      	adds	r4, r6, #1
 8009126:	4622      	mov	r2, r4
 8009128:	4616      	mov	r6, r2
 800912a:	3201      	adds	r2, #1
 800912c:	7830      	ldrb	r0, [r6, #0]
 800912e:	f7ff ff9f 	bl	8009070 <__hexdig_fun>
 8009132:	2800      	cmp	r0, #0
 8009134:	d1f8      	bne.n	8009128 <__gethex+0x8c>
 8009136:	1ba4      	subs	r4, r4, r6
 8009138:	00a7      	lsls	r7, r4, #2
 800913a:	7833      	ldrb	r3, [r6, #0]
 800913c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009140:	2b50      	cmp	r3, #80	@ 0x50
 8009142:	d13e      	bne.n	80091c2 <__gethex+0x126>
 8009144:	7873      	ldrb	r3, [r6, #1]
 8009146:	2b2b      	cmp	r3, #43	@ 0x2b
 8009148:	d033      	beq.n	80091b2 <__gethex+0x116>
 800914a:	2b2d      	cmp	r3, #45	@ 0x2d
 800914c:	d034      	beq.n	80091b8 <__gethex+0x11c>
 800914e:	1c71      	adds	r1, r6, #1
 8009150:	2400      	movs	r4, #0
 8009152:	7808      	ldrb	r0, [r1, #0]
 8009154:	f7ff ff8c 	bl	8009070 <__hexdig_fun>
 8009158:	1e43      	subs	r3, r0, #1
 800915a:	b2db      	uxtb	r3, r3
 800915c:	2b18      	cmp	r3, #24
 800915e:	d830      	bhi.n	80091c2 <__gethex+0x126>
 8009160:	f1a0 0210 	sub.w	r2, r0, #16
 8009164:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009168:	f7ff ff82 	bl	8009070 <__hexdig_fun>
 800916c:	f100 3cff 	add.w	ip, r0, #4294967295
 8009170:	fa5f fc8c 	uxtb.w	ip, ip
 8009174:	f1bc 0f18 	cmp.w	ip, #24
 8009178:	f04f 030a 	mov.w	r3, #10
 800917c:	d91e      	bls.n	80091bc <__gethex+0x120>
 800917e:	b104      	cbz	r4, 8009182 <__gethex+0xe6>
 8009180:	4252      	negs	r2, r2
 8009182:	4417      	add	r7, r2
 8009184:	f8ca 1000 	str.w	r1, [sl]
 8009188:	b1ed      	cbz	r5, 80091c6 <__gethex+0x12a>
 800918a:	f1bb 0f00 	cmp.w	fp, #0
 800918e:	bf0c      	ite	eq
 8009190:	2506      	moveq	r5, #6
 8009192:	2500      	movne	r5, #0
 8009194:	4628      	mov	r0, r5
 8009196:	b005      	add	sp, #20
 8009198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800919c:	2500      	movs	r5, #0
 800919e:	462c      	mov	r4, r5
 80091a0:	e7b0      	b.n	8009104 <__gethex+0x68>
 80091a2:	2c00      	cmp	r4, #0
 80091a4:	d1c7      	bne.n	8009136 <__gethex+0x9a>
 80091a6:	4627      	mov	r7, r4
 80091a8:	e7c7      	b.n	800913a <__gethex+0x9e>
 80091aa:	464e      	mov	r6, r9
 80091ac:	462f      	mov	r7, r5
 80091ae:	2501      	movs	r5, #1
 80091b0:	e7c3      	b.n	800913a <__gethex+0x9e>
 80091b2:	2400      	movs	r4, #0
 80091b4:	1cb1      	adds	r1, r6, #2
 80091b6:	e7cc      	b.n	8009152 <__gethex+0xb6>
 80091b8:	2401      	movs	r4, #1
 80091ba:	e7fb      	b.n	80091b4 <__gethex+0x118>
 80091bc:	fb03 0002 	mla	r0, r3, r2, r0
 80091c0:	e7ce      	b.n	8009160 <__gethex+0xc4>
 80091c2:	4631      	mov	r1, r6
 80091c4:	e7de      	b.n	8009184 <__gethex+0xe8>
 80091c6:	eba6 0309 	sub.w	r3, r6, r9
 80091ca:	3b01      	subs	r3, #1
 80091cc:	4629      	mov	r1, r5
 80091ce:	2b07      	cmp	r3, #7
 80091d0:	dc0a      	bgt.n	80091e8 <__gethex+0x14c>
 80091d2:	9801      	ldr	r0, [sp, #4]
 80091d4:	f7fe f944 	bl	8007460 <_Balloc>
 80091d8:	4604      	mov	r4, r0
 80091da:	b940      	cbnz	r0, 80091ee <__gethex+0x152>
 80091dc:	4b5c      	ldr	r3, [pc, #368]	@ (8009350 <__gethex+0x2b4>)
 80091de:	4602      	mov	r2, r0
 80091e0:	21e4      	movs	r1, #228	@ 0xe4
 80091e2:	485c      	ldr	r0, [pc, #368]	@ (8009354 <__gethex+0x2b8>)
 80091e4:	f7ff fec0 	bl	8008f68 <__assert_func>
 80091e8:	3101      	adds	r1, #1
 80091ea:	105b      	asrs	r3, r3, #1
 80091ec:	e7ef      	b.n	80091ce <__gethex+0x132>
 80091ee:	f100 0a14 	add.w	sl, r0, #20
 80091f2:	2300      	movs	r3, #0
 80091f4:	4655      	mov	r5, sl
 80091f6:	469b      	mov	fp, r3
 80091f8:	45b1      	cmp	r9, r6
 80091fa:	d337      	bcc.n	800926c <__gethex+0x1d0>
 80091fc:	f845 bb04 	str.w	fp, [r5], #4
 8009200:	eba5 050a 	sub.w	r5, r5, sl
 8009204:	10ad      	asrs	r5, r5, #2
 8009206:	6125      	str	r5, [r4, #16]
 8009208:	4658      	mov	r0, fp
 800920a:	f7fe fa1b 	bl	8007644 <__hi0bits>
 800920e:	016d      	lsls	r5, r5, #5
 8009210:	f8d8 6000 	ldr.w	r6, [r8]
 8009214:	1a2d      	subs	r5, r5, r0
 8009216:	42b5      	cmp	r5, r6
 8009218:	dd54      	ble.n	80092c4 <__gethex+0x228>
 800921a:	1bad      	subs	r5, r5, r6
 800921c:	4629      	mov	r1, r5
 800921e:	4620      	mov	r0, r4
 8009220:	f7fe fda7 	bl	8007d72 <__any_on>
 8009224:	4681      	mov	r9, r0
 8009226:	b178      	cbz	r0, 8009248 <__gethex+0x1ac>
 8009228:	1e6b      	subs	r3, r5, #1
 800922a:	1159      	asrs	r1, r3, #5
 800922c:	f003 021f 	and.w	r2, r3, #31
 8009230:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009234:	f04f 0901 	mov.w	r9, #1
 8009238:	fa09 f202 	lsl.w	r2, r9, r2
 800923c:	420a      	tst	r2, r1
 800923e:	d003      	beq.n	8009248 <__gethex+0x1ac>
 8009240:	454b      	cmp	r3, r9
 8009242:	dc36      	bgt.n	80092b2 <__gethex+0x216>
 8009244:	f04f 0902 	mov.w	r9, #2
 8009248:	4629      	mov	r1, r5
 800924a:	4620      	mov	r0, r4
 800924c:	f7ff febe 	bl	8008fcc <rshift>
 8009250:	442f      	add	r7, r5
 8009252:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009256:	42bb      	cmp	r3, r7
 8009258:	da42      	bge.n	80092e0 <__gethex+0x244>
 800925a:	9801      	ldr	r0, [sp, #4]
 800925c:	4621      	mov	r1, r4
 800925e:	f7fe f93f 	bl	80074e0 <_Bfree>
 8009262:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009264:	2300      	movs	r3, #0
 8009266:	6013      	str	r3, [r2, #0]
 8009268:	25a3      	movs	r5, #163	@ 0xa3
 800926a:	e793      	b.n	8009194 <__gethex+0xf8>
 800926c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009270:	2a2e      	cmp	r2, #46	@ 0x2e
 8009272:	d012      	beq.n	800929a <__gethex+0x1fe>
 8009274:	2b20      	cmp	r3, #32
 8009276:	d104      	bne.n	8009282 <__gethex+0x1e6>
 8009278:	f845 bb04 	str.w	fp, [r5], #4
 800927c:	f04f 0b00 	mov.w	fp, #0
 8009280:	465b      	mov	r3, fp
 8009282:	7830      	ldrb	r0, [r6, #0]
 8009284:	9303      	str	r3, [sp, #12]
 8009286:	f7ff fef3 	bl	8009070 <__hexdig_fun>
 800928a:	9b03      	ldr	r3, [sp, #12]
 800928c:	f000 000f 	and.w	r0, r0, #15
 8009290:	4098      	lsls	r0, r3
 8009292:	ea4b 0b00 	orr.w	fp, fp, r0
 8009296:	3304      	adds	r3, #4
 8009298:	e7ae      	b.n	80091f8 <__gethex+0x15c>
 800929a:	45b1      	cmp	r9, r6
 800929c:	d8ea      	bhi.n	8009274 <__gethex+0x1d8>
 800929e:	492b      	ldr	r1, [pc, #172]	@ (800934c <__gethex+0x2b0>)
 80092a0:	9303      	str	r3, [sp, #12]
 80092a2:	2201      	movs	r2, #1
 80092a4:	4630      	mov	r0, r6
 80092a6:	f7ff fe27 	bl	8008ef8 <strncmp>
 80092aa:	9b03      	ldr	r3, [sp, #12]
 80092ac:	2800      	cmp	r0, #0
 80092ae:	d1e1      	bne.n	8009274 <__gethex+0x1d8>
 80092b0:	e7a2      	b.n	80091f8 <__gethex+0x15c>
 80092b2:	1ea9      	subs	r1, r5, #2
 80092b4:	4620      	mov	r0, r4
 80092b6:	f7fe fd5c 	bl	8007d72 <__any_on>
 80092ba:	2800      	cmp	r0, #0
 80092bc:	d0c2      	beq.n	8009244 <__gethex+0x1a8>
 80092be:	f04f 0903 	mov.w	r9, #3
 80092c2:	e7c1      	b.n	8009248 <__gethex+0x1ac>
 80092c4:	da09      	bge.n	80092da <__gethex+0x23e>
 80092c6:	1b75      	subs	r5, r6, r5
 80092c8:	4621      	mov	r1, r4
 80092ca:	9801      	ldr	r0, [sp, #4]
 80092cc:	462a      	mov	r2, r5
 80092ce:	f7fe fb17 	bl	8007900 <__lshift>
 80092d2:	1b7f      	subs	r7, r7, r5
 80092d4:	4604      	mov	r4, r0
 80092d6:	f100 0a14 	add.w	sl, r0, #20
 80092da:	f04f 0900 	mov.w	r9, #0
 80092de:	e7b8      	b.n	8009252 <__gethex+0x1b6>
 80092e0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80092e4:	42bd      	cmp	r5, r7
 80092e6:	dd6f      	ble.n	80093c8 <__gethex+0x32c>
 80092e8:	1bed      	subs	r5, r5, r7
 80092ea:	42ae      	cmp	r6, r5
 80092ec:	dc34      	bgt.n	8009358 <__gethex+0x2bc>
 80092ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80092f2:	2b02      	cmp	r3, #2
 80092f4:	d022      	beq.n	800933c <__gethex+0x2a0>
 80092f6:	2b03      	cmp	r3, #3
 80092f8:	d024      	beq.n	8009344 <__gethex+0x2a8>
 80092fa:	2b01      	cmp	r3, #1
 80092fc:	d115      	bne.n	800932a <__gethex+0x28e>
 80092fe:	42ae      	cmp	r6, r5
 8009300:	d113      	bne.n	800932a <__gethex+0x28e>
 8009302:	2e01      	cmp	r6, #1
 8009304:	d10b      	bne.n	800931e <__gethex+0x282>
 8009306:	9a02      	ldr	r2, [sp, #8]
 8009308:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800930c:	6013      	str	r3, [r2, #0]
 800930e:	2301      	movs	r3, #1
 8009310:	6123      	str	r3, [r4, #16]
 8009312:	f8ca 3000 	str.w	r3, [sl]
 8009316:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009318:	2562      	movs	r5, #98	@ 0x62
 800931a:	601c      	str	r4, [r3, #0]
 800931c:	e73a      	b.n	8009194 <__gethex+0xf8>
 800931e:	1e71      	subs	r1, r6, #1
 8009320:	4620      	mov	r0, r4
 8009322:	f7fe fd26 	bl	8007d72 <__any_on>
 8009326:	2800      	cmp	r0, #0
 8009328:	d1ed      	bne.n	8009306 <__gethex+0x26a>
 800932a:	9801      	ldr	r0, [sp, #4]
 800932c:	4621      	mov	r1, r4
 800932e:	f7fe f8d7 	bl	80074e0 <_Bfree>
 8009332:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009334:	2300      	movs	r3, #0
 8009336:	6013      	str	r3, [r2, #0]
 8009338:	2550      	movs	r5, #80	@ 0x50
 800933a:	e72b      	b.n	8009194 <__gethex+0xf8>
 800933c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800933e:	2b00      	cmp	r3, #0
 8009340:	d1f3      	bne.n	800932a <__gethex+0x28e>
 8009342:	e7e0      	b.n	8009306 <__gethex+0x26a>
 8009344:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009346:	2b00      	cmp	r3, #0
 8009348:	d1dd      	bne.n	8009306 <__gethex+0x26a>
 800934a:	e7ee      	b.n	800932a <__gethex+0x28e>
 800934c:	08009eab 	.word	0x08009eab
 8009350:	08009e41 	.word	0x08009e41
 8009354:	08009f02 	.word	0x08009f02
 8009358:	1e6f      	subs	r7, r5, #1
 800935a:	f1b9 0f00 	cmp.w	r9, #0
 800935e:	d130      	bne.n	80093c2 <__gethex+0x326>
 8009360:	b127      	cbz	r7, 800936c <__gethex+0x2d0>
 8009362:	4639      	mov	r1, r7
 8009364:	4620      	mov	r0, r4
 8009366:	f7fe fd04 	bl	8007d72 <__any_on>
 800936a:	4681      	mov	r9, r0
 800936c:	117a      	asrs	r2, r7, #5
 800936e:	2301      	movs	r3, #1
 8009370:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009374:	f007 071f 	and.w	r7, r7, #31
 8009378:	40bb      	lsls	r3, r7
 800937a:	4213      	tst	r3, r2
 800937c:	4629      	mov	r1, r5
 800937e:	4620      	mov	r0, r4
 8009380:	bf18      	it	ne
 8009382:	f049 0902 	orrne.w	r9, r9, #2
 8009386:	f7ff fe21 	bl	8008fcc <rshift>
 800938a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800938e:	1b76      	subs	r6, r6, r5
 8009390:	2502      	movs	r5, #2
 8009392:	f1b9 0f00 	cmp.w	r9, #0
 8009396:	d047      	beq.n	8009428 <__gethex+0x38c>
 8009398:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800939c:	2b02      	cmp	r3, #2
 800939e:	d015      	beq.n	80093cc <__gethex+0x330>
 80093a0:	2b03      	cmp	r3, #3
 80093a2:	d017      	beq.n	80093d4 <__gethex+0x338>
 80093a4:	2b01      	cmp	r3, #1
 80093a6:	d109      	bne.n	80093bc <__gethex+0x320>
 80093a8:	f019 0f02 	tst.w	r9, #2
 80093ac:	d006      	beq.n	80093bc <__gethex+0x320>
 80093ae:	f8da 3000 	ldr.w	r3, [sl]
 80093b2:	ea49 0903 	orr.w	r9, r9, r3
 80093b6:	f019 0f01 	tst.w	r9, #1
 80093ba:	d10e      	bne.n	80093da <__gethex+0x33e>
 80093bc:	f045 0510 	orr.w	r5, r5, #16
 80093c0:	e032      	b.n	8009428 <__gethex+0x38c>
 80093c2:	f04f 0901 	mov.w	r9, #1
 80093c6:	e7d1      	b.n	800936c <__gethex+0x2d0>
 80093c8:	2501      	movs	r5, #1
 80093ca:	e7e2      	b.n	8009392 <__gethex+0x2f6>
 80093cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80093ce:	f1c3 0301 	rsb	r3, r3, #1
 80093d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80093d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d0f0      	beq.n	80093bc <__gethex+0x320>
 80093da:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80093de:	f104 0314 	add.w	r3, r4, #20
 80093e2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80093e6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80093ea:	f04f 0c00 	mov.w	ip, #0
 80093ee:	4618      	mov	r0, r3
 80093f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80093f4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80093f8:	d01b      	beq.n	8009432 <__gethex+0x396>
 80093fa:	3201      	adds	r2, #1
 80093fc:	6002      	str	r2, [r0, #0]
 80093fe:	2d02      	cmp	r5, #2
 8009400:	f104 0314 	add.w	r3, r4, #20
 8009404:	d13c      	bne.n	8009480 <__gethex+0x3e4>
 8009406:	f8d8 2000 	ldr.w	r2, [r8]
 800940a:	3a01      	subs	r2, #1
 800940c:	42b2      	cmp	r2, r6
 800940e:	d109      	bne.n	8009424 <__gethex+0x388>
 8009410:	1171      	asrs	r1, r6, #5
 8009412:	2201      	movs	r2, #1
 8009414:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009418:	f006 061f 	and.w	r6, r6, #31
 800941c:	fa02 f606 	lsl.w	r6, r2, r6
 8009420:	421e      	tst	r6, r3
 8009422:	d13a      	bne.n	800949a <__gethex+0x3fe>
 8009424:	f045 0520 	orr.w	r5, r5, #32
 8009428:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800942a:	601c      	str	r4, [r3, #0]
 800942c:	9b02      	ldr	r3, [sp, #8]
 800942e:	601f      	str	r7, [r3, #0]
 8009430:	e6b0      	b.n	8009194 <__gethex+0xf8>
 8009432:	4299      	cmp	r1, r3
 8009434:	f843 cc04 	str.w	ip, [r3, #-4]
 8009438:	d8d9      	bhi.n	80093ee <__gethex+0x352>
 800943a:	68a3      	ldr	r3, [r4, #8]
 800943c:	459b      	cmp	fp, r3
 800943e:	db17      	blt.n	8009470 <__gethex+0x3d4>
 8009440:	6861      	ldr	r1, [r4, #4]
 8009442:	9801      	ldr	r0, [sp, #4]
 8009444:	3101      	adds	r1, #1
 8009446:	f7fe f80b 	bl	8007460 <_Balloc>
 800944a:	4681      	mov	r9, r0
 800944c:	b918      	cbnz	r0, 8009456 <__gethex+0x3ba>
 800944e:	4b1a      	ldr	r3, [pc, #104]	@ (80094b8 <__gethex+0x41c>)
 8009450:	4602      	mov	r2, r0
 8009452:	2184      	movs	r1, #132	@ 0x84
 8009454:	e6c5      	b.n	80091e2 <__gethex+0x146>
 8009456:	6922      	ldr	r2, [r4, #16]
 8009458:	3202      	adds	r2, #2
 800945a:	f104 010c 	add.w	r1, r4, #12
 800945e:	0092      	lsls	r2, r2, #2
 8009460:	300c      	adds	r0, #12
 8009462:	f7ff fd6b 	bl	8008f3c <memcpy>
 8009466:	4621      	mov	r1, r4
 8009468:	9801      	ldr	r0, [sp, #4]
 800946a:	f7fe f839 	bl	80074e0 <_Bfree>
 800946e:	464c      	mov	r4, r9
 8009470:	6923      	ldr	r3, [r4, #16]
 8009472:	1c5a      	adds	r2, r3, #1
 8009474:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009478:	6122      	str	r2, [r4, #16]
 800947a:	2201      	movs	r2, #1
 800947c:	615a      	str	r2, [r3, #20]
 800947e:	e7be      	b.n	80093fe <__gethex+0x362>
 8009480:	6922      	ldr	r2, [r4, #16]
 8009482:	455a      	cmp	r2, fp
 8009484:	dd0b      	ble.n	800949e <__gethex+0x402>
 8009486:	2101      	movs	r1, #1
 8009488:	4620      	mov	r0, r4
 800948a:	f7ff fd9f 	bl	8008fcc <rshift>
 800948e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009492:	3701      	adds	r7, #1
 8009494:	42bb      	cmp	r3, r7
 8009496:	f6ff aee0 	blt.w	800925a <__gethex+0x1be>
 800949a:	2501      	movs	r5, #1
 800949c:	e7c2      	b.n	8009424 <__gethex+0x388>
 800949e:	f016 061f 	ands.w	r6, r6, #31
 80094a2:	d0fa      	beq.n	800949a <__gethex+0x3fe>
 80094a4:	4453      	add	r3, sl
 80094a6:	f1c6 0620 	rsb	r6, r6, #32
 80094aa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80094ae:	f7fe f8c9 	bl	8007644 <__hi0bits>
 80094b2:	42b0      	cmp	r0, r6
 80094b4:	dbe7      	blt.n	8009486 <__gethex+0x3ea>
 80094b6:	e7f0      	b.n	800949a <__gethex+0x3fe>
 80094b8:	08009e41 	.word	0x08009e41

080094bc <L_shift>:
 80094bc:	f1c2 0208 	rsb	r2, r2, #8
 80094c0:	0092      	lsls	r2, r2, #2
 80094c2:	b570      	push	{r4, r5, r6, lr}
 80094c4:	f1c2 0620 	rsb	r6, r2, #32
 80094c8:	6843      	ldr	r3, [r0, #4]
 80094ca:	6804      	ldr	r4, [r0, #0]
 80094cc:	fa03 f506 	lsl.w	r5, r3, r6
 80094d0:	432c      	orrs	r4, r5
 80094d2:	40d3      	lsrs	r3, r2
 80094d4:	6004      	str	r4, [r0, #0]
 80094d6:	f840 3f04 	str.w	r3, [r0, #4]!
 80094da:	4288      	cmp	r0, r1
 80094dc:	d3f4      	bcc.n	80094c8 <L_shift+0xc>
 80094de:	bd70      	pop	{r4, r5, r6, pc}

080094e0 <__match>:
 80094e0:	b530      	push	{r4, r5, lr}
 80094e2:	6803      	ldr	r3, [r0, #0]
 80094e4:	3301      	adds	r3, #1
 80094e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094ea:	b914      	cbnz	r4, 80094f2 <__match+0x12>
 80094ec:	6003      	str	r3, [r0, #0]
 80094ee:	2001      	movs	r0, #1
 80094f0:	bd30      	pop	{r4, r5, pc}
 80094f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094f6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80094fa:	2d19      	cmp	r5, #25
 80094fc:	bf98      	it	ls
 80094fe:	3220      	addls	r2, #32
 8009500:	42a2      	cmp	r2, r4
 8009502:	d0f0      	beq.n	80094e6 <__match+0x6>
 8009504:	2000      	movs	r0, #0
 8009506:	e7f3      	b.n	80094f0 <__match+0x10>

08009508 <__hexnan>:
 8009508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800950c:	680b      	ldr	r3, [r1, #0]
 800950e:	6801      	ldr	r1, [r0, #0]
 8009510:	115e      	asrs	r6, r3, #5
 8009512:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009516:	f013 031f 	ands.w	r3, r3, #31
 800951a:	b087      	sub	sp, #28
 800951c:	bf18      	it	ne
 800951e:	3604      	addne	r6, #4
 8009520:	2500      	movs	r5, #0
 8009522:	1f37      	subs	r7, r6, #4
 8009524:	4682      	mov	sl, r0
 8009526:	4690      	mov	r8, r2
 8009528:	9301      	str	r3, [sp, #4]
 800952a:	f846 5c04 	str.w	r5, [r6, #-4]
 800952e:	46b9      	mov	r9, r7
 8009530:	463c      	mov	r4, r7
 8009532:	9502      	str	r5, [sp, #8]
 8009534:	46ab      	mov	fp, r5
 8009536:	784a      	ldrb	r2, [r1, #1]
 8009538:	1c4b      	adds	r3, r1, #1
 800953a:	9303      	str	r3, [sp, #12]
 800953c:	b342      	cbz	r2, 8009590 <__hexnan+0x88>
 800953e:	4610      	mov	r0, r2
 8009540:	9105      	str	r1, [sp, #20]
 8009542:	9204      	str	r2, [sp, #16]
 8009544:	f7ff fd94 	bl	8009070 <__hexdig_fun>
 8009548:	2800      	cmp	r0, #0
 800954a:	d151      	bne.n	80095f0 <__hexnan+0xe8>
 800954c:	9a04      	ldr	r2, [sp, #16]
 800954e:	9905      	ldr	r1, [sp, #20]
 8009550:	2a20      	cmp	r2, #32
 8009552:	d818      	bhi.n	8009586 <__hexnan+0x7e>
 8009554:	9b02      	ldr	r3, [sp, #8]
 8009556:	459b      	cmp	fp, r3
 8009558:	dd13      	ble.n	8009582 <__hexnan+0x7a>
 800955a:	454c      	cmp	r4, r9
 800955c:	d206      	bcs.n	800956c <__hexnan+0x64>
 800955e:	2d07      	cmp	r5, #7
 8009560:	dc04      	bgt.n	800956c <__hexnan+0x64>
 8009562:	462a      	mov	r2, r5
 8009564:	4649      	mov	r1, r9
 8009566:	4620      	mov	r0, r4
 8009568:	f7ff ffa8 	bl	80094bc <L_shift>
 800956c:	4544      	cmp	r4, r8
 800956e:	d952      	bls.n	8009616 <__hexnan+0x10e>
 8009570:	2300      	movs	r3, #0
 8009572:	f1a4 0904 	sub.w	r9, r4, #4
 8009576:	f844 3c04 	str.w	r3, [r4, #-4]
 800957a:	f8cd b008 	str.w	fp, [sp, #8]
 800957e:	464c      	mov	r4, r9
 8009580:	461d      	mov	r5, r3
 8009582:	9903      	ldr	r1, [sp, #12]
 8009584:	e7d7      	b.n	8009536 <__hexnan+0x2e>
 8009586:	2a29      	cmp	r2, #41	@ 0x29
 8009588:	d157      	bne.n	800963a <__hexnan+0x132>
 800958a:	3102      	adds	r1, #2
 800958c:	f8ca 1000 	str.w	r1, [sl]
 8009590:	f1bb 0f00 	cmp.w	fp, #0
 8009594:	d051      	beq.n	800963a <__hexnan+0x132>
 8009596:	454c      	cmp	r4, r9
 8009598:	d206      	bcs.n	80095a8 <__hexnan+0xa0>
 800959a:	2d07      	cmp	r5, #7
 800959c:	dc04      	bgt.n	80095a8 <__hexnan+0xa0>
 800959e:	462a      	mov	r2, r5
 80095a0:	4649      	mov	r1, r9
 80095a2:	4620      	mov	r0, r4
 80095a4:	f7ff ff8a 	bl	80094bc <L_shift>
 80095a8:	4544      	cmp	r4, r8
 80095aa:	d936      	bls.n	800961a <__hexnan+0x112>
 80095ac:	f1a8 0204 	sub.w	r2, r8, #4
 80095b0:	4623      	mov	r3, r4
 80095b2:	f853 1b04 	ldr.w	r1, [r3], #4
 80095b6:	f842 1f04 	str.w	r1, [r2, #4]!
 80095ba:	429f      	cmp	r7, r3
 80095bc:	d2f9      	bcs.n	80095b2 <__hexnan+0xaa>
 80095be:	1b3b      	subs	r3, r7, r4
 80095c0:	f023 0303 	bic.w	r3, r3, #3
 80095c4:	3304      	adds	r3, #4
 80095c6:	3401      	adds	r4, #1
 80095c8:	3e03      	subs	r6, #3
 80095ca:	42b4      	cmp	r4, r6
 80095cc:	bf88      	it	hi
 80095ce:	2304      	movhi	r3, #4
 80095d0:	4443      	add	r3, r8
 80095d2:	2200      	movs	r2, #0
 80095d4:	f843 2b04 	str.w	r2, [r3], #4
 80095d8:	429f      	cmp	r7, r3
 80095da:	d2fb      	bcs.n	80095d4 <__hexnan+0xcc>
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	b91b      	cbnz	r3, 80095e8 <__hexnan+0xe0>
 80095e0:	4547      	cmp	r7, r8
 80095e2:	d128      	bne.n	8009636 <__hexnan+0x12e>
 80095e4:	2301      	movs	r3, #1
 80095e6:	603b      	str	r3, [r7, #0]
 80095e8:	2005      	movs	r0, #5
 80095ea:	b007      	add	sp, #28
 80095ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095f0:	3501      	adds	r5, #1
 80095f2:	2d08      	cmp	r5, #8
 80095f4:	f10b 0b01 	add.w	fp, fp, #1
 80095f8:	dd06      	ble.n	8009608 <__hexnan+0x100>
 80095fa:	4544      	cmp	r4, r8
 80095fc:	d9c1      	bls.n	8009582 <__hexnan+0x7a>
 80095fe:	2300      	movs	r3, #0
 8009600:	f844 3c04 	str.w	r3, [r4, #-4]
 8009604:	2501      	movs	r5, #1
 8009606:	3c04      	subs	r4, #4
 8009608:	6822      	ldr	r2, [r4, #0]
 800960a:	f000 000f 	and.w	r0, r0, #15
 800960e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009612:	6020      	str	r0, [r4, #0]
 8009614:	e7b5      	b.n	8009582 <__hexnan+0x7a>
 8009616:	2508      	movs	r5, #8
 8009618:	e7b3      	b.n	8009582 <__hexnan+0x7a>
 800961a:	9b01      	ldr	r3, [sp, #4]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d0dd      	beq.n	80095dc <__hexnan+0xd4>
 8009620:	f1c3 0320 	rsb	r3, r3, #32
 8009624:	f04f 32ff 	mov.w	r2, #4294967295
 8009628:	40da      	lsrs	r2, r3
 800962a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800962e:	4013      	ands	r3, r2
 8009630:	f846 3c04 	str.w	r3, [r6, #-4]
 8009634:	e7d2      	b.n	80095dc <__hexnan+0xd4>
 8009636:	3f04      	subs	r7, #4
 8009638:	e7d0      	b.n	80095dc <__hexnan+0xd4>
 800963a:	2004      	movs	r0, #4
 800963c:	e7d5      	b.n	80095ea <__hexnan+0xe2>

0800963e <__ascii_mbtowc>:
 800963e:	b082      	sub	sp, #8
 8009640:	b901      	cbnz	r1, 8009644 <__ascii_mbtowc+0x6>
 8009642:	a901      	add	r1, sp, #4
 8009644:	b142      	cbz	r2, 8009658 <__ascii_mbtowc+0x1a>
 8009646:	b14b      	cbz	r3, 800965c <__ascii_mbtowc+0x1e>
 8009648:	7813      	ldrb	r3, [r2, #0]
 800964a:	600b      	str	r3, [r1, #0]
 800964c:	7812      	ldrb	r2, [r2, #0]
 800964e:	1e10      	subs	r0, r2, #0
 8009650:	bf18      	it	ne
 8009652:	2001      	movne	r0, #1
 8009654:	b002      	add	sp, #8
 8009656:	4770      	bx	lr
 8009658:	4610      	mov	r0, r2
 800965a:	e7fb      	b.n	8009654 <__ascii_mbtowc+0x16>
 800965c:	f06f 0001 	mvn.w	r0, #1
 8009660:	e7f8      	b.n	8009654 <__ascii_mbtowc+0x16>

08009662 <_realloc_r>:
 8009662:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009666:	4607      	mov	r7, r0
 8009668:	4614      	mov	r4, r2
 800966a:	460d      	mov	r5, r1
 800966c:	b921      	cbnz	r1, 8009678 <_realloc_r+0x16>
 800966e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009672:	4611      	mov	r1, r2
 8009674:	f7fd be68 	b.w	8007348 <_malloc_r>
 8009678:	b92a      	cbnz	r2, 8009686 <_realloc_r+0x24>
 800967a:	f7fd fdf1 	bl	8007260 <_free_r>
 800967e:	4625      	mov	r5, r4
 8009680:	4628      	mov	r0, r5
 8009682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009686:	f000 f840 	bl	800970a <_malloc_usable_size_r>
 800968a:	4284      	cmp	r4, r0
 800968c:	4606      	mov	r6, r0
 800968e:	d802      	bhi.n	8009696 <_realloc_r+0x34>
 8009690:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009694:	d8f4      	bhi.n	8009680 <_realloc_r+0x1e>
 8009696:	4621      	mov	r1, r4
 8009698:	4638      	mov	r0, r7
 800969a:	f7fd fe55 	bl	8007348 <_malloc_r>
 800969e:	4680      	mov	r8, r0
 80096a0:	b908      	cbnz	r0, 80096a6 <_realloc_r+0x44>
 80096a2:	4645      	mov	r5, r8
 80096a4:	e7ec      	b.n	8009680 <_realloc_r+0x1e>
 80096a6:	42b4      	cmp	r4, r6
 80096a8:	4622      	mov	r2, r4
 80096aa:	4629      	mov	r1, r5
 80096ac:	bf28      	it	cs
 80096ae:	4632      	movcs	r2, r6
 80096b0:	f7ff fc44 	bl	8008f3c <memcpy>
 80096b4:	4629      	mov	r1, r5
 80096b6:	4638      	mov	r0, r7
 80096b8:	f7fd fdd2 	bl	8007260 <_free_r>
 80096bc:	e7f1      	b.n	80096a2 <_realloc_r+0x40>

080096be <__ascii_wctomb>:
 80096be:	4603      	mov	r3, r0
 80096c0:	4608      	mov	r0, r1
 80096c2:	b141      	cbz	r1, 80096d6 <__ascii_wctomb+0x18>
 80096c4:	2aff      	cmp	r2, #255	@ 0xff
 80096c6:	d904      	bls.n	80096d2 <__ascii_wctomb+0x14>
 80096c8:	228a      	movs	r2, #138	@ 0x8a
 80096ca:	601a      	str	r2, [r3, #0]
 80096cc:	f04f 30ff 	mov.w	r0, #4294967295
 80096d0:	4770      	bx	lr
 80096d2:	700a      	strb	r2, [r1, #0]
 80096d4:	2001      	movs	r0, #1
 80096d6:	4770      	bx	lr

080096d8 <fiprintf>:
 80096d8:	b40e      	push	{r1, r2, r3}
 80096da:	b503      	push	{r0, r1, lr}
 80096dc:	4601      	mov	r1, r0
 80096de:	ab03      	add	r3, sp, #12
 80096e0:	4805      	ldr	r0, [pc, #20]	@ (80096f8 <fiprintf+0x20>)
 80096e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80096e6:	6800      	ldr	r0, [r0, #0]
 80096e8:	9301      	str	r3, [sp, #4]
 80096ea:	f000 f83f 	bl	800976c <_vfiprintf_r>
 80096ee:	b002      	add	sp, #8
 80096f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80096f4:	b003      	add	sp, #12
 80096f6:	4770      	bx	lr
 80096f8:	20000018 	.word	0x20000018

080096fc <abort>:
 80096fc:	b508      	push	{r3, lr}
 80096fe:	2006      	movs	r0, #6
 8009700:	f000 fa08 	bl	8009b14 <raise>
 8009704:	2001      	movs	r0, #1
 8009706:	f7f8 f98d 	bl	8001a24 <_exit>

0800970a <_malloc_usable_size_r>:
 800970a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800970e:	1f18      	subs	r0, r3, #4
 8009710:	2b00      	cmp	r3, #0
 8009712:	bfbc      	itt	lt
 8009714:	580b      	ldrlt	r3, [r1, r0]
 8009716:	18c0      	addlt	r0, r0, r3
 8009718:	4770      	bx	lr

0800971a <__sfputc_r>:
 800971a:	6893      	ldr	r3, [r2, #8]
 800971c:	3b01      	subs	r3, #1
 800971e:	2b00      	cmp	r3, #0
 8009720:	b410      	push	{r4}
 8009722:	6093      	str	r3, [r2, #8]
 8009724:	da08      	bge.n	8009738 <__sfputc_r+0x1e>
 8009726:	6994      	ldr	r4, [r2, #24]
 8009728:	42a3      	cmp	r3, r4
 800972a:	db01      	blt.n	8009730 <__sfputc_r+0x16>
 800972c:	290a      	cmp	r1, #10
 800972e:	d103      	bne.n	8009738 <__sfputc_r+0x1e>
 8009730:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009734:	f000 b932 	b.w	800999c <__swbuf_r>
 8009738:	6813      	ldr	r3, [r2, #0]
 800973a:	1c58      	adds	r0, r3, #1
 800973c:	6010      	str	r0, [r2, #0]
 800973e:	7019      	strb	r1, [r3, #0]
 8009740:	4608      	mov	r0, r1
 8009742:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009746:	4770      	bx	lr

08009748 <__sfputs_r>:
 8009748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800974a:	4606      	mov	r6, r0
 800974c:	460f      	mov	r7, r1
 800974e:	4614      	mov	r4, r2
 8009750:	18d5      	adds	r5, r2, r3
 8009752:	42ac      	cmp	r4, r5
 8009754:	d101      	bne.n	800975a <__sfputs_r+0x12>
 8009756:	2000      	movs	r0, #0
 8009758:	e007      	b.n	800976a <__sfputs_r+0x22>
 800975a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800975e:	463a      	mov	r2, r7
 8009760:	4630      	mov	r0, r6
 8009762:	f7ff ffda 	bl	800971a <__sfputc_r>
 8009766:	1c43      	adds	r3, r0, #1
 8009768:	d1f3      	bne.n	8009752 <__sfputs_r+0xa>
 800976a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800976c <_vfiprintf_r>:
 800976c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009770:	460d      	mov	r5, r1
 8009772:	b09d      	sub	sp, #116	@ 0x74
 8009774:	4614      	mov	r4, r2
 8009776:	4698      	mov	r8, r3
 8009778:	4606      	mov	r6, r0
 800977a:	b118      	cbz	r0, 8009784 <_vfiprintf_r+0x18>
 800977c:	6a03      	ldr	r3, [r0, #32]
 800977e:	b90b      	cbnz	r3, 8009784 <_vfiprintf_r+0x18>
 8009780:	f7fc fdec 	bl	800635c <__sinit>
 8009784:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009786:	07d9      	lsls	r1, r3, #31
 8009788:	d405      	bmi.n	8009796 <_vfiprintf_r+0x2a>
 800978a:	89ab      	ldrh	r3, [r5, #12]
 800978c:	059a      	lsls	r2, r3, #22
 800978e:	d402      	bmi.n	8009796 <_vfiprintf_r+0x2a>
 8009790:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009792:	f7fc fefc 	bl	800658e <__retarget_lock_acquire_recursive>
 8009796:	89ab      	ldrh	r3, [r5, #12]
 8009798:	071b      	lsls	r3, r3, #28
 800979a:	d501      	bpl.n	80097a0 <_vfiprintf_r+0x34>
 800979c:	692b      	ldr	r3, [r5, #16]
 800979e:	b99b      	cbnz	r3, 80097c8 <_vfiprintf_r+0x5c>
 80097a0:	4629      	mov	r1, r5
 80097a2:	4630      	mov	r0, r6
 80097a4:	f000 f938 	bl	8009a18 <__swsetup_r>
 80097a8:	b170      	cbz	r0, 80097c8 <_vfiprintf_r+0x5c>
 80097aa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80097ac:	07dc      	lsls	r4, r3, #31
 80097ae:	d504      	bpl.n	80097ba <_vfiprintf_r+0x4e>
 80097b0:	f04f 30ff 	mov.w	r0, #4294967295
 80097b4:	b01d      	add	sp, #116	@ 0x74
 80097b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097ba:	89ab      	ldrh	r3, [r5, #12]
 80097bc:	0598      	lsls	r0, r3, #22
 80097be:	d4f7      	bmi.n	80097b0 <_vfiprintf_r+0x44>
 80097c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80097c2:	f7fc fee5 	bl	8006590 <__retarget_lock_release_recursive>
 80097c6:	e7f3      	b.n	80097b0 <_vfiprintf_r+0x44>
 80097c8:	2300      	movs	r3, #0
 80097ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80097cc:	2320      	movs	r3, #32
 80097ce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80097d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80097d6:	2330      	movs	r3, #48	@ 0x30
 80097d8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009988 <_vfiprintf_r+0x21c>
 80097dc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80097e0:	f04f 0901 	mov.w	r9, #1
 80097e4:	4623      	mov	r3, r4
 80097e6:	469a      	mov	sl, r3
 80097e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097ec:	b10a      	cbz	r2, 80097f2 <_vfiprintf_r+0x86>
 80097ee:	2a25      	cmp	r2, #37	@ 0x25
 80097f0:	d1f9      	bne.n	80097e6 <_vfiprintf_r+0x7a>
 80097f2:	ebba 0b04 	subs.w	fp, sl, r4
 80097f6:	d00b      	beq.n	8009810 <_vfiprintf_r+0xa4>
 80097f8:	465b      	mov	r3, fp
 80097fa:	4622      	mov	r2, r4
 80097fc:	4629      	mov	r1, r5
 80097fe:	4630      	mov	r0, r6
 8009800:	f7ff ffa2 	bl	8009748 <__sfputs_r>
 8009804:	3001      	adds	r0, #1
 8009806:	f000 80a7 	beq.w	8009958 <_vfiprintf_r+0x1ec>
 800980a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800980c:	445a      	add	r2, fp
 800980e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009810:	f89a 3000 	ldrb.w	r3, [sl]
 8009814:	2b00      	cmp	r3, #0
 8009816:	f000 809f 	beq.w	8009958 <_vfiprintf_r+0x1ec>
 800981a:	2300      	movs	r3, #0
 800981c:	f04f 32ff 	mov.w	r2, #4294967295
 8009820:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009824:	f10a 0a01 	add.w	sl, sl, #1
 8009828:	9304      	str	r3, [sp, #16]
 800982a:	9307      	str	r3, [sp, #28]
 800982c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009830:	931a      	str	r3, [sp, #104]	@ 0x68
 8009832:	4654      	mov	r4, sl
 8009834:	2205      	movs	r2, #5
 8009836:	f814 1b01 	ldrb.w	r1, [r4], #1
 800983a:	4853      	ldr	r0, [pc, #332]	@ (8009988 <_vfiprintf_r+0x21c>)
 800983c:	f7f6 fcf0 	bl	8000220 <memchr>
 8009840:	9a04      	ldr	r2, [sp, #16]
 8009842:	b9d8      	cbnz	r0, 800987c <_vfiprintf_r+0x110>
 8009844:	06d1      	lsls	r1, r2, #27
 8009846:	bf44      	itt	mi
 8009848:	2320      	movmi	r3, #32
 800984a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800984e:	0713      	lsls	r3, r2, #28
 8009850:	bf44      	itt	mi
 8009852:	232b      	movmi	r3, #43	@ 0x2b
 8009854:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009858:	f89a 3000 	ldrb.w	r3, [sl]
 800985c:	2b2a      	cmp	r3, #42	@ 0x2a
 800985e:	d015      	beq.n	800988c <_vfiprintf_r+0x120>
 8009860:	9a07      	ldr	r2, [sp, #28]
 8009862:	4654      	mov	r4, sl
 8009864:	2000      	movs	r0, #0
 8009866:	f04f 0c0a 	mov.w	ip, #10
 800986a:	4621      	mov	r1, r4
 800986c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009870:	3b30      	subs	r3, #48	@ 0x30
 8009872:	2b09      	cmp	r3, #9
 8009874:	d94b      	bls.n	800990e <_vfiprintf_r+0x1a2>
 8009876:	b1b0      	cbz	r0, 80098a6 <_vfiprintf_r+0x13a>
 8009878:	9207      	str	r2, [sp, #28]
 800987a:	e014      	b.n	80098a6 <_vfiprintf_r+0x13a>
 800987c:	eba0 0308 	sub.w	r3, r0, r8
 8009880:	fa09 f303 	lsl.w	r3, r9, r3
 8009884:	4313      	orrs	r3, r2
 8009886:	9304      	str	r3, [sp, #16]
 8009888:	46a2      	mov	sl, r4
 800988a:	e7d2      	b.n	8009832 <_vfiprintf_r+0xc6>
 800988c:	9b03      	ldr	r3, [sp, #12]
 800988e:	1d19      	adds	r1, r3, #4
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	9103      	str	r1, [sp, #12]
 8009894:	2b00      	cmp	r3, #0
 8009896:	bfbb      	ittet	lt
 8009898:	425b      	neglt	r3, r3
 800989a:	f042 0202 	orrlt.w	r2, r2, #2
 800989e:	9307      	strge	r3, [sp, #28]
 80098a0:	9307      	strlt	r3, [sp, #28]
 80098a2:	bfb8      	it	lt
 80098a4:	9204      	strlt	r2, [sp, #16]
 80098a6:	7823      	ldrb	r3, [r4, #0]
 80098a8:	2b2e      	cmp	r3, #46	@ 0x2e
 80098aa:	d10a      	bne.n	80098c2 <_vfiprintf_r+0x156>
 80098ac:	7863      	ldrb	r3, [r4, #1]
 80098ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80098b0:	d132      	bne.n	8009918 <_vfiprintf_r+0x1ac>
 80098b2:	9b03      	ldr	r3, [sp, #12]
 80098b4:	1d1a      	adds	r2, r3, #4
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	9203      	str	r2, [sp, #12]
 80098ba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80098be:	3402      	adds	r4, #2
 80098c0:	9305      	str	r3, [sp, #20]
 80098c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009998 <_vfiprintf_r+0x22c>
 80098c6:	7821      	ldrb	r1, [r4, #0]
 80098c8:	2203      	movs	r2, #3
 80098ca:	4650      	mov	r0, sl
 80098cc:	f7f6 fca8 	bl	8000220 <memchr>
 80098d0:	b138      	cbz	r0, 80098e2 <_vfiprintf_r+0x176>
 80098d2:	9b04      	ldr	r3, [sp, #16]
 80098d4:	eba0 000a 	sub.w	r0, r0, sl
 80098d8:	2240      	movs	r2, #64	@ 0x40
 80098da:	4082      	lsls	r2, r0
 80098dc:	4313      	orrs	r3, r2
 80098de:	3401      	adds	r4, #1
 80098e0:	9304      	str	r3, [sp, #16]
 80098e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098e6:	4829      	ldr	r0, [pc, #164]	@ (800998c <_vfiprintf_r+0x220>)
 80098e8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80098ec:	2206      	movs	r2, #6
 80098ee:	f7f6 fc97 	bl	8000220 <memchr>
 80098f2:	2800      	cmp	r0, #0
 80098f4:	d03f      	beq.n	8009976 <_vfiprintf_r+0x20a>
 80098f6:	4b26      	ldr	r3, [pc, #152]	@ (8009990 <_vfiprintf_r+0x224>)
 80098f8:	bb1b      	cbnz	r3, 8009942 <_vfiprintf_r+0x1d6>
 80098fa:	9b03      	ldr	r3, [sp, #12]
 80098fc:	3307      	adds	r3, #7
 80098fe:	f023 0307 	bic.w	r3, r3, #7
 8009902:	3308      	adds	r3, #8
 8009904:	9303      	str	r3, [sp, #12]
 8009906:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009908:	443b      	add	r3, r7
 800990a:	9309      	str	r3, [sp, #36]	@ 0x24
 800990c:	e76a      	b.n	80097e4 <_vfiprintf_r+0x78>
 800990e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009912:	460c      	mov	r4, r1
 8009914:	2001      	movs	r0, #1
 8009916:	e7a8      	b.n	800986a <_vfiprintf_r+0xfe>
 8009918:	2300      	movs	r3, #0
 800991a:	3401      	adds	r4, #1
 800991c:	9305      	str	r3, [sp, #20]
 800991e:	4619      	mov	r1, r3
 8009920:	f04f 0c0a 	mov.w	ip, #10
 8009924:	4620      	mov	r0, r4
 8009926:	f810 2b01 	ldrb.w	r2, [r0], #1
 800992a:	3a30      	subs	r2, #48	@ 0x30
 800992c:	2a09      	cmp	r2, #9
 800992e:	d903      	bls.n	8009938 <_vfiprintf_r+0x1cc>
 8009930:	2b00      	cmp	r3, #0
 8009932:	d0c6      	beq.n	80098c2 <_vfiprintf_r+0x156>
 8009934:	9105      	str	r1, [sp, #20]
 8009936:	e7c4      	b.n	80098c2 <_vfiprintf_r+0x156>
 8009938:	fb0c 2101 	mla	r1, ip, r1, r2
 800993c:	4604      	mov	r4, r0
 800993e:	2301      	movs	r3, #1
 8009940:	e7f0      	b.n	8009924 <_vfiprintf_r+0x1b8>
 8009942:	ab03      	add	r3, sp, #12
 8009944:	9300      	str	r3, [sp, #0]
 8009946:	462a      	mov	r2, r5
 8009948:	4b12      	ldr	r3, [pc, #72]	@ (8009994 <_vfiprintf_r+0x228>)
 800994a:	a904      	add	r1, sp, #16
 800994c:	4630      	mov	r0, r6
 800994e:	f7fb feb5 	bl	80056bc <_printf_float>
 8009952:	4607      	mov	r7, r0
 8009954:	1c78      	adds	r0, r7, #1
 8009956:	d1d6      	bne.n	8009906 <_vfiprintf_r+0x19a>
 8009958:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800995a:	07d9      	lsls	r1, r3, #31
 800995c:	d405      	bmi.n	800996a <_vfiprintf_r+0x1fe>
 800995e:	89ab      	ldrh	r3, [r5, #12]
 8009960:	059a      	lsls	r2, r3, #22
 8009962:	d402      	bmi.n	800996a <_vfiprintf_r+0x1fe>
 8009964:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009966:	f7fc fe13 	bl	8006590 <__retarget_lock_release_recursive>
 800996a:	89ab      	ldrh	r3, [r5, #12]
 800996c:	065b      	lsls	r3, r3, #25
 800996e:	f53f af1f 	bmi.w	80097b0 <_vfiprintf_r+0x44>
 8009972:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009974:	e71e      	b.n	80097b4 <_vfiprintf_r+0x48>
 8009976:	ab03      	add	r3, sp, #12
 8009978:	9300      	str	r3, [sp, #0]
 800997a:	462a      	mov	r2, r5
 800997c:	4b05      	ldr	r3, [pc, #20]	@ (8009994 <_vfiprintf_r+0x228>)
 800997e:	a904      	add	r1, sp, #16
 8009980:	4630      	mov	r0, r6
 8009982:	f7fc f933 	bl	8005bec <_printf_i>
 8009986:	e7e4      	b.n	8009952 <_vfiprintf_r+0x1e6>
 8009988:	08009ead 	.word	0x08009ead
 800998c:	08009eb7 	.word	0x08009eb7
 8009990:	080056bd 	.word	0x080056bd
 8009994:	08009749 	.word	0x08009749
 8009998:	08009eb3 	.word	0x08009eb3

0800999c <__swbuf_r>:
 800999c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800999e:	460e      	mov	r6, r1
 80099a0:	4614      	mov	r4, r2
 80099a2:	4605      	mov	r5, r0
 80099a4:	b118      	cbz	r0, 80099ae <__swbuf_r+0x12>
 80099a6:	6a03      	ldr	r3, [r0, #32]
 80099a8:	b90b      	cbnz	r3, 80099ae <__swbuf_r+0x12>
 80099aa:	f7fc fcd7 	bl	800635c <__sinit>
 80099ae:	69a3      	ldr	r3, [r4, #24]
 80099b0:	60a3      	str	r3, [r4, #8]
 80099b2:	89a3      	ldrh	r3, [r4, #12]
 80099b4:	071a      	lsls	r2, r3, #28
 80099b6:	d501      	bpl.n	80099bc <__swbuf_r+0x20>
 80099b8:	6923      	ldr	r3, [r4, #16]
 80099ba:	b943      	cbnz	r3, 80099ce <__swbuf_r+0x32>
 80099bc:	4621      	mov	r1, r4
 80099be:	4628      	mov	r0, r5
 80099c0:	f000 f82a 	bl	8009a18 <__swsetup_r>
 80099c4:	b118      	cbz	r0, 80099ce <__swbuf_r+0x32>
 80099c6:	f04f 37ff 	mov.w	r7, #4294967295
 80099ca:	4638      	mov	r0, r7
 80099cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099ce:	6823      	ldr	r3, [r4, #0]
 80099d0:	6922      	ldr	r2, [r4, #16]
 80099d2:	1a98      	subs	r0, r3, r2
 80099d4:	6963      	ldr	r3, [r4, #20]
 80099d6:	b2f6      	uxtb	r6, r6
 80099d8:	4283      	cmp	r3, r0
 80099da:	4637      	mov	r7, r6
 80099dc:	dc05      	bgt.n	80099ea <__swbuf_r+0x4e>
 80099de:	4621      	mov	r1, r4
 80099e0:	4628      	mov	r0, r5
 80099e2:	f7ff fa47 	bl	8008e74 <_fflush_r>
 80099e6:	2800      	cmp	r0, #0
 80099e8:	d1ed      	bne.n	80099c6 <__swbuf_r+0x2a>
 80099ea:	68a3      	ldr	r3, [r4, #8]
 80099ec:	3b01      	subs	r3, #1
 80099ee:	60a3      	str	r3, [r4, #8]
 80099f0:	6823      	ldr	r3, [r4, #0]
 80099f2:	1c5a      	adds	r2, r3, #1
 80099f4:	6022      	str	r2, [r4, #0]
 80099f6:	701e      	strb	r6, [r3, #0]
 80099f8:	6962      	ldr	r2, [r4, #20]
 80099fa:	1c43      	adds	r3, r0, #1
 80099fc:	429a      	cmp	r2, r3
 80099fe:	d004      	beq.n	8009a0a <__swbuf_r+0x6e>
 8009a00:	89a3      	ldrh	r3, [r4, #12]
 8009a02:	07db      	lsls	r3, r3, #31
 8009a04:	d5e1      	bpl.n	80099ca <__swbuf_r+0x2e>
 8009a06:	2e0a      	cmp	r6, #10
 8009a08:	d1df      	bne.n	80099ca <__swbuf_r+0x2e>
 8009a0a:	4621      	mov	r1, r4
 8009a0c:	4628      	mov	r0, r5
 8009a0e:	f7ff fa31 	bl	8008e74 <_fflush_r>
 8009a12:	2800      	cmp	r0, #0
 8009a14:	d0d9      	beq.n	80099ca <__swbuf_r+0x2e>
 8009a16:	e7d6      	b.n	80099c6 <__swbuf_r+0x2a>

08009a18 <__swsetup_r>:
 8009a18:	b538      	push	{r3, r4, r5, lr}
 8009a1a:	4b29      	ldr	r3, [pc, #164]	@ (8009ac0 <__swsetup_r+0xa8>)
 8009a1c:	4605      	mov	r5, r0
 8009a1e:	6818      	ldr	r0, [r3, #0]
 8009a20:	460c      	mov	r4, r1
 8009a22:	b118      	cbz	r0, 8009a2c <__swsetup_r+0x14>
 8009a24:	6a03      	ldr	r3, [r0, #32]
 8009a26:	b90b      	cbnz	r3, 8009a2c <__swsetup_r+0x14>
 8009a28:	f7fc fc98 	bl	800635c <__sinit>
 8009a2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a30:	0719      	lsls	r1, r3, #28
 8009a32:	d422      	bmi.n	8009a7a <__swsetup_r+0x62>
 8009a34:	06da      	lsls	r2, r3, #27
 8009a36:	d407      	bmi.n	8009a48 <__swsetup_r+0x30>
 8009a38:	2209      	movs	r2, #9
 8009a3a:	602a      	str	r2, [r5, #0]
 8009a3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a40:	81a3      	strh	r3, [r4, #12]
 8009a42:	f04f 30ff 	mov.w	r0, #4294967295
 8009a46:	e033      	b.n	8009ab0 <__swsetup_r+0x98>
 8009a48:	0758      	lsls	r0, r3, #29
 8009a4a:	d512      	bpl.n	8009a72 <__swsetup_r+0x5a>
 8009a4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009a4e:	b141      	cbz	r1, 8009a62 <__swsetup_r+0x4a>
 8009a50:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009a54:	4299      	cmp	r1, r3
 8009a56:	d002      	beq.n	8009a5e <__swsetup_r+0x46>
 8009a58:	4628      	mov	r0, r5
 8009a5a:	f7fd fc01 	bl	8007260 <_free_r>
 8009a5e:	2300      	movs	r3, #0
 8009a60:	6363      	str	r3, [r4, #52]	@ 0x34
 8009a62:	89a3      	ldrh	r3, [r4, #12]
 8009a64:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009a68:	81a3      	strh	r3, [r4, #12]
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	6063      	str	r3, [r4, #4]
 8009a6e:	6923      	ldr	r3, [r4, #16]
 8009a70:	6023      	str	r3, [r4, #0]
 8009a72:	89a3      	ldrh	r3, [r4, #12]
 8009a74:	f043 0308 	orr.w	r3, r3, #8
 8009a78:	81a3      	strh	r3, [r4, #12]
 8009a7a:	6923      	ldr	r3, [r4, #16]
 8009a7c:	b94b      	cbnz	r3, 8009a92 <__swsetup_r+0x7a>
 8009a7e:	89a3      	ldrh	r3, [r4, #12]
 8009a80:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009a84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a88:	d003      	beq.n	8009a92 <__swsetup_r+0x7a>
 8009a8a:	4621      	mov	r1, r4
 8009a8c:	4628      	mov	r0, r5
 8009a8e:	f000 f883 	bl	8009b98 <__smakebuf_r>
 8009a92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a96:	f013 0201 	ands.w	r2, r3, #1
 8009a9a:	d00a      	beq.n	8009ab2 <__swsetup_r+0x9a>
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	60a2      	str	r2, [r4, #8]
 8009aa0:	6962      	ldr	r2, [r4, #20]
 8009aa2:	4252      	negs	r2, r2
 8009aa4:	61a2      	str	r2, [r4, #24]
 8009aa6:	6922      	ldr	r2, [r4, #16]
 8009aa8:	b942      	cbnz	r2, 8009abc <__swsetup_r+0xa4>
 8009aaa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009aae:	d1c5      	bne.n	8009a3c <__swsetup_r+0x24>
 8009ab0:	bd38      	pop	{r3, r4, r5, pc}
 8009ab2:	0799      	lsls	r1, r3, #30
 8009ab4:	bf58      	it	pl
 8009ab6:	6962      	ldrpl	r2, [r4, #20]
 8009ab8:	60a2      	str	r2, [r4, #8]
 8009aba:	e7f4      	b.n	8009aa6 <__swsetup_r+0x8e>
 8009abc:	2000      	movs	r0, #0
 8009abe:	e7f7      	b.n	8009ab0 <__swsetup_r+0x98>
 8009ac0:	20000018 	.word	0x20000018

08009ac4 <_raise_r>:
 8009ac4:	291f      	cmp	r1, #31
 8009ac6:	b538      	push	{r3, r4, r5, lr}
 8009ac8:	4605      	mov	r5, r0
 8009aca:	460c      	mov	r4, r1
 8009acc:	d904      	bls.n	8009ad8 <_raise_r+0x14>
 8009ace:	2316      	movs	r3, #22
 8009ad0:	6003      	str	r3, [r0, #0]
 8009ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8009ad6:	bd38      	pop	{r3, r4, r5, pc}
 8009ad8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009ada:	b112      	cbz	r2, 8009ae2 <_raise_r+0x1e>
 8009adc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009ae0:	b94b      	cbnz	r3, 8009af6 <_raise_r+0x32>
 8009ae2:	4628      	mov	r0, r5
 8009ae4:	f000 f830 	bl	8009b48 <_getpid_r>
 8009ae8:	4622      	mov	r2, r4
 8009aea:	4601      	mov	r1, r0
 8009aec:	4628      	mov	r0, r5
 8009aee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009af2:	f000 b817 	b.w	8009b24 <_kill_r>
 8009af6:	2b01      	cmp	r3, #1
 8009af8:	d00a      	beq.n	8009b10 <_raise_r+0x4c>
 8009afa:	1c59      	adds	r1, r3, #1
 8009afc:	d103      	bne.n	8009b06 <_raise_r+0x42>
 8009afe:	2316      	movs	r3, #22
 8009b00:	6003      	str	r3, [r0, #0]
 8009b02:	2001      	movs	r0, #1
 8009b04:	e7e7      	b.n	8009ad6 <_raise_r+0x12>
 8009b06:	2100      	movs	r1, #0
 8009b08:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009b0c:	4620      	mov	r0, r4
 8009b0e:	4798      	blx	r3
 8009b10:	2000      	movs	r0, #0
 8009b12:	e7e0      	b.n	8009ad6 <_raise_r+0x12>

08009b14 <raise>:
 8009b14:	4b02      	ldr	r3, [pc, #8]	@ (8009b20 <raise+0xc>)
 8009b16:	4601      	mov	r1, r0
 8009b18:	6818      	ldr	r0, [r3, #0]
 8009b1a:	f7ff bfd3 	b.w	8009ac4 <_raise_r>
 8009b1e:	bf00      	nop
 8009b20:	20000018 	.word	0x20000018

08009b24 <_kill_r>:
 8009b24:	b538      	push	{r3, r4, r5, lr}
 8009b26:	4d07      	ldr	r5, [pc, #28]	@ (8009b44 <_kill_r+0x20>)
 8009b28:	2300      	movs	r3, #0
 8009b2a:	4604      	mov	r4, r0
 8009b2c:	4608      	mov	r0, r1
 8009b2e:	4611      	mov	r1, r2
 8009b30:	602b      	str	r3, [r5, #0]
 8009b32:	f7f7 ff67 	bl	8001a04 <_kill>
 8009b36:	1c43      	adds	r3, r0, #1
 8009b38:	d102      	bne.n	8009b40 <_kill_r+0x1c>
 8009b3a:	682b      	ldr	r3, [r5, #0]
 8009b3c:	b103      	cbz	r3, 8009b40 <_kill_r+0x1c>
 8009b3e:	6023      	str	r3, [r4, #0]
 8009b40:	bd38      	pop	{r3, r4, r5, pc}
 8009b42:	bf00      	nop
 8009b44:	20000490 	.word	0x20000490

08009b48 <_getpid_r>:
 8009b48:	f7f7 bf54 	b.w	80019f4 <_getpid>

08009b4c <__swhatbuf_r>:
 8009b4c:	b570      	push	{r4, r5, r6, lr}
 8009b4e:	460c      	mov	r4, r1
 8009b50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b54:	2900      	cmp	r1, #0
 8009b56:	b096      	sub	sp, #88	@ 0x58
 8009b58:	4615      	mov	r5, r2
 8009b5a:	461e      	mov	r6, r3
 8009b5c:	da0d      	bge.n	8009b7a <__swhatbuf_r+0x2e>
 8009b5e:	89a3      	ldrh	r3, [r4, #12]
 8009b60:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009b64:	f04f 0100 	mov.w	r1, #0
 8009b68:	bf14      	ite	ne
 8009b6a:	2340      	movne	r3, #64	@ 0x40
 8009b6c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009b70:	2000      	movs	r0, #0
 8009b72:	6031      	str	r1, [r6, #0]
 8009b74:	602b      	str	r3, [r5, #0]
 8009b76:	b016      	add	sp, #88	@ 0x58
 8009b78:	bd70      	pop	{r4, r5, r6, pc}
 8009b7a:	466a      	mov	r2, sp
 8009b7c:	f000 f848 	bl	8009c10 <_fstat_r>
 8009b80:	2800      	cmp	r0, #0
 8009b82:	dbec      	blt.n	8009b5e <__swhatbuf_r+0x12>
 8009b84:	9901      	ldr	r1, [sp, #4]
 8009b86:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009b8a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009b8e:	4259      	negs	r1, r3
 8009b90:	4159      	adcs	r1, r3
 8009b92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009b96:	e7eb      	b.n	8009b70 <__swhatbuf_r+0x24>

08009b98 <__smakebuf_r>:
 8009b98:	898b      	ldrh	r3, [r1, #12]
 8009b9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b9c:	079d      	lsls	r5, r3, #30
 8009b9e:	4606      	mov	r6, r0
 8009ba0:	460c      	mov	r4, r1
 8009ba2:	d507      	bpl.n	8009bb4 <__smakebuf_r+0x1c>
 8009ba4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009ba8:	6023      	str	r3, [r4, #0]
 8009baa:	6123      	str	r3, [r4, #16]
 8009bac:	2301      	movs	r3, #1
 8009bae:	6163      	str	r3, [r4, #20]
 8009bb0:	b003      	add	sp, #12
 8009bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bb4:	ab01      	add	r3, sp, #4
 8009bb6:	466a      	mov	r2, sp
 8009bb8:	f7ff ffc8 	bl	8009b4c <__swhatbuf_r>
 8009bbc:	9f00      	ldr	r7, [sp, #0]
 8009bbe:	4605      	mov	r5, r0
 8009bc0:	4639      	mov	r1, r7
 8009bc2:	4630      	mov	r0, r6
 8009bc4:	f7fd fbc0 	bl	8007348 <_malloc_r>
 8009bc8:	b948      	cbnz	r0, 8009bde <__smakebuf_r+0x46>
 8009bca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bce:	059a      	lsls	r2, r3, #22
 8009bd0:	d4ee      	bmi.n	8009bb0 <__smakebuf_r+0x18>
 8009bd2:	f023 0303 	bic.w	r3, r3, #3
 8009bd6:	f043 0302 	orr.w	r3, r3, #2
 8009bda:	81a3      	strh	r3, [r4, #12]
 8009bdc:	e7e2      	b.n	8009ba4 <__smakebuf_r+0xc>
 8009bde:	89a3      	ldrh	r3, [r4, #12]
 8009be0:	6020      	str	r0, [r4, #0]
 8009be2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009be6:	81a3      	strh	r3, [r4, #12]
 8009be8:	9b01      	ldr	r3, [sp, #4]
 8009bea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009bee:	b15b      	cbz	r3, 8009c08 <__smakebuf_r+0x70>
 8009bf0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009bf4:	4630      	mov	r0, r6
 8009bf6:	f000 f81d 	bl	8009c34 <_isatty_r>
 8009bfa:	b128      	cbz	r0, 8009c08 <__smakebuf_r+0x70>
 8009bfc:	89a3      	ldrh	r3, [r4, #12]
 8009bfe:	f023 0303 	bic.w	r3, r3, #3
 8009c02:	f043 0301 	orr.w	r3, r3, #1
 8009c06:	81a3      	strh	r3, [r4, #12]
 8009c08:	89a3      	ldrh	r3, [r4, #12]
 8009c0a:	431d      	orrs	r5, r3
 8009c0c:	81a5      	strh	r5, [r4, #12]
 8009c0e:	e7cf      	b.n	8009bb0 <__smakebuf_r+0x18>

08009c10 <_fstat_r>:
 8009c10:	b538      	push	{r3, r4, r5, lr}
 8009c12:	4d07      	ldr	r5, [pc, #28]	@ (8009c30 <_fstat_r+0x20>)
 8009c14:	2300      	movs	r3, #0
 8009c16:	4604      	mov	r4, r0
 8009c18:	4608      	mov	r0, r1
 8009c1a:	4611      	mov	r1, r2
 8009c1c:	602b      	str	r3, [r5, #0]
 8009c1e:	f7f7 ff51 	bl	8001ac4 <_fstat>
 8009c22:	1c43      	adds	r3, r0, #1
 8009c24:	d102      	bne.n	8009c2c <_fstat_r+0x1c>
 8009c26:	682b      	ldr	r3, [r5, #0]
 8009c28:	b103      	cbz	r3, 8009c2c <_fstat_r+0x1c>
 8009c2a:	6023      	str	r3, [r4, #0]
 8009c2c:	bd38      	pop	{r3, r4, r5, pc}
 8009c2e:	bf00      	nop
 8009c30:	20000490 	.word	0x20000490

08009c34 <_isatty_r>:
 8009c34:	b538      	push	{r3, r4, r5, lr}
 8009c36:	4d06      	ldr	r5, [pc, #24]	@ (8009c50 <_isatty_r+0x1c>)
 8009c38:	2300      	movs	r3, #0
 8009c3a:	4604      	mov	r4, r0
 8009c3c:	4608      	mov	r0, r1
 8009c3e:	602b      	str	r3, [r5, #0]
 8009c40:	f7f7 ff50 	bl	8001ae4 <_isatty>
 8009c44:	1c43      	adds	r3, r0, #1
 8009c46:	d102      	bne.n	8009c4e <_isatty_r+0x1a>
 8009c48:	682b      	ldr	r3, [r5, #0]
 8009c4a:	b103      	cbz	r3, 8009c4e <_isatty_r+0x1a>
 8009c4c:	6023      	str	r3, [r4, #0]
 8009c4e:	bd38      	pop	{r3, r4, r5, pc}
 8009c50:	20000490 	.word	0x20000490

08009c54 <_init>:
 8009c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c56:	bf00      	nop
 8009c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c5a:	bc08      	pop	{r3}
 8009c5c:	469e      	mov	lr, r3
 8009c5e:	4770      	bx	lr

08009c60 <_fini>:
 8009c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c62:	bf00      	nop
 8009c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c66:	bc08      	pop	{r3}
 8009c68:	469e      	mov	lr, r3
 8009c6a:	4770      	bx	lr
