
AEAT9922_SPI4_A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000985c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d4  08009a40  08009a40  0000aa40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a014  0800a014  0000c1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a014  0800a014  0000b014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a01c  0800a01c  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a01c  0800a01c  0000b01c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a020  0800a020  0000b020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800a024  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002cc  200001d4  0800a1f8  0000c1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a0  0800a1f8  0000c4a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000108e2  00000000  00000000  0000c204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024eb  00000000  00000000  0001cae6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d28  00000000  00000000  0001efd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a16  00000000  00000000  0001fd00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026869  00000000  00000000  00020716  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010728  00000000  00000000  00046f7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000edf85  00000000  00000000  000576a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014562c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a34  00000000  00000000  00145670  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  0014a0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009a24 	.word	0x08009a24

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	08009a24 	.word	0x08009a24

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9be 	b.w	800106c <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	468e      	mov	lr, r1
 8000d7c:	4604      	mov	r4, r0
 8000d7e:	4688      	mov	r8, r1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d14a      	bne.n	8000e1a <__udivmoddi4+0xa6>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4617      	mov	r7, r2
 8000d88:	d962      	bls.n	8000e50 <__udivmoddi4+0xdc>
 8000d8a:	fab2 f682 	clz	r6, r2
 8000d8e:	b14e      	cbz	r6, 8000da4 <__udivmoddi4+0x30>
 8000d90:	f1c6 0320 	rsb	r3, r6, #32
 8000d94:	fa01 f806 	lsl.w	r8, r1, r6
 8000d98:	fa20 f303 	lsr.w	r3, r0, r3
 8000d9c:	40b7      	lsls	r7, r6
 8000d9e:	ea43 0808 	orr.w	r8, r3, r8
 8000da2:	40b4      	lsls	r4, r6
 8000da4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000da8:	fa1f fc87 	uxth.w	ip, r7
 8000dac:	fbb8 f1fe 	udiv	r1, r8, lr
 8000db0:	0c23      	lsrs	r3, r4, #16
 8000db2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000db6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dba:	fb01 f20c 	mul.w	r2, r1, ip
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d909      	bls.n	8000dd6 <__udivmoddi4+0x62>
 8000dc2:	18fb      	adds	r3, r7, r3
 8000dc4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000dc8:	f080 80ea 	bcs.w	8000fa0 <__udivmoddi4+0x22c>
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	f240 80e7 	bls.w	8000fa0 <__udivmoddi4+0x22c>
 8000dd2:	3902      	subs	r1, #2
 8000dd4:	443b      	add	r3, r7
 8000dd6:	1a9a      	subs	r2, r3, r2
 8000dd8:	b2a3      	uxth	r3, r4
 8000dda:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dde:	fb0e 2210 	mls	r2, lr, r0, r2
 8000de2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000de6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dea:	459c      	cmp	ip, r3
 8000dec:	d909      	bls.n	8000e02 <__udivmoddi4+0x8e>
 8000dee:	18fb      	adds	r3, r7, r3
 8000df0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000df4:	f080 80d6 	bcs.w	8000fa4 <__udivmoddi4+0x230>
 8000df8:	459c      	cmp	ip, r3
 8000dfa:	f240 80d3 	bls.w	8000fa4 <__udivmoddi4+0x230>
 8000dfe:	443b      	add	r3, r7
 8000e00:	3802      	subs	r0, #2
 8000e02:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e06:	eba3 030c 	sub.w	r3, r3, ip
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	b11d      	cbz	r5, 8000e16 <__udivmoddi4+0xa2>
 8000e0e:	40f3      	lsrs	r3, r6
 8000e10:	2200      	movs	r2, #0
 8000e12:	e9c5 3200 	strd	r3, r2, [r5]
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d905      	bls.n	8000e2a <__udivmoddi4+0xb6>
 8000e1e:	b10d      	cbz	r5, 8000e24 <__udivmoddi4+0xb0>
 8000e20:	e9c5 0100 	strd	r0, r1, [r5]
 8000e24:	2100      	movs	r1, #0
 8000e26:	4608      	mov	r0, r1
 8000e28:	e7f5      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e2a:	fab3 f183 	clz	r1, r3
 8000e2e:	2900      	cmp	r1, #0
 8000e30:	d146      	bne.n	8000ec0 <__udivmoddi4+0x14c>
 8000e32:	4573      	cmp	r3, lr
 8000e34:	d302      	bcc.n	8000e3c <__udivmoddi4+0xc8>
 8000e36:	4282      	cmp	r2, r0
 8000e38:	f200 8105 	bhi.w	8001046 <__udivmoddi4+0x2d2>
 8000e3c:	1a84      	subs	r4, r0, r2
 8000e3e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e42:	2001      	movs	r0, #1
 8000e44:	4690      	mov	r8, r2
 8000e46:	2d00      	cmp	r5, #0
 8000e48:	d0e5      	beq.n	8000e16 <__udivmoddi4+0xa2>
 8000e4a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e4e:	e7e2      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e50:	2a00      	cmp	r2, #0
 8000e52:	f000 8090 	beq.w	8000f76 <__udivmoddi4+0x202>
 8000e56:	fab2 f682 	clz	r6, r2
 8000e5a:	2e00      	cmp	r6, #0
 8000e5c:	f040 80a4 	bne.w	8000fa8 <__udivmoddi4+0x234>
 8000e60:	1a8a      	subs	r2, r1, r2
 8000e62:	0c03      	lsrs	r3, r0, #16
 8000e64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e68:	b280      	uxth	r0, r0
 8000e6a:	b2bc      	uxth	r4, r7
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e72:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e7a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d907      	bls.n	8000e92 <__udivmoddi4+0x11e>
 8000e82:	18fb      	adds	r3, r7, r3
 8000e84:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e88:	d202      	bcs.n	8000e90 <__udivmoddi4+0x11c>
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	f200 80e0 	bhi.w	8001050 <__udivmoddi4+0x2dc>
 8000e90:	46c4      	mov	ip, r8
 8000e92:	1a9b      	subs	r3, r3, r2
 8000e94:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e98:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e9c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000ea0:	fb02 f404 	mul.w	r4, r2, r4
 8000ea4:	429c      	cmp	r4, r3
 8000ea6:	d907      	bls.n	8000eb8 <__udivmoddi4+0x144>
 8000ea8:	18fb      	adds	r3, r7, r3
 8000eaa:	f102 30ff 	add.w	r0, r2, #4294967295
 8000eae:	d202      	bcs.n	8000eb6 <__udivmoddi4+0x142>
 8000eb0:	429c      	cmp	r4, r3
 8000eb2:	f200 80ca 	bhi.w	800104a <__udivmoddi4+0x2d6>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	1b1b      	subs	r3, r3, r4
 8000eba:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000ebe:	e7a5      	b.n	8000e0c <__udivmoddi4+0x98>
 8000ec0:	f1c1 0620 	rsb	r6, r1, #32
 8000ec4:	408b      	lsls	r3, r1
 8000ec6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eca:	431f      	orrs	r7, r3
 8000ecc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ed0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ed4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ed8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000edc:	4323      	orrs	r3, r4
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	fa1f fc87 	uxth.w	ip, r7
 8000ee6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eea:	0c1c      	lsrs	r4, r3, #16
 8000eec:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ef0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ef4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	fa02 f201 	lsl.w	r2, r2, r1
 8000efe:	d909      	bls.n	8000f14 <__udivmoddi4+0x1a0>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f06:	f080 809c 	bcs.w	8001042 <__udivmoddi4+0x2ce>
 8000f0a:	45a6      	cmp	lr, r4
 8000f0c:	f240 8099 	bls.w	8001042 <__udivmoddi4+0x2ce>
 8000f10:	3802      	subs	r0, #2
 8000f12:	443c      	add	r4, r7
 8000f14:	eba4 040e 	sub.w	r4, r4, lr
 8000f18:	fa1f fe83 	uxth.w	lr, r3
 8000f1c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f20:	fb09 4413 	mls	r4, r9, r3, r4
 8000f24:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f28:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f2c:	45a4      	cmp	ip, r4
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x1ce>
 8000f30:	193c      	adds	r4, r7, r4
 8000f32:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f36:	f080 8082 	bcs.w	800103e <__udivmoddi4+0x2ca>
 8000f3a:	45a4      	cmp	ip, r4
 8000f3c:	d97f      	bls.n	800103e <__udivmoddi4+0x2ca>
 8000f3e:	3b02      	subs	r3, #2
 8000f40:	443c      	add	r4, r7
 8000f42:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f46:	eba4 040c 	sub.w	r4, r4, ip
 8000f4a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f4e:	4564      	cmp	r4, ip
 8000f50:	4673      	mov	r3, lr
 8000f52:	46e1      	mov	r9, ip
 8000f54:	d362      	bcc.n	800101c <__udivmoddi4+0x2a8>
 8000f56:	d05f      	beq.n	8001018 <__udivmoddi4+0x2a4>
 8000f58:	b15d      	cbz	r5, 8000f72 <__udivmoddi4+0x1fe>
 8000f5a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f5e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f62:	fa04 f606 	lsl.w	r6, r4, r6
 8000f66:	fa22 f301 	lsr.w	r3, r2, r1
 8000f6a:	431e      	orrs	r6, r3
 8000f6c:	40cc      	lsrs	r4, r1
 8000f6e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f72:	2100      	movs	r1, #0
 8000f74:	e74f      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000f76:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f7a:	0c01      	lsrs	r1, r0, #16
 8000f7c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f80:	b280      	uxth	r0, r0
 8000f82:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f86:	463b      	mov	r3, r7
 8000f88:	4638      	mov	r0, r7
 8000f8a:	463c      	mov	r4, r7
 8000f8c:	46b8      	mov	r8, r7
 8000f8e:	46be      	mov	lr, r7
 8000f90:	2620      	movs	r6, #32
 8000f92:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f96:	eba2 0208 	sub.w	r2, r2, r8
 8000f9a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f9e:	e766      	b.n	8000e6e <__udivmoddi4+0xfa>
 8000fa0:	4601      	mov	r1, r0
 8000fa2:	e718      	b.n	8000dd6 <__udivmoddi4+0x62>
 8000fa4:	4610      	mov	r0, r2
 8000fa6:	e72c      	b.n	8000e02 <__udivmoddi4+0x8e>
 8000fa8:	f1c6 0220 	rsb	r2, r6, #32
 8000fac:	fa2e f302 	lsr.w	r3, lr, r2
 8000fb0:	40b7      	lsls	r7, r6
 8000fb2:	40b1      	lsls	r1, r6
 8000fb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fc2:	b2bc      	uxth	r4, r7
 8000fc4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fc8:	0c11      	lsrs	r1, r2, #16
 8000fca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fce:	fb08 f904 	mul.w	r9, r8, r4
 8000fd2:	40b0      	lsls	r0, r6
 8000fd4:	4589      	cmp	r9, r1
 8000fd6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fda:	b280      	uxth	r0, r0
 8000fdc:	d93e      	bls.n	800105c <__udivmoddi4+0x2e8>
 8000fde:	1879      	adds	r1, r7, r1
 8000fe0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fe4:	d201      	bcs.n	8000fea <__udivmoddi4+0x276>
 8000fe6:	4589      	cmp	r9, r1
 8000fe8:	d81f      	bhi.n	800102a <__udivmoddi4+0x2b6>
 8000fea:	eba1 0109 	sub.w	r1, r1, r9
 8000fee:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff2:	fb09 f804 	mul.w	r8, r9, r4
 8000ff6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ffa:	b292      	uxth	r2, r2
 8000ffc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001000:	4542      	cmp	r2, r8
 8001002:	d229      	bcs.n	8001058 <__udivmoddi4+0x2e4>
 8001004:	18ba      	adds	r2, r7, r2
 8001006:	f109 31ff 	add.w	r1, r9, #4294967295
 800100a:	d2c4      	bcs.n	8000f96 <__udivmoddi4+0x222>
 800100c:	4542      	cmp	r2, r8
 800100e:	d2c2      	bcs.n	8000f96 <__udivmoddi4+0x222>
 8001010:	f1a9 0102 	sub.w	r1, r9, #2
 8001014:	443a      	add	r2, r7
 8001016:	e7be      	b.n	8000f96 <__udivmoddi4+0x222>
 8001018:	45f0      	cmp	r8, lr
 800101a:	d29d      	bcs.n	8000f58 <__udivmoddi4+0x1e4>
 800101c:	ebbe 0302 	subs.w	r3, lr, r2
 8001020:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001024:	3801      	subs	r0, #1
 8001026:	46e1      	mov	r9, ip
 8001028:	e796      	b.n	8000f58 <__udivmoddi4+0x1e4>
 800102a:	eba7 0909 	sub.w	r9, r7, r9
 800102e:	4449      	add	r1, r9
 8001030:	f1a8 0c02 	sub.w	ip, r8, #2
 8001034:	fbb1 f9fe 	udiv	r9, r1, lr
 8001038:	fb09 f804 	mul.w	r8, r9, r4
 800103c:	e7db      	b.n	8000ff6 <__udivmoddi4+0x282>
 800103e:	4673      	mov	r3, lr
 8001040:	e77f      	b.n	8000f42 <__udivmoddi4+0x1ce>
 8001042:	4650      	mov	r0, sl
 8001044:	e766      	b.n	8000f14 <__udivmoddi4+0x1a0>
 8001046:	4608      	mov	r0, r1
 8001048:	e6fd      	b.n	8000e46 <__udivmoddi4+0xd2>
 800104a:	443b      	add	r3, r7
 800104c:	3a02      	subs	r2, #2
 800104e:	e733      	b.n	8000eb8 <__udivmoddi4+0x144>
 8001050:	f1ac 0c02 	sub.w	ip, ip, #2
 8001054:	443b      	add	r3, r7
 8001056:	e71c      	b.n	8000e92 <__udivmoddi4+0x11e>
 8001058:	4649      	mov	r1, r9
 800105a:	e79c      	b.n	8000f96 <__udivmoddi4+0x222>
 800105c:	eba1 0109 	sub.w	r1, r1, r9
 8001060:	46c4      	mov	ip, r8
 8001062:	fbb1 f9fe 	udiv	r9, r1, lr
 8001066:	fb09 f804 	mul.w	r8, r9, r4
 800106a:	e7c4      	b.n	8000ff6 <__udivmoddi4+0x282>

0800106c <__aeabi_idiv0>:
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop

08001070 <AEAT9922_Read_SPI4A>:
 * and simultaneously receive the register data.
 * @param  reg_addr The 8-bit address of the register to read from.
 * @param  read_data Pointer to a variable where the read data will be stored.
 * @retval HAL_StatusTypeDef The status of the HAL SPI operation.
 */
HAL_StatusTypeDef AEAT9922_Read_SPI4A(uint8_t reg_addr, uint8_t *read_data) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b088      	sub	sp, #32
 8001074:	af02      	add	r7, sp, #8
 8001076:	4603      	mov	r3, r0
 8001078:	6039      	str	r1, [r7, #0]
 800107a:	71fb      	strb	r3, [r7, #7]
	uint8_t tx_buf[SPI4A_CMD_SIZE];
	uint8_t rx_buf[SPI4A_CMD_SIZE];
	HAL_StatusTypeDef status;

	// Master sends frame: [P | RW=1 | 000000 | Addr[7:0]]
	uint16_t command = (1 << 14) | reg_addr; // RW bit is 1 for read
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	b21b      	sxth	r3, r3
 8001080:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001084:	b21b      	sxth	r3, r3
 8001086:	82fb      	strh	r3, [r7, #22]
	uint8_t parity = calculate_even_parity(command);
 8001088:	8afb      	ldrh	r3, [r7, #22]
 800108a:	4618      	mov	r0, r3
 800108c:	f000 fc78 	bl	8001980 <calculate_even_parity>
 8001090:	4603      	mov	r3, r0
 8001092:	757b      	strb	r3, [r7, #21]
	uint16_t frame = (parity << 15) | command;
 8001094:	7d7b      	ldrb	r3, [r7, #21]
 8001096:	b21b      	sxth	r3, r3
 8001098:	03db      	lsls	r3, r3, #15
 800109a:	b21a      	sxth	r2, r3
 800109c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	b21b      	sxth	r3, r3
 80010a4:	827b      	strh	r3, [r7, #18]

	tx_buf[0] = (uint8_t) (frame >> 8);   // MSB
 80010a6:	8a7b      	ldrh	r3, [r7, #18]
 80010a8:	0a1b      	lsrs	r3, r3, #8
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	733b      	strb	r3, [r7, #12]
	tx_buf[1] = (uint8_t) (frame & 0xFF); // LSB
 80010b0:	8a7b      	ldrh	r3, [r7, #18]
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(ENCODER_NSS_PORT, ENCODER_NSS_PIN, GPIO_PIN_RESET);
 80010b6:	2200      	movs	r2, #0
 80010b8:	2110      	movs	r1, #16
 80010ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010be:	f001 f891 	bl	80021e4 <HAL_GPIO_WritePin>
	status = HAL_SPI_TransmitReceive(&hspi2, tx_buf, rx_buf, SPI4A_CMD_SIZE,
 80010c2:	f107 0208 	add.w	r2, r7, #8
 80010c6:	f107 010c 	add.w	r1, r7, #12
 80010ca:	23fa      	movs	r3, #250	@ 0xfa
 80010cc:	9300      	str	r3, [sp, #0]
 80010ce:	2302      	movs	r3, #2
 80010d0:	480a      	ldr	r0, [pc, #40]	@ (80010fc <AEAT9922_Read_SPI4A+0x8c>)
 80010d2:	f002 f9e4 	bl	800349e <HAL_SPI_TransmitReceive>
 80010d6:	4603      	mov	r3, r0
 80010d8:	747b      	strb	r3, [r7, #17]
			SPI_TIMEOUT_MS);
	HAL_GPIO_WritePin(ENCODER_NSS_PORT, ENCODER_NSS_PIN, GPIO_PIN_SET);
 80010da:	2201      	movs	r2, #1
 80010dc:	2110      	movs	r1, #16
 80010de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010e2:	f001 f87f 	bl	80021e4 <HAL_GPIO_WritePin>

	if (status == HAL_OK) {
 80010e6:	7c7b      	ldrb	r3, [r7, #17]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d102      	bne.n	80010f2 <AEAT9922_Read_SPI4A+0x82>
		// Slave responds with frame: [P | EF | 000000 | Data[7:0]]
		// The actual register data is in the lower byte of the received frame.
		*read_data = rx_buf[1];
 80010ec:	7a7a      	ldrb	r2, [r7, #9]
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	701a      	strb	r2, [r3, #0]
	}

	return status;
 80010f2:	7c7b      	ldrb	r3, [r7, #17]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3718      	adds	r7, #24
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000284 	.word	0x20000284

08001100 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08e      	sub	sp, #56	@ 0x38
 8001104:	af00      	add	r7, sp, #0
	/* MCU Configuration--------------------------------------------------------*/
	HAL_Init();
 8001106:	f000 fc88 	bl	8001a1a <HAL_Init>
	SystemClock_Config();
 800110a:	f000 f84f 	bl	80011ac <SystemClock_Config>
	MX_GPIO_Init();
 800110e:	f000 f967 	bl	80013e0 <MX_GPIO_Init>
	MX_LPUART1_UART_Init();
 8001112:	f000 f89f 	bl	8001254 <MX_LPUART1_UART_Init>
	MX_SPI2_Init();
 8001116:	f000 f8e7 	bl	80012e8 <MX_SPI2_Init>
	MX_SPI3_Init();
 800111a:	f000 f923 	bl	8001364 <MX_SPI3_Init>

	/* 2. Print Startup Message */
	HAL_UART_Transmit(&hlpuart1, (uint8_t*)"\r\n=== AEAT-9922 Position and Diagnostics Reader ===\r\n", 51, HAL_MAX_DELAY);
 800111e:	f04f 33ff 	mov.w	r3, #4294967295
 8001122:	2233      	movs	r2, #51	@ 0x33
 8001124:	491d      	ldr	r1, [pc, #116]	@ (800119c <main+0x9c>)
 8001126:	481e      	ldr	r0, [pc, #120]	@ (80011a0 <main+0xa0>)
 8001128:	f002 feac 	bl	8003e84 <HAL_UART_Transmit>
	HAL_Delay(100);
 800112c:	2064      	movs	r0, #100	@ 0x64
 800112e:	f000 fce5 	bl	8001afc <HAL_Delay>

	/* 3. Declare variables for the main loop */

	uint8_t status_register_val = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			char buf[50];

			while (1)
			{

				volatile HAL_StatusTypeDef status = AEAT9922_Read_SPI4A(STATUS, &status_register_val);
 8001138:	f107 0337 	add.w	r3, r7, #55	@ 0x37
 800113c:	4619      	mov	r1, r3
 800113e:	2021      	movs	r0, #33	@ 0x21
 8001140:	f7ff ff96 	bl	8001070 <AEAT9922_Read_SPI4A>
 8001144:	4603      	mov	r3, r0
 8001146:	70fb      	strb	r3, [r7, #3]

				if (status != HAL_OK)
 8001148:	78fb      	ldrb	r3, [r7, #3]
 800114a:	b2db      	uxtb	r3, r3
 800114c:	2b00      	cmp	r3, #0
 800114e:	d008      	beq.n	8001162 <main+0x62>
				{
			        sprintf(buf, "Failed to read from Reg 0x%02X. Status: %d\r\n", STATUS, status);
 8001150:	78fb      	ldrb	r3, [r7, #3]
 8001152:	b2db      	uxtb	r3, r3
 8001154:	1d38      	adds	r0, r7, #4
 8001156:	2221      	movs	r2, #33	@ 0x21
 8001158:	4912      	ldr	r1, [pc, #72]	@ (80011a4 <main+0xa4>)
 800115a:	f005 f823 	bl	80061a4 <siprintf>
			        return 1;
 800115e:	2301      	movs	r3, #1
 8001160:	e017      	b.n	8001192 <main+0x92>
			    }

				sprintf(buf, "Read from Reg 0x%02X: Value = 0x%02X\r\n", STATUS, status_register_val);
 8001162:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001166:	1d38      	adds	r0, r7, #4
 8001168:	2221      	movs	r2, #33	@ 0x21
 800116a:	490f      	ldr	r1, [pc, #60]	@ (80011a8 <main+0xa8>)
 800116c:	f005 f81a 	bl	80061a4 <siprintf>
				HAL_UART_Transmit(&hlpuart1, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 8001170:	1d3b      	adds	r3, r7, #4
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff f8a4 	bl	80002c0 <strlen>
 8001178:	4603      	mov	r3, r0
 800117a:	b29a      	uxth	r2, r3
 800117c:	1d39      	adds	r1, r7, #4
 800117e:	f04f 33ff 	mov.w	r3, #4294967295
 8001182:	4807      	ldr	r0, [pc, #28]	@ (80011a0 <main+0xa0>)
 8001184:	f002 fe7e 	bl	8003e84 <HAL_UART_Transmit>

		#endif

		HAL_Delay(500); // Loop delay for readability.
 8001188:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800118c:	f000 fcb6 	bl	8001afc <HAL_Delay>
			{
 8001190:	e7d2      	b.n	8001138 <main+0x38>
	}
}
 8001192:	4618      	mov	r0, r3
 8001194:	3738      	adds	r7, #56	@ 0x38
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	08009a40 	.word	0x08009a40
 80011a0:	200001f0 	.word	0x200001f0
 80011a4:	08009a78 	.word	0x08009a78
 80011a8:	08009aa8 	.word	0x08009aa8

080011ac <SystemClock_Config>:



/* System configuration functions (same as in main.c) */
void SystemClock_Config(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b094      	sub	sp, #80	@ 0x50
 80011b0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011b2:	f107 0318 	add.w	r3, r7, #24
 80011b6:	2238      	movs	r2, #56	@ 0x38
 80011b8:	2100      	movs	r1, #0
 80011ba:	4618      	mov	r0, r3
 80011bc:	f005 f857 	bl	800626e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011c0:	1d3b      	adds	r3, r7, #4
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]
 80011cc:	611a      	str	r2, [r3, #16]

	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80011ce:	2000      	movs	r0, #0
 80011d0:	f001 f844 	bl	800225c <HAL_PWREx_ControlVoltageScaling>

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011d4:	2302      	movs	r3, #2
 80011d6:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011dc:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011de:	2340      	movs	r3, #64	@ 0x40
 80011e0:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011e2:	2302      	movs	r3, #2
 80011e4:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011e6:	2302      	movs	r3, #2
 80011e8:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80011ea:	2304      	movs	r3, #4
 80011ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 80011ee:	2355      	movs	r3, #85	@ 0x55
 80011f0:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011f2:	2302      	movs	r3, #2
 80011f4:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011f6:	2302      	movs	r3, #2
 80011f8:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011fa:	2302      	movs	r3, #2
 80011fc:	64fb      	str	r3, [r7, #76]	@ 0x4c

	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80011fe:	f107 0318 	add.w	r3, r7, #24
 8001202:	4618      	mov	r0, r3
 8001204:	f001 f8de 	bl	80023c4 <HAL_RCC_OscConfig>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <SystemClock_Config+0x66>
		Error_Handler();
 800120e:	f000 f97b 	bl	8001508 <Error_Handler>
	}

	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001212:	230f      	movs	r3, #15
 8001214:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001216:	2303      	movs	r3, #3
 8001218:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800121a:	2300      	movs	r3, #0
 800121c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800121e:	2300      	movs	r3, #0
 8001220:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001222:	2300      	movs	r3, #0
 8001224:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8001226:	1d3b      	adds	r3, r7, #4
 8001228:	2104      	movs	r1, #4
 800122a:	4618      	mov	r0, r3
 800122c:	f001 fbdc 	bl	80029e8 <HAL_RCC_ClockConfig>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <SystemClock_Config+0x8e>
		Error_Handler();
 8001236:	f000 f967 	bl	8001508 <Error_Handler>
	}
	HAL_RCC_MCOConfig(RCC_MCO_PG10, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 800123a:	2200      	movs	r2, #0
 800123c:	f04f 7140 	mov.w	r1, #50331648	@ 0x3000000
 8001240:	4803      	ldr	r0, [pc, #12]	@ (8001250 <SystemClock_Config+0xa4>)
 8001242:	f001 fd0d 	bl	8002c60 <HAL_RCC_MCOConfig>
}
 8001246:	bf00      	nop
 8001248:	3750      	adds	r7, #80	@ 0x50
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	00060400 	.word	0x00060400

08001254 <MX_LPUART1_UART_Init>:

static void MX_LPUART1_UART_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
	hlpuart1.Instance = LPUART1;
 8001258:	4b21      	ldr	r3, [pc, #132]	@ (80012e0 <MX_LPUART1_UART_Init+0x8c>)
 800125a:	4a22      	ldr	r2, [pc, #136]	@ (80012e4 <MX_LPUART1_UART_Init+0x90>)
 800125c:	601a      	str	r2, [r3, #0]
	hlpuart1.Init.BaudRate = 115200;
 800125e:	4b20      	ldr	r3, [pc, #128]	@ (80012e0 <MX_LPUART1_UART_Init+0x8c>)
 8001260:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001264:	605a      	str	r2, [r3, #4]
	hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001266:	4b1e      	ldr	r3, [pc, #120]	@ (80012e0 <MX_LPUART1_UART_Init+0x8c>)
 8001268:	2200      	movs	r2, #0
 800126a:	609a      	str	r2, [r3, #8]
	hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800126c:	4b1c      	ldr	r3, [pc, #112]	@ (80012e0 <MX_LPUART1_UART_Init+0x8c>)
 800126e:	2200      	movs	r2, #0
 8001270:	60da      	str	r2, [r3, #12]
	hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001272:	4b1b      	ldr	r3, [pc, #108]	@ (80012e0 <MX_LPUART1_UART_Init+0x8c>)
 8001274:	2200      	movs	r2, #0
 8001276:	611a      	str	r2, [r3, #16]
	hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001278:	4b19      	ldr	r3, [pc, #100]	@ (80012e0 <MX_LPUART1_UART_Init+0x8c>)
 800127a:	220c      	movs	r2, #12
 800127c:	615a      	str	r2, [r3, #20]
	hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800127e:	4b18      	ldr	r3, [pc, #96]	@ (80012e0 <MX_LPUART1_UART_Init+0x8c>)
 8001280:	2200      	movs	r2, #0
 8001282:	619a      	str	r2, [r3, #24]
	hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001284:	4b16      	ldr	r3, [pc, #88]	@ (80012e0 <MX_LPUART1_UART_Init+0x8c>)
 8001286:	2200      	movs	r2, #0
 8001288:	621a      	str	r2, [r3, #32]
	hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800128a:	4b15      	ldr	r3, [pc, #84]	@ (80012e0 <MX_LPUART1_UART_Init+0x8c>)
 800128c:	2200      	movs	r2, #0
 800128e:	625a      	str	r2, [r3, #36]	@ 0x24
	hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001290:	4b13      	ldr	r3, [pc, #76]	@ (80012e0 <MX_LPUART1_UART_Init+0x8c>)
 8001292:	2200      	movs	r2, #0
 8001294:	629a      	str	r2, [r3, #40]	@ 0x28

	if (HAL_UART_Init(&hlpuart1) != HAL_OK) {
 8001296:	4812      	ldr	r0, [pc, #72]	@ (80012e0 <MX_LPUART1_UART_Init+0x8c>)
 8001298:	f002 fda4 	bl	8003de4 <HAL_UART_Init>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_LPUART1_UART_Init+0x52>
		Error_Handler();
 80012a2:	f000 f931 	bl	8001508 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK) {
 80012a6:	2100      	movs	r1, #0
 80012a8:	480d      	ldr	r0, [pc, #52]	@ (80012e0 <MX_LPUART1_UART_Init+0x8c>)
 80012aa:	f003 ff8a 	bl	80051c2 <HAL_UARTEx_SetTxFifoThreshold>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_LPUART1_UART_Init+0x64>
		Error_Handler();
 80012b4:	f000 f928 	bl	8001508 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK) {
 80012b8:	2100      	movs	r1, #0
 80012ba:	4809      	ldr	r0, [pc, #36]	@ (80012e0 <MX_LPUART1_UART_Init+0x8c>)
 80012bc:	f003 ffbf 	bl	800523e <HAL_UARTEx_SetRxFifoThreshold>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_LPUART1_UART_Init+0x76>
		Error_Handler();
 80012c6:	f000 f91f 	bl	8001508 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK) {
 80012ca:	4805      	ldr	r0, [pc, #20]	@ (80012e0 <MX_LPUART1_UART_Init+0x8c>)
 80012cc:	f003 ff40 	bl	8005150 <HAL_UARTEx_DisableFifoMode>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_LPUART1_UART_Init+0x86>
		Error_Handler();
 80012d6:	f000 f917 	bl	8001508 <Error_Handler>
	}
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	200001f0 	.word	0x200001f0
 80012e4:	40008000 	.word	0x40008000

080012e8 <MX_SPI2_Init>:

static void MX_SPI2_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
	hspi2.Instance = SPI2;
 80012ec:	4b1b      	ldr	r3, [pc, #108]	@ (800135c <MX_SPI2_Init+0x74>)
 80012ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001360 <MX_SPI2_Init+0x78>)
 80012f0:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 80012f2:	4b1a      	ldr	r3, [pc, #104]	@ (800135c <MX_SPI2_Init+0x74>)
 80012f4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80012f8:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80012fa:	4b18      	ldr	r3, [pc, #96]	@ (800135c <MX_SPI2_Init+0x74>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001300:	4b16      	ldr	r3, [pc, #88]	@ (800135c <MX_SPI2_Init+0x74>)
 8001302:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001306:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001308:	4b14      	ldr	r3, [pc, #80]	@ (800135c <MX_SPI2_Init+0x74>)
 800130a:	2200      	movs	r2, #0
 800130c:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800130e:	4b13      	ldr	r3, [pc, #76]	@ (800135c <MX_SPI2_Init+0x74>)
 8001310:	2201      	movs	r2, #1
 8001312:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8001314:	4b11      	ldr	r3, [pc, #68]	@ (800135c <MX_SPI2_Init+0x74>)
 8001316:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800131a:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800131c:	4b0f      	ldr	r3, [pc, #60]	@ (800135c <MX_SPI2_Init+0x74>)
 800131e:	2238      	movs	r2, #56	@ 0x38
 8001320:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001322:	4b0e      	ldr	r3, [pc, #56]	@ (800135c <MX_SPI2_Init+0x74>)
 8001324:	2200      	movs	r2, #0
 8001326:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001328:	4b0c      	ldr	r3, [pc, #48]	@ (800135c <MX_SPI2_Init+0x74>)
 800132a:	2200      	movs	r2, #0
 800132c:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800132e:	4b0b      	ldr	r3, [pc, #44]	@ (800135c <MX_SPI2_Init+0x74>)
 8001330:	2200      	movs	r2, #0
 8001332:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi2.Init.CRCPolynomial = 7;
 8001334:	4b09      	ldr	r3, [pc, #36]	@ (800135c <MX_SPI2_Init+0x74>)
 8001336:	2207      	movs	r2, #7
 8001338:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800133a:	4b08      	ldr	r3, [pc, #32]	@ (800135c <MX_SPI2_Init+0x74>)
 800133c:	2200      	movs	r2, #0
 800133e:	631a      	str	r2, [r3, #48]	@ 0x30
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001340:	4b06      	ldr	r3, [pc, #24]	@ (800135c <MX_SPI2_Init+0x74>)
 8001342:	2200      	movs	r2, #0
 8001344:	635a      	str	r2, [r3, #52]	@ 0x34

	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8001346:	4805      	ldr	r0, [pc, #20]	@ (800135c <MX_SPI2_Init+0x74>)
 8001348:	f001 fffe 	bl	8003348 <HAL_SPI_Init>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_SPI2_Init+0x6e>
		Error_Handler();
 8001352:	f000 f8d9 	bl	8001508 <Error_Handler>
	}
}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20000284 	.word	0x20000284
 8001360:	40003800 	.word	0x40003800

08001364 <MX_SPI3_Init>:

static void MX_SPI3_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
	hspi3.Instance = SPI3;
 8001368:	4b1b      	ldr	r3, [pc, #108]	@ (80013d8 <MX_SPI3_Init+0x74>)
 800136a:	4a1c      	ldr	r2, [pc, #112]	@ (80013dc <MX_SPI3_Init+0x78>)
 800136c:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 800136e:	4b1a      	ldr	r3, [pc, #104]	@ (80013d8 <MX_SPI3_Init+0x74>)
 8001370:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001374:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001376:	4b18      	ldr	r3, [pc, #96]	@ (80013d8 <MX_SPI3_Init+0x74>)
 8001378:	2200      	movs	r2, #0
 800137a:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800137c:	4b16      	ldr	r3, [pc, #88]	@ (80013d8 <MX_SPI3_Init+0x74>)
 800137e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001382:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001384:	4b14      	ldr	r3, [pc, #80]	@ (80013d8 <MX_SPI3_Init+0x74>)
 8001386:	2200      	movs	r2, #0
 8001388:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800138a:	4b13      	ldr	r3, [pc, #76]	@ (80013d8 <MX_SPI3_Init+0x74>)
 800138c:	2201      	movs	r2, #1
 800138e:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 8001390:	4b11      	ldr	r3, [pc, #68]	@ (80013d8 <MX_SPI3_Init+0x74>)
 8001392:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001396:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001398:	4b0f      	ldr	r3, [pc, #60]	@ (80013d8 <MX_SPI3_Init+0x74>)
 800139a:	2238      	movs	r2, #56	@ 0x38
 800139c:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800139e:	4b0e      	ldr	r3, [pc, #56]	@ (80013d8 <MX_SPI3_Init+0x74>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80013a4:	4b0c      	ldr	r3, [pc, #48]	@ (80013d8 <MX_SPI3_Init+0x74>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013aa:	4b0b      	ldr	r3, [pc, #44]	@ (80013d8 <MX_SPI3_Init+0x74>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi3.Init.CRCPolynomial = 7;
 80013b0:	4b09      	ldr	r3, [pc, #36]	@ (80013d8 <MX_SPI3_Init+0x74>)
 80013b2:	2207      	movs	r2, #7
 80013b4:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80013b6:	4b08      	ldr	r3, [pc, #32]	@ (80013d8 <MX_SPI3_Init+0x74>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	631a      	str	r2, [r3, #48]	@ 0x30
	hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80013bc:	4b06      	ldr	r3, [pc, #24]	@ (80013d8 <MX_SPI3_Init+0x74>)
 80013be:	2200      	movs	r2, #0
 80013c0:	635a      	str	r2, [r3, #52]	@ 0x34

	if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 80013c2:	4805      	ldr	r0, [pc, #20]	@ (80013d8 <MX_SPI3_Init+0x74>)
 80013c4:	f001 ffc0 	bl	8003348 <HAL_SPI_Init>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_SPI3_Init+0x6e>
		Error_Handler();
 80013ce:	f000 f89b 	bl	8001508 <Error_Handler>
	}
}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	200002e8 	.word	0x200002e8
 80013dc:	40003c00 	.word	0x40003c00

080013e0 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08a      	sub	sp, #40	@ 0x28
 80013e4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e6:	f107 0314 	add.w	r3, r7, #20
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	605a      	str	r2, [r3, #4]
 80013f0:	609a      	str	r2, [r3, #8]
 80013f2:	60da      	str	r2, [r3, #12]
 80013f4:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOC_CLK_ENABLE();
 80013f6:	4b41      	ldr	r3, [pc, #260]	@ (80014fc <MX_GPIO_Init+0x11c>)
 80013f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013fa:	4a40      	ldr	r2, [pc, #256]	@ (80014fc <MX_GPIO_Init+0x11c>)
 80013fc:	f043 0304 	orr.w	r3, r3, #4
 8001400:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001402:	4b3e      	ldr	r3, [pc, #248]	@ (80014fc <MX_GPIO_Init+0x11c>)
 8001404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001406:	f003 0304 	and.w	r3, r3, #4
 800140a:	613b      	str	r3, [r7, #16]
 800140c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800140e:	4b3b      	ldr	r3, [pc, #236]	@ (80014fc <MX_GPIO_Init+0x11c>)
 8001410:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001412:	4a3a      	ldr	r2, [pc, #232]	@ (80014fc <MX_GPIO_Init+0x11c>)
 8001414:	f043 0320 	orr.w	r3, r3, #32
 8001418:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800141a:	4b38      	ldr	r3, [pc, #224]	@ (80014fc <MX_GPIO_Init+0x11c>)
 800141c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800141e:	f003 0320 	and.w	r3, r3, #32
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001426:	4b35      	ldr	r3, [pc, #212]	@ (80014fc <MX_GPIO_Init+0x11c>)
 8001428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800142a:	4a34      	ldr	r2, [pc, #208]	@ (80014fc <MX_GPIO_Init+0x11c>)
 800142c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001430:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001432:	4b32      	ldr	r3, [pc, #200]	@ (80014fc <MX_GPIO_Init+0x11c>)
 8001434:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001436:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800143a:	60bb      	str	r3, [r7, #8]
 800143c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800143e:	4b2f      	ldr	r3, [pc, #188]	@ (80014fc <MX_GPIO_Init+0x11c>)
 8001440:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001442:	4a2e      	ldr	r2, [pc, #184]	@ (80014fc <MX_GPIO_Init+0x11c>)
 8001444:	f043 0301 	orr.w	r3, r3, #1
 8001448:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800144a:	4b2c      	ldr	r3, [pc, #176]	@ (80014fc <MX_GPIO_Init+0x11c>)
 800144c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800144e:	f003 0301 	and.w	r3, r3, #1
 8001452:	607b      	str	r3, [r7, #4]
 8001454:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001456:	4b29      	ldr	r3, [pc, #164]	@ (80014fc <MX_GPIO_Init+0x11c>)
 8001458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800145a:	4a28      	ldr	r2, [pc, #160]	@ (80014fc <MX_GPIO_Init+0x11c>)
 800145c:	f043 0302 	orr.w	r3, r3, #2
 8001460:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001462:	4b26      	ldr	r3, [pc, #152]	@ (80014fc <MX_GPIO_Init+0x11c>)
 8001464:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	603b      	str	r3, [r7, #0]
 800146c:	683b      	ldr	r3, [r7, #0]

	HAL_GPIO_WritePin(ENCODER_NSS_PORT, ENCODER_NSS_PIN, GPIO_PIN_SET);
 800146e:	2201      	movs	r2, #1
 8001470:	2110      	movs	r1, #16
 8001472:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001476:	f000 feb5 	bl	80021e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);  // LD2
 800147a:	2200      	movs	r2, #0
 800147c:	2120      	movs	r1, #32
 800147e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001482:	f000 feaf 	bl	80021e4 <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = GPIO_PIN_13;  // B1
 8001486:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800148a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800148c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001490:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001496:	f107 0314 	add.w	r3, r7, #20
 800149a:	4619      	mov	r1, r3
 800149c:	4818      	ldr	r0, [pc, #96]	@ (8001500 <MX_GPIO_Init+0x120>)
 800149e:	f000 fd1f 	bl	8001ee0 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_10;
 80014a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014a6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a8:	2302      	movs	r3, #2
 80014aa:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b0:	2300      	movs	r3, #0
 80014b2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80014b4:	2300      	movs	r3, #0
 80014b6:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014b8:	f107 0314 	add.w	r3, r7, #20
 80014bc:	4619      	mov	r1, r3
 80014be:	4811      	ldr	r0, [pc, #68]	@ (8001504 <MX_GPIO_Init+0x124>)
 80014c0:	f000 fd0e 	bl	8001ee0 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = ENCODER_NSS_PIN | GPIO_PIN_5;  // NSS and LD2
 80014c4:	2330      	movs	r3, #48	@ 0x30
 80014c6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c8:	2301      	movs	r3, #1
 80014ca:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d0:	2300      	movs	r3, #0
 80014d2:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d4:	f107 0314 	add.w	r3, r7, #20
 80014d8:	4619      	mov	r1, r3
 80014da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014de:	f000 fcff 	bl	8001ee0 <HAL_GPIO_Init>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80014e2:	2200      	movs	r2, #0
 80014e4:	2100      	movs	r1, #0
 80014e6:	2028      	movs	r0, #40	@ 0x28
 80014e8:	f000 fc05 	bl	8001cf6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80014ec:	2028      	movs	r0, #40	@ 0x28
 80014ee:	f000 fc1c 	bl	8001d2a <HAL_NVIC_EnableIRQ>
}
 80014f2:	bf00      	nop
 80014f4:	3728      	adds	r7, #40	@ 0x28
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40021000 	.word	0x40021000
 8001500:	48000800 	.word	0x48000800
 8001504:	48001800 	.word	0x48001800

08001508 <Error_Handler>:

void Error_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800150c:	b672      	cpsid	i
}
 800150e:	bf00      	nop
	__disable_irq();
	while (1) {
 8001510:	bf00      	nop
 8001512:	e7fd      	b.n	8001510 <Error_Handler+0x8>

08001514 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800151a:	4b0f      	ldr	r3, [pc, #60]	@ (8001558 <HAL_MspInit+0x44>)
 800151c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800151e:	4a0e      	ldr	r2, [pc, #56]	@ (8001558 <HAL_MspInit+0x44>)
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	6613      	str	r3, [r2, #96]	@ 0x60
 8001526:	4b0c      	ldr	r3, [pc, #48]	@ (8001558 <HAL_MspInit+0x44>)
 8001528:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	607b      	str	r3, [r7, #4]
 8001530:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001532:	4b09      	ldr	r3, [pc, #36]	@ (8001558 <HAL_MspInit+0x44>)
 8001534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001536:	4a08      	ldr	r2, [pc, #32]	@ (8001558 <HAL_MspInit+0x44>)
 8001538:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800153c:	6593      	str	r3, [r2, #88]	@ 0x58
 800153e:	4b06      	ldr	r3, [pc, #24]	@ (8001558 <HAL_MspInit+0x44>)
 8001540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001542:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001546:	603b      	str	r3, [r7, #0]
 8001548:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800154a:	f000 ff2b 	bl	80023a4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40021000 	.word	0x40021000

0800155c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b09e      	sub	sp, #120	@ 0x78
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001564:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
 8001572:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001574:	f107 0310 	add.w	r3, r7, #16
 8001578:	2254      	movs	r2, #84	@ 0x54
 800157a:	2100      	movs	r1, #0
 800157c:	4618      	mov	r0, r3
 800157e:	f004 fe76 	bl	800626e <memset>
  if(huart->Instance==LPUART1)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a23      	ldr	r2, [pc, #140]	@ (8001614 <HAL_UART_MspInit+0xb8>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d13e      	bne.n	800160a <HAL_UART_MspInit+0xae>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800158c:	2320      	movs	r3, #32
 800158e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001590:	2300      	movs	r3, #0
 8001592:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001594:	f107 0310 	add.w	r3, r7, #16
 8001598:	4618      	mov	r0, r3
 800159a:	f001 fc87 	bl	8002eac <HAL_RCCEx_PeriphCLKConfig>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80015a4:	f7ff ffb0 	bl	8001508 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80015a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001618 <HAL_UART_MspInit+0xbc>)
 80015aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015ac:	4a1a      	ldr	r2, [pc, #104]	@ (8001618 <HAL_UART_MspInit+0xbc>)
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80015b4:	4b18      	ldr	r3, [pc, #96]	@ (8001618 <HAL_UART_MspInit+0xbc>)
 80015b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	60fb      	str	r3, [r7, #12]
 80015be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c0:	4b15      	ldr	r3, [pc, #84]	@ (8001618 <HAL_UART_MspInit+0xbc>)
 80015c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015c4:	4a14      	ldr	r2, [pc, #80]	@ (8001618 <HAL_UART_MspInit+0xbc>)
 80015c6:	f043 0301 	orr.w	r3, r3, #1
 80015ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015cc:	4b12      	ldr	r3, [pc, #72]	@ (8001618 <HAL_UART_MspInit+0xbc>)
 80015ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015d0:	f003 0301 	and.w	r3, r3, #1
 80015d4:	60bb      	str	r3, [r7, #8]
 80015d6:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80015d8:	230c      	movs	r3, #12
 80015da:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015dc:	2302      	movs	r3, #2
 80015de:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e4:	2300      	movs	r3, #0
 80015e6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80015e8:	230c      	movs	r3, #12
 80015ea:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ec:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80015f0:	4619      	mov	r1, r3
 80015f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015f6:	f000 fc73 	bl	8001ee0 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80015fa:	2200      	movs	r2, #0
 80015fc:	2100      	movs	r1, #0
 80015fe:	205b      	movs	r0, #91	@ 0x5b
 8001600:	f000 fb79 	bl	8001cf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001604:	205b      	movs	r0, #91	@ 0x5b
 8001606:	f000 fb90 	bl	8001d2a <HAL_NVIC_EnableIRQ>

    /* USER CODE END LPUART1_MspInit 1 */

  }

}
 800160a:	bf00      	nop
 800160c:	3778      	adds	r7, #120	@ 0x78
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40008000 	.word	0x40008000
 8001618:	40021000 	.word	0x40021000

0800161c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b08c      	sub	sp, #48	@ 0x30
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001624:	f107 031c 	add.w	r3, r7, #28
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	60da      	str	r2, [r3, #12]
 8001632:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a36      	ldr	r2, [pc, #216]	@ (8001714 <HAL_SPI_MspInit+0xf8>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d131      	bne.n	80016a2 <HAL_SPI_MspInit+0x86>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800163e:	4b36      	ldr	r3, [pc, #216]	@ (8001718 <HAL_SPI_MspInit+0xfc>)
 8001640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001642:	4a35      	ldr	r2, [pc, #212]	@ (8001718 <HAL_SPI_MspInit+0xfc>)
 8001644:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001648:	6593      	str	r3, [r2, #88]	@ 0x58
 800164a:	4b33      	ldr	r3, [pc, #204]	@ (8001718 <HAL_SPI_MspInit+0xfc>)
 800164c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800164e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001652:	61bb      	str	r3, [r7, #24]
 8001654:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001656:	4b30      	ldr	r3, [pc, #192]	@ (8001718 <HAL_SPI_MspInit+0xfc>)
 8001658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800165a:	4a2f      	ldr	r2, [pc, #188]	@ (8001718 <HAL_SPI_MspInit+0xfc>)
 800165c:	f043 0302 	orr.w	r3, r3, #2
 8001660:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001662:	4b2d      	ldr	r3, [pc, #180]	@ (8001718 <HAL_SPI_MspInit+0xfc>)
 8001664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	617b      	str	r3, [r7, #20]
 800166c:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800166e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001672:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001674:	2302      	movs	r3, #2
 8001676:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167c:	2300      	movs	r3, #0
 800167e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001680:	2305      	movs	r3, #5
 8001682:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001684:	f107 031c 	add.w	r3, r7, #28
 8001688:	4619      	mov	r1, r3
 800168a:	4824      	ldr	r0, [pc, #144]	@ (800171c <HAL_SPI_MspInit+0x100>)
 800168c:	f000 fc28 	bl	8001ee0 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001690:	2200      	movs	r2, #0
 8001692:	2100      	movs	r1, #0
 8001694:	2024      	movs	r0, #36	@ 0x24
 8001696:	f000 fb2e 	bl	8001cf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800169a:	2024      	movs	r0, #36	@ 0x24
 800169c:	f000 fb45 	bl	8001d2a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 80016a0:	e034      	b.n	800170c <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI3)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a1e      	ldr	r2, [pc, #120]	@ (8001720 <HAL_SPI_MspInit+0x104>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d12f      	bne.n	800170c <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80016ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001718 <HAL_SPI_MspInit+0xfc>)
 80016ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016b0:	4a19      	ldr	r2, [pc, #100]	@ (8001718 <HAL_SPI_MspInit+0xfc>)
 80016b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80016b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80016b8:	4b17      	ldr	r3, [pc, #92]	@ (8001718 <HAL_SPI_MspInit+0xfc>)
 80016ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80016c0:	613b      	str	r3, [r7, #16]
 80016c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c4:	4b14      	ldr	r3, [pc, #80]	@ (8001718 <HAL_SPI_MspInit+0xfc>)
 80016c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016c8:	4a13      	ldr	r2, [pc, #76]	@ (8001718 <HAL_SPI_MspInit+0xfc>)
 80016ca:	f043 0302 	orr.w	r3, r3, #2
 80016ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016d0:	4b11      	ldr	r3, [pc, #68]	@ (8001718 <HAL_SPI_MspInit+0xfc>)
 80016d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80016dc:	2338      	movs	r3, #56	@ 0x38
 80016de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e0:	2302      	movs	r3, #2
 80016e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e8:	2300      	movs	r3, #0
 80016ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80016ec:	2306      	movs	r3, #6
 80016ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f0:	f107 031c 	add.w	r3, r7, #28
 80016f4:	4619      	mov	r1, r3
 80016f6:	4809      	ldr	r0, [pc, #36]	@ (800171c <HAL_SPI_MspInit+0x100>)
 80016f8:	f000 fbf2 	bl	8001ee0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80016fc:	2200      	movs	r2, #0
 80016fe:	2100      	movs	r1, #0
 8001700:	2033      	movs	r0, #51	@ 0x33
 8001702:	f000 faf8 	bl	8001cf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001706:	2033      	movs	r0, #51	@ 0x33
 8001708:	f000 fb0f 	bl	8001d2a <HAL_NVIC_EnableIRQ>
}
 800170c:	bf00      	nop
 800170e:	3730      	adds	r7, #48	@ 0x30
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40003800 	.word	0x40003800
 8001718:	40021000 	.word	0x40021000
 800171c:	48000400 	.word	0x48000400
 8001720:	40003c00 	.word	0x40003c00

08001724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001728:	bf00      	nop
 800172a:	e7fd      	b.n	8001728 <NMI_Handler+0x4>

0800172c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001730:	bf00      	nop
 8001732:	e7fd      	b.n	8001730 <HardFault_Handler+0x4>

08001734 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001738:	bf00      	nop
 800173a:	e7fd      	b.n	8001738 <MemManage_Handler+0x4>

0800173c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001740:	bf00      	nop
 8001742:	e7fd      	b.n	8001740 <BusFault_Handler+0x4>

08001744 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001748:	bf00      	nop
 800174a:	e7fd      	b.n	8001748 <UsageFault_Handler+0x4>

0800174c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr

0800175a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800175a:	b480      	push	{r7}
 800175c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800177a:	f000 f9a1 	bl	8001ac0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
	...

08001784 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001788:	4802      	ldr	r0, [pc, #8]	@ (8001794 <SPI2_IRQHandler+0x10>)
 800178a:	f002 f8a7 	bl	80038dc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	20000284 	.word	0x20000284

08001798 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800179c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80017a0:	f000 fd38 	bl	8002214 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017a4:	bf00      	nop
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80017ac:	4802      	ldr	r0, [pc, #8]	@ (80017b8 <SPI3_IRQHandler+0x10>)
 80017ae:	f002 f895 	bl	80038dc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	200002e8 	.word	0x200002e8

080017bc <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80017c0:	4802      	ldr	r0, [pc, #8]	@ (80017cc <LPUART1_IRQHandler+0x10>)
 80017c2:	f002 fbed 	bl	8003fa0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	200001f0 	.word	0x200001f0

080017d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  return 1;
 80017d4:	2301      	movs	r3, #1
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <_kill>:

int _kill(int pid, int sig)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017ea:	f004 fd93 	bl	8006314 <__errno>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2216      	movs	r2, #22
 80017f2:	601a      	str	r2, [r3, #0]
  return -1;
 80017f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <_exit>:

void _exit (int status)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001808:	f04f 31ff 	mov.w	r1, #4294967295
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f7ff ffe7 	bl	80017e0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001812:	bf00      	nop
 8001814:	e7fd      	b.n	8001812 <_exit+0x12>

08001816 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001816:	b580      	push	{r7, lr}
 8001818:	b086      	sub	sp, #24
 800181a:	af00      	add	r7, sp, #0
 800181c:	60f8      	str	r0, [r7, #12]
 800181e:	60b9      	str	r1, [r7, #8]
 8001820:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001822:	2300      	movs	r3, #0
 8001824:	617b      	str	r3, [r7, #20]
 8001826:	e00a      	b.n	800183e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001828:	f3af 8000 	nop.w
 800182c:	4601      	mov	r1, r0
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	1c5a      	adds	r2, r3, #1
 8001832:	60ba      	str	r2, [r7, #8]
 8001834:	b2ca      	uxtb	r2, r1
 8001836:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	3301      	adds	r3, #1
 800183c:	617b      	str	r3, [r7, #20]
 800183e:	697a      	ldr	r2, [r7, #20]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	429a      	cmp	r2, r3
 8001844:	dbf0      	blt.n	8001828 <_read+0x12>
  }

  return len;
 8001846:	687b      	ldr	r3, [r7, #4]
}
 8001848:	4618      	mov	r0, r3
 800184a:	3718      	adds	r7, #24
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800185c:	2300      	movs	r3, #0
 800185e:	617b      	str	r3, [r7, #20]
 8001860:	e009      	b.n	8001876 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	1c5a      	adds	r2, r3, #1
 8001866:	60ba      	str	r2, [r7, #8]
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	4618      	mov	r0, r3
 800186c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	3301      	adds	r3, #1
 8001874:	617b      	str	r3, [r7, #20]
 8001876:	697a      	ldr	r2, [r7, #20]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	429a      	cmp	r2, r3
 800187c:	dbf1      	blt.n	8001862 <_write+0x12>
  }
  return len;
 800187e:	687b      	ldr	r3, [r7, #4]
}
 8001880:	4618      	mov	r0, r3
 8001882:	3718      	adds	r7, #24
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <_close>:

int _close(int file)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001890:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001894:	4618      	mov	r0, r3
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018b0:	605a      	str	r2, [r3, #4]
  return 0;
 80018b2:	2300      	movs	r3, #0
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <_isatty>:

int _isatty(int file)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018c8:	2301      	movs	r3, #1
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr

080018d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018d6:	b480      	push	{r7}
 80018d8:	b085      	sub	sp, #20
 80018da:	af00      	add	r7, sp, #0
 80018dc:	60f8      	str	r0, [r7, #12]
 80018de:	60b9      	str	r1, [r7, #8]
 80018e0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018e2:	2300      	movs	r3, #0
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3714      	adds	r7, #20
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018f8:	4a14      	ldr	r2, [pc, #80]	@ (800194c <_sbrk+0x5c>)
 80018fa:	4b15      	ldr	r3, [pc, #84]	@ (8001950 <_sbrk+0x60>)
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001904:	4b13      	ldr	r3, [pc, #76]	@ (8001954 <_sbrk+0x64>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d102      	bne.n	8001912 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800190c:	4b11      	ldr	r3, [pc, #68]	@ (8001954 <_sbrk+0x64>)
 800190e:	4a12      	ldr	r2, [pc, #72]	@ (8001958 <_sbrk+0x68>)
 8001910:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001912:	4b10      	ldr	r3, [pc, #64]	@ (8001954 <_sbrk+0x64>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4413      	add	r3, r2
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	429a      	cmp	r2, r3
 800191e:	d207      	bcs.n	8001930 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001920:	f004 fcf8 	bl	8006314 <__errno>
 8001924:	4603      	mov	r3, r0
 8001926:	220c      	movs	r2, #12
 8001928:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800192a:	f04f 33ff 	mov.w	r3, #4294967295
 800192e:	e009      	b.n	8001944 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001930:	4b08      	ldr	r3, [pc, #32]	@ (8001954 <_sbrk+0x64>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001936:	4b07      	ldr	r3, [pc, #28]	@ (8001954 <_sbrk+0x64>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4413      	add	r3, r2
 800193e:	4a05      	ldr	r2, [pc, #20]	@ (8001954 <_sbrk+0x64>)
 8001940:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001942:	68fb      	ldr	r3, [r7, #12]
}
 8001944:	4618      	mov	r0, r3
 8001946:	3718      	adds	r7, #24
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	20020000 	.word	0x20020000
 8001950:	00000400 	.word	0x00000400
 8001954:	2000034c 	.word	0x2000034c
 8001958:	200004a0 	.word	0x200004a0

0800195c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001960:	4b06      	ldr	r3, [pc, #24]	@ (800197c <SystemInit+0x20>)
 8001962:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001966:	4a05      	ldr	r2, [pc, #20]	@ (800197c <SystemInit+0x20>)
 8001968:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800196c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	e000ed00 	.word	0xe000ed00

08001980 <calculate_even_parity>:
 */

#include "utils.h"

uint8_t calculate_even_parity(uint16_t val)
{
 8001980:	b480      	push	{r7}
 8001982:	b085      	sub	sp, #20
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	80fb      	strh	r3, [r7, #6]
    uint8_t parity = 0;
 800198a:	2300      	movs	r3, #0
 800198c:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < 15; i++)
 800198e:	2300      	movs	r3, #0
 8001990:	60bb      	str	r3, [r7, #8]
 8001992:	e00f      	b.n	80019b4 <calculate_even_parity+0x34>
    {
        parity ^= (val >> i) & 0x01;
 8001994:	88fa      	ldrh	r2, [r7, #6]
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	fa42 f303 	asr.w	r3, r2, r3
 800199c:	b25b      	sxtb	r3, r3
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	b25a      	sxtb	r2, r3
 80019a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019a8:	4053      	eors	r3, r2
 80019aa:	b25b      	sxtb	r3, r3
 80019ac:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < 15; i++)
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	3301      	adds	r3, #1
 80019b2:	60bb      	str	r3, [r7, #8]
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	2b0e      	cmp	r3, #14
 80019b8:	ddec      	ble.n	8001994 <calculate_even_parity+0x14>
    }
    return parity;
 80019ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3714      	adds	r7, #20
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019c8:	480d      	ldr	r0, [pc, #52]	@ (8001a00 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019ca:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019cc:	f7ff ffc6 	bl	800195c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019d0:	480c      	ldr	r0, [pc, #48]	@ (8001a04 <LoopForever+0x6>)
  ldr r1, =_edata
 80019d2:	490d      	ldr	r1, [pc, #52]	@ (8001a08 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019d4:	4a0d      	ldr	r2, [pc, #52]	@ (8001a0c <LoopForever+0xe>)
  movs r3, #0
 80019d6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80019d8:	e002      	b.n	80019e0 <LoopCopyDataInit>

080019da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019de:	3304      	adds	r3, #4

080019e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019e4:	d3f9      	bcc.n	80019da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001a10 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019e8:	4c0a      	ldr	r4, [pc, #40]	@ (8001a14 <LoopForever+0x16>)
  movs r3, #0
 80019ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019ec:	e001      	b.n	80019f2 <LoopFillZerobss>

080019ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019f0:	3204      	adds	r2, #4

080019f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019f4:	d3fb      	bcc.n	80019ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019f6:	f004 fc93 	bl	8006320 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019fa:	f7ff fb81 	bl	8001100 <main>

080019fe <LoopForever>:

LoopForever:
    b LoopForever
 80019fe:	e7fe      	b.n	80019fe <LoopForever>
  ldr   r0, =_estack
 8001a00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a08:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001a0c:	0800a024 	.word	0x0800a024
  ldr r2, =_sbss
 8001a10:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001a14:	200004a0 	.word	0x200004a0

08001a18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a18:	e7fe      	b.n	8001a18 <ADC1_2_IRQHandler>

08001a1a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b082      	sub	sp, #8
 8001a1e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a20:	2300      	movs	r3, #0
 8001a22:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a24:	2003      	movs	r0, #3
 8001a26:	f000 f95b 	bl	8001ce0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a2a:	2000      	movs	r0, #0
 8001a2c:	f000 f80e 	bl	8001a4c <HAL_InitTick>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d002      	beq.n	8001a3c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	71fb      	strb	r3, [r7, #7]
 8001a3a:	e001      	b.n	8001a40 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a3c:	f7ff fd6a 	bl	8001514 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a40:	79fb      	ldrb	r3, [r7, #7]

}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
	...

08001a4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a54:	2300      	movs	r3, #0
 8001a56:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001a58:	4b16      	ldr	r3, [pc, #88]	@ (8001ab4 <HAL_InitTick+0x68>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d022      	beq.n	8001aa6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001a60:	4b15      	ldr	r3, [pc, #84]	@ (8001ab8 <HAL_InitTick+0x6c>)
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	4b13      	ldr	r3, [pc, #76]	@ (8001ab4 <HAL_InitTick+0x68>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001a6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a74:	4618      	mov	r0, r3
 8001a76:	f000 f966 	bl	8001d46 <HAL_SYSTICK_Config>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d10f      	bne.n	8001aa0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2b0f      	cmp	r3, #15
 8001a84:	d809      	bhi.n	8001a9a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a86:	2200      	movs	r2, #0
 8001a88:	6879      	ldr	r1, [r7, #4]
 8001a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8001a8e:	f000 f932 	bl	8001cf6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a92:	4a0a      	ldr	r2, [pc, #40]	@ (8001abc <HAL_InitTick+0x70>)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6013      	str	r3, [r2, #0]
 8001a98:	e007      	b.n	8001aaa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	73fb      	strb	r3, [r7, #15]
 8001a9e:	e004      	b.n	8001aaa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	73fb      	strb	r3, [r7, #15]
 8001aa4:	e001      	b.n	8001aaa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3710      	adds	r7, #16
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	20000008 	.word	0x20000008
 8001ab8:	20000000 	.word	0x20000000
 8001abc:	20000004 	.word	0x20000004

08001ac0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ac4:	4b05      	ldr	r3, [pc, #20]	@ (8001adc <HAL_IncTick+0x1c>)
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	4b05      	ldr	r3, [pc, #20]	@ (8001ae0 <HAL_IncTick+0x20>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4413      	add	r3, r2
 8001ace:	4a03      	ldr	r2, [pc, #12]	@ (8001adc <HAL_IncTick+0x1c>)
 8001ad0:	6013      	str	r3, [r2, #0]
}
 8001ad2:	bf00      	nop
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	20000350 	.word	0x20000350
 8001ae0:	20000008 	.word	0x20000008

08001ae4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ae8:	4b03      	ldr	r3, [pc, #12]	@ (8001af8 <HAL_GetTick+0x14>)
 8001aea:	681b      	ldr	r3, [r3, #0]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	20000350 	.word	0x20000350

08001afc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b04:	f7ff ffee 	bl	8001ae4 <HAL_GetTick>
 8001b08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b14:	d004      	beq.n	8001b20 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b16:	4b09      	ldr	r3, [pc, #36]	@ (8001b3c <HAL_Delay+0x40>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b20:	bf00      	nop
 8001b22:	f7ff ffdf 	bl	8001ae4 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	68fa      	ldr	r2, [r7, #12]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d8f7      	bhi.n	8001b22 <HAL_Delay+0x26>
  {
  }
}
 8001b32:	bf00      	nop
 8001b34:	bf00      	nop
 8001b36:	3710      	adds	r7, #16
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	20000008 	.word	0x20000008

08001b40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b50:	4b0c      	ldr	r3, [pc, #48]	@ (8001b84 <__NVIC_SetPriorityGrouping+0x44>)
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b56:	68ba      	ldr	r2, [r7, #8]
 8001b58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b72:	4a04      	ldr	r2, [pc, #16]	@ (8001b84 <__NVIC_SetPriorityGrouping+0x44>)
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	60d3      	str	r3, [r2, #12]
}
 8001b78:	bf00      	nop
 8001b7a:	3714      	adds	r7, #20
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr
 8001b84:	e000ed00 	.word	0xe000ed00

08001b88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b8c:	4b04      	ldr	r3, [pc, #16]	@ (8001ba0 <__NVIC_GetPriorityGrouping+0x18>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	0a1b      	lsrs	r3, r3, #8
 8001b92:	f003 0307 	and.w	r3, r3, #7
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	e000ed00 	.word	0xe000ed00

08001ba4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	db0b      	blt.n	8001bce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bb6:	79fb      	ldrb	r3, [r7, #7]
 8001bb8:	f003 021f 	and.w	r2, r3, #31
 8001bbc:	4907      	ldr	r1, [pc, #28]	@ (8001bdc <__NVIC_EnableIRQ+0x38>)
 8001bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc2:	095b      	lsrs	r3, r3, #5
 8001bc4:	2001      	movs	r0, #1
 8001bc6:	fa00 f202 	lsl.w	r2, r0, r2
 8001bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bce:	bf00      	nop
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	e000e100 	.word	0xe000e100

08001be0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	6039      	str	r1, [r7, #0]
 8001bea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	db0a      	blt.n	8001c0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	b2da      	uxtb	r2, r3
 8001bf8:	490c      	ldr	r1, [pc, #48]	@ (8001c2c <__NVIC_SetPriority+0x4c>)
 8001bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfe:	0112      	lsls	r2, r2, #4
 8001c00:	b2d2      	uxtb	r2, r2
 8001c02:	440b      	add	r3, r1
 8001c04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c08:	e00a      	b.n	8001c20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	b2da      	uxtb	r2, r3
 8001c0e:	4908      	ldr	r1, [pc, #32]	@ (8001c30 <__NVIC_SetPriority+0x50>)
 8001c10:	79fb      	ldrb	r3, [r7, #7]
 8001c12:	f003 030f 	and.w	r3, r3, #15
 8001c16:	3b04      	subs	r3, #4
 8001c18:	0112      	lsls	r2, r2, #4
 8001c1a:	b2d2      	uxtb	r2, r2
 8001c1c:	440b      	add	r3, r1
 8001c1e:	761a      	strb	r2, [r3, #24]
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr
 8001c2c:	e000e100 	.word	0xe000e100
 8001c30:	e000ed00 	.word	0xe000ed00

08001c34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b089      	sub	sp, #36	@ 0x24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f003 0307 	and.w	r3, r3, #7
 8001c46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	f1c3 0307 	rsb	r3, r3, #7
 8001c4e:	2b04      	cmp	r3, #4
 8001c50:	bf28      	it	cs
 8001c52:	2304      	movcs	r3, #4
 8001c54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	3304      	adds	r3, #4
 8001c5a:	2b06      	cmp	r3, #6
 8001c5c:	d902      	bls.n	8001c64 <NVIC_EncodePriority+0x30>
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	3b03      	subs	r3, #3
 8001c62:	e000      	b.n	8001c66 <NVIC_EncodePriority+0x32>
 8001c64:	2300      	movs	r3, #0
 8001c66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c68:	f04f 32ff 	mov.w	r2, #4294967295
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	43da      	mvns	r2, r3
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	401a      	ands	r2, r3
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	fa01 f303 	lsl.w	r3, r1, r3
 8001c86:	43d9      	mvns	r1, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c8c:	4313      	orrs	r3, r2
         );
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3724      	adds	r7, #36	@ 0x24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
	...

08001c9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	3b01      	subs	r3, #1
 8001ca8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cac:	d301      	bcc.n	8001cb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e00f      	b.n	8001cd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cb2:	4a0a      	ldr	r2, [pc, #40]	@ (8001cdc <SysTick_Config+0x40>)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cba:	210f      	movs	r1, #15
 8001cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc0:	f7ff ff8e 	bl	8001be0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cc4:	4b05      	ldr	r3, [pc, #20]	@ (8001cdc <SysTick_Config+0x40>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cca:	4b04      	ldr	r3, [pc, #16]	@ (8001cdc <SysTick_Config+0x40>)
 8001ccc:	2207      	movs	r2, #7
 8001cce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	e000e010 	.word	0xe000e010

08001ce0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f7ff ff29 	bl	8001b40 <__NVIC_SetPriorityGrouping>
}
 8001cee:	bf00      	nop
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b086      	sub	sp, #24
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	60b9      	str	r1, [r7, #8]
 8001d00:	607a      	str	r2, [r7, #4]
 8001d02:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d04:	f7ff ff40 	bl	8001b88 <__NVIC_GetPriorityGrouping>
 8001d08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	68b9      	ldr	r1, [r7, #8]
 8001d0e:	6978      	ldr	r0, [r7, #20]
 8001d10:	f7ff ff90 	bl	8001c34 <NVIC_EncodePriority>
 8001d14:	4602      	mov	r2, r0
 8001d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d1a:	4611      	mov	r1, r2
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff ff5f 	bl	8001be0 <__NVIC_SetPriority>
}
 8001d22:	bf00      	nop
 8001d24:	3718      	adds	r7, #24
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b082      	sub	sp, #8
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	4603      	mov	r3, r0
 8001d32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff ff33 	bl	8001ba4 <__NVIC_EnableIRQ>
}
 8001d3e:	bf00      	nop
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b082      	sub	sp, #8
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f7ff ffa4 	bl	8001c9c <SysTick_Config>
 8001d54:	4603      	mov	r3, r0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	b085      	sub	sp, #20
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d66:	2300      	movs	r3, #0
 8001d68:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d005      	beq.n	8001d82 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2204      	movs	r2, #4
 8001d7a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	73fb      	strb	r3, [r7, #15]
 8001d80:	e037      	b.n	8001df2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f022 020e 	bic.w	r2, r2, #14
 8001d90:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d9c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001da0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f022 0201 	bic.w	r2, r2, #1
 8001db0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001db6:	f003 021f 	and.w	r2, r3, #31
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dbe:	2101      	movs	r1, #1
 8001dc0:	fa01 f202 	lsl.w	r2, r1, r2
 8001dc4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001dce:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d00c      	beq.n	8001df2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001de2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001de6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001df0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2201      	movs	r2, #1
 8001df6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8001e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3714      	adds	r7, #20
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d00d      	beq.n	8001e44 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2204      	movs	r2, #4
 8001e2c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2201      	movs	r2, #1
 8001e32:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	73fb      	strb	r3, [r7, #15]
 8001e42:	e047      	b.n	8001ed4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f022 020e 	bic.w	r2, r2, #14
 8001e52:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f022 0201 	bic.w	r2, r2, #1
 8001e62:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e6e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e72:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e78:	f003 021f 	and.w	r2, r3, #31
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e80:	2101      	movs	r1, #1
 8001e82:	fa01 f202 	lsl.w	r2, r1, r2
 8001e86:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001e90:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d00c      	beq.n	8001eb4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ea4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ea8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001eb2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d003      	beq.n	8001ed4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	4798      	blx	r3
    }
  }
  return status;
 8001ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
	...

08001ee0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b087      	sub	sp, #28
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001eea:	2300      	movs	r3, #0
 8001eec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001eee:	e15a      	b.n	80021a6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	2101      	movs	r1, #1
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8001efc:	4013      	ands	r3, r2
 8001efe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	f000 814c 	beq.w	80021a0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f003 0303 	and.w	r3, r3, #3
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d005      	beq.n	8001f20 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d130      	bne.n	8001f82 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	2203      	movs	r2, #3
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	4013      	ands	r3, r2
 8001f36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	68da      	ldr	r2, [r3, #12]
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	693a      	ldr	r2, [r7, #16]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f56:	2201      	movs	r2, #1
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	43db      	mvns	r3, r3
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	4013      	ands	r3, r2
 8001f64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	091b      	lsrs	r3, r3, #4
 8001f6c:	f003 0201 	and.w	r2, r3, #1
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	fa02 f303 	lsl.w	r3, r2, r3
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f003 0303 	and.w	r3, r3, #3
 8001f8a:	2b03      	cmp	r3, #3
 8001f8c:	d017      	beq.n	8001fbe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	2203      	movs	r2, #3
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	689a      	ldr	r2, [r3, #8]
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f003 0303 	and.w	r3, r3, #3
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d123      	bne.n	8002012 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	08da      	lsrs	r2, r3, #3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	3208      	adds	r2, #8
 8001fd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fd6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	220f      	movs	r2, #15
 8001fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe6:	43db      	mvns	r3, r3
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	4013      	ands	r3, r2
 8001fec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	691a      	ldr	r2, [r3, #16]
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	f003 0307 	and.w	r3, r3, #7
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	4313      	orrs	r3, r2
 8002002:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	08da      	lsrs	r2, r3, #3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	3208      	adds	r2, #8
 800200c:	6939      	ldr	r1, [r7, #16]
 800200e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	2203      	movs	r2, #3
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	43db      	mvns	r3, r3
 8002024:	693a      	ldr	r2, [r7, #16]
 8002026:	4013      	ands	r3, r2
 8002028:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f003 0203 	and.w	r2, r3, #3
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	4313      	orrs	r3, r2
 800203e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800204e:	2b00      	cmp	r3, #0
 8002050:	f000 80a6 	beq.w	80021a0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002054:	4b5b      	ldr	r3, [pc, #364]	@ (80021c4 <HAL_GPIO_Init+0x2e4>)
 8002056:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002058:	4a5a      	ldr	r2, [pc, #360]	@ (80021c4 <HAL_GPIO_Init+0x2e4>)
 800205a:	f043 0301 	orr.w	r3, r3, #1
 800205e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002060:	4b58      	ldr	r3, [pc, #352]	@ (80021c4 <HAL_GPIO_Init+0x2e4>)
 8002062:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	60bb      	str	r3, [r7, #8]
 800206a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800206c:	4a56      	ldr	r2, [pc, #344]	@ (80021c8 <HAL_GPIO_Init+0x2e8>)
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	089b      	lsrs	r3, r3, #2
 8002072:	3302      	adds	r3, #2
 8002074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002078:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	f003 0303 	and.w	r3, r3, #3
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	220f      	movs	r2, #15
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	43db      	mvns	r3, r3
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	4013      	ands	r3, r2
 800208e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002096:	d01f      	beq.n	80020d8 <HAL_GPIO_Init+0x1f8>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4a4c      	ldr	r2, [pc, #304]	@ (80021cc <HAL_GPIO_Init+0x2ec>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d019      	beq.n	80020d4 <HAL_GPIO_Init+0x1f4>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4a4b      	ldr	r2, [pc, #300]	@ (80021d0 <HAL_GPIO_Init+0x2f0>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d013      	beq.n	80020d0 <HAL_GPIO_Init+0x1f0>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4a4a      	ldr	r2, [pc, #296]	@ (80021d4 <HAL_GPIO_Init+0x2f4>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d00d      	beq.n	80020cc <HAL_GPIO_Init+0x1ec>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a49      	ldr	r2, [pc, #292]	@ (80021d8 <HAL_GPIO_Init+0x2f8>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d007      	beq.n	80020c8 <HAL_GPIO_Init+0x1e8>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4a48      	ldr	r2, [pc, #288]	@ (80021dc <HAL_GPIO_Init+0x2fc>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d101      	bne.n	80020c4 <HAL_GPIO_Init+0x1e4>
 80020c0:	2305      	movs	r3, #5
 80020c2:	e00a      	b.n	80020da <HAL_GPIO_Init+0x1fa>
 80020c4:	2306      	movs	r3, #6
 80020c6:	e008      	b.n	80020da <HAL_GPIO_Init+0x1fa>
 80020c8:	2304      	movs	r3, #4
 80020ca:	e006      	b.n	80020da <HAL_GPIO_Init+0x1fa>
 80020cc:	2303      	movs	r3, #3
 80020ce:	e004      	b.n	80020da <HAL_GPIO_Init+0x1fa>
 80020d0:	2302      	movs	r3, #2
 80020d2:	e002      	b.n	80020da <HAL_GPIO_Init+0x1fa>
 80020d4:	2301      	movs	r3, #1
 80020d6:	e000      	b.n	80020da <HAL_GPIO_Init+0x1fa>
 80020d8:	2300      	movs	r3, #0
 80020da:	697a      	ldr	r2, [r7, #20]
 80020dc:	f002 0203 	and.w	r2, r2, #3
 80020e0:	0092      	lsls	r2, r2, #2
 80020e2:	4093      	lsls	r3, r2
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020ea:	4937      	ldr	r1, [pc, #220]	@ (80021c8 <HAL_GPIO_Init+0x2e8>)
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	089b      	lsrs	r3, r3, #2
 80020f0:	3302      	adds	r3, #2
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020f8:	4b39      	ldr	r3, [pc, #228]	@ (80021e0 <HAL_GPIO_Init+0x300>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	43db      	mvns	r3, r3
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	4013      	ands	r3, r2
 8002106:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d003      	beq.n	800211c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002114:	693a      	ldr	r2, [r7, #16]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	4313      	orrs	r3, r2
 800211a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800211c:	4a30      	ldr	r2, [pc, #192]	@ (80021e0 <HAL_GPIO_Init+0x300>)
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002122:	4b2f      	ldr	r3, [pc, #188]	@ (80021e0 <HAL_GPIO_Init+0x300>)
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	43db      	mvns	r3, r3
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	4013      	ands	r3, r2
 8002130:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d003      	beq.n	8002146 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	4313      	orrs	r3, r2
 8002144:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002146:	4a26      	ldr	r2, [pc, #152]	@ (80021e0 <HAL_GPIO_Init+0x300>)
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800214c:	4b24      	ldr	r3, [pc, #144]	@ (80021e0 <HAL_GPIO_Init+0x300>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	43db      	mvns	r3, r3
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	4013      	ands	r3, r2
 800215a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d003      	beq.n	8002170 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002168:	693a      	ldr	r2, [r7, #16]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	4313      	orrs	r3, r2
 800216e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002170:	4a1b      	ldr	r2, [pc, #108]	@ (80021e0 <HAL_GPIO_Init+0x300>)
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002176:	4b1a      	ldr	r3, [pc, #104]	@ (80021e0 <HAL_GPIO_Init+0x300>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	43db      	mvns	r3, r3
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	4013      	ands	r3, r2
 8002184:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d003      	beq.n	800219a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	4313      	orrs	r3, r2
 8002198:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800219a:	4a11      	ldr	r2, [pc, #68]	@ (80021e0 <HAL_GPIO_Init+0x300>)
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	3301      	adds	r3, #1
 80021a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	fa22 f303 	lsr.w	r3, r2, r3
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	f47f ae9d 	bne.w	8001ef0 <HAL_GPIO_Init+0x10>
  }
}
 80021b6:	bf00      	nop
 80021b8:	bf00      	nop
 80021ba:	371c      	adds	r7, #28
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr
 80021c4:	40021000 	.word	0x40021000
 80021c8:	40010000 	.word	0x40010000
 80021cc:	48000400 	.word	0x48000400
 80021d0:	48000800 	.word	0x48000800
 80021d4:	48000c00 	.word	0x48000c00
 80021d8:	48001000 	.word	0x48001000
 80021dc:	48001400 	.word	0x48001400
 80021e0:	40010400 	.word	0x40010400

080021e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	460b      	mov	r3, r1
 80021ee:	807b      	strh	r3, [r7, #2]
 80021f0:	4613      	mov	r3, r2
 80021f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021f4:	787b      	ldrb	r3, [r7, #1]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d003      	beq.n	8002202 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021fa:	887a      	ldrh	r2, [r7, #2]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002200:	e002      	b.n	8002208 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002202:	887a      	ldrh	r2, [r7, #2]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002208:	bf00      	nop
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	4603      	mov	r3, r0
 800221c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800221e:	4b08      	ldr	r3, [pc, #32]	@ (8002240 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002220:	695a      	ldr	r2, [r3, #20]
 8002222:	88fb      	ldrh	r3, [r7, #6]
 8002224:	4013      	ands	r3, r2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d006      	beq.n	8002238 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800222a:	4a05      	ldr	r2, [pc, #20]	@ (8002240 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800222c:	88fb      	ldrh	r3, [r7, #6]
 800222e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002230:	88fb      	ldrh	r3, [r7, #6]
 8002232:	4618      	mov	r0, r3
 8002234:	f000 f806 	bl	8002244 <HAL_GPIO_EXTI_Callback>
  }
}
 8002238:	bf00      	nop
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40010400 	.word	0x40010400

08002244 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	4603      	mov	r3, r0
 800224c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800224e:	bf00      	nop
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
	...

0800225c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d141      	bne.n	80022ee <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800226a:	4b4b      	ldr	r3, [pc, #300]	@ (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002272:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002276:	d131      	bne.n	80022dc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002278:	4b47      	ldr	r3, [pc, #284]	@ (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800227a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800227e:	4a46      	ldr	r2, [pc, #280]	@ (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002280:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002284:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002288:	4b43      	ldr	r3, [pc, #268]	@ (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002290:	4a41      	ldr	r2, [pc, #260]	@ (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002292:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002296:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002298:	4b40      	ldr	r3, [pc, #256]	@ (800239c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2232      	movs	r2, #50	@ 0x32
 800229e:	fb02 f303 	mul.w	r3, r2, r3
 80022a2:	4a3f      	ldr	r2, [pc, #252]	@ (80023a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80022a4:	fba2 2303 	umull	r2, r3, r2, r3
 80022a8:	0c9b      	lsrs	r3, r3, #18
 80022aa:	3301      	adds	r3, #1
 80022ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022ae:	e002      	b.n	80022b6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	3b01      	subs	r3, #1
 80022b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022b6:	4b38      	ldr	r3, [pc, #224]	@ (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022c2:	d102      	bne.n	80022ca <HAL_PWREx_ControlVoltageScaling+0x6e>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1f2      	bne.n	80022b0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022ca:	4b33      	ldr	r3, [pc, #204]	@ (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022d6:	d158      	bne.n	800238a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e057      	b.n	800238c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022dc:	4b2e      	ldr	r3, [pc, #184]	@ (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80022e2:	4a2d      	ldr	r2, [pc, #180]	@ (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80022e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80022ec:	e04d      	b.n	800238a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80022f4:	d141      	bne.n	800237a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80022f6:	4b28      	ldr	r3, [pc, #160]	@ (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80022fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002302:	d131      	bne.n	8002368 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002304:	4b24      	ldr	r3, [pc, #144]	@ (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002306:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800230a:	4a23      	ldr	r2, [pc, #140]	@ (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800230c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002310:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002314:	4b20      	ldr	r3, [pc, #128]	@ (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800231c:	4a1e      	ldr	r2, [pc, #120]	@ (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800231e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002322:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002324:	4b1d      	ldr	r3, [pc, #116]	@ (800239c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2232      	movs	r2, #50	@ 0x32
 800232a:	fb02 f303 	mul.w	r3, r2, r3
 800232e:	4a1c      	ldr	r2, [pc, #112]	@ (80023a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002330:	fba2 2303 	umull	r2, r3, r2, r3
 8002334:	0c9b      	lsrs	r3, r3, #18
 8002336:	3301      	adds	r3, #1
 8002338:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800233a:	e002      	b.n	8002342 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	3b01      	subs	r3, #1
 8002340:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002342:	4b15      	ldr	r3, [pc, #84]	@ (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800234a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800234e:	d102      	bne.n	8002356 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d1f2      	bne.n	800233c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002356:	4b10      	ldr	r3, [pc, #64]	@ (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800235e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002362:	d112      	bne.n	800238a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e011      	b.n	800238c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002368:	4b0b      	ldr	r3, [pc, #44]	@ (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800236a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800236e:	4a0a      	ldr	r2, [pc, #40]	@ (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002370:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002374:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002378:	e007      	b.n	800238a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800237a:	4b07      	ldr	r3, [pc, #28]	@ (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002382:	4a05      	ldr	r2, [pc, #20]	@ (8002398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002384:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002388:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800238a:	2300      	movs	r3, #0
}
 800238c:	4618      	mov	r0, r3
 800238e:	3714      	adds	r7, #20
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr
 8002398:	40007000 	.word	0x40007000
 800239c:	20000000 	.word	0x20000000
 80023a0:	431bde83 	.word	0x431bde83

080023a4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80023a8:	4b05      	ldr	r3, [pc, #20]	@ (80023c0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	4a04      	ldr	r2, [pc, #16]	@ (80023c0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80023ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023b2:	6093      	str	r3, [r2, #8]
}
 80023b4:	bf00      	nop
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	40007000 	.word	0x40007000

080023c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b088      	sub	sp, #32
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e2fe      	b.n	80029d4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d075      	beq.n	80024ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023e2:	4b97      	ldr	r3, [pc, #604]	@ (8002640 <HAL_RCC_OscConfig+0x27c>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f003 030c 	and.w	r3, r3, #12
 80023ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023ec:	4b94      	ldr	r3, [pc, #592]	@ (8002640 <HAL_RCC_OscConfig+0x27c>)
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	f003 0303 	and.w	r3, r3, #3
 80023f4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	2b0c      	cmp	r3, #12
 80023fa:	d102      	bne.n	8002402 <HAL_RCC_OscConfig+0x3e>
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	2b03      	cmp	r3, #3
 8002400:	d002      	beq.n	8002408 <HAL_RCC_OscConfig+0x44>
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	2b08      	cmp	r3, #8
 8002406:	d10b      	bne.n	8002420 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002408:	4b8d      	ldr	r3, [pc, #564]	@ (8002640 <HAL_RCC_OscConfig+0x27c>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d05b      	beq.n	80024cc <HAL_RCC_OscConfig+0x108>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d157      	bne.n	80024cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e2d9      	b.n	80029d4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002428:	d106      	bne.n	8002438 <HAL_RCC_OscConfig+0x74>
 800242a:	4b85      	ldr	r3, [pc, #532]	@ (8002640 <HAL_RCC_OscConfig+0x27c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a84      	ldr	r2, [pc, #528]	@ (8002640 <HAL_RCC_OscConfig+0x27c>)
 8002430:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002434:	6013      	str	r3, [r2, #0]
 8002436:	e01d      	b.n	8002474 <HAL_RCC_OscConfig+0xb0>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002440:	d10c      	bne.n	800245c <HAL_RCC_OscConfig+0x98>
 8002442:	4b7f      	ldr	r3, [pc, #508]	@ (8002640 <HAL_RCC_OscConfig+0x27c>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a7e      	ldr	r2, [pc, #504]	@ (8002640 <HAL_RCC_OscConfig+0x27c>)
 8002448:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800244c:	6013      	str	r3, [r2, #0]
 800244e:	4b7c      	ldr	r3, [pc, #496]	@ (8002640 <HAL_RCC_OscConfig+0x27c>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a7b      	ldr	r2, [pc, #492]	@ (8002640 <HAL_RCC_OscConfig+0x27c>)
 8002454:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002458:	6013      	str	r3, [r2, #0]
 800245a:	e00b      	b.n	8002474 <HAL_RCC_OscConfig+0xb0>
 800245c:	4b78      	ldr	r3, [pc, #480]	@ (8002640 <HAL_RCC_OscConfig+0x27c>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a77      	ldr	r2, [pc, #476]	@ (8002640 <HAL_RCC_OscConfig+0x27c>)
 8002462:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002466:	6013      	str	r3, [r2, #0]
 8002468:	4b75      	ldr	r3, [pc, #468]	@ (8002640 <HAL_RCC_OscConfig+0x27c>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a74      	ldr	r2, [pc, #464]	@ (8002640 <HAL_RCC_OscConfig+0x27c>)
 800246e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002472:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d013      	beq.n	80024a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800247c:	f7ff fb32 	bl	8001ae4 <HAL_GetTick>
 8002480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002482:	e008      	b.n	8002496 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002484:	f7ff fb2e 	bl	8001ae4 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b64      	cmp	r3, #100	@ 0x64
 8002490:	d901      	bls.n	8002496 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e29e      	b.n	80029d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002496:	4b6a      	ldr	r3, [pc, #424]	@ (8002640 <HAL_RCC_OscConfig+0x27c>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d0f0      	beq.n	8002484 <HAL_RCC_OscConfig+0xc0>
 80024a2:	e014      	b.n	80024ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a4:	f7ff fb1e 	bl	8001ae4 <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024ac:	f7ff fb1a 	bl	8001ae4 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b64      	cmp	r3, #100	@ 0x64
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e28a      	b.n	80029d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024be:	4b60      	ldr	r3, [pc, #384]	@ (8002640 <HAL_RCC_OscConfig+0x27c>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1f0      	bne.n	80024ac <HAL_RCC_OscConfig+0xe8>
 80024ca:	e000      	b.n	80024ce <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d075      	beq.n	80025c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024da:	4b59      	ldr	r3, [pc, #356]	@ (8002640 <HAL_RCC_OscConfig+0x27c>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f003 030c 	and.w	r3, r3, #12
 80024e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024e4:	4b56      	ldr	r3, [pc, #344]	@ (8002640 <HAL_RCC_OscConfig+0x27c>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	f003 0303 	and.w	r3, r3, #3
 80024ec:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	2b0c      	cmp	r3, #12
 80024f2:	d102      	bne.n	80024fa <HAL_RCC_OscConfig+0x136>
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d002      	beq.n	8002500 <HAL_RCC_OscConfig+0x13c>
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	2b04      	cmp	r3, #4
 80024fe:	d11f      	bne.n	8002540 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002500:	4b4f      	ldr	r3, [pc, #316]	@ (8002640 <HAL_RCC_OscConfig+0x27c>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002508:	2b00      	cmp	r3, #0
 800250a:	d005      	beq.n	8002518 <HAL_RCC_OscConfig+0x154>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d101      	bne.n	8002518 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e25d      	b.n	80029d4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002518:	4b49      	ldr	r3, [pc, #292]	@ (8002640 <HAL_RCC_OscConfig+0x27c>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	061b      	lsls	r3, r3, #24
 8002526:	4946      	ldr	r1, [pc, #280]	@ (8002640 <HAL_RCC_OscConfig+0x27c>)
 8002528:	4313      	orrs	r3, r2
 800252a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800252c:	4b45      	ldr	r3, [pc, #276]	@ (8002644 <HAL_RCC_OscConfig+0x280>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff fa8b 	bl	8001a4c <HAL_InitTick>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d043      	beq.n	80025c4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e249      	b.n	80029d4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d023      	beq.n	8002590 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002548:	4b3d      	ldr	r3, [pc, #244]	@ (8002640 <HAL_RCC_OscConfig+0x27c>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a3c      	ldr	r2, [pc, #240]	@ (8002640 <HAL_RCC_OscConfig+0x27c>)
 800254e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002552:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002554:	f7ff fac6 	bl	8001ae4 <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800255a:	e008      	b.n	800256e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800255c:	f7ff fac2 	bl	8001ae4 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b02      	cmp	r3, #2
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e232      	b.n	80029d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800256e:	4b34      	ldr	r3, [pc, #208]	@ (8002640 <HAL_RCC_OscConfig+0x27c>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002576:	2b00      	cmp	r3, #0
 8002578:	d0f0      	beq.n	800255c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800257a:	4b31      	ldr	r3, [pc, #196]	@ (8002640 <HAL_RCC_OscConfig+0x27c>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	061b      	lsls	r3, r3, #24
 8002588:	492d      	ldr	r1, [pc, #180]	@ (8002640 <HAL_RCC_OscConfig+0x27c>)
 800258a:	4313      	orrs	r3, r2
 800258c:	604b      	str	r3, [r1, #4]
 800258e:	e01a      	b.n	80025c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002590:	4b2b      	ldr	r3, [pc, #172]	@ (8002640 <HAL_RCC_OscConfig+0x27c>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a2a      	ldr	r2, [pc, #168]	@ (8002640 <HAL_RCC_OscConfig+0x27c>)
 8002596:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800259a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800259c:	f7ff faa2 	bl	8001ae4 <HAL_GetTick>
 80025a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025a2:	e008      	b.n	80025b6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025a4:	f7ff fa9e 	bl	8001ae4 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e20e      	b.n	80029d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025b6:	4b22      	ldr	r3, [pc, #136]	@ (8002640 <HAL_RCC_OscConfig+0x27c>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1f0      	bne.n	80025a4 <HAL_RCC_OscConfig+0x1e0>
 80025c2:	e000      	b.n	80025c6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025c4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0308 	and.w	r3, r3, #8
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d041      	beq.n	8002656 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	695b      	ldr	r3, [r3, #20]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d01c      	beq.n	8002614 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025da:	4b19      	ldr	r3, [pc, #100]	@ (8002640 <HAL_RCC_OscConfig+0x27c>)
 80025dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025e0:	4a17      	ldr	r2, [pc, #92]	@ (8002640 <HAL_RCC_OscConfig+0x27c>)
 80025e2:	f043 0301 	orr.w	r3, r3, #1
 80025e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ea:	f7ff fa7b 	bl	8001ae4 <HAL_GetTick>
 80025ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025f0:	e008      	b.n	8002604 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025f2:	f7ff fa77 	bl	8001ae4 <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d901      	bls.n	8002604 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e1e7      	b.n	80029d4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002604:	4b0e      	ldr	r3, [pc, #56]	@ (8002640 <HAL_RCC_OscConfig+0x27c>)
 8002606:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d0ef      	beq.n	80025f2 <HAL_RCC_OscConfig+0x22e>
 8002612:	e020      	b.n	8002656 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002614:	4b0a      	ldr	r3, [pc, #40]	@ (8002640 <HAL_RCC_OscConfig+0x27c>)
 8002616:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800261a:	4a09      	ldr	r2, [pc, #36]	@ (8002640 <HAL_RCC_OscConfig+0x27c>)
 800261c:	f023 0301 	bic.w	r3, r3, #1
 8002620:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002624:	f7ff fa5e 	bl	8001ae4 <HAL_GetTick>
 8002628:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800262a:	e00d      	b.n	8002648 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800262c:	f7ff fa5a 	bl	8001ae4 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d906      	bls.n	8002648 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e1ca      	b.n	80029d4 <HAL_RCC_OscConfig+0x610>
 800263e:	bf00      	nop
 8002640:	40021000 	.word	0x40021000
 8002644:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002648:	4b8c      	ldr	r3, [pc, #560]	@ (800287c <HAL_RCC_OscConfig+0x4b8>)
 800264a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1ea      	bne.n	800262c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0304 	and.w	r3, r3, #4
 800265e:	2b00      	cmp	r3, #0
 8002660:	f000 80a6 	beq.w	80027b0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002664:	2300      	movs	r3, #0
 8002666:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002668:	4b84      	ldr	r3, [pc, #528]	@ (800287c <HAL_RCC_OscConfig+0x4b8>)
 800266a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800266c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d101      	bne.n	8002678 <HAL_RCC_OscConfig+0x2b4>
 8002674:	2301      	movs	r3, #1
 8002676:	e000      	b.n	800267a <HAL_RCC_OscConfig+0x2b6>
 8002678:	2300      	movs	r3, #0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d00d      	beq.n	800269a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800267e:	4b7f      	ldr	r3, [pc, #508]	@ (800287c <HAL_RCC_OscConfig+0x4b8>)
 8002680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002682:	4a7e      	ldr	r2, [pc, #504]	@ (800287c <HAL_RCC_OscConfig+0x4b8>)
 8002684:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002688:	6593      	str	r3, [r2, #88]	@ 0x58
 800268a:	4b7c      	ldr	r3, [pc, #496]	@ (800287c <HAL_RCC_OscConfig+0x4b8>)
 800268c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800268e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002692:	60fb      	str	r3, [r7, #12]
 8002694:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002696:	2301      	movs	r3, #1
 8002698:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800269a:	4b79      	ldr	r3, [pc, #484]	@ (8002880 <HAL_RCC_OscConfig+0x4bc>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d118      	bne.n	80026d8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026a6:	4b76      	ldr	r3, [pc, #472]	@ (8002880 <HAL_RCC_OscConfig+0x4bc>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a75      	ldr	r2, [pc, #468]	@ (8002880 <HAL_RCC_OscConfig+0x4bc>)
 80026ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026b2:	f7ff fa17 	bl	8001ae4 <HAL_GetTick>
 80026b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026b8:	e008      	b.n	80026cc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ba:	f7ff fa13 	bl	8001ae4 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d901      	bls.n	80026cc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e183      	b.n	80029d4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026cc:	4b6c      	ldr	r3, [pc, #432]	@ (8002880 <HAL_RCC_OscConfig+0x4bc>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d0f0      	beq.n	80026ba <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d108      	bne.n	80026f2 <HAL_RCC_OscConfig+0x32e>
 80026e0:	4b66      	ldr	r3, [pc, #408]	@ (800287c <HAL_RCC_OscConfig+0x4b8>)
 80026e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026e6:	4a65      	ldr	r2, [pc, #404]	@ (800287c <HAL_RCC_OscConfig+0x4b8>)
 80026e8:	f043 0301 	orr.w	r3, r3, #1
 80026ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026f0:	e024      	b.n	800273c <HAL_RCC_OscConfig+0x378>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	2b05      	cmp	r3, #5
 80026f8:	d110      	bne.n	800271c <HAL_RCC_OscConfig+0x358>
 80026fa:	4b60      	ldr	r3, [pc, #384]	@ (800287c <HAL_RCC_OscConfig+0x4b8>)
 80026fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002700:	4a5e      	ldr	r2, [pc, #376]	@ (800287c <HAL_RCC_OscConfig+0x4b8>)
 8002702:	f043 0304 	orr.w	r3, r3, #4
 8002706:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800270a:	4b5c      	ldr	r3, [pc, #368]	@ (800287c <HAL_RCC_OscConfig+0x4b8>)
 800270c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002710:	4a5a      	ldr	r2, [pc, #360]	@ (800287c <HAL_RCC_OscConfig+0x4b8>)
 8002712:	f043 0301 	orr.w	r3, r3, #1
 8002716:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800271a:	e00f      	b.n	800273c <HAL_RCC_OscConfig+0x378>
 800271c:	4b57      	ldr	r3, [pc, #348]	@ (800287c <HAL_RCC_OscConfig+0x4b8>)
 800271e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002722:	4a56      	ldr	r2, [pc, #344]	@ (800287c <HAL_RCC_OscConfig+0x4b8>)
 8002724:	f023 0301 	bic.w	r3, r3, #1
 8002728:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800272c:	4b53      	ldr	r3, [pc, #332]	@ (800287c <HAL_RCC_OscConfig+0x4b8>)
 800272e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002732:	4a52      	ldr	r2, [pc, #328]	@ (800287c <HAL_RCC_OscConfig+0x4b8>)
 8002734:	f023 0304 	bic.w	r3, r3, #4
 8002738:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d016      	beq.n	8002772 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002744:	f7ff f9ce 	bl	8001ae4 <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800274a:	e00a      	b.n	8002762 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800274c:	f7ff f9ca 	bl	8001ae4 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	f241 3288 	movw	r2, #5000	@ 0x1388
 800275a:	4293      	cmp	r3, r2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e138      	b.n	80029d4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002762:	4b46      	ldr	r3, [pc, #280]	@ (800287c <HAL_RCC_OscConfig+0x4b8>)
 8002764:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0ed      	beq.n	800274c <HAL_RCC_OscConfig+0x388>
 8002770:	e015      	b.n	800279e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002772:	f7ff f9b7 	bl	8001ae4 <HAL_GetTick>
 8002776:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002778:	e00a      	b.n	8002790 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800277a:	f7ff f9b3 	bl	8001ae4 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002788:	4293      	cmp	r3, r2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e121      	b.n	80029d4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002790:	4b3a      	ldr	r3, [pc, #232]	@ (800287c <HAL_RCC_OscConfig+0x4b8>)
 8002792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1ed      	bne.n	800277a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800279e:	7ffb      	ldrb	r3, [r7, #31]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d105      	bne.n	80027b0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027a4:	4b35      	ldr	r3, [pc, #212]	@ (800287c <HAL_RCC_OscConfig+0x4b8>)
 80027a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027a8:	4a34      	ldr	r2, [pc, #208]	@ (800287c <HAL_RCC_OscConfig+0x4b8>)
 80027aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027ae:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0320 	and.w	r3, r3, #32
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d03c      	beq.n	8002836 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d01c      	beq.n	80027fe <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80027c4:	4b2d      	ldr	r3, [pc, #180]	@ (800287c <HAL_RCC_OscConfig+0x4b8>)
 80027c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80027ca:	4a2c      	ldr	r2, [pc, #176]	@ (800287c <HAL_RCC_OscConfig+0x4b8>)
 80027cc:	f043 0301 	orr.w	r3, r3, #1
 80027d0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d4:	f7ff f986 	bl	8001ae4 <HAL_GetTick>
 80027d8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80027da:	e008      	b.n	80027ee <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027dc:	f7ff f982 	bl	8001ae4 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e0f2      	b.n	80029d4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80027ee:	4b23      	ldr	r3, [pc, #140]	@ (800287c <HAL_RCC_OscConfig+0x4b8>)
 80027f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d0ef      	beq.n	80027dc <HAL_RCC_OscConfig+0x418>
 80027fc:	e01b      	b.n	8002836 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80027fe:	4b1f      	ldr	r3, [pc, #124]	@ (800287c <HAL_RCC_OscConfig+0x4b8>)
 8002800:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002804:	4a1d      	ldr	r2, [pc, #116]	@ (800287c <HAL_RCC_OscConfig+0x4b8>)
 8002806:	f023 0301 	bic.w	r3, r3, #1
 800280a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800280e:	f7ff f969 	bl	8001ae4 <HAL_GetTick>
 8002812:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002814:	e008      	b.n	8002828 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002816:	f7ff f965 	bl	8001ae4 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	2b02      	cmp	r3, #2
 8002822:	d901      	bls.n	8002828 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e0d5      	b.n	80029d4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002828:	4b14      	ldr	r3, [pc, #80]	@ (800287c <HAL_RCC_OscConfig+0x4b8>)
 800282a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d1ef      	bne.n	8002816 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	69db      	ldr	r3, [r3, #28]
 800283a:	2b00      	cmp	r3, #0
 800283c:	f000 80c9 	beq.w	80029d2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002840:	4b0e      	ldr	r3, [pc, #56]	@ (800287c <HAL_RCC_OscConfig+0x4b8>)
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f003 030c 	and.w	r3, r3, #12
 8002848:	2b0c      	cmp	r3, #12
 800284a:	f000 8083 	beq.w	8002954 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	69db      	ldr	r3, [r3, #28]
 8002852:	2b02      	cmp	r3, #2
 8002854:	d15e      	bne.n	8002914 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002856:	4b09      	ldr	r3, [pc, #36]	@ (800287c <HAL_RCC_OscConfig+0x4b8>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a08      	ldr	r2, [pc, #32]	@ (800287c <HAL_RCC_OscConfig+0x4b8>)
 800285c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002860:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002862:	f7ff f93f 	bl	8001ae4 <HAL_GetTick>
 8002866:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002868:	e00c      	b.n	8002884 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800286a:	f7ff f93b 	bl	8001ae4 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d905      	bls.n	8002884 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e0ab      	b.n	80029d4 <HAL_RCC_OscConfig+0x610>
 800287c:	40021000 	.word	0x40021000
 8002880:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002884:	4b55      	ldr	r3, [pc, #340]	@ (80029dc <HAL_RCC_OscConfig+0x618>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d1ec      	bne.n	800286a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002890:	4b52      	ldr	r3, [pc, #328]	@ (80029dc <HAL_RCC_OscConfig+0x618>)
 8002892:	68da      	ldr	r2, [r3, #12]
 8002894:	4b52      	ldr	r3, [pc, #328]	@ (80029e0 <HAL_RCC_OscConfig+0x61c>)
 8002896:	4013      	ands	r3, r2
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	6a11      	ldr	r1, [r2, #32]
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80028a0:	3a01      	subs	r2, #1
 80028a2:	0112      	lsls	r2, r2, #4
 80028a4:	4311      	orrs	r1, r2
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80028aa:	0212      	lsls	r2, r2, #8
 80028ac:	4311      	orrs	r1, r2
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80028b2:	0852      	lsrs	r2, r2, #1
 80028b4:	3a01      	subs	r2, #1
 80028b6:	0552      	lsls	r2, r2, #21
 80028b8:	4311      	orrs	r1, r2
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80028be:	0852      	lsrs	r2, r2, #1
 80028c0:	3a01      	subs	r2, #1
 80028c2:	0652      	lsls	r2, r2, #25
 80028c4:	4311      	orrs	r1, r2
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80028ca:	06d2      	lsls	r2, r2, #27
 80028cc:	430a      	orrs	r2, r1
 80028ce:	4943      	ldr	r1, [pc, #268]	@ (80029dc <HAL_RCC_OscConfig+0x618>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028d4:	4b41      	ldr	r3, [pc, #260]	@ (80029dc <HAL_RCC_OscConfig+0x618>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a40      	ldr	r2, [pc, #256]	@ (80029dc <HAL_RCC_OscConfig+0x618>)
 80028da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028de:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028e0:	4b3e      	ldr	r3, [pc, #248]	@ (80029dc <HAL_RCC_OscConfig+0x618>)
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	4a3d      	ldr	r2, [pc, #244]	@ (80029dc <HAL_RCC_OscConfig+0x618>)
 80028e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028ea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ec:	f7ff f8fa 	bl	8001ae4 <HAL_GetTick>
 80028f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028f2:	e008      	b.n	8002906 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f4:	f7ff f8f6 	bl	8001ae4 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e066      	b.n	80029d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002906:	4b35      	ldr	r3, [pc, #212]	@ (80029dc <HAL_RCC_OscConfig+0x618>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d0f0      	beq.n	80028f4 <HAL_RCC_OscConfig+0x530>
 8002912:	e05e      	b.n	80029d2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002914:	4b31      	ldr	r3, [pc, #196]	@ (80029dc <HAL_RCC_OscConfig+0x618>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a30      	ldr	r2, [pc, #192]	@ (80029dc <HAL_RCC_OscConfig+0x618>)
 800291a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800291e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002920:	f7ff f8e0 	bl	8001ae4 <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002928:	f7ff f8dc 	bl	8001ae4 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b02      	cmp	r3, #2
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e04c      	b.n	80029d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800293a:	4b28      	ldr	r3, [pc, #160]	@ (80029dc <HAL_RCC_OscConfig+0x618>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1f0      	bne.n	8002928 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002946:	4b25      	ldr	r3, [pc, #148]	@ (80029dc <HAL_RCC_OscConfig+0x618>)
 8002948:	68da      	ldr	r2, [r3, #12]
 800294a:	4924      	ldr	r1, [pc, #144]	@ (80029dc <HAL_RCC_OscConfig+0x618>)
 800294c:	4b25      	ldr	r3, [pc, #148]	@ (80029e4 <HAL_RCC_OscConfig+0x620>)
 800294e:	4013      	ands	r3, r2
 8002950:	60cb      	str	r3, [r1, #12]
 8002952:	e03e      	b.n	80029d2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	69db      	ldr	r3, [r3, #28]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d101      	bne.n	8002960 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e039      	b.n	80029d4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002960:	4b1e      	ldr	r3, [pc, #120]	@ (80029dc <HAL_RCC_OscConfig+0x618>)
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	f003 0203 	and.w	r2, r3, #3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a1b      	ldr	r3, [r3, #32]
 8002970:	429a      	cmp	r2, r3
 8002972:	d12c      	bne.n	80029ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800297e:	3b01      	subs	r3, #1
 8002980:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002982:	429a      	cmp	r2, r3
 8002984:	d123      	bne.n	80029ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002990:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002992:	429a      	cmp	r2, r3
 8002994:	d11b      	bne.n	80029ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029a0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d113      	bne.n	80029ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b0:	085b      	lsrs	r3, r3, #1
 80029b2:	3b01      	subs	r3, #1
 80029b4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d109      	bne.n	80029ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029c4:	085b      	lsrs	r3, r3, #1
 80029c6:	3b01      	subs	r3, #1
 80029c8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d001      	beq.n	80029d2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e000      	b.n	80029d4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3720      	adds	r7, #32
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	40021000 	.word	0x40021000
 80029e0:	019f800c 	.word	0x019f800c
 80029e4:	feeefffc 	.word	0xfeeefffc

080029e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80029f2:	2300      	movs	r3, #0
 80029f4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d101      	bne.n	8002a00 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e11e      	b.n	8002c3e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a00:	4b91      	ldr	r3, [pc, #580]	@ (8002c48 <HAL_RCC_ClockConfig+0x260>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 030f 	and.w	r3, r3, #15
 8002a08:	683a      	ldr	r2, [r7, #0]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d910      	bls.n	8002a30 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a0e:	4b8e      	ldr	r3, [pc, #568]	@ (8002c48 <HAL_RCC_ClockConfig+0x260>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f023 020f 	bic.w	r2, r3, #15
 8002a16:	498c      	ldr	r1, [pc, #560]	@ (8002c48 <HAL_RCC_ClockConfig+0x260>)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a1e:	4b8a      	ldr	r3, [pc, #552]	@ (8002c48 <HAL_RCC_ClockConfig+0x260>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 030f 	and.w	r3, r3, #15
 8002a26:	683a      	ldr	r2, [r7, #0]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d001      	beq.n	8002a30 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e106      	b.n	8002c3e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d073      	beq.n	8002b24 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	2b03      	cmp	r3, #3
 8002a42:	d129      	bne.n	8002a98 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a44:	4b81      	ldr	r3, [pc, #516]	@ (8002c4c <HAL_RCC_ClockConfig+0x264>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d101      	bne.n	8002a54 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e0f4      	b.n	8002c3e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002a54:	f000 f9e4 	bl	8002e20 <RCC_GetSysClockFreqFromPLLSource>
 8002a58:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	4a7c      	ldr	r2, [pc, #496]	@ (8002c50 <HAL_RCC_ClockConfig+0x268>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d93f      	bls.n	8002ae2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002a62:	4b7a      	ldr	r3, [pc, #488]	@ (8002c4c <HAL_RCC_ClockConfig+0x264>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d009      	beq.n	8002a82 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d033      	beq.n	8002ae2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d12f      	bne.n	8002ae2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002a82:	4b72      	ldr	r3, [pc, #456]	@ (8002c4c <HAL_RCC_ClockConfig+0x264>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a8a:	4a70      	ldr	r2, [pc, #448]	@ (8002c4c <HAL_RCC_ClockConfig+0x264>)
 8002a8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a90:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002a92:	2380      	movs	r3, #128	@ 0x80
 8002a94:	617b      	str	r3, [r7, #20]
 8002a96:	e024      	b.n	8002ae2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d107      	bne.n	8002ab0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002aa0:	4b6a      	ldr	r3, [pc, #424]	@ (8002c4c <HAL_RCC_ClockConfig+0x264>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d109      	bne.n	8002ac0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e0c6      	b.n	8002c3e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ab0:	4b66      	ldr	r3, [pc, #408]	@ (8002c4c <HAL_RCC_ClockConfig+0x264>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d101      	bne.n	8002ac0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e0be      	b.n	8002c3e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002ac0:	f000 f914 	bl	8002cec <HAL_RCC_GetSysClockFreq>
 8002ac4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	4a61      	ldr	r2, [pc, #388]	@ (8002c50 <HAL_RCC_ClockConfig+0x268>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d909      	bls.n	8002ae2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002ace:	4b5f      	ldr	r3, [pc, #380]	@ (8002c4c <HAL_RCC_ClockConfig+0x264>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002ad6:	4a5d      	ldr	r2, [pc, #372]	@ (8002c4c <HAL_RCC_ClockConfig+0x264>)
 8002ad8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002adc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002ade:	2380      	movs	r3, #128	@ 0x80
 8002ae0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ae2:	4b5a      	ldr	r3, [pc, #360]	@ (8002c4c <HAL_RCC_ClockConfig+0x264>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f023 0203 	bic.w	r2, r3, #3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	4957      	ldr	r1, [pc, #348]	@ (8002c4c <HAL_RCC_ClockConfig+0x264>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002af4:	f7fe fff6 	bl	8001ae4 <HAL_GetTick>
 8002af8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002afa:	e00a      	b.n	8002b12 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002afc:	f7fe fff2 	bl	8001ae4 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e095      	b.n	8002c3e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b12:	4b4e      	ldr	r3, [pc, #312]	@ (8002c4c <HAL_RCC_ClockConfig+0x264>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f003 020c 	and.w	r2, r3, #12
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d1eb      	bne.n	8002afc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d023      	beq.n	8002b78 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0304 	and.w	r3, r3, #4
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d005      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b3c:	4b43      	ldr	r3, [pc, #268]	@ (8002c4c <HAL_RCC_ClockConfig+0x264>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	4a42      	ldr	r2, [pc, #264]	@ (8002c4c <HAL_RCC_ClockConfig+0x264>)
 8002b42:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002b46:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0308 	and.w	r3, r3, #8
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d007      	beq.n	8002b64 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002b54:	4b3d      	ldr	r3, [pc, #244]	@ (8002c4c <HAL_RCC_ClockConfig+0x264>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002b5c:	4a3b      	ldr	r2, [pc, #236]	@ (8002c4c <HAL_RCC_ClockConfig+0x264>)
 8002b5e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002b62:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b64:	4b39      	ldr	r3, [pc, #228]	@ (8002c4c <HAL_RCC_ClockConfig+0x264>)
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	4936      	ldr	r1, [pc, #216]	@ (8002c4c <HAL_RCC_ClockConfig+0x264>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	608b      	str	r3, [r1, #8]
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	2b80      	cmp	r3, #128	@ 0x80
 8002b7c:	d105      	bne.n	8002b8a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002b7e:	4b33      	ldr	r3, [pc, #204]	@ (8002c4c <HAL_RCC_ClockConfig+0x264>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	4a32      	ldr	r2, [pc, #200]	@ (8002c4c <HAL_RCC_ClockConfig+0x264>)
 8002b84:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002b88:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b8a:	4b2f      	ldr	r3, [pc, #188]	@ (8002c48 <HAL_RCC_ClockConfig+0x260>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 030f 	and.w	r3, r3, #15
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d21d      	bcs.n	8002bd4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b98:	4b2b      	ldr	r3, [pc, #172]	@ (8002c48 <HAL_RCC_ClockConfig+0x260>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f023 020f 	bic.w	r2, r3, #15
 8002ba0:	4929      	ldr	r1, [pc, #164]	@ (8002c48 <HAL_RCC_ClockConfig+0x260>)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002ba8:	f7fe ff9c 	bl	8001ae4 <HAL_GetTick>
 8002bac:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bae:	e00a      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bb0:	f7fe ff98 	bl	8001ae4 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e03b      	b.n	8002c3e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bc6:	4b20      	ldr	r3, [pc, #128]	@ (8002c48 <HAL_RCC_ClockConfig+0x260>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 030f 	and.w	r3, r3, #15
 8002bce:	683a      	ldr	r2, [r7, #0]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d1ed      	bne.n	8002bb0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0304 	and.w	r3, r3, #4
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d008      	beq.n	8002bf2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002be0:	4b1a      	ldr	r3, [pc, #104]	@ (8002c4c <HAL_RCC_ClockConfig+0x264>)
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	4917      	ldr	r1, [pc, #92]	@ (8002c4c <HAL_RCC_ClockConfig+0x264>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0308 	and.w	r3, r3, #8
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d009      	beq.n	8002c12 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bfe:	4b13      	ldr	r3, [pc, #76]	@ (8002c4c <HAL_RCC_ClockConfig+0x264>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	490f      	ldr	r1, [pc, #60]	@ (8002c4c <HAL_RCC_ClockConfig+0x264>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c12:	f000 f86b 	bl	8002cec <HAL_RCC_GetSysClockFreq>
 8002c16:	4602      	mov	r2, r0
 8002c18:	4b0c      	ldr	r3, [pc, #48]	@ (8002c4c <HAL_RCC_ClockConfig+0x264>)
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	091b      	lsrs	r3, r3, #4
 8002c1e:	f003 030f 	and.w	r3, r3, #15
 8002c22:	490c      	ldr	r1, [pc, #48]	@ (8002c54 <HAL_RCC_ClockConfig+0x26c>)
 8002c24:	5ccb      	ldrb	r3, [r1, r3]
 8002c26:	f003 031f 	and.w	r3, r3, #31
 8002c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c2e:	4a0a      	ldr	r2, [pc, #40]	@ (8002c58 <HAL_RCC_ClockConfig+0x270>)
 8002c30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002c32:	4b0a      	ldr	r3, [pc, #40]	@ (8002c5c <HAL_RCC_ClockConfig+0x274>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7fe ff08 	bl	8001a4c <HAL_InitTick>
 8002c3c:	4603      	mov	r3, r0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3718      	adds	r7, #24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	40022000 	.word	0x40022000
 8002c4c:	40021000 	.word	0x40021000
 8002c50:	04c4b400 	.word	0x04c4b400
 8002c54:	08009bac 	.word	0x08009bac
 8002c58:	20000000 	.word	0x20000000
 8002c5c:	20000004 	.word	0x20000004

08002c60 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b08c      	sub	sp, #48	@ 0x30
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	617b      	str	r3, [r7, #20]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c70:	2303      	movs	r3, #3
 8002c72:	61fb      	str	r3, [r7, #28]
  gpio_initstruct.Pull      = GPIO_NOPULL;
 8002c74:	2300      	movs	r3, #0
 8002c76:	61bb      	str	r3, [r7, #24]

  /* Get MCOx selection */
  mcoindex = RCC_MCOx & RCC_MCO_INDEX_MASK;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c7e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	0c1b      	lsrs	r3, r3, #16
 8002c84:	f003 030f 	and.w	r3, r3, #15
 8002c88:	f503 1390 	add.w	r3, r3, #1179648	@ 0x120000
 8002c8c:	029b      	lsls	r3, r3, #10
 8002c8e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	0c1b      	lsrs	r3, r3, #16
 8002c94:	f003 030f 	and.w	r3, r3, #15
 8002c98:	627b      	str	r3, [r7, #36]	@ 0x24
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index ));
 8002c9a:	4b13      	ldr	r3, [pc, #76]	@ (8002ce8 <HAL_RCC_MCOConfig+0x88>)
 8002c9c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca6:	4910      	ldr	r1, [pc, #64]	@ (8002ce8 <HAL_RCC_MCOConfig+0x88>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	64cb      	str	r3, [r1, #76]	@ 0x4c

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	613b      	str	r3, [r7, #16]
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	0d1b      	lsrs	r3, r3, #20
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 8002cba:	f107 0310 	add.w	r3, r7, #16
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002cc2:	f7ff f90d 	bl	8001ee0 <HAL_GPIO_Init>

   if (mcoindex == RCC_MCO1_INDEX)
 8002cc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d109      	bne.n	8002ce0 <HAL_RCC_MCOConfig+0x80>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 8002ccc:	4b06      	ldr	r3, [pc, #24]	@ (8002ce8 <HAL_RCC_MCOConfig+0x88>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002cd4:	68b9      	ldr	r1, [r7, #8]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	430b      	orrs	r3, r1
 8002cda:	4903      	ldr	r1, [pc, #12]	@ (8002ce8 <HAL_RCC_MCOConfig+0x88>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	608b      	str	r3, [r1, #8]
  }
}
 8002ce0:	bf00      	nop
 8002ce2:	3730      	adds	r7, #48	@ 0x30
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	40021000 	.word	0x40021000

08002cec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b087      	sub	sp, #28
 8002cf0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002cf2:	4b2c      	ldr	r3, [pc, #176]	@ (8002da4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f003 030c 	and.w	r3, r3, #12
 8002cfa:	2b04      	cmp	r3, #4
 8002cfc:	d102      	bne.n	8002d04 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002cfe:	4b2a      	ldr	r3, [pc, #168]	@ (8002da8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d00:	613b      	str	r3, [r7, #16]
 8002d02:	e047      	b.n	8002d94 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002d04:	4b27      	ldr	r3, [pc, #156]	@ (8002da4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	f003 030c 	and.w	r3, r3, #12
 8002d0c:	2b08      	cmp	r3, #8
 8002d0e:	d102      	bne.n	8002d16 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d10:	4b26      	ldr	r3, [pc, #152]	@ (8002dac <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d12:	613b      	str	r3, [r7, #16]
 8002d14:	e03e      	b.n	8002d94 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002d16:	4b23      	ldr	r3, [pc, #140]	@ (8002da4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f003 030c 	and.w	r3, r3, #12
 8002d1e:	2b0c      	cmp	r3, #12
 8002d20:	d136      	bne.n	8002d90 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d22:	4b20      	ldr	r3, [pc, #128]	@ (8002da4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	f003 0303 	and.w	r3, r3, #3
 8002d2a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d2c:	4b1d      	ldr	r3, [pc, #116]	@ (8002da4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	091b      	lsrs	r3, r3, #4
 8002d32:	f003 030f 	and.w	r3, r3, #15
 8002d36:	3301      	adds	r3, #1
 8002d38:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2b03      	cmp	r3, #3
 8002d3e:	d10c      	bne.n	8002d5a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d40:	4a1a      	ldr	r2, [pc, #104]	@ (8002dac <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d48:	4a16      	ldr	r2, [pc, #88]	@ (8002da4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d4a:	68d2      	ldr	r2, [r2, #12]
 8002d4c:	0a12      	lsrs	r2, r2, #8
 8002d4e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002d52:	fb02 f303 	mul.w	r3, r2, r3
 8002d56:	617b      	str	r3, [r7, #20]
      break;
 8002d58:	e00c      	b.n	8002d74 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d5a:	4a13      	ldr	r2, [pc, #76]	@ (8002da8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d62:	4a10      	ldr	r2, [pc, #64]	@ (8002da4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d64:	68d2      	ldr	r2, [r2, #12]
 8002d66:	0a12      	lsrs	r2, r2, #8
 8002d68:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002d6c:	fb02 f303 	mul.w	r3, r2, r3
 8002d70:	617b      	str	r3, [r7, #20]
      break;
 8002d72:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d74:	4b0b      	ldr	r3, [pc, #44]	@ (8002da4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	0e5b      	lsrs	r3, r3, #25
 8002d7a:	f003 0303 	and.w	r3, r3, #3
 8002d7e:	3301      	adds	r3, #1
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002d84:	697a      	ldr	r2, [r7, #20]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d8c:	613b      	str	r3, [r7, #16]
 8002d8e:	e001      	b.n	8002d94 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002d90:	2300      	movs	r3, #0
 8002d92:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002d94:	693b      	ldr	r3, [r7, #16]
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	371c      	adds	r7, #28
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	40021000 	.word	0x40021000
 8002da8:	00f42400 	.word	0x00f42400
 8002dac:	016e3600 	.word	0x016e3600

08002db0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002db4:	4b03      	ldr	r3, [pc, #12]	@ (8002dc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002db6:	681b      	ldr	r3, [r3, #0]
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	20000000 	.word	0x20000000

08002dc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002dcc:	f7ff fff0 	bl	8002db0 <HAL_RCC_GetHCLKFreq>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	4b06      	ldr	r3, [pc, #24]	@ (8002dec <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	0a1b      	lsrs	r3, r3, #8
 8002dd8:	f003 0307 	and.w	r3, r3, #7
 8002ddc:	4904      	ldr	r1, [pc, #16]	@ (8002df0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002dde:	5ccb      	ldrb	r3, [r1, r3]
 8002de0:	f003 031f 	and.w	r3, r3, #31
 8002de4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	40021000 	.word	0x40021000
 8002df0:	08009bbc 	.word	0x08009bbc

08002df4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002df8:	f7ff ffda 	bl	8002db0 <HAL_RCC_GetHCLKFreq>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	4b06      	ldr	r3, [pc, #24]	@ (8002e18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	0adb      	lsrs	r3, r3, #11
 8002e04:	f003 0307 	and.w	r3, r3, #7
 8002e08:	4904      	ldr	r1, [pc, #16]	@ (8002e1c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e0a:	5ccb      	ldrb	r3, [r1, r3]
 8002e0c:	f003 031f 	and.w	r3, r3, #31
 8002e10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	08009bbc 	.word	0x08009bbc

08002e20 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b087      	sub	sp, #28
 8002e24:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e26:	4b1e      	ldr	r3, [pc, #120]	@ (8002ea0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	f003 0303 	and.w	r3, r3, #3
 8002e2e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e30:	4b1b      	ldr	r3, [pc, #108]	@ (8002ea0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	091b      	lsrs	r3, r3, #4
 8002e36:	f003 030f 	and.w	r3, r3, #15
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	2b03      	cmp	r3, #3
 8002e42:	d10c      	bne.n	8002e5e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e44:	4a17      	ldr	r2, [pc, #92]	@ (8002ea4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e4c:	4a14      	ldr	r2, [pc, #80]	@ (8002ea0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e4e:	68d2      	ldr	r2, [r2, #12]
 8002e50:	0a12      	lsrs	r2, r2, #8
 8002e52:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002e56:	fb02 f303 	mul.w	r3, r2, r3
 8002e5a:	617b      	str	r3, [r7, #20]
    break;
 8002e5c:	e00c      	b.n	8002e78 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e5e:	4a12      	ldr	r2, [pc, #72]	@ (8002ea8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e66:	4a0e      	ldr	r2, [pc, #56]	@ (8002ea0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e68:	68d2      	ldr	r2, [r2, #12]
 8002e6a:	0a12      	lsrs	r2, r2, #8
 8002e6c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002e70:	fb02 f303 	mul.w	r3, r2, r3
 8002e74:	617b      	str	r3, [r7, #20]
    break;
 8002e76:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e78:	4b09      	ldr	r3, [pc, #36]	@ (8002ea0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	0e5b      	lsrs	r3, r3, #25
 8002e7e:	f003 0303 	and.w	r3, r3, #3
 8002e82:	3301      	adds	r3, #1
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002e88:	697a      	ldr	r2, [r7, #20]
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e90:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002e92:	687b      	ldr	r3, [r7, #4]
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	371c      	adds	r7, #28
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr
 8002ea0:	40021000 	.word	0x40021000
 8002ea4:	016e3600 	.word	0x016e3600
 8002ea8:	00f42400 	.word	0x00f42400

08002eac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002eb8:	2300      	movs	r3, #0
 8002eba:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	f000 8098 	beq.w	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ece:	4b43      	ldr	r3, [pc, #268]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ed0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ed2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d10d      	bne.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eda:	4b40      	ldr	r3, [pc, #256]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002edc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ede:	4a3f      	ldr	r2, [pc, #252]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ee0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ee4:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ee6:	4b3d      	ldr	r3, [pc, #244]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eee:	60bb      	str	r3, [r7, #8]
 8002ef0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ef6:	4b3a      	ldr	r3, [pc, #232]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a39      	ldr	r2, [pc, #228]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002efc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f00:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f02:	f7fe fdef 	bl	8001ae4 <HAL_GetTick>
 8002f06:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f08:	e009      	b.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f0a:	f7fe fdeb 	bl	8001ae4 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d902      	bls.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	74fb      	strb	r3, [r7, #19]
        break;
 8002f1c:	e005      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f1e:	4b30      	ldr	r3, [pc, #192]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d0ef      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002f2a:	7cfb      	ldrb	r3, [r7, #19]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d159      	bne.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f30:	4b2a      	ldr	r3, [pc, #168]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f3a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d01e      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f46:	697a      	ldr	r2, [r7, #20]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d019      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f4c:	4b23      	ldr	r3, [pc, #140]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f56:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f58:	4b20      	ldr	r3, [pc, #128]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f5e:	4a1f      	ldr	r2, [pc, #124]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f68:	4b1c      	ldr	r3, [pc, #112]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f6e:	4a1b      	ldr	r2, [pc, #108]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f78:	4a18      	ldr	r2, [pc, #96]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d016      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f8a:	f7fe fdab 	bl	8001ae4 <HAL_GetTick>
 8002f8e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f90:	e00b      	b.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f92:	f7fe fda7 	bl	8001ae4 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d902      	bls.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	74fb      	strb	r3, [r7, #19]
            break;
 8002fa8:	e006      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002faa:	4b0c      	ldr	r3, [pc, #48]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d0ec      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002fb8:	7cfb      	ldrb	r3, [r7, #19]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10b      	bne.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fbe:	4b07      	ldr	r3, [pc, #28]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fc4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fcc:	4903      	ldr	r1, [pc, #12]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002fd4:	e008      	b.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002fd6:	7cfb      	ldrb	r3, [r7, #19]
 8002fd8:	74bb      	strb	r3, [r7, #18]
 8002fda:	e005      	b.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002fdc:	40021000 	.word	0x40021000
 8002fe0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fe4:	7cfb      	ldrb	r3, [r7, #19]
 8002fe6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fe8:	7c7b      	ldrb	r3, [r7, #17]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d105      	bne.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fee:	4ba7      	ldr	r3, [pc, #668]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ff2:	4aa6      	ldr	r2, [pc, #664]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ff4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ff8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0301 	and.w	r3, r3, #1
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00a      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003006:	4ba1      	ldr	r3, [pc, #644]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003008:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800300c:	f023 0203 	bic.w	r2, r3, #3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	499d      	ldr	r1, [pc, #628]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003016:	4313      	orrs	r3, r2
 8003018:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0302 	and.w	r3, r3, #2
 8003024:	2b00      	cmp	r3, #0
 8003026:	d00a      	beq.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003028:	4b98      	ldr	r3, [pc, #608]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800302a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800302e:	f023 020c 	bic.w	r2, r3, #12
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	4995      	ldr	r1, [pc, #596]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003038:	4313      	orrs	r3, r2
 800303a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0304 	and.w	r3, r3, #4
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00a      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800304a:	4b90      	ldr	r3, [pc, #576]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800304c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003050:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	498c      	ldr	r1, [pc, #560]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800305a:	4313      	orrs	r3, r2
 800305c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0308 	and.w	r3, r3, #8
 8003068:	2b00      	cmp	r3, #0
 800306a:	d00a      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800306c:	4b87      	ldr	r3, [pc, #540]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800306e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003072:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	4984      	ldr	r1, [pc, #528]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800307c:	4313      	orrs	r3, r2
 800307e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0310 	and.w	r3, r3, #16
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00a      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800308e:	4b7f      	ldr	r3, [pc, #508]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003090:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003094:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	695b      	ldr	r3, [r3, #20]
 800309c:	497b      	ldr	r1, [pc, #492]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0320 	and.w	r3, r3, #32
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d00a      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030b0:	4b76      	ldr	r3, [pc, #472]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030b6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	4973      	ldr	r1, [pc, #460]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00a      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030d2:	4b6e      	ldr	r3, [pc, #440]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030d8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	69db      	ldr	r3, [r3, #28]
 80030e0:	496a      	ldr	r1, [pc, #424]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00a      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80030f4:	4b65      	ldr	r3, [pc, #404]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030fa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a1b      	ldr	r3, [r3, #32]
 8003102:	4962      	ldr	r1, [pc, #392]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003104:	4313      	orrs	r3, r2
 8003106:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00a      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003116:	4b5d      	ldr	r3, [pc, #372]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003118:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800311c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003124:	4959      	ldr	r1, [pc, #356]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003126:	4313      	orrs	r3, r2
 8003128:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d00a      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003138:	4b54      	ldr	r3, [pc, #336]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800313a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800313e:	f023 0203 	bic.w	r2, r3, #3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003146:	4951      	ldr	r1, [pc, #324]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003148:	4313      	orrs	r3, r2
 800314a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00a      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800315a:	4b4c      	ldr	r3, [pc, #304]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800315c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003160:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003168:	4948      	ldr	r1, [pc, #288]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800316a:	4313      	orrs	r3, r2
 800316c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003178:	2b00      	cmp	r3, #0
 800317a:	d015      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800317c:	4b43      	ldr	r3, [pc, #268]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800317e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003182:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800318a:	4940      	ldr	r1, [pc, #256]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800318c:	4313      	orrs	r3, r2
 800318e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003196:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800319a:	d105      	bne.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800319c:	4b3b      	ldr	r3, [pc, #236]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	4a3a      	ldr	r2, [pc, #232]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80031a6:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d015      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80031b4:	4b35      	ldr	r3, [pc, #212]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031ba:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031c2:	4932      	ldr	r1, [pc, #200]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80031d2:	d105      	bne.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031d4:	4b2d      	ldr	r3, [pc, #180]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	4a2c      	ldr	r2, [pc, #176]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80031de:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d015      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80031ec:	4b27      	ldr	r3, [pc, #156]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031f2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031fa:	4924      	ldr	r1, [pc, #144]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003206:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800320a:	d105      	bne.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800320c:	4b1f      	ldr	r3, [pc, #124]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	4a1e      	ldr	r2, [pc, #120]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003212:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003216:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d015      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003224:	4b19      	ldr	r3, [pc, #100]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003226:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800322a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003232:	4916      	ldr	r1, [pc, #88]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003234:	4313      	orrs	r3, r2
 8003236:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800323e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003242:	d105      	bne.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003244:	4b11      	ldr	r3, [pc, #68]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	4a10      	ldr	r2, [pc, #64]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800324a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800324e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d019      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800325c:	4b0b      	ldr	r3, [pc, #44]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800325e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003262:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800326a:	4908      	ldr	r1, [pc, #32]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800326c:	4313      	orrs	r3, r2
 800326e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003276:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800327a:	d109      	bne.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800327c:	4b03      	ldr	r3, [pc, #12]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	4a02      	ldr	r2, [pc, #8]	@ (800328c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003282:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003286:	60d3      	str	r3, [r2, #12]
 8003288:	e002      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800328a:	bf00      	nop
 800328c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d015      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800329c:	4b29      	ldr	r3, [pc, #164]	@ (8003344 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800329e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032a2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032aa:	4926      	ldr	r1, [pc, #152]	@ (8003344 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80032ba:	d105      	bne.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80032bc:	4b21      	ldr	r3, [pc, #132]	@ (8003344 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	4a20      	ldr	r2, [pc, #128]	@ (8003344 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80032c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032c6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d015      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80032d4:	4b1b      	ldr	r3, [pc, #108]	@ (8003344 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80032d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032da:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032e2:	4918      	ldr	r1, [pc, #96]	@ (8003344 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032f2:	d105      	bne.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80032f4:	4b13      	ldr	r3, [pc, #76]	@ (8003344 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	4a12      	ldr	r2, [pc, #72]	@ (8003344 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80032fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032fe:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d015      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800330c:	4b0d      	ldr	r3, [pc, #52]	@ (8003344 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800330e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003312:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800331a:	490a      	ldr	r1, [pc, #40]	@ (8003344 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800331c:	4313      	orrs	r3, r2
 800331e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003326:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800332a:	d105      	bne.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800332c:	4b05      	ldr	r3, [pc, #20]	@ (8003344 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	4a04      	ldr	r2, [pc, #16]	@ (8003344 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003332:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003336:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003338:	7cbb      	ldrb	r3, [r7, #18]
}
 800333a:	4618      	mov	r0, r3
 800333c:	3718      	adds	r7, #24
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	40021000 	.word	0x40021000

08003348 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d101      	bne.n	800335a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e09d      	b.n	8003496 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800335e:	2b00      	cmp	r3, #0
 8003360:	d108      	bne.n	8003374 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800336a:	d009      	beq.n	8003380 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	61da      	str	r2, [r3, #28]
 8003372:	e005      	b.n	8003380 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800338c:	b2db      	uxtb	r3, r3
 800338e:	2b00      	cmp	r3, #0
 8003390:	d106      	bne.n	80033a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f7fe f93e 	bl	800161c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2202      	movs	r2, #2
 80033a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80033b6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80033c0:	d902      	bls.n	80033c8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80033c2:	2300      	movs	r3, #0
 80033c4:	60fb      	str	r3, [r7, #12]
 80033c6:	e002      	b.n	80033ce <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80033c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80033cc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80033d6:	d007      	beq.n	80033e8 <HAL_SPI_Init+0xa0>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80033e0:	d002      	beq.n	80033e8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80033f8:	431a      	orrs	r2, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	431a      	orrs	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	695b      	ldr	r3, [r3, #20]
 8003408:	f003 0301 	and.w	r3, r3, #1
 800340c:	431a      	orrs	r2, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	699b      	ldr	r3, [r3, #24]
 8003412:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003416:	431a      	orrs	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	69db      	ldr	r3, [r3, #28]
 800341c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003420:	431a      	orrs	r2, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800342a:	ea42 0103 	orr.w	r1, r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003432:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	430a      	orrs	r2, r1
 800343c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	0c1b      	lsrs	r3, r3, #16
 8003444:	f003 0204 	and.w	r2, r3, #4
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800344c:	f003 0310 	and.w	r3, r3, #16
 8003450:	431a      	orrs	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003456:	f003 0308 	and.w	r3, r3, #8
 800345a:	431a      	orrs	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003464:	ea42 0103 	orr.w	r1, r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	430a      	orrs	r2, r1
 8003474:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	69da      	ldr	r2, [r3, #28]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003484:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3710      	adds	r7, #16
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b08a      	sub	sp, #40	@ 0x28
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	60f8      	str	r0, [r7, #12]
 80034a6:	60b9      	str	r1, [r7, #8]
 80034a8:	607a      	str	r2, [r7, #4]
 80034aa:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80034ac:	2301      	movs	r3, #1
 80034ae:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034b0:	f7fe fb18 	bl	8001ae4 <HAL_GetTick>
 80034b4:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80034bc:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80034c4:	887b      	ldrh	r3, [r7, #2]
 80034c6:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 80034c8:	887b      	ldrh	r3, [r7, #2]
 80034ca:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80034cc:	7ffb      	ldrb	r3, [r7, #31]
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d00c      	beq.n	80034ec <HAL_SPI_TransmitReceive+0x4e>
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80034d8:	d106      	bne.n	80034e8 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d102      	bne.n	80034e8 <HAL_SPI_TransmitReceive+0x4a>
 80034e2:	7ffb      	ldrb	r3, [r7, #31]
 80034e4:	2b04      	cmp	r3, #4
 80034e6:	d001      	beq.n	80034ec <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80034e8:	2302      	movs	r3, #2
 80034ea:	e1f3      	b.n	80038d4 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d005      	beq.n	80034fe <HAL_SPI_TransmitReceive+0x60>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d002      	beq.n	80034fe <HAL_SPI_TransmitReceive+0x60>
 80034f8:	887b      	ldrh	r3, [r7, #2]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d101      	bne.n	8003502 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e1e8      	b.n	80038d4 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003508:	2b01      	cmp	r3, #1
 800350a:	d101      	bne.n	8003510 <HAL_SPI_TransmitReceive+0x72>
 800350c:	2302      	movs	r3, #2
 800350e:	e1e1      	b.n	80038d4 <HAL_SPI_TransmitReceive+0x436>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2b04      	cmp	r3, #4
 8003522:	d003      	beq.n	800352c <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2205      	movs	r2, #5
 8003528:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	887a      	ldrh	r2, [r7, #2]
 800353c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	887a      	ldrh	r2, [r7, #2]
 8003544:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	68ba      	ldr	r2, [r7, #8]
 800354c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	887a      	ldrh	r2, [r7, #2]
 8003552:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	887a      	ldrh	r2, [r7, #2]
 8003558:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800356e:	d802      	bhi.n	8003576 <HAL_SPI_TransmitReceive+0xd8>
 8003570:	8abb      	ldrh	r3, [r7, #20]
 8003572:	2b01      	cmp	r3, #1
 8003574:	d908      	bls.n	8003588 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	685a      	ldr	r2, [r3, #4]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003584:	605a      	str	r2, [r3, #4]
 8003586:	e007      	b.n	8003598 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	685a      	ldr	r2, [r3, #4]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003596:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035a2:	2b40      	cmp	r3, #64	@ 0x40
 80035a4:	d007      	beq.n	80035b6 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80035b4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80035be:	f240 8083 	bls.w	80036c8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d002      	beq.n	80035d0 <HAL_SPI_TransmitReceive+0x132>
 80035ca:	8afb      	ldrh	r3, [r7, #22]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d16f      	bne.n	80036b0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035d4:	881a      	ldrh	r2, [r3, #0]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035e0:	1c9a      	adds	r2, r3, #2
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	3b01      	subs	r3, #1
 80035ee:	b29a      	uxth	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035f4:	e05c      	b.n	80036b0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b02      	cmp	r3, #2
 8003602:	d11b      	bne.n	800363c <HAL_SPI_TransmitReceive+0x19e>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003608:	b29b      	uxth	r3, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d016      	beq.n	800363c <HAL_SPI_TransmitReceive+0x19e>
 800360e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003610:	2b01      	cmp	r3, #1
 8003612:	d113      	bne.n	800363c <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003618:	881a      	ldrh	r2, [r3, #0]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003624:	1c9a      	adds	r2, r3, #2
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800362e:	b29b      	uxth	r3, r3
 8003630:	3b01      	subs	r3, #1
 8003632:	b29a      	uxth	r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003638:	2300      	movs	r3, #0
 800363a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	2b01      	cmp	r3, #1
 8003648:	d11c      	bne.n	8003684 <HAL_SPI_TransmitReceive+0x1e6>
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003650:	b29b      	uxth	r3, r3
 8003652:	2b00      	cmp	r3, #0
 8003654:	d016      	beq.n	8003684 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68da      	ldr	r2, [r3, #12]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003660:	b292      	uxth	r2, r2
 8003662:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003668:	1c9a      	adds	r2, r3, #2
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003674:	b29b      	uxth	r3, r3
 8003676:	3b01      	subs	r3, #1
 8003678:	b29a      	uxth	r2, r3
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003680:	2301      	movs	r3, #1
 8003682:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003684:	f7fe fa2e 	bl	8001ae4 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	6a3b      	ldr	r3, [r7, #32]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003690:	429a      	cmp	r2, r3
 8003692:	d80d      	bhi.n	80036b0 <HAL_SPI_TransmitReceive+0x212>
 8003694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800369a:	d009      	beq.n	80036b0 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e111      	b.n	80038d4 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d19d      	bne.n	80035f6 <HAL_SPI_TransmitReceive+0x158>
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d197      	bne.n	80035f6 <HAL_SPI_TransmitReceive+0x158>
 80036c6:	e0e5      	b.n	8003894 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d003      	beq.n	80036d8 <HAL_SPI_TransmitReceive+0x23a>
 80036d0:	8afb      	ldrh	r3, [r7, #22]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	f040 80d1 	bne.w	800387a <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036dc:	b29b      	uxth	r3, r3
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d912      	bls.n	8003708 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036e6:	881a      	ldrh	r2, [r3, #0]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036f2:	1c9a      	adds	r2, r3, #2
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	3b02      	subs	r3, #2
 8003700:	b29a      	uxth	r2, r3
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003706:	e0b8      	b.n	800387a <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	330c      	adds	r3, #12
 8003712:	7812      	ldrb	r2, [r2, #0]
 8003714:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800371a:	1c5a      	adds	r2, r3, #1
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003724:	b29b      	uxth	r3, r3
 8003726:	3b01      	subs	r3, #1
 8003728:	b29a      	uxth	r2, r3
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800372e:	e0a4      	b.n	800387a <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b02      	cmp	r3, #2
 800373c:	d134      	bne.n	80037a8 <HAL_SPI_TransmitReceive+0x30a>
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003742:	b29b      	uxth	r3, r3
 8003744:	2b00      	cmp	r3, #0
 8003746:	d02f      	beq.n	80037a8 <HAL_SPI_TransmitReceive+0x30a>
 8003748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800374a:	2b01      	cmp	r3, #1
 800374c:	d12c      	bne.n	80037a8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003752:	b29b      	uxth	r3, r3
 8003754:	2b01      	cmp	r3, #1
 8003756:	d912      	bls.n	800377e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800375c:	881a      	ldrh	r2, [r3, #0]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003768:	1c9a      	adds	r2, r3, #2
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003772:	b29b      	uxth	r3, r3
 8003774:	3b02      	subs	r3, #2
 8003776:	b29a      	uxth	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800377c:	e012      	b.n	80037a4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	330c      	adds	r3, #12
 8003788:	7812      	ldrb	r2, [r2, #0]
 800378a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003790:	1c5a      	adds	r2, r3, #1
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800379a:	b29b      	uxth	r3, r3
 800379c:	3b01      	subs	r3, #1
 800379e:	b29a      	uxth	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80037a4:	2300      	movs	r3, #0
 80037a6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d148      	bne.n	8003848 <HAL_SPI_TransmitReceive+0x3aa>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80037bc:	b29b      	uxth	r3, r3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d042      	beq.n	8003848 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d923      	bls.n	8003816 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68da      	ldr	r2, [r3, #12]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d8:	b292      	uxth	r2, r2
 80037da:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e0:	1c9a      	adds	r2, r3, #2
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	3b02      	subs	r3, #2
 80037f0:	b29a      	uxth	r2, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80037fe:	b29b      	uxth	r3, r3
 8003800:	2b01      	cmp	r3, #1
 8003802:	d81f      	bhi.n	8003844 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	685a      	ldr	r2, [r3, #4]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003812:	605a      	str	r2, [r3, #4]
 8003814:	e016      	b.n	8003844 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f103 020c 	add.w	r2, r3, #12
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003822:	7812      	ldrb	r2, [r2, #0]
 8003824:	b2d2      	uxtb	r2, r2
 8003826:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382c:	1c5a      	adds	r2, r3, #1
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003838:	b29b      	uxth	r3, r3
 800383a:	3b01      	subs	r3, #1
 800383c:	b29a      	uxth	r2, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003844:	2301      	movs	r3, #1
 8003846:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003848:	f7fe f94c 	bl	8001ae4 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	6a3b      	ldr	r3, [r7, #32]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003854:	429a      	cmp	r2, r3
 8003856:	d803      	bhi.n	8003860 <HAL_SPI_TransmitReceive+0x3c2>
 8003858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800385a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800385e:	d102      	bne.n	8003866 <HAL_SPI_TransmitReceive+0x3c8>
 8003860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003862:	2b00      	cmp	r3, #0
 8003864:	d109      	bne.n	800387a <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2201      	movs	r2, #1
 800386a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e02c      	b.n	80038d4 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800387e:	b29b      	uxth	r3, r3
 8003880:	2b00      	cmp	r3, #0
 8003882:	f47f af55 	bne.w	8003730 <HAL_SPI_TransmitReceive+0x292>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800388c:	b29b      	uxth	r3, r3
 800388e:	2b00      	cmp	r3, #0
 8003890:	f47f af4e 	bne.w	8003730 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003894:	6a3a      	ldr	r2, [r7, #32]
 8003896:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	f000 fa5d 	bl	8003d58 <SPI_EndRxTxTransaction>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d008      	beq.n	80038b6 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2220      	movs	r2, #32
 80038a8:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e00e      	b.n	80038d4 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d001      	beq.n	80038d2 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e000      	b.n	80038d4 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 80038d2:	2300      	movs	r3, #0
  }
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3728      	adds	r7, #40	@ 0x28
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b088      	sub	sp, #32
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	099b      	lsrs	r3, r3, #6
 80038f8:	f003 0301 	and.w	r3, r3, #1
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d10f      	bne.n	8003920 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00a      	beq.n	8003920 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	099b      	lsrs	r3, r3, #6
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	2b00      	cmp	r3, #0
 8003914:	d004      	beq.n	8003920 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	4798      	blx	r3
    return;
 800391e:	e0d7      	b.n	8003ad0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	085b      	lsrs	r3, r3, #1
 8003924:	f003 0301 	and.w	r3, r3, #1
 8003928:	2b00      	cmp	r3, #0
 800392a:	d00a      	beq.n	8003942 <HAL_SPI_IRQHandler+0x66>
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	09db      	lsrs	r3, r3, #7
 8003930:	f003 0301 	and.w	r3, r3, #1
 8003934:	2b00      	cmp	r3, #0
 8003936:	d004      	beq.n	8003942 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	4798      	blx	r3
    return;
 8003940:	e0c6      	b.n	8003ad0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	095b      	lsrs	r3, r3, #5
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b00      	cmp	r3, #0
 800394c:	d10c      	bne.n	8003968 <HAL_SPI_IRQHandler+0x8c>
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	099b      	lsrs	r3, r3, #6
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b00      	cmp	r3, #0
 8003958:	d106      	bne.n	8003968 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	0a1b      	lsrs	r3, r3, #8
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	2b00      	cmp	r3, #0
 8003964:	f000 80b4 	beq.w	8003ad0 <HAL_SPI_IRQHandler+0x1f4>
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	095b      	lsrs	r3, r3, #5
 800396c:	f003 0301 	and.w	r3, r3, #1
 8003970:	2b00      	cmp	r3, #0
 8003972:	f000 80ad 	beq.w	8003ad0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	099b      	lsrs	r3, r3, #6
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	2b00      	cmp	r3, #0
 8003980:	d023      	beq.n	80039ca <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b03      	cmp	r3, #3
 800398c:	d011      	beq.n	80039b2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003992:	f043 0204 	orr.w	r2, r3, #4
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800399a:	2300      	movs	r3, #0
 800399c:	617b      	str	r3, [r7, #20]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	617b      	str	r3, [r7, #20]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	617b      	str	r3, [r7, #20]
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	e00b      	b.n	80039ca <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039b2:	2300      	movs	r3, #0
 80039b4:	613b      	str	r3, [r7, #16]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	613b      	str	r3, [r7, #16]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	613b      	str	r3, [r7, #16]
 80039c6:	693b      	ldr	r3, [r7, #16]
        return;
 80039c8:	e082      	b.n	8003ad0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	095b      	lsrs	r3, r3, #5
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d014      	beq.n	8003a00 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039da:	f043 0201 	orr.w	r2, r3, #1
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80039e2:	2300      	movs	r3, #0
 80039e4:	60fb      	str	r3, [r7, #12]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	60fb      	str	r3, [r7, #12]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80039fc:	601a      	str	r2, [r3, #0]
 80039fe:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	0a1b      	lsrs	r3, r3, #8
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d00c      	beq.n	8003a26 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a10:	f043 0208 	orr.w	r2, r3, #8
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003a18:	2300      	movs	r3, #0
 8003a1a:	60bb      	str	r3, [r7, #8]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	60bb      	str	r3, [r7, #8]
 8003a24:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d04f      	beq.n	8003ace <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	685a      	ldr	r2, [r3, #4]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003a3c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2201      	movs	r2, #1
 8003a42:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d104      	bne.n	8003a5a <HAL_SPI_IRQHandler+0x17e>
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	f003 0301 	and.w	r3, r3, #1
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d034      	beq.n	8003ac4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	685a      	ldr	r2, [r3, #4]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f022 0203 	bic.w	r2, r2, #3
 8003a68:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d011      	beq.n	8003a96 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a76:	4a18      	ldr	r2, [pc, #96]	@ (8003ad8 <HAL_SPI_IRQHandler+0x1fc>)
 8003a78:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7fe f9c6 	bl	8001e10 <HAL_DMA_Abort_IT>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d005      	beq.n	8003a96 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a8e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d016      	beq.n	8003acc <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aa2:	4a0d      	ldr	r2, [pc, #52]	@ (8003ad8 <HAL_SPI_IRQHandler+0x1fc>)
 8003aa4:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7fe f9b0 	bl	8001e10 <HAL_DMA_Abort_IT>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00a      	beq.n	8003acc <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aba:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8003ac2:	e003      	b.n	8003acc <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 f809 	bl	8003adc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003aca:	e000      	b.n	8003ace <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003acc:	bf00      	nop
    return;
 8003ace:	bf00      	nop
  }
}
 8003ad0:	3720      	adds	r7, #32
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	08003af1 	.word	0x08003af1

08003adc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003ae4:	bf00      	nop
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003afc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003b0c:	68f8      	ldr	r0, [r7, #12]
 8003b0e:	f7ff ffe5 	bl	8003adc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003b12:	bf00      	nop
 8003b14:	3710      	adds	r7, #16
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
	...

08003b1c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b088      	sub	sp, #32
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	603b      	str	r3, [r7, #0]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003b2c:	f7fd ffda 	bl	8001ae4 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b34:	1a9b      	subs	r3, r3, r2
 8003b36:	683a      	ldr	r2, [r7, #0]
 8003b38:	4413      	add	r3, r2
 8003b3a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003b3c:	f7fd ffd2 	bl	8001ae4 <HAL_GetTick>
 8003b40:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003b42:	4b39      	ldr	r3, [pc, #228]	@ (8003c28 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	015b      	lsls	r3, r3, #5
 8003b48:	0d1b      	lsrs	r3, r3, #20
 8003b4a:	69fa      	ldr	r2, [r7, #28]
 8003b4c:	fb02 f303 	mul.w	r3, r2, r3
 8003b50:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b52:	e054      	b.n	8003bfe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b5a:	d050      	beq.n	8003bfe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b5c:	f7fd ffc2 	bl	8001ae4 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	69fa      	ldr	r2, [r7, #28]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d902      	bls.n	8003b72 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d13d      	bne.n	8003bee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	685a      	ldr	r2, [r3, #4]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003b80:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b8a:	d111      	bne.n	8003bb0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b94:	d004      	beq.n	8003ba0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b9e:	d107      	bne.n	8003bb0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003bae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bb4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bb8:	d10f      	bne.n	8003bda <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003bc8:	601a      	str	r2, [r3, #0]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003bd8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e017      	b.n	8003c1e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d101      	bne.n	8003bf8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	689a      	ldr	r2, [r3, #8]
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	4013      	ands	r3, r2
 8003c08:	68ba      	ldr	r2, [r7, #8]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	bf0c      	ite	eq
 8003c0e:	2301      	moveq	r3, #1
 8003c10:	2300      	movne	r3, #0
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	461a      	mov	r2, r3
 8003c16:	79fb      	ldrb	r3, [r7, #7]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d19b      	bne.n	8003b54 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3720      	adds	r7, #32
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	20000000 	.word	0x20000000

08003c2c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b08a      	sub	sp, #40	@ 0x28
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	607a      	str	r2, [r7, #4]
 8003c38:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003c3e:	f7fd ff51 	bl	8001ae4 <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c46:	1a9b      	subs	r3, r3, r2
 8003c48:	683a      	ldr	r2, [r7, #0]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003c4e:	f7fd ff49 	bl	8001ae4 <HAL_GetTick>
 8003c52:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	330c      	adds	r3, #12
 8003c5a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003c5c:	4b3d      	ldr	r3, [pc, #244]	@ (8003d54 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	4613      	mov	r3, r2
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	4413      	add	r3, r2
 8003c66:	00da      	lsls	r2, r3, #3
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	0d1b      	lsrs	r3, r3, #20
 8003c6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c6e:	fb02 f303 	mul.w	r3, r2, r3
 8003c72:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003c74:	e060      	b.n	8003d38 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003c7c:	d107      	bne.n	8003c8e <SPI_WaitFifoStateUntilTimeout+0x62>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d104      	bne.n	8003c8e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003c8c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c94:	d050      	beq.n	8003d38 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c96:	f7fd ff25 	bl	8001ae4 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	6a3b      	ldr	r3, [r7, #32]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d902      	bls.n	8003cac <SPI_WaitFifoStateUntilTimeout+0x80>
 8003ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d13d      	bne.n	8003d28 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	685a      	ldr	r2, [r3, #4]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003cba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003cc4:	d111      	bne.n	8003cea <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003cce:	d004      	beq.n	8003cda <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cd8:	d107      	bne.n	8003cea <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ce8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cf2:	d10f      	bne.n	8003d14 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d02:	601a      	str	r2, [r3, #0]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d12:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e010      	b.n	8003d4a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	3b01      	subs	r3, #1
 8003d36:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	689a      	ldr	r2, [r3, #8]
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	4013      	ands	r3, r2
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d196      	bne.n	8003c76 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3728      	adds	r7, #40	@ 0x28
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	20000000 	.word	0x20000000

08003d58 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b086      	sub	sp, #24
 8003d5c:	af02      	add	r7, sp, #8
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	9300      	str	r3, [sp, #0]
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003d70:	68f8      	ldr	r0, [r7, #12]
 8003d72:	f7ff ff5b 	bl	8003c2c <SPI_WaitFifoStateUntilTimeout>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d007      	beq.n	8003d8c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d80:	f043 0220 	orr.w	r2, r3, #32
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e027      	b.n	8003ddc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	9300      	str	r3, [sp, #0]
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	2200      	movs	r2, #0
 8003d94:	2180      	movs	r1, #128	@ 0x80
 8003d96:	68f8      	ldr	r0, [r7, #12]
 8003d98:	f7ff fec0 	bl	8003b1c <SPI_WaitFlagStateUntilTimeout>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d007      	beq.n	8003db2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003da6:	f043 0220 	orr.w	r2, r3, #32
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e014      	b.n	8003ddc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	9300      	str	r3, [sp, #0]
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003dbe:	68f8      	ldr	r0, [r7, #12]
 8003dc0:	f7ff ff34 	bl	8003c2c <SPI_WaitFifoStateUntilTimeout>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d007      	beq.n	8003dda <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dce:	f043 0220 	orr.w	r2, r3, #32
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e000      	b.n	8003ddc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3710      	adds	r7, #16
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d101      	bne.n	8003df6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e042      	b.n	8003e7c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d106      	bne.n	8003e0e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f7fd fba7 	bl	800155c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2224      	movs	r2, #36	@ 0x24
 8003e12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f022 0201 	bic.w	r2, r2, #1
 8003e24:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d002      	beq.n	8003e34 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 ff14 	bl	8004c5c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f000 fc15 	bl	8004664 <UART_SetConfig>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d101      	bne.n	8003e44 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e01b      	b.n	8003e7c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	685a      	ldr	r2, [r3, #4]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	689a      	ldr	r2, [r3, #8]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f042 0201 	orr.w	r2, r2, #1
 8003e72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f000 ff93 	bl	8004da0 <UART_CheckIdleState>
 8003e7a:	4603      	mov	r3, r0
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3708      	adds	r7, #8
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b08a      	sub	sp, #40	@ 0x28
 8003e88:	af02      	add	r7, sp, #8
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	603b      	str	r3, [r7, #0]
 8003e90:	4613      	mov	r3, r2
 8003e92:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e9a:	2b20      	cmp	r3, #32
 8003e9c:	d17b      	bne.n	8003f96 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d002      	beq.n	8003eaa <HAL_UART_Transmit+0x26>
 8003ea4:	88fb      	ldrh	r3, [r7, #6]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d101      	bne.n	8003eae <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e074      	b.n	8003f98 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2221      	movs	r2, #33	@ 0x21
 8003eba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ebe:	f7fd fe11 	bl	8001ae4 <HAL_GetTick>
 8003ec2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	88fa      	ldrh	r2, [r7, #6]
 8003ec8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	88fa      	ldrh	r2, [r7, #6]
 8003ed0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003edc:	d108      	bne.n	8003ef0 <HAL_UART_Transmit+0x6c>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d104      	bne.n	8003ef0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	61bb      	str	r3, [r7, #24]
 8003eee:	e003      	b.n	8003ef8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ef8:	e030      	b.n	8003f5c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	9300      	str	r3, [sp, #0]
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	2200      	movs	r2, #0
 8003f02:	2180      	movs	r1, #128	@ 0x80
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	f000 fff5 	bl	8004ef4 <UART_WaitOnFlagUntilTimeout>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d005      	beq.n	8003f1c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2220      	movs	r2, #32
 8003f14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	e03d      	b.n	8003f98 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d10b      	bne.n	8003f3a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	881b      	ldrh	r3, [r3, #0]
 8003f26:	461a      	mov	r2, r3
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f30:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	3302      	adds	r3, #2
 8003f36:	61bb      	str	r3, [r7, #24]
 8003f38:	e007      	b.n	8003f4a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	781a      	ldrb	r2, [r3, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	3301      	adds	r3, #1
 8003f48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	3b01      	subs	r3, #1
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1c8      	bne.n	8003efa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	9300      	str	r3, [sp, #0]
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	2140      	movs	r1, #64	@ 0x40
 8003f72:	68f8      	ldr	r0, [r7, #12]
 8003f74:	f000 ffbe 	bl	8004ef4 <UART_WaitOnFlagUntilTimeout>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d005      	beq.n	8003f8a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2220      	movs	r2, #32
 8003f82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e006      	b.n	8003f98 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2220      	movs	r2, #32
 8003f8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003f92:	2300      	movs	r3, #0
 8003f94:	e000      	b.n	8003f98 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003f96:	2302      	movs	r3, #2
  }
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3720      	adds	r7, #32
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b0ba      	sub	sp, #232	@ 0xe8
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	69db      	ldr	r3, [r3, #28]
 8003fae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003fc6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003fca:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003fce:	4013      	ands	r3, r2
 8003fd0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003fd4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d11b      	bne.n	8004014 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003fdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fe0:	f003 0320 	and.w	r3, r3, #32
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d015      	beq.n	8004014 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003fe8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fec:	f003 0320 	and.w	r3, r3, #32
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d105      	bne.n	8004000 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003ff4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ff8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d009      	beq.n	8004014 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004004:	2b00      	cmp	r3, #0
 8004006:	f000 8300 	beq.w	800460a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	4798      	blx	r3
      }
      return;
 8004012:	e2fa      	b.n	800460a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004014:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004018:	2b00      	cmp	r3, #0
 800401a:	f000 8123 	beq.w	8004264 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800401e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004022:	4b8d      	ldr	r3, [pc, #564]	@ (8004258 <HAL_UART_IRQHandler+0x2b8>)
 8004024:	4013      	ands	r3, r2
 8004026:	2b00      	cmp	r3, #0
 8004028:	d106      	bne.n	8004038 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800402a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800402e:	4b8b      	ldr	r3, [pc, #556]	@ (800425c <HAL_UART_IRQHandler+0x2bc>)
 8004030:	4013      	ands	r3, r2
 8004032:	2b00      	cmp	r3, #0
 8004034:	f000 8116 	beq.w	8004264 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004038:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800403c:	f003 0301 	and.w	r3, r3, #1
 8004040:	2b00      	cmp	r3, #0
 8004042:	d011      	beq.n	8004068 <HAL_UART_IRQHandler+0xc8>
 8004044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004048:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00b      	beq.n	8004068 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2201      	movs	r2, #1
 8004056:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800405e:	f043 0201 	orr.w	r2, r3, #1
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004068:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800406c:	f003 0302 	and.w	r3, r3, #2
 8004070:	2b00      	cmp	r3, #0
 8004072:	d011      	beq.n	8004098 <HAL_UART_IRQHandler+0xf8>
 8004074:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004078:	f003 0301 	and.w	r3, r3, #1
 800407c:	2b00      	cmp	r3, #0
 800407e:	d00b      	beq.n	8004098 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2202      	movs	r2, #2
 8004086:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800408e:	f043 0204 	orr.w	r2, r3, #4
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800409c:	f003 0304 	and.w	r3, r3, #4
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d011      	beq.n	80040c8 <HAL_UART_IRQHandler+0x128>
 80040a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040a8:	f003 0301 	and.w	r3, r3, #1
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00b      	beq.n	80040c8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2204      	movs	r2, #4
 80040b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040be:	f043 0202 	orr.w	r2, r3, #2
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80040c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040cc:	f003 0308 	and.w	r3, r3, #8
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d017      	beq.n	8004104 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80040d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040d8:	f003 0320 	and.w	r3, r3, #32
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d105      	bne.n	80040ec <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80040e0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80040e4:	4b5c      	ldr	r3, [pc, #368]	@ (8004258 <HAL_UART_IRQHandler+0x2b8>)
 80040e6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d00b      	beq.n	8004104 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2208      	movs	r2, #8
 80040f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040fa:	f043 0208 	orr.w	r2, r3, #8
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004108:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800410c:	2b00      	cmp	r3, #0
 800410e:	d012      	beq.n	8004136 <HAL_UART_IRQHandler+0x196>
 8004110:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004114:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d00c      	beq.n	8004136 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004124:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800412c:	f043 0220 	orr.w	r2, r3, #32
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800413c:	2b00      	cmp	r3, #0
 800413e:	f000 8266 	beq.w	800460e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004146:	f003 0320 	and.w	r3, r3, #32
 800414a:	2b00      	cmp	r3, #0
 800414c:	d013      	beq.n	8004176 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800414e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004152:	f003 0320 	and.w	r3, r3, #32
 8004156:	2b00      	cmp	r3, #0
 8004158:	d105      	bne.n	8004166 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800415a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800415e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d007      	beq.n	8004176 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800416a:	2b00      	cmp	r3, #0
 800416c:	d003      	beq.n	8004176 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800417c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800418a:	2b40      	cmp	r3, #64	@ 0x40
 800418c:	d005      	beq.n	800419a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800418e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004192:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004196:	2b00      	cmp	r3, #0
 8004198:	d054      	beq.n	8004244 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 ff17 	bl	8004fce <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041aa:	2b40      	cmp	r3, #64	@ 0x40
 80041ac:	d146      	bne.n	800423c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	3308      	adds	r3, #8
 80041b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80041bc:	e853 3f00 	ldrex	r3, [r3]
 80041c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80041c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80041c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	3308      	adds	r3, #8
 80041d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80041da:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80041de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80041e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80041ea:	e841 2300 	strex	r3, r2, [r1]
 80041ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80041f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d1d9      	bne.n	80041ae <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004200:	2b00      	cmp	r3, #0
 8004202:	d017      	beq.n	8004234 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800420a:	4a15      	ldr	r2, [pc, #84]	@ (8004260 <HAL_UART_IRQHandler+0x2c0>)
 800420c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004214:	4618      	mov	r0, r3
 8004216:	f7fd fdfb 	bl	8001e10 <HAL_DMA_Abort_IT>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d019      	beq.n	8004254 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800422e:	4610      	mov	r0, r2
 8004230:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004232:	e00f      	b.n	8004254 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 f9ff 	bl	8004638 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800423a:	e00b      	b.n	8004254 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f000 f9fb 	bl	8004638 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004242:	e007      	b.n	8004254 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f000 f9f7 	bl	8004638 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8004252:	e1dc      	b.n	800460e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004254:	bf00      	nop
    return;
 8004256:	e1da      	b.n	800460e <HAL_UART_IRQHandler+0x66e>
 8004258:	10000001 	.word	0x10000001
 800425c:	04000120 	.word	0x04000120
 8004260:	0800509b 	.word	0x0800509b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004268:	2b01      	cmp	r3, #1
 800426a:	f040 8170 	bne.w	800454e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800426e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004272:	f003 0310 	and.w	r3, r3, #16
 8004276:	2b00      	cmp	r3, #0
 8004278:	f000 8169 	beq.w	800454e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800427c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004280:	f003 0310 	and.w	r3, r3, #16
 8004284:	2b00      	cmp	r3, #0
 8004286:	f000 8162 	beq.w	800454e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2210      	movs	r2, #16
 8004290:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800429c:	2b40      	cmp	r3, #64	@ 0x40
 800429e:	f040 80d8 	bne.w	8004452 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80042b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	f000 80af 	beq.w	8004418 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80042c0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80042c4:	429a      	cmp	r2, r3
 80042c6:	f080 80a7 	bcs.w	8004418 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80042d0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0320 	and.w	r3, r3, #32
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	f040 8087 	bne.w	80043f6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80042f4:	e853 3f00 	ldrex	r3, [r3]
 80042f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80042fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004300:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004304:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	461a      	mov	r2, r3
 800430e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004312:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004316:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800431a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800431e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004322:	e841 2300 	strex	r3, r2, [r1]
 8004326:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800432a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800432e:	2b00      	cmp	r3, #0
 8004330:	d1da      	bne.n	80042e8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	3308      	adds	r3, #8
 8004338:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800433a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800433c:	e853 3f00 	ldrex	r3, [r3]
 8004340:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004342:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004344:	f023 0301 	bic.w	r3, r3, #1
 8004348:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	3308      	adds	r3, #8
 8004352:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004356:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800435a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800435c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800435e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004362:	e841 2300 	strex	r3, r2, [r1]
 8004366:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004368:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800436a:	2b00      	cmp	r3, #0
 800436c:	d1e1      	bne.n	8004332 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	3308      	adds	r3, #8
 8004374:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004376:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004378:	e853 3f00 	ldrex	r3, [r3]
 800437c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800437e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004380:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004384:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	3308      	adds	r3, #8
 800438e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004392:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004394:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004396:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004398:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800439a:	e841 2300 	strex	r3, r2, [r1]
 800439e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80043a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d1e3      	bne.n	800436e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2220      	movs	r2, #32
 80043aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043bc:	e853 3f00 	ldrex	r3, [r3]
 80043c0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80043c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043c4:	f023 0310 	bic.w	r3, r3, #16
 80043c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	461a      	mov	r2, r3
 80043d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80043d6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80043d8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043da:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80043dc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80043de:	e841 2300 	strex	r3, r2, [r1]
 80043e2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80043e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d1e4      	bne.n	80043b4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043f0:	4618      	mov	r0, r3
 80043f2:	f7fd fcb4 	bl	8001d5e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2202      	movs	r2, #2
 80043fa:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004408:	b29b      	uxth	r3, r3
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	b29b      	uxth	r3, r3
 800440e:	4619      	mov	r1, r3
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f000 f91b 	bl	800464c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004416:	e0fc      	b.n	8004612 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800441e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004422:	429a      	cmp	r2, r3
 8004424:	f040 80f5 	bne.w	8004612 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0320 	and.w	r3, r3, #32
 8004436:	2b20      	cmp	r3, #32
 8004438:	f040 80eb 	bne.w	8004612 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2202      	movs	r2, #2
 8004440:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004448:	4619      	mov	r1, r3
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 f8fe 	bl	800464c <HAL_UARTEx_RxEventCallback>
      return;
 8004450:	e0df      	b.n	8004612 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800445e:	b29b      	uxth	r3, r3
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800446c:	b29b      	uxth	r3, r3
 800446e:	2b00      	cmp	r3, #0
 8004470:	f000 80d1 	beq.w	8004616 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8004474:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004478:	2b00      	cmp	r3, #0
 800447a:	f000 80cc 	beq.w	8004616 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004486:	e853 3f00 	ldrex	r3, [r3]
 800448a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800448c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800448e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004492:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	461a      	mov	r2, r3
 800449c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80044a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80044a2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80044a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044a8:	e841 2300 	strex	r3, r2, [r1]
 80044ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80044ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d1e4      	bne.n	800447e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	3308      	adds	r3, #8
 80044ba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044be:	e853 3f00 	ldrex	r3, [r3]
 80044c2:	623b      	str	r3, [r7, #32]
   return(result);
 80044c4:	6a3b      	ldr	r3, [r7, #32]
 80044c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044ca:	f023 0301 	bic.w	r3, r3, #1
 80044ce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	3308      	adds	r3, #8
 80044d8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80044dc:	633a      	str	r2, [r7, #48]	@ 0x30
 80044de:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80044e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044e4:	e841 2300 	strex	r3, r2, [r1]
 80044e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80044ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1e1      	bne.n	80044b4 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2220      	movs	r2, #32
 80044f4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	e853 3f00 	ldrex	r3, [r3]
 8004510:	60fb      	str	r3, [r7, #12]
   return(result);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f023 0310 	bic.w	r3, r3, #16
 8004518:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	461a      	mov	r2, r3
 8004522:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004526:	61fb      	str	r3, [r7, #28]
 8004528:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452a:	69b9      	ldr	r1, [r7, #24]
 800452c:	69fa      	ldr	r2, [r7, #28]
 800452e:	e841 2300 	strex	r3, r2, [r1]
 8004532:	617b      	str	r3, [r7, #20]
   return(result);
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1e4      	bne.n	8004504 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2202      	movs	r2, #2
 800453e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004540:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004544:	4619      	mov	r1, r3
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 f880 	bl	800464c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800454c:	e063      	b.n	8004616 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800454e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004552:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00e      	beq.n	8004578 <HAL_UART_IRQHandler+0x5d8>
 800455a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800455e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d008      	beq.n	8004578 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800456e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f000 fdcf 	bl	8005114 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004576:	e051      	b.n	800461c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004578:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800457c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004580:	2b00      	cmp	r3, #0
 8004582:	d014      	beq.n	80045ae <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004584:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004588:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800458c:	2b00      	cmp	r3, #0
 800458e:	d105      	bne.n	800459c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004590:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004594:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d008      	beq.n	80045ae <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d03a      	beq.n	800461a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	4798      	blx	r3
    }
    return;
 80045ac:	e035      	b.n	800461a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80045ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d009      	beq.n	80045ce <HAL_UART_IRQHandler+0x62e>
 80045ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d003      	beq.n	80045ce <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f000 fd79 	bl	80050be <UART_EndTransmit_IT>
    return;
 80045cc:	e026      	b.n	800461c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80045ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d009      	beq.n	80045ee <HAL_UART_IRQHandler+0x64e>
 80045da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045de:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d003      	beq.n	80045ee <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 fda8 	bl	800513c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80045ec:	e016      	b.n	800461c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80045ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045f2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d010      	beq.n	800461c <HAL_UART_IRQHandler+0x67c>
 80045fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	da0c      	bge.n	800461c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 fd90 	bl	8005128 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004608:	e008      	b.n	800461c <HAL_UART_IRQHandler+0x67c>
      return;
 800460a:	bf00      	nop
 800460c:	e006      	b.n	800461c <HAL_UART_IRQHandler+0x67c>
    return;
 800460e:	bf00      	nop
 8004610:	e004      	b.n	800461c <HAL_UART_IRQHandler+0x67c>
      return;
 8004612:	bf00      	nop
 8004614:	e002      	b.n	800461c <HAL_UART_IRQHandler+0x67c>
      return;
 8004616:	bf00      	nop
 8004618:	e000      	b.n	800461c <HAL_UART_IRQHandler+0x67c>
    return;
 800461a:	bf00      	nop
  }
}
 800461c:	37e8      	adds	r7, #232	@ 0xe8
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop

08004624 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800462c:	bf00      	nop
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004640:	bf00      	nop
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	460b      	mov	r3, r1
 8004656:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004658:	bf00      	nop
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004664:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004668:	b08c      	sub	sp, #48	@ 0x30
 800466a:	af00      	add	r7, sp, #0
 800466c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800466e:	2300      	movs	r3, #0
 8004670:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	689a      	ldr	r2, [r3, #8]
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	691b      	ldr	r3, [r3, #16]
 800467c:	431a      	orrs	r2, r3
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	695b      	ldr	r3, [r3, #20]
 8004682:	431a      	orrs	r2, r3
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	69db      	ldr	r3, [r3, #28]
 8004688:	4313      	orrs	r3, r2
 800468a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	4baa      	ldr	r3, [pc, #680]	@ (800493c <UART_SetConfig+0x2d8>)
 8004694:	4013      	ands	r3, r2
 8004696:	697a      	ldr	r2, [r7, #20]
 8004698:	6812      	ldr	r2, [r2, #0]
 800469a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800469c:	430b      	orrs	r3, r1
 800469e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	68da      	ldr	r2, [r3, #12]
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	430a      	orrs	r2, r1
 80046b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	699b      	ldr	r3, [r3, #24]
 80046ba:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a9f      	ldr	r2, [pc, #636]	@ (8004940 <UART_SetConfig+0x2dc>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d004      	beq.n	80046d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	6a1b      	ldr	r3, [r3, #32]
 80046ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046cc:	4313      	orrs	r3, r2
 80046ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80046da:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80046de:	697a      	ldr	r2, [r7, #20]
 80046e0:	6812      	ldr	r2, [r2, #0]
 80046e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80046e4:	430b      	orrs	r3, r1
 80046e6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ee:	f023 010f 	bic.w	r1, r3, #15
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	430a      	orrs	r2, r1
 80046fc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a90      	ldr	r2, [pc, #576]	@ (8004944 <UART_SetConfig+0x2e0>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d125      	bne.n	8004754 <UART_SetConfig+0xf0>
 8004708:	4b8f      	ldr	r3, [pc, #572]	@ (8004948 <UART_SetConfig+0x2e4>)
 800470a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800470e:	f003 0303 	and.w	r3, r3, #3
 8004712:	2b03      	cmp	r3, #3
 8004714:	d81a      	bhi.n	800474c <UART_SetConfig+0xe8>
 8004716:	a201      	add	r2, pc, #4	@ (adr r2, 800471c <UART_SetConfig+0xb8>)
 8004718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800471c:	0800472d 	.word	0x0800472d
 8004720:	0800473d 	.word	0x0800473d
 8004724:	08004735 	.word	0x08004735
 8004728:	08004745 	.word	0x08004745
 800472c:	2301      	movs	r3, #1
 800472e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004732:	e116      	b.n	8004962 <UART_SetConfig+0x2fe>
 8004734:	2302      	movs	r3, #2
 8004736:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800473a:	e112      	b.n	8004962 <UART_SetConfig+0x2fe>
 800473c:	2304      	movs	r3, #4
 800473e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004742:	e10e      	b.n	8004962 <UART_SetConfig+0x2fe>
 8004744:	2308      	movs	r3, #8
 8004746:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800474a:	e10a      	b.n	8004962 <UART_SetConfig+0x2fe>
 800474c:	2310      	movs	r3, #16
 800474e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004752:	e106      	b.n	8004962 <UART_SetConfig+0x2fe>
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a7c      	ldr	r2, [pc, #496]	@ (800494c <UART_SetConfig+0x2e8>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d138      	bne.n	80047d0 <UART_SetConfig+0x16c>
 800475e:	4b7a      	ldr	r3, [pc, #488]	@ (8004948 <UART_SetConfig+0x2e4>)
 8004760:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004764:	f003 030c 	and.w	r3, r3, #12
 8004768:	2b0c      	cmp	r3, #12
 800476a:	d82d      	bhi.n	80047c8 <UART_SetConfig+0x164>
 800476c:	a201      	add	r2, pc, #4	@ (adr r2, 8004774 <UART_SetConfig+0x110>)
 800476e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004772:	bf00      	nop
 8004774:	080047a9 	.word	0x080047a9
 8004778:	080047c9 	.word	0x080047c9
 800477c:	080047c9 	.word	0x080047c9
 8004780:	080047c9 	.word	0x080047c9
 8004784:	080047b9 	.word	0x080047b9
 8004788:	080047c9 	.word	0x080047c9
 800478c:	080047c9 	.word	0x080047c9
 8004790:	080047c9 	.word	0x080047c9
 8004794:	080047b1 	.word	0x080047b1
 8004798:	080047c9 	.word	0x080047c9
 800479c:	080047c9 	.word	0x080047c9
 80047a0:	080047c9 	.word	0x080047c9
 80047a4:	080047c1 	.word	0x080047c1
 80047a8:	2300      	movs	r3, #0
 80047aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047ae:	e0d8      	b.n	8004962 <UART_SetConfig+0x2fe>
 80047b0:	2302      	movs	r3, #2
 80047b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047b6:	e0d4      	b.n	8004962 <UART_SetConfig+0x2fe>
 80047b8:	2304      	movs	r3, #4
 80047ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047be:	e0d0      	b.n	8004962 <UART_SetConfig+0x2fe>
 80047c0:	2308      	movs	r3, #8
 80047c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047c6:	e0cc      	b.n	8004962 <UART_SetConfig+0x2fe>
 80047c8:	2310      	movs	r3, #16
 80047ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047ce:	e0c8      	b.n	8004962 <UART_SetConfig+0x2fe>
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a5e      	ldr	r2, [pc, #376]	@ (8004950 <UART_SetConfig+0x2ec>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d125      	bne.n	8004826 <UART_SetConfig+0x1c2>
 80047da:	4b5b      	ldr	r3, [pc, #364]	@ (8004948 <UART_SetConfig+0x2e4>)
 80047dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047e0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80047e4:	2b30      	cmp	r3, #48	@ 0x30
 80047e6:	d016      	beq.n	8004816 <UART_SetConfig+0x1b2>
 80047e8:	2b30      	cmp	r3, #48	@ 0x30
 80047ea:	d818      	bhi.n	800481e <UART_SetConfig+0x1ba>
 80047ec:	2b20      	cmp	r3, #32
 80047ee:	d00a      	beq.n	8004806 <UART_SetConfig+0x1a2>
 80047f0:	2b20      	cmp	r3, #32
 80047f2:	d814      	bhi.n	800481e <UART_SetConfig+0x1ba>
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d002      	beq.n	80047fe <UART_SetConfig+0x19a>
 80047f8:	2b10      	cmp	r3, #16
 80047fa:	d008      	beq.n	800480e <UART_SetConfig+0x1aa>
 80047fc:	e00f      	b.n	800481e <UART_SetConfig+0x1ba>
 80047fe:	2300      	movs	r3, #0
 8004800:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004804:	e0ad      	b.n	8004962 <UART_SetConfig+0x2fe>
 8004806:	2302      	movs	r3, #2
 8004808:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800480c:	e0a9      	b.n	8004962 <UART_SetConfig+0x2fe>
 800480e:	2304      	movs	r3, #4
 8004810:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004814:	e0a5      	b.n	8004962 <UART_SetConfig+0x2fe>
 8004816:	2308      	movs	r3, #8
 8004818:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800481c:	e0a1      	b.n	8004962 <UART_SetConfig+0x2fe>
 800481e:	2310      	movs	r3, #16
 8004820:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004824:	e09d      	b.n	8004962 <UART_SetConfig+0x2fe>
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a4a      	ldr	r2, [pc, #296]	@ (8004954 <UART_SetConfig+0x2f0>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d125      	bne.n	800487c <UART_SetConfig+0x218>
 8004830:	4b45      	ldr	r3, [pc, #276]	@ (8004948 <UART_SetConfig+0x2e4>)
 8004832:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004836:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800483a:	2bc0      	cmp	r3, #192	@ 0xc0
 800483c:	d016      	beq.n	800486c <UART_SetConfig+0x208>
 800483e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004840:	d818      	bhi.n	8004874 <UART_SetConfig+0x210>
 8004842:	2b80      	cmp	r3, #128	@ 0x80
 8004844:	d00a      	beq.n	800485c <UART_SetConfig+0x1f8>
 8004846:	2b80      	cmp	r3, #128	@ 0x80
 8004848:	d814      	bhi.n	8004874 <UART_SetConfig+0x210>
 800484a:	2b00      	cmp	r3, #0
 800484c:	d002      	beq.n	8004854 <UART_SetConfig+0x1f0>
 800484e:	2b40      	cmp	r3, #64	@ 0x40
 8004850:	d008      	beq.n	8004864 <UART_SetConfig+0x200>
 8004852:	e00f      	b.n	8004874 <UART_SetConfig+0x210>
 8004854:	2300      	movs	r3, #0
 8004856:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800485a:	e082      	b.n	8004962 <UART_SetConfig+0x2fe>
 800485c:	2302      	movs	r3, #2
 800485e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004862:	e07e      	b.n	8004962 <UART_SetConfig+0x2fe>
 8004864:	2304      	movs	r3, #4
 8004866:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800486a:	e07a      	b.n	8004962 <UART_SetConfig+0x2fe>
 800486c:	2308      	movs	r3, #8
 800486e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004872:	e076      	b.n	8004962 <UART_SetConfig+0x2fe>
 8004874:	2310      	movs	r3, #16
 8004876:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800487a:	e072      	b.n	8004962 <UART_SetConfig+0x2fe>
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a35      	ldr	r2, [pc, #212]	@ (8004958 <UART_SetConfig+0x2f4>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d12a      	bne.n	80048dc <UART_SetConfig+0x278>
 8004886:	4b30      	ldr	r3, [pc, #192]	@ (8004948 <UART_SetConfig+0x2e4>)
 8004888:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800488c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004890:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004894:	d01a      	beq.n	80048cc <UART_SetConfig+0x268>
 8004896:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800489a:	d81b      	bhi.n	80048d4 <UART_SetConfig+0x270>
 800489c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048a0:	d00c      	beq.n	80048bc <UART_SetConfig+0x258>
 80048a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048a6:	d815      	bhi.n	80048d4 <UART_SetConfig+0x270>
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d003      	beq.n	80048b4 <UART_SetConfig+0x250>
 80048ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048b0:	d008      	beq.n	80048c4 <UART_SetConfig+0x260>
 80048b2:	e00f      	b.n	80048d4 <UART_SetConfig+0x270>
 80048b4:	2300      	movs	r3, #0
 80048b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048ba:	e052      	b.n	8004962 <UART_SetConfig+0x2fe>
 80048bc:	2302      	movs	r3, #2
 80048be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048c2:	e04e      	b.n	8004962 <UART_SetConfig+0x2fe>
 80048c4:	2304      	movs	r3, #4
 80048c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048ca:	e04a      	b.n	8004962 <UART_SetConfig+0x2fe>
 80048cc:	2308      	movs	r3, #8
 80048ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048d2:	e046      	b.n	8004962 <UART_SetConfig+0x2fe>
 80048d4:	2310      	movs	r3, #16
 80048d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048da:	e042      	b.n	8004962 <UART_SetConfig+0x2fe>
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a17      	ldr	r2, [pc, #92]	@ (8004940 <UART_SetConfig+0x2dc>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d13a      	bne.n	800495c <UART_SetConfig+0x2f8>
 80048e6:	4b18      	ldr	r3, [pc, #96]	@ (8004948 <UART_SetConfig+0x2e4>)
 80048e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048ec:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80048f0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80048f4:	d01a      	beq.n	800492c <UART_SetConfig+0x2c8>
 80048f6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80048fa:	d81b      	bhi.n	8004934 <UART_SetConfig+0x2d0>
 80048fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004900:	d00c      	beq.n	800491c <UART_SetConfig+0x2b8>
 8004902:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004906:	d815      	bhi.n	8004934 <UART_SetConfig+0x2d0>
 8004908:	2b00      	cmp	r3, #0
 800490a:	d003      	beq.n	8004914 <UART_SetConfig+0x2b0>
 800490c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004910:	d008      	beq.n	8004924 <UART_SetConfig+0x2c0>
 8004912:	e00f      	b.n	8004934 <UART_SetConfig+0x2d0>
 8004914:	2300      	movs	r3, #0
 8004916:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800491a:	e022      	b.n	8004962 <UART_SetConfig+0x2fe>
 800491c:	2302      	movs	r3, #2
 800491e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004922:	e01e      	b.n	8004962 <UART_SetConfig+0x2fe>
 8004924:	2304      	movs	r3, #4
 8004926:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800492a:	e01a      	b.n	8004962 <UART_SetConfig+0x2fe>
 800492c:	2308      	movs	r3, #8
 800492e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004932:	e016      	b.n	8004962 <UART_SetConfig+0x2fe>
 8004934:	2310      	movs	r3, #16
 8004936:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800493a:	e012      	b.n	8004962 <UART_SetConfig+0x2fe>
 800493c:	cfff69f3 	.word	0xcfff69f3
 8004940:	40008000 	.word	0x40008000
 8004944:	40013800 	.word	0x40013800
 8004948:	40021000 	.word	0x40021000
 800494c:	40004400 	.word	0x40004400
 8004950:	40004800 	.word	0x40004800
 8004954:	40004c00 	.word	0x40004c00
 8004958:	40005000 	.word	0x40005000
 800495c:	2310      	movs	r3, #16
 800495e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4aae      	ldr	r2, [pc, #696]	@ (8004c20 <UART_SetConfig+0x5bc>)
 8004968:	4293      	cmp	r3, r2
 800496a:	f040 8097 	bne.w	8004a9c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800496e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004972:	2b08      	cmp	r3, #8
 8004974:	d823      	bhi.n	80049be <UART_SetConfig+0x35a>
 8004976:	a201      	add	r2, pc, #4	@ (adr r2, 800497c <UART_SetConfig+0x318>)
 8004978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800497c:	080049a1 	.word	0x080049a1
 8004980:	080049bf 	.word	0x080049bf
 8004984:	080049a9 	.word	0x080049a9
 8004988:	080049bf 	.word	0x080049bf
 800498c:	080049af 	.word	0x080049af
 8004990:	080049bf 	.word	0x080049bf
 8004994:	080049bf 	.word	0x080049bf
 8004998:	080049bf 	.word	0x080049bf
 800499c:	080049b7 	.word	0x080049b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049a0:	f7fe fa12 	bl	8002dc8 <HAL_RCC_GetPCLK1Freq>
 80049a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80049a6:	e010      	b.n	80049ca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049a8:	4b9e      	ldr	r3, [pc, #632]	@ (8004c24 <UART_SetConfig+0x5c0>)
 80049aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80049ac:	e00d      	b.n	80049ca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049ae:	f7fe f99d 	bl	8002cec <HAL_RCC_GetSysClockFreq>
 80049b2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80049b4:	e009      	b.n	80049ca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80049bc:	e005      	b.n	80049ca <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80049be:	2300      	movs	r3, #0
 80049c0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80049c8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80049ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	f000 8130 	beq.w	8004c32 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049d6:	4a94      	ldr	r2, [pc, #592]	@ (8004c28 <UART_SetConfig+0x5c4>)
 80049d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049dc:	461a      	mov	r2, r3
 80049de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80049e4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	685a      	ldr	r2, [r3, #4]
 80049ea:	4613      	mov	r3, r2
 80049ec:	005b      	lsls	r3, r3, #1
 80049ee:	4413      	add	r3, r2
 80049f0:	69ba      	ldr	r2, [r7, #24]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d305      	bcc.n	8004a02 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80049fc:	69ba      	ldr	r2, [r7, #24]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d903      	bls.n	8004a0a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004a08:	e113      	b.n	8004c32 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	60bb      	str	r3, [r7, #8]
 8004a10:	60fa      	str	r2, [r7, #12]
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a16:	4a84      	ldr	r2, [pc, #528]	@ (8004c28 <UART_SetConfig+0x5c4>)
 8004a18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	2200      	movs	r2, #0
 8004a20:	603b      	str	r3, [r7, #0]
 8004a22:	607a      	str	r2, [r7, #4]
 8004a24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a28:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004a2c:	f7fc f954 	bl	8000cd8 <__aeabi_uldivmod>
 8004a30:	4602      	mov	r2, r0
 8004a32:	460b      	mov	r3, r1
 8004a34:	4610      	mov	r0, r2
 8004a36:	4619      	mov	r1, r3
 8004a38:	f04f 0200 	mov.w	r2, #0
 8004a3c:	f04f 0300 	mov.w	r3, #0
 8004a40:	020b      	lsls	r3, r1, #8
 8004a42:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004a46:	0202      	lsls	r2, r0, #8
 8004a48:	6979      	ldr	r1, [r7, #20]
 8004a4a:	6849      	ldr	r1, [r1, #4]
 8004a4c:	0849      	lsrs	r1, r1, #1
 8004a4e:	2000      	movs	r0, #0
 8004a50:	460c      	mov	r4, r1
 8004a52:	4605      	mov	r5, r0
 8004a54:	eb12 0804 	adds.w	r8, r2, r4
 8004a58:	eb43 0905 	adc.w	r9, r3, r5
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	469a      	mov	sl, r3
 8004a64:	4693      	mov	fp, r2
 8004a66:	4652      	mov	r2, sl
 8004a68:	465b      	mov	r3, fp
 8004a6a:	4640      	mov	r0, r8
 8004a6c:	4649      	mov	r1, r9
 8004a6e:	f7fc f933 	bl	8000cd8 <__aeabi_uldivmod>
 8004a72:	4602      	mov	r2, r0
 8004a74:	460b      	mov	r3, r1
 8004a76:	4613      	mov	r3, r2
 8004a78:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a7a:	6a3b      	ldr	r3, [r7, #32]
 8004a7c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a80:	d308      	bcc.n	8004a94 <UART_SetConfig+0x430>
 8004a82:	6a3b      	ldr	r3, [r7, #32]
 8004a84:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a88:	d204      	bcs.n	8004a94 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	6a3a      	ldr	r2, [r7, #32]
 8004a90:	60da      	str	r2, [r3, #12]
 8004a92:	e0ce      	b.n	8004c32 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004a9a:	e0ca      	b.n	8004c32 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	69db      	ldr	r3, [r3, #28]
 8004aa0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004aa4:	d166      	bne.n	8004b74 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004aa6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004aaa:	2b08      	cmp	r3, #8
 8004aac:	d827      	bhi.n	8004afe <UART_SetConfig+0x49a>
 8004aae:	a201      	add	r2, pc, #4	@ (adr r2, 8004ab4 <UART_SetConfig+0x450>)
 8004ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab4:	08004ad9 	.word	0x08004ad9
 8004ab8:	08004ae1 	.word	0x08004ae1
 8004abc:	08004ae9 	.word	0x08004ae9
 8004ac0:	08004aff 	.word	0x08004aff
 8004ac4:	08004aef 	.word	0x08004aef
 8004ac8:	08004aff 	.word	0x08004aff
 8004acc:	08004aff 	.word	0x08004aff
 8004ad0:	08004aff 	.word	0x08004aff
 8004ad4:	08004af7 	.word	0x08004af7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ad8:	f7fe f976 	bl	8002dc8 <HAL_RCC_GetPCLK1Freq>
 8004adc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004ade:	e014      	b.n	8004b0a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ae0:	f7fe f988 	bl	8002df4 <HAL_RCC_GetPCLK2Freq>
 8004ae4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004ae6:	e010      	b.n	8004b0a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ae8:	4b4e      	ldr	r3, [pc, #312]	@ (8004c24 <UART_SetConfig+0x5c0>)
 8004aea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004aec:	e00d      	b.n	8004b0a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004aee:	f7fe f8fd 	bl	8002cec <HAL_RCC_GetSysClockFreq>
 8004af2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004af4:	e009      	b.n	8004b0a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004af6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004afa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004afc:	e005      	b.n	8004b0a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004afe:	2300      	movs	r3, #0
 8004b00:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004b08:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	f000 8090 	beq.w	8004c32 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b16:	4a44      	ldr	r2, [pc, #272]	@ (8004c28 <UART_SetConfig+0x5c4>)
 8004b18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b20:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b24:	005a      	lsls	r2, r3, #1
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	085b      	lsrs	r3, r3, #1
 8004b2c:	441a      	add	r2, r3
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b36:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b38:	6a3b      	ldr	r3, [r7, #32]
 8004b3a:	2b0f      	cmp	r3, #15
 8004b3c:	d916      	bls.n	8004b6c <UART_SetConfig+0x508>
 8004b3e:	6a3b      	ldr	r3, [r7, #32]
 8004b40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b44:	d212      	bcs.n	8004b6c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b46:	6a3b      	ldr	r3, [r7, #32]
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	f023 030f 	bic.w	r3, r3, #15
 8004b4e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b50:	6a3b      	ldr	r3, [r7, #32]
 8004b52:	085b      	lsrs	r3, r3, #1
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	f003 0307 	and.w	r3, r3, #7
 8004b5a:	b29a      	uxth	r2, r3
 8004b5c:	8bfb      	ldrh	r3, [r7, #30]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	8bfa      	ldrh	r2, [r7, #30]
 8004b68:	60da      	str	r2, [r3, #12]
 8004b6a:	e062      	b.n	8004c32 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004b72:	e05e      	b.n	8004c32 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b74:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004b78:	2b08      	cmp	r3, #8
 8004b7a:	d828      	bhi.n	8004bce <UART_SetConfig+0x56a>
 8004b7c:	a201      	add	r2, pc, #4	@ (adr r2, 8004b84 <UART_SetConfig+0x520>)
 8004b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b82:	bf00      	nop
 8004b84:	08004ba9 	.word	0x08004ba9
 8004b88:	08004bb1 	.word	0x08004bb1
 8004b8c:	08004bb9 	.word	0x08004bb9
 8004b90:	08004bcf 	.word	0x08004bcf
 8004b94:	08004bbf 	.word	0x08004bbf
 8004b98:	08004bcf 	.word	0x08004bcf
 8004b9c:	08004bcf 	.word	0x08004bcf
 8004ba0:	08004bcf 	.word	0x08004bcf
 8004ba4:	08004bc7 	.word	0x08004bc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ba8:	f7fe f90e 	bl	8002dc8 <HAL_RCC_GetPCLK1Freq>
 8004bac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004bae:	e014      	b.n	8004bda <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bb0:	f7fe f920 	bl	8002df4 <HAL_RCC_GetPCLK2Freq>
 8004bb4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004bb6:	e010      	b.n	8004bda <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bb8:	4b1a      	ldr	r3, [pc, #104]	@ (8004c24 <UART_SetConfig+0x5c0>)
 8004bba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004bbc:	e00d      	b.n	8004bda <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bbe:	f7fe f895 	bl	8002cec <HAL_RCC_GetSysClockFreq>
 8004bc2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004bc4:	e009      	b.n	8004bda <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004bca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004bcc:	e005      	b.n	8004bda <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004bd8:	bf00      	nop
    }

    if (pclk != 0U)
 8004bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d028      	beq.n	8004c32 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004be4:	4a10      	ldr	r2, [pc, #64]	@ (8004c28 <UART_SetConfig+0x5c4>)
 8004be6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004bea:	461a      	mov	r2, r3
 8004bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bee:	fbb3 f2f2 	udiv	r2, r3, r2
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	085b      	lsrs	r3, r3, #1
 8004bf8:	441a      	add	r2, r3
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c02:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c04:	6a3b      	ldr	r3, [r7, #32]
 8004c06:	2b0f      	cmp	r3, #15
 8004c08:	d910      	bls.n	8004c2c <UART_SetConfig+0x5c8>
 8004c0a:	6a3b      	ldr	r3, [r7, #32]
 8004c0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c10:	d20c      	bcs.n	8004c2c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c12:	6a3b      	ldr	r3, [r7, #32]
 8004c14:	b29a      	uxth	r2, r3
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	60da      	str	r2, [r3, #12]
 8004c1c:	e009      	b.n	8004c32 <UART_SetConfig+0x5ce>
 8004c1e:	bf00      	nop
 8004c20:	40008000 	.word	0x40008000
 8004c24:	00f42400 	.word	0x00f42400
 8004c28:	08009bc4 	.word	0x08009bc4
      }
      else
      {
        ret = HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	2201      	movs	r2, #1
 8004c36:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	2200      	movs	r2, #0
 8004c46:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004c4e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3730      	adds	r7, #48	@ 0x30
 8004c56:	46bd      	mov	sp, r7
 8004c58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004c5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c68:	f003 0308 	and.w	r3, r3, #8
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d00a      	beq.n	8004c86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	430a      	orrs	r2, r1
 8004c84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c8a:	f003 0301 	and.w	r3, r3, #1
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d00a      	beq.n	8004ca8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	430a      	orrs	r2, r1
 8004ca6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cac:	f003 0302 	and.w	r3, r3, #2
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d00a      	beq.n	8004cca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cce:	f003 0304 	and.w	r3, r3, #4
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00a      	beq.n	8004cec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	430a      	orrs	r2, r1
 8004cea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cf0:	f003 0310 	and.w	r3, r3, #16
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d00a      	beq.n	8004d0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	430a      	orrs	r2, r1
 8004d0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d12:	f003 0320 	and.w	r3, r3, #32
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00a      	beq.n	8004d30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	430a      	orrs	r2, r1
 8004d2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d01a      	beq.n	8004d72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	430a      	orrs	r2, r1
 8004d50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d5a:	d10a      	bne.n	8004d72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	430a      	orrs	r2, r1
 8004d70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d00a      	beq.n	8004d94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	430a      	orrs	r2, r1
 8004d92:	605a      	str	r2, [r3, #4]
  }
}
 8004d94:	bf00      	nop
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b098      	sub	sp, #96	@ 0x60
 8004da4:	af02      	add	r7, sp, #8
 8004da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004db0:	f7fc fe98 	bl	8001ae4 <HAL_GetTick>
 8004db4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0308 	and.w	r3, r3, #8
 8004dc0:	2b08      	cmp	r3, #8
 8004dc2:	d12f      	bne.n	8004e24 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dc4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004dc8:	9300      	str	r3, [sp, #0]
 8004dca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 f88e 	bl	8004ef4 <UART_WaitOnFlagUntilTimeout>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d022      	beq.n	8004e24 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004de6:	e853 3f00 	ldrex	r3, [r3]
 8004dea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004dec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004df2:	653b      	str	r3, [r7, #80]	@ 0x50
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	461a      	mov	r2, r3
 8004dfa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004dfc:	647b      	str	r3, [r7, #68]	@ 0x44
 8004dfe:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e00:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e04:	e841 2300 	strex	r3, r2, [r1]
 8004e08:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004e0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d1e6      	bne.n	8004dde <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2220      	movs	r2, #32
 8004e14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e063      	b.n	8004eec <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0304 	and.w	r3, r3, #4
 8004e2e:	2b04      	cmp	r3, #4
 8004e30:	d149      	bne.n	8004ec6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e32:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004e36:	9300      	str	r3, [sp, #0]
 8004e38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 f857 	bl	8004ef4 <UART_WaitOnFlagUntilTimeout>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d03c      	beq.n	8004ec6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e54:	e853 3f00 	ldrex	r3, [r3]
 8004e58:	623b      	str	r3, [r7, #32]
   return(result);
 8004e5a:	6a3b      	ldr	r3, [r7, #32]
 8004e5c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e60:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	461a      	mov	r2, r3
 8004e68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e6a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e6c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e6e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e72:	e841 2300 	strex	r3, r2, [r1]
 8004e76:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1e6      	bne.n	8004e4c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	3308      	adds	r3, #8
 8004e84:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	e853 3f00 	ldrex	r3, [r3]
 8004e8c:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f023 0301 	bic.w	r3, r3, #1
 8004e94:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	3308      	adds	r3, #8
 8004e9c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e9e:	61fa      	str	r2, [r7, #28]
 8004ea0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea2:	69b9      	ldr	r1, [r7, #24]
 8004ea4:	69fa      	ldr	r2, [r7, #28]
 8004ea6:	e841 2300 	strex	r3, r2, [r1]
 8004eaa:	617b      	str	r3, [r7, #20]
   return(result);
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d1e5      	bne.n	8004e7e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2220      	movs	r2, #32
 8004eb6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e012      	b.n	8004eec <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2220      	movs	r2, #32
 8004eca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2220      	movs	r2, #32
 8004ed2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004eea:	2300      	movs	r3, #0
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3758      	adds	r7, #88	@ 0x58
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	603b      	str	r3, [r7, #0]
 8004f00:	4613      	mov	r3, r2
 8004f02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f04:	e04f      	b.n	8004fa6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f0c:	d04b      	beq.n	8004fa6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f0e:	f7fc fde9 	bl	8001ae4 <HAL_GetTick>
 8004f12:	4602      	mov	r2, r0
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	69ba      	ldr	r2, [r7, #24]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d302      	bcc.n	8004f24 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d101      	bne.n	8004f28 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	e04e      	b.n	8004fc6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0304 	and.w	r3, r3, #4
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d037      	beq.n	8004fa6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	2b80      	cmp	r3, #128	@ 0x80
 8004f3a:	d034      	beq.n	8004fa6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	2b40      	cmp	r3, #64	@ 0x40
 8004f40:	d031      	beq.n	8004fa6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	69db      	ldr	r3, [r3, #28]
 8004f48:	f003 0308 	and.w	r3, r3, #8
 8004f4c:	2b08      	cmp	r3, #8
 8004f4e:	d110      	bne.n	8004f72 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2208      	movs	r2, #8
 8004f56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f58:	68f8      	ldr	r0, [r7, #12]
 8004f5a:	f000 f838 	bl	8004fce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2208      	movs	r2, #8
 8004f62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e029      	b.n	8004fc6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	69db      	ldr	r3, [r3, #28]
 8004f78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f80:	d111      	bne.n	8004fa6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004f8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f8c:	68f8      	ldr	r0, [r7, #12]
 8004f8e:	f000 f81e 	bl	8004fce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2220      	movs	r2, #32
 8004f96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e00f      	b.n	8004fc6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	69da      	ldr	r2, [r3, #28]
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	4013      	ands	r3, r2
 8004fb0:	68ba      	ldr	r2, [r7, #8]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	bf0c      	ite	eq
 8004fb6:	2301      	moveq	r3, #1
 8004fb8:	2300      	movne	r3, #0
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	79fb      	ldrb	r3, [r7, #7]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d0a0      	beq.n	8004f06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3710      	adds	r7, #16
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}

08004fce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fce:	b480      	push	{r7}
 8004fd0:	b095      	sub	sp, #84	@ 0x54
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fde:	e853 3f00 	ldrex	r3, [r3]
 8004fe2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004fea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ff4:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ff6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004ffa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004ffc:	e841 2300 	strex	r3, r2, [r1]
 8005000:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005004:	2b00      	cmp	r3, #0
 8005006:	d1e6      	bne.n	8004fd6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	3308      	adds	r3, #8
 800500e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005010:	6a3b      	ldr	r3, [r7, #32]
 8005012:	e853 3f00 	ldrex	r3, [r3]
 8005016:	61fb      	str	r3, [r7, #28]
   return(result);
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800501e:	f023 0301 	bic.w	r3, r3, #1
 8005022:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	3308      	adds	r3, #8
 800502a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800502c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800502e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005030:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005032:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005034:	e841 2300 	strex	r3, r2, [r1]
 8005038:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800503a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800503c:	2b00      	cmp	r3, #0
 800503e:	d1e3      	bne.n	8005008 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005044:	2b01      	cmp	r3, #1
 8005046:	d118      	bne.n	800507a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	e853 3f00 	ldrex	r3, [r3]
 8005054:	60bb      	str	r3, [r7, #8]
   return(result);
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	f023 0310 	bic.w	r3, r3, #16
 800505c:	647b      	str	r3, [r7, #68]	@ 0x44
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	461a      	mov	r2, r3
 8005064:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005066:	61bb      	str	r3, [r7, #24]
 8005068:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800506a:	6979      	ldr	r1, [r7, #20]
 800506c:	69ba      	ldr	r2, [r7, #24]
 800506e:	e841 2300 	strex	r3, r2, [r1]
 8005072:	613b      	str	r3, [r7, #16]
   return(result);
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d1e6      	bne.n	8005048 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2220      	movs	r2, #32
 800507e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800508e:	bf00      	nop
 8005090:	3754      	adds	r7, #84	@ 0x54
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr

0800509a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800509a:	b580      	push	{r7, lr}
 800509c:	b084      	sub	sp, #16
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050b0:	68f8      	ldr	r0, [r7, #12]
 80050b2:	f7ff fac1 	bl	8004638 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050b6:	bf00      	nop
 80050b8:	3710      	adds	r7, #16
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}

080050be <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80050be:	b580      	push	{r7, lr}
 80050c0:	b088      	sub	sp, #32
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	e853 3f00 	ldrex	r3, [r3]
 80050d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050da:	61fb      	str	r3, [r7, #28]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	461a      	mov	r2, r3
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	61bb      	str	r3, [r7, #24]
 80050e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e8:	6979      	ldr	r1, [r7, #20]
 80050ea:	69ba      	ldr	r2, [r7, #24]
 80050ec:	e841 2300 	strex	r3, r2, [r1]
 80050f0:	613b      	str	r3, [r7, #16]
   return(result);
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d1e6      	bne.n	80050c6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2220      	movs	r2, #32
 80050fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f7ff fa8c 	bl	8004624 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800510c:	bf00      	nop
 800510e:	3720      	adds	r7, #32
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800511c:	bf00      	nop
 800511e:	370c      	adds	r7, #12
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005128:	b480      	push	{r7}
 800512a:	b083      	sub	sp, #12
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005130:	bf00      	nop
 8005132:	370c      	adds	r7, #12
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005144:	bf00      	nop
 8005146:	370c      	adds	r7, #12
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005150:	b480      	push	{r7}
 8005152:	b085      	sub	sp, #20
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800515e:	2b01      	cmp	r3, #1
 8005160:	d101      	bne.n	8005166 <HAL_UARTEx_DisableFifoMode+0x16>
 8005162:	2302      	movs	r3, #2
 8005164:	e027      	b.n	80051b6 <HAL_UARTEx_DisableFifoMode+0x66>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2201      	movs	r2, #1
 800516a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2224      	movs	r2, #36	@ 0x24
 8005172:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f022 0201 	bic.w	r2, r2, #1
 800518c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005194:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2220      	movs	r2, #32
 80051a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3714      	adds	r7, #20
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr

080051c2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80051c2:	b580      	push	{r7, lr}
 80051c4:	b084      	sub	sp, #16
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
 80051ca:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d101      	bne.n	80051da <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80051d6:	2302      	movs	r3, #2
 80051d8:	e02d      	b.n	8005236 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2201      	movs	r2, #1
 80051de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2224      	movs	r2, #36	@ 0x24
 80051e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f022 0201 	bic.w	r2, r2, #1
 8005200:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	683a      	ldr	r2, [r7, #0]
 8005212:	430a      	orrs	r2, r1
 8005214:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 f850 	bl	80052bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68fa      	ldr	r2, [r7, #12]
 8005222:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2220      	movs	r2, #32
 8005228:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	3710      	adds	r7, #16
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}

0800523e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800523e:	b580      	push	{r7, lr}
 8005240:	b084      	sub	sp, #16
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
 8005246:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800524e:	2b01      	cmp	r3, #1
 8005250:	d101      	bne.n	8005256 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005252:	2302      	movs	r3, #2
 8005254:	e02d      	b.n	80052b2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2201      	movs	r2, #1
 800525a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2224      	movs	r2, #36	@ 0x24
 8005262:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f022 0201 	bic.w	r2, r2, #1
 800527c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	683a      	ldr	r2, [r7, #0]
 800528e:	430a      	orrs	r2, r1
 8005290:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 f812 	bl	80052bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2220      	movs	r2, #32
 80052a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3710      	adds	r7, #16
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
	...

080052bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80052bc:	b480      	push	{r7}
 80052be:	b085      	sub	sp, #20
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d108      	bne.n	80052de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80052dc:	e031      	b.n	8005342 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80052de:	2308      	movs	r3, #8
 80052e0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80052e2:	2308      	movs	r3, #8
 80052e4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	0e5b      	lsrs	r3, r3, #25
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	f003 0307 	and.w	r3, r3, #7
 80052f4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	0f5b      	lsrs	r3, r3, #29
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	f003 0307 	and.w	r3, r3, #7
 8005304:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005306:	7bbb      	ldrb	r3, [r7, #14]
 8005308:	7b3a      	ldrb	r2, [r7, #12]
 800530a:	4911      	ldr	r1, [pc, #68]	@ (8005350 <UARTEx_SetNbDataToProcess+0x94>)
 800530c:	5c8a      	ldrb	r2, [r1, r2]
 800530e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005312:	7b3a      	ldrb	r2, [r7, #12]
 8005314:	490f      	ldr	r1, [pc, #60]	@ (8005354 <UARTEx_SetNbDataToProcess+0x98>)
 8005316:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005318:	fb93 f3f2 	sdiv	r3, r3, r2
 800531c:	b29a      	uxth	r2, r3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005324:	7bfb      	ldrb	r3, [r7, #15]
 8005326:	7b7a      	ldrb	r2, [r7, #13]
 8005328:	4909      	ldr	r1, [pc, #36]	@ (8005350 <UARTEx_SetNbDataToProcess+0x94>)
 800532a:	5c8a      	ldrb	r2, [r1, r2]
 800532c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005330:	7b7a      	ldrb	r2, [r7, #13]
 8005332:	4908      	ldr	r1, [pc, #32]	@ (8005354 <UARTEx_SetNbDataToProcess+0x98>)
 8005334:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005336:	fb93 f3f2 	sdiv	r3, r3, r2
 800533a:	b29a      	uxth	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005342:	bf00      	nop
 8005344:	3714      	adds	r7, #20
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	08009bdc 	.word	0x08009bdc
 8005354:	08009be4 	.word	0x08009be4

08005358 <__cvt>:
 8005358:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800535c:	ec57 6b10 	vmov	r6, r7, d0
 8005360:	2f00      	cmp	r7, #0
 8005362:	460c      	mov	r4, r1
 8005364:	4619      	mov	r1, r3
 8005366:	463b      	mov	r3, r7
 8005368:	bfbb      	ittet	lt
 800536a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800536e:	461f      	movlt	r7, r3
 8005370:	2300      	movge	r3, #0
 8005372:	232d      	movlt	r3, #45	@ 0x2d
 8005374:	700b      	strb	r3, [r1, #0]
 8005376:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005378:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800537c:	4691      	mov	r9, r2
 800537e:	f023 0820 	bic.w	r8, r3, #32
 8005382:	bfbc      	itt	lt
 8005384:	4632      	movlt	r2, r6
 8005386:	4616      	movlt	r6, r2
 8005388:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800538c:	d005      	beq.n	800539a <__cvt+0x42>
 800538e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005392:	d100      	bne.n	8005396 <__cvt+0x3e>
 8005394:	3401      	adds	r4, #1
 8005396:	2102      	movs	r1, #2
 8005398:	e000      	b.n	800539c <__cvt+0x44>
 800539a:	2103      	movs	r1, #3
 800539c:	ab03      	add	r3, sp, #12
 800539e:	9301      	str	r3, [sp, #4]
 80053a0:	ab02      	add	r3, sp, #8
 80053a2:	9300      	str	r3, [sp, #0]
 80053a4:	ec47 6b10 	vmov	d0, r6, r7
 80053a8:	4653      	mov	r3, sl
 80053aa:	4622      	mov	r2, r4
 80053ac:	f001 f870 	bl	8006490 <_dtoa_r>
 80053b0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80053b4:	4605      	mov	r5, r0
 80053b6:	d119      	bne.n	80053ec <__cvt+0x94>
 80053b8:	f019 0f01 	tst.w	r9, #1
 80053bc:	d00e      	beq.n	80053dc <__cvt+0x84>
 80053be:	eb00 0904 	add.w	r9, r0, r4
 80053c2:	2200      	movs	r2, #0
 80053c4:	2300      	movs	r3, #0
 80053c6:	4630      	mov	r0, r6
 80053c8:	4639      	mov	r1, r7
 80053ca:	f7fb fba5 	bl	8000b18 <__aeabi_dcmpeq>
 80053ce:	b108      	cbz	r0, 80053d4 <__cvt+0x7c>
 80053d0:	f8cd 900c 	str.w	r9, [sp, #12]
 80053d4:	2230      	movs	r2, #48	@ 0x30
 80053d6:	9b03      	ldr	r3, [sp, #12]
 80053d8:	454b      	cmp	r3, r9
 80053da:	d31e      	bcc.n	800541a <__cvt+0xc2>
 80053dc:	9b03      	ldr	r3, [sp, #12]
 80053de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80053e0:	1b5b      	subs	r3, r3, r5
 80053e2:	4628      	mov	r0, r5
 80053e4:	6013      	str	r3, [r2, #0]
 80053e6:	b004      	add	sp, #16
 80053e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053ec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80053f0:	eb00 0904 	add.w	r9, r0, r4
 80053f4:	d1e5      	bne.n	80053c2 <__cvt+0x6a>
 80053f6:	7803      	ldrb	r3, [r0, #0]
 80053f8:	2b30      	cmp	r3, #48	@ 0x30
 80053fa:	d10a      	bne.n	8005412 <__cvt+0xba>
 80053fc:	2200      	movs	r2, #0
 80053fe:	2300      	movs	r3, #0
 8005400:	4630      	mov	r0, r6
 8005402:	4639      	mov	r1, r7
 8005404:	f7fb fb88 	bl	8000b18 <__aeabi_dcmpeq>
 8005408:	b918      	cbnz	r0, 8005412 <__cvt+0xba>
 800540a:	f1c4 0401 	rsb	r4, r4, #1
 800540e:	f8ca 4000 	str.w	r4, [sl]
 8005412:	f8da 3000 	ldr.w	r3, [sl]
 8005416:	4499      	add	r9, r3
 8005418:	e7d3      	b.n	80053c2 <__cvt+0x6a>
 800541a:	1c59      	adds	r1, r3, #1
 800541c:	9103      	str	r1, [sp, #12]
 800541e:	701a      	strb	r2, [r3, #0]
 8005420:	e7d9      	b.n	80053d6 <__cvt+0x7e>

08005422 <__exponent>:
 8005422:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005424:	2900      	cmp	r1, #0
 8005426:	bfba      	itte	lt
 8005428:	4249      	neglt	r1, r1
 800542a:	232d      	movlt	r3, #45	@ 0x2d
 800542c:	232b      	movge	r3, #43	@ 0x2b
 800542e:	2909      	cmp	r1, #9
 8005430:	7002      	strb	r2, [r0, #0]
 8005432:	7043      	strb	r3, [r0, #1]
 8005434:	dd29      	ble.n	800548a <__exponent+0x68>
 8005436:	f10d 0307 	add.w	r3, sp, #7
 800543a:	461d      	mov	r5, r3
 800543c:	270a      	movs	r7, #10
 800543e:	461a      	mov	r2, r3
 8005440:	fbb1 f6f7 	udiv	r6, r1, r7
 8005444:	fb07 1416 	mls	r4, r7, r6, r1
 8005448:	3430      	adds	r4, #48	@ 0x30
 800544a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800544e:	460c      	mov	r4, r1
 8005450:	2c63      	cmp	r4, #99	@ 0x63
 8005452:	f103 33ff 	add.w	r3, r3, #4294967295
 8005456:	4631      	mov	r1, r6
 8005458:	dcf1      	bgt.n	800543e <__exponent+0x1c>
 800545a:	3130      	adds	r1, #48	@ 0x30
 800545c:	1e94      	subs	r4, r2, #2
 800545e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005462:	1c41      	adds	r1, r0, #1
 8005464:	4623      	mov	r3, r4
 8005466:	42ab      	cmp	r3, r5
 8005468:	d30a      	bcc.n	8005480 <__exponent+0x5e>
 800546a:	f10d 0309 	add.w	r3, sp, #9
 800546e:	1a9b      	subs	r3, r3, r2
 8005470:	42ac      	cmp	r4, r5
 8005472:	bf88      	it	hi
 8005474:	2300      	movhi	r3, #0
 8005476:	3302      	adds	r3, #2
 8005478:	4403      	add	r3, r0
 800547a:	1a18      	subs	r0, r3, r0
 800547c:	b003      	add	sp, #12
 800547e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005480:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005484:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005488:	e7ed      	b.n	8005466 <__exponent+0x44>
 800548a:	2330      	movs	r3, #48	@ 0x30
 800548c:	3130      	adds	r1, #48	@ 0x30
 800548e:	7083      	strb	r3, [r0, #2]
 8005490:	70c1      	strb	r1, [r0, #3]
 8005492:	1d03      	adds	r3, r0, #4
 8005494:	e7f1      	b.n	800547a <__exponent+0x58>
	...

08005498 <_printf_float>:
 8005498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800549c:	b08d      	sub	sp, #52	@ 0x34
 800549e:	460c      	mov	r4, r1
 80054a0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80054a4:	4616      	mov	r6, r2
 80054a6:	461f      	mov	r7, r3
 80054a8:	4605      	mov	r5, r0
 80054aa:	f000 fee9 	bl	8006280 <_localeconv_r>
 80054ae:	6803      	ldr	r3, [r0, #0]
 80054b0:	9304      	str	r3, [sp, #16]
 80054b2:	4618      	mov	r0, r3
 80054b4:	f7fa ff04 	bl	80002c0 <strlen>
 80054b8:	2300      	movs	r3, #0
 80054ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80054bc:	f8d8 3000 	ldr.w	r3, [r8]
 80054c0:	9005      	str	r0, [sp, #20]
 80054c2:	3307      	adds	r3, #7
 80054c4:	f023 0307 	bic.w	r3, r3, #7
 80054c8:	f103 0208 	add.w	r2, r3, #8
 80054cc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80054d0:	f8d4 b000 	ldr.w	fp, [r4]
 80054d4:	f8c8 2000 	str.w	r2, [r8]
 80054d8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80054dc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80054e0:	9307      	str	r3, [sp, #28]
 80054e2:	f8cd 8018 	str.w	r8, [sp, #24]
 80054e6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80054ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80054ee:	4b9c      	ldr	r3, [pc, #624]	@ (8005760 <_printf_float+0x2c8>)
 80054f0:	f04f 32ff 	mov.w	r2, #4294967295
 80054f4:	f7fb fb42 	bl	8000b7c <__aeabi_dcmpun>
 80054f8:	bb70      	cbnz	r0, 8005558 <_printf_float+0xc0>
 80054fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80054fe:	4b98      	ldr	r3, [pc, #608]	@ (8005760 <_printf_float+0x2c8>)
 8005500:	f04f 32ff 	mov.w	r2, #4294967295
 8005504:	f7fb fb1c 	bl	8000b40 <__aeabi_dcmple>
 8005508:	bb30      	cbnz	r0, 8005558 <_printf_float+0xc0>
 800550a:	2200      	movs	r2, #0
 800550c:	2300      	movs	r3, #0
 800550e:	4640      	mov	r0, r8
 8005510:	4649      	mov	r1, r9
 8005512:	f7fb fb0b 	bl	8000b2c <__aeabi_dcmplt>
 8005516:	b110      	cbz	r0, 800551e <_printf_float+0x86>
 8005518:	232d      	movs	r3, #45	@ 0x2d
 800551a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800551e:	4a91      	ldr	r2, [pc, #580]	@ (8005764 <_printf_float+0x2cc>)
 8005520:	4b91      	ldr	r3, [pc, #580]	@ (8005768 <_printf_float+0x2d0>)
 8005522:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005526:	bf8c      	ite	hi
 8005528:	4690      	movhi	r8, r2
 800552a:	4698      	movls	r8, r3
 800552c:	2303      	movs	r3, #3
 800552e:	6123      	str	r3, [r4, #16]
 8005530:	f02b 0304 	bic.w	r3, fp, #4
 8005534:	6023      	str	r3, [r4, #0]
 8005536:	f04f 0900 	mov.w	r9, #0
 800553a:	9700      	str	r7, [sp, #0]
 800553c:	4633      	mov	r3, r6
 800553e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005540:	4621      	mov	r1, r4
 8005542:	4628      	mov	r0, r5
 8005544:	f000 f9d2 	bl	80058ec <_printf_common>
 8005548:	3001      	adds	r0, #1
 800554a:	f040 808d 	bne.w	8005668 <_printf_float+0x1d0>
 800554e:	f04f 30ff 	mov.w	r0, #4294967295
 8005552:	b00d      	add	sp, #52	@ 0x34
 8005554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005558:	4642      	mov	r2, r8
 800555a:	464b      	mov	r3, r9
 800555c:	4640      	mov	r0, r8
 800555e:	4649      	mov	r1, r9
 8005560:	f7fb fb0c 	bl	8000b7c <__aeabi_dcmpun>
 8005564:	b140      	cbz	r0, 8005578 <_printf_float+0xe0>
 8005566:	464b      	mov	r3, r9
 8005568:	2b00      	cmp	r3, #0
 800556a:	bfbc      	itt	lt
 800556c:	232d      	movlt	r3, #45	@ 0x2d
 800556e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005572:	4a7e      	ldr	r2, [pc, #504]	@ (800576c <_printf_float+0x2d4>)
 8005574:	4b7e      	ldr	r3, [pc, #504]	@ (8005770 <_printf_float+0x2d8>)
 8005576:	e7d4      	b.n	8005522 <_printf_float+0x8a>
 8005578:	6863      	ldr	r3, [r4, #4]
 800557a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800557e:	9206      	str	r2, [sp, #24]
 8005580:	1c5a      	adds	r2, r3, #1
 8005582:	d13b      	bne.n	80055fc <_printf_float+0x164>
 8005584:	2306      	movs	r3, #6
 8005586:	6063      	str	r3, [r4, #4]
 8005588:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800558c:	2300      	movs	r3, #0
 800558e:	6022      	str	r2, [r4, #0]
 8005590:	9303      	str	r3, [sp, #12]
 8005592:	ab0a      	add	r3, sp, #40	@ 0x28
 8005594:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005598:	ab09      	add	r3, sp, #36	@ 0x24
 800559a:	9300      	str	r3, [sp, #0]
 800559c:	6861      	ldr	r1, [r4, #4]
 800559e:	ec49 8b10 	vmov	d0, r8, r9
 80055a2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80055a6:	4628      	mov	r0, r5
 80055a8:	f7ff fed6 	bl	8005358 <__cvt>
 80055ac:	9b06      	ldr	r3, [sp, #24]
 80055ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80055b0:	2b47      	cmp	r3, #71	@ 0x47
 80055b2:	4680      	mov	r8, r0
 80055b4:	d129      	bne.n	800560a <_printf_float+0x172>
 80055b6:	1cc8      	adds	r0, r1, #3
 80055b8:	db02      	blt.n	80055c0 <_printf_float+0x128>
 80055ba:	6863      	ldr	r3, [r4, #4]
 80055bc:	4299      	cmp	r1, r3
 80055be:	dd41      	ble.n	8005644 <_printf_float+0x1ac>
 80055c0:	f1aa 0a02 	sub.w	sl, sl, #2
 80055c4:	fa5f fa8a 	uxtb.w	sl, sl
 80055c8:	3901      	subs	r1, #1
 80055ca:	4652      	mov	r2, sl
 80055cc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80055d0:	9109      	str	r1, [sp, #36]	@ 0x24
 80055d2:	f7ff ff26 	bl	8005422 <__exponent>
 80055d6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80055d8:	1813      	adds	r3, r2, r0
 80055da:	2a01      	cmp	r2, #1
 80055dc:	4681      	mov	r9, r0
 80055de:	6123      	str	r3, [r4, #16]
 80055e0:	dc02      	bgt.n	80055e8 <_printf_float+0x150>
 80055e2:	6822      	ldr	r2, [r4, #0]
 80055e4:	07d2      	lsls	r2, r2, #31
 80055e6:	d501      	bpl.n	80055ec <_printf_float+0x154>
 80055e8:	3301      	adds	r3, #1
 80055ea:	6123      	str	r3, [r4, #16]
 80055ec:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d0a2      	beq.n	800553a <_printf_float+0xa2>
 80055f4:	232d      	movs	r3, #45	@ 0x2d
 80055f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80055fa:	e79e      	b.n	800553a <_printf_float+0xa2>
 80055fc:	9a06      	ldr	r2, [sp, #24]
 80055fe:	2a47      	cmp	r2, #71	@ 0x47
 8005600:	d1c2      	bne.n	8005588 <_printf_float+0xf0>
 8005602:	2b00      	cmp	r3, #0
 8005604:	d1c0      	bne.n	8005588 <_printf_float+0xf0>
 8005606:	2301      	movs	r3, #1
 8005608:	e7bd      	b.n	8005586 <_printf_float+0xee>
 800560a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800560e:	d9db      	bls.n	80055c8 <_printf_float+0x130>
 8005610:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005614:	d118      	bne.n	8005648 <_printf_float+0x1b0>
 8005616:	2900      	cmp	r1, #0
 8005618:	6863      	ldr	r3, [r4, #4]
 800561a:	dd0b      	ble.n	8005634 <_printf_float+0x19c>
 800561c:	6121      	str	r1, [r4, #16]
 800561e:	b913      	cbnz	r3, 8005626 <_printf_float+0x18e>
 8005620:	6822      	ldr	r2, [r4, #0]
 8005622:	07d0      	lsls	r0, r2, #31
 8005624:	d502      	bpl.n	800562c <_printf_float+0x194>
 8005626:	3301      	adds	r3, #1
 8005628:	440b      	add	r3, r1
 800562a:	6123      	str	r3, [r4, #16]
 800562c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800562e:	f04f 0900 	mov.w	r9, #0
 8005632:	e7db      	b.n	80055ec <_printf_float+0x154>
 8005634:	b913      	cbnz	r3, 800563c <_printf_float+0x1a4>
 8005636:	6822      	ldr	r2, [r4, #0]
 8005638:	07d2      	lsls	r2, r2, #31
 800563a:	d501      	bpl.n	8005640 <_printf_float+0x1a8>
 800563c:	3302      	adds	r3, #2
 800563e:	e7f4      	b.n	800562a <_printf_float+0x192>
 8005640:	2301      	movs	r3, #1
 8005642:	e7f2      	b.n	800562a <_printf_float+0x192>
 8005644:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005648:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800564a:	4299      	cmp	r1, r3
 800564c:	db05      	blt.n	800565a <_printf_float+0x1c2>
 800564e:	6823      	ldr	r3, [r4, #0]
 8005650:	6121      	str	r1, [r4, #16]
 8005652:	07d8      	lsls	r0, r3, #31
 8005654:	d5ea      	bpl.n	800562c <_printf_float+0x194>
 8005656:	1c4b      	adds	r3, r1, #1
 8005658:	e7e7      	b.n	800562a <_printf_float+0x192>
 800565a:	2900      	cmp	r1, #0
 800565c:	bfd4      	ite	le
 800565e:	f1c1 0202 	rsble	r2, r1, #2
 8005662:	2201      	movgt	r2, #1
 8005664:	4413      	add	r3, r2
 8005666:	e7e0      	b.n	800562a <_printf_float+0x192>
 8005668:	6823      	ldr	r3, [r4, #0]
 800566a:	055a      	lsls	r2, r3, #21
 800566c:	d407      	bmi.n	800567e <_printf_float+0x1e6>
 800566e:	6923      	ldr	r3, [r4, #16]
 8005670:	4642      	mov	r2, r8
 8005672:	4631      	mov	r1, r6
 8005674:	4628      	mov	r0, r5
 8005676:	47b8      	blx	r7
 8005678:	3001      	adds	r0, #1
 800567a:	d12b      	bne.n	80056d4 <_printf_float+0x23c>
 800567c:	e767      	b.n	800554e <_printf_float+0xb6>
 800567e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005682:	f240 80dd 	bls.w	8005840 <_printf_float+0x3a8>
 8005686:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800568a:	2200      	movs	r2, #0
 800568c:	2300      	movs	r3, #0
 800568e:	f7fb fa43 	bl	8000b18 <__aeabi_dcmpeq>
 8005692:	2800      	cmp	r0, #0
 8005694:	d033      	beq.n	80056fe <_printf_float+0x266>
 8005696:	4a37      	ldr	r2, [pc, #220]	@ (8005774 <_printf_float+0x2dc>)
 8005698:	2301      	movs	r3, #1
 800569a:	4631      	mov	r1, r6
 800569c:	4628      	mov	r0, r5
 800569e:	47b8      	blx	r7
 80056a0:	3001      	adds	r0, #1
 80056a2:	f43f af54 	beq.w	800554e <_printf_float+0xb6>
 80056a6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80056aa:	4543      	cmp	r3, r8
 80056ac:	db02      	blt.n	80056b4 <_printf_float+0x21c>
 80056ae:	6823      	ldr	r3, [r4, #0]
 80056b0:	07d8      	lsls	r0, r3, #31
 80056b2:	d50f      	bpl.n	80056d4 <_printf_float+0x23c>
 80056b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056b8:	4631      	mov	r1, r6
 80056ba:	4628      	mov	r0, r5
 80056bc:	47b8      	blx	r7
 80056be:	3001      	adds	r0, #1
 80056c0:	f43f af45 	beq.w	800554e <_printf_float+0xb6>
 80056c4:	f04f 0900 	mov.w	r9, #0
 80056c8:	f108 38ff 	add.w	r8, r8, #4294967295
 80056cc:	f104 0a1a 	add.w	sl, r4, #26
 80056d0:	45c8      	cmp	r8, r9
 80056d2:	dc09      	bgt.n	80056e8 <_printf_float+0x250>
 80056d4:	6823      	ldr	r3, [r4, #0]
 80056d6:	079b      	lsls	r3, r3, #30
 80056d8:	f100 8103 	bmi.w	80058e2 <_printf_float+0x44a>
 80056dc:	68e0      	ldr	r0, [r4, #12]
 80056de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80056e0:	4298      	cmp	r0, r3
 80056e2:	bfb8      	it	lt
 80056e4:	4618      	movlt	r0, r3
 80056e6:	e734      	b.n	8005552 <_printf_float+0xba>
 80056e8:	2301      	movs	r3, #1
 80056ea:	4652      	mov	r2, sl
 80056ec:	4631      	mov	r1, r6
 80056ee:	4628      	mov	r0, r5
 80056f0:	47b8      	blx	r7
 80056f2:	3001      	adds	r0, #1
 80056f4:	f43f af2b 	beq.w	800554e <_printf_float+0xb6>
 80056f8:	f109 0901 	add.w	r9, r9, #1
 80056fc:	e7e8      	b.n	80056d0 <_printf_float+0x238>
 80056fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005700:	2b00      	cmp	r3, #0
 8005702:	dc39      	bgt.n	8005778 <_printf_float+0x2e0>
 8005704:	4a1b      	ldr	r2, [pc, #108]	@ (8005774 <_printf_float+0x2dc>)
 8005706:	2301      	movs	r3, #1
 8005708:	4631      	mov	r1, r6
 800570a:	4628      	mov	r0, r5
 800570c:	47b8      	blx	r7
 800570e:	3001      	adds	r0, #1
 8005710:	f43f af1d 	beq.w	800554e <_printf_float+0xb6>
 8005714:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005718:	ea59 0303 	orrs.w	r3, r9, r3
 800571c:	d102      	bne.n	8005724 <_printf_float+0x28c>
 800571e:	6823      	ldr	r3, [r4, #0]
 8005720:	07d9      	lsls	r1, r3, #31
 8005722:	d5d7      	bpl.n	80056d4 <_printf_float+0x23c>
 8005724:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005728:	4631      	mov	r1, r6
 800572a:	4628      	mov	r0, r5
 800572c:	47b8      	blx	r7
 800572e:	3001      	adds	r0, #1
 8005730:	f43f af0d 	beq.w	800554e <_printf_float+0xb6>
 8005734:	f04f 0a00 	mov.w	sl, #0
 8005738:	f104 0b1a 	add.w	fp, r4, #26
 800573c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800573e:	425b      	negs	r3, r3
 8005740:	4553      	cmp	r3, sl
 8005742:	dc01      	bgt.n	8005748 <_printf_float+0x2b0>
 8005744:	464b      	mov	r3, r9
 8005746:	e793      	b.n	8005670 <_printf_float+0x1d8>
 8005748:	2301      	movs	r3, #1
 800574a:	465a      	mov	r2, fp
 800574c:	4631      	mov	r1, r6
 800574e:	4628      	mov	r0, r5
 8005750:	47b8      	blx	r7
 8005752:	3001      	adds	r0, #1
 8005754:	f43f aefb 	beq.w	800554e <_printf_float+0xb6>
 8005758:	f10a 0a01 	add.w	sl, sl, #1
 800575c:	e7ee      	b.n	800573c <_printf_float+0x2a4>
 800575e:	bf00      	nop
 8005760:	7fefffff 	.word	0x7fefffff
 8005764:	08009bf0 	.word	0x08009bf0
 8005768:	08009bec 	.word	0x08009bec
 800576c:	08009bf8 	.word	0x08009bf8
 8005770:	08009bf4 	.word	0x08009bf4
 8005774:	08009bfc 	.word	0x08009bfc
 8005778:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800577a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800577e:	4553      	cmp	r3, sl
 8005780:	bfa8      	it	ge
 8005782:	4653      	movge	r3, sl
 8005784:	2b00      	cmp	r3, #0
 8005786:	4699      	mov	r9, r3
 8005788:	dc36      	bgt.n	80057f8 <_printf_float+0x360>
 800578a:	f04f 0b00 	mov.w	fp, #0
 800578e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005792:	f104 021a 	add.w	r2, r4, #26
 8005796:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005798:	9306      	str	r3, [sp, #24]
 800579a:	eba3 0309 	sub.w	r3, r3, r9
 800579e:	455b      	cmp	r3, fp
 80057a0:	dc31      	bgt.n	8005806 <_printf_float+0x36e>
 80057a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057a4:	459a      	cmp	sl, r3
 80057a6:	dc3a      	bgt.n	800581e <_printf_float+0x386>
 80057a8:	6823      	ldr	r3, [r4, #0]
 80057aa:	07da      	lsls	r2, r3, #31
 80057ac:	d437      	bmi.n	800581e <_printf_float+0x386>
 80057ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057b0:	ebaa 0903 	sub.w	r9, sl, r3
 80057b4:	9b06      	ldr	r3, [sp, #24]
 80057b6:	ebaa 0303 	sub.w	r3, sl, r3
 80057ba:	4599      	cmp	r9, r3
 80057bc:	bfa8      	it	ge
 80057be:	4699      	movge	r9, r3
 80057c0:	f1b9 0f00 	cmp.w	r9, #0
 80057c4:	dc33      	bgt.n	800582e <_printf_float+0x396>
 80057c6:	f04f 0800 	mov.w	r8, #0
 80057ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80057ce:	f104 0b1a 	add.w	fp, r4, #26
 80057d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057d4:	ebaa 0303 	sub.w	r3, sl, r3
 80057d8:	eba3 0309 	sub.w	r3, r3, r9
 80057dc:	4543      	cmp	r3, r8
 80057de:	f77f af79 	ble.w	80056d4 <_printf_float+0x23c>
 80057e2:	2301      	movs	r3, #1
 80057e4:	465a      	mov	r2, fp
 80057e6:	4631      	mov	r1, r6
 80057e8:	4628      	mov	r0, r5
 80057ea:	47b8      	blx	r7
 80057ec:	3001      	adds	r0, #1
 80057ee:	f43f aeae 	beq.w	800554e <_printf_float+0xb6>
 80057f2:	f108 0801 	add.w	r8, r8, #1
 80057f6:	e7ec      	b.n	80057d2 <_printf_float+0x33a>
 80057f8:	4642      	mov	r2, r8
 80057fa:	4631      	mov	r1, r6
 80057fc:	4628      	mov	r0, r5
 80057fe:	47b8      	blx	r7
 8005800:	3001      	adds	r0, #1
 8005802:	d1c2      	bne.n	800578a <_printf_float+0x2f2>
 8005804:	e6a3      	b.n	800554e <_printf_float+0xb6>
 8005806:	2301      	movs	r3, #1
 8005808:	4631      	mov	r1, r6
 800580a:	4628      	mov	r0, r5
 800580c:	9206      	str	r2, [sp, #24]
 800580e:	47b8      	blx	r7
 8005810:	3001      	adds	r0, #1
 8005812:	f43f ae9c 	beq.w	800554e <_printf_float+0xb6>
 8005816:	9a06      	ldr	r2, [sp, #24]
 8005818:	f10b 0b01 	add.w	fp, fp, #1
 800581c:	e7bb      	b.n	8005796 <_printf_float+0x2fe>
 800581e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005822:	4631      	mov	r1, r6
 8005824:	4628      	mov	r0, r5
 8005826:	47b8      	blx	r7
 8005828:	3001      	adds	r0, #1
 800582a:	d1c0      	bne.n	80057ae <_printf_float+0x316>
 800582c:	e68f      	b.n	800554e <_printf_float+0xb6>
 800582e:	9a06      	ldr	r2, [sp, #24]
 8005830:	464b      	mov	r3, r9
 8005832:	4442      	add	r2, r8
 8005834:	4631      	mov	r1, r6
 8005836:	4628      	mov	r0, r5
 8005838:	47b8      	blx	r7
 800583a:	3001      	adds	r0, #1
 800583c:	d1c3      	bne.n	80057c6 <_printf_float+0x32e>
 800583e:	e686      	b.n	800554e <_printf_float+0xb6>
 8005840:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005844:	f1ba 0f01 	cmp.w	sl, #1
 8005848:	dc01      	bgt.n	800584e <_printf_float+0x3b6>
 800584a:	07db      	lsls	r3, r3, #31
 800584c:	d536      	bpl.n	80058bc <_printf_float+0x424>
 800584e:	2301      	movs	r3, #1
 8005850:	4642      	mov	r2, r8
 8005852:	4631      	mov	r1, r6
 8005854:	4628      	mov	r0, r5
 8005856:	47b8      	blx	r7
 8005858:	3001      	adds	r0, #1
 800585a:	f43f ae78 	beq.w	800554e <_printf_float+0xb6>
 800585e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005862:	4631      	mov	r1, r6
 8005864:	4628      	mov	r0, r5
 8005866:	47b8      	blx	r7
 8005868:	3001      	adds	r0, #1
 800586a:	f43f ae70 	beq.w	800554e <_printf_float+0xb6>
 800586e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005872:	2200      	movs	r2, #0
 8005874:	2300      	movs	r3, #0
 8005876:	f10a 3aff 	add.w	sl, sl, #4294967295
 800587a:	f7fb f94d 	bl	8000b18 <__aeabi_dcmpeq>
 800587e:	b9c0      	cbnz	r0, 80058b2 <_printf_float+0x41a>
 8005880:	4653      	mov	r3, sl
 8005882:	f108 0201 	add.w	r2, r8, #1
 8005886:	4631      	mov	r1, r6
 8005888:	4628      	mov	r0, r5
 800588a:	47b8      	blx	r7
 800588c:	3001      	adds	r0, #1
 800588e:	d10c      	bne.n	80058aa <_printf_float+0x412>
 8005890:	e65d      	b.n	800554e <_printf_float+0xb6>
 8005892:	2301      	movs	r3, #1
 8005894:	465a      	mov	r2, fp
 8005896:	4631      	mov	r1, r6
 8005898:	4628      	mov	r0, r5
 800589a:	47b8      	blx	r7
 800589c:	3001      	adds	r0, #1
 800589e:	f43f ae56 	beq.w	800554e <_printf_float+0xb6>
 80058a2:	f108 0801 	add.w	r8, r8, #1
 80058a6:	45d0      	cmp	r8, sl
 80058a8:	dbf3      	blt.n	8005892 <_printf_float+0x3fa>
 80058aa:	464b      	mov	r3, r9
 80058ac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80058b0:	e6df      	b.n	8005672 <_printf_float+0x1da>
 80058b2:	f04f 0800 	mov.w	r8, #0
 80058b6:	f104 0b1a 	add.w	fp, r4, #26
 80058ba:	e7f4      	b.n	80058a6 <_printf_float+0x40e>
 80058bc:	2301      	movs	r3, #1
 80058be:	4642      	mov	r2, r8
 80058c0:	e7e1      	b.n	8005886 <_printf_float+0x3ee>
 80058c2:	2301      	movs	r3, #1
 80058c4:	464a      	mov	r2, r9
 80058c6:	4631      	mov	r1, r6
 80058c8:	4628      	mov	r0, r5
 80058ca:	47b8      	blx	r7
 80058cc:	3001      	adds	r0, #1
 80058ce:	f43f ae3e 	beq.w	800554e <_printf_float+0xb6>
 80058d2:	f108 0801 	add.w	r8, r8, #1
 80058d6:	68e3      	ldr	r3, [r4, #12]
 80058d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80058da:	1a5b      	subs	r3, r3, r1
 80058dc:	4543      	cmp	r3, r8
 80058de:	dcf0      	bgt.n	80058c2 <_printf_float+0x42a>
 80058e0:	e6fc      	b.n	80056dc <_printf_float+0x244>
 80058e2:	f04f 0800 	mov.w	r8, #0
 80058e6:	f104 0919 	add.w	r9, r4, #25
 80058ea:	e7f4      	b.n	80058d6 <_printf_float+0x43e>

080058ec <_printf_common>:
 80058ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058f0:	4616      	mov	r6, r2
 80058f2:	4698      	mov	r8, r3
 80058f4:	688a      	ldr	r2, [r1, #8]
 80058f6:	690b      	ldr	r3, [r1, #16]
 80058f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80058fc:	4293      	cmp	r3, r2
 80058fe:	bfb8      	it	lt
 8005900:	4613      	movlt	r3, r2
 8005902:	6033      	str	r3, [r6, #0]
 8005904:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005908:	4607      	mov	r7, r0
 800590a:	460c      	mov	r4, r1
 800590c:	b10a      	cbz	r2, 8005912 <_printf_common+0x26>
 800590e:	3301      	adds	r3, #1
 8005910:	6033      	str	r3, [r6, #0]
 8005912:	6823      	ldr	r3, [r4, #0]
 8005914:	0699      	lsls	r1, r3, #26
 8005916:	bf42      	ittt	mi
 8005918:	6833      	ldrmi	r3, [r6, #0]
 800591a:	3302      	addmi	r3, #2
 800591c:	6033      	strmi	r3, [r6, #0]
 800591e:	6825      	ldr	r5, [r4, #0]
 8005920:	f015 0506 	ands.w	r5, r5, #6
 8005924:	d106      	bne.n	8005934 <_printf_common+0x48>
 8005926:	f104 0a19 	add.w	sl, r4, #25
 800592a:	68e3      	ldr	r3, [r4, #12]
 800592c:	6832      	ldr	r2, [r6, #0]
 800592e:	1a9b      	subs	r3, r3, r2
 8005930:	42ab      	cmp	r3, r5
 8005932:	dc26      	bgt.n	8005982 <_printf_common+0x96>
 8005934:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005938:	6822      	ldr	r2, [r4, #0]
 800593a:	3b00      	subs	r3, #0
 800593c:	bf18      	it	ne
 800593e:	2301      	movne	r3, #1
 8005940:	0692      	lsls	r2, r2, #26
 8005942:	d42b      	bmi.n	800599c <_printf_common+0xb0>
 8005944:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005948:	4641      	mov	r1, r8
 800594a:	4638      	mov	r0, r7
 800594c:	47c8      	blx	r9
 800594e:	3001      	adds	r0, #1
 8005950:	d01e      	beq.n	8005990 <_printf_common+0xa4>
 8005952:	6823      	ldr	r3, [r4, #0]
 8005954:	6922      	ldr	r2, [r4, #16]
 8005956:	f003 0306 	and.w	r3, r3, #6
 800595a:	2b04      	cmp	r3, #4
 800595c:	bf02      	ittt	eq
 800595e:	68e5      	ldreq	r5, [r4, #12]
 8005960:	6833      	ldreq	r3, [r6, #0]
 8005962:	1aed      	subeq	r5, r5, r3
 8005964:	68a3      	ldr	r3, [r4, #8]
 8005966:	bf0c      	ite	eq
 8005968:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800596c:	2500      	movne	r5, #0
 800596e:	4293      	cmp	r3, r2
 8005970:	bfc4      	itt	gt
 8005972:	1a9b      	subgt	r3, r3, r2
 8005974:	18ed      	addgt	r5, r5, r3
 8005976:	2600      	movs	r6, #0
 8005978:	341a      	adds	r4, #26
 800597a:	42b5      	cmp	r5, r6
 800597c:	d11a      	bne.n	80059b4 <_printf_common+0xc8>
 800597e:	2000      	movs	r0, #0
 8005980:	e008      	b.n	8005994 <_printf_common+0xa8>
 8005982:	2301      	movs	r3, #1
 8005984:	4652      	mov	r2, sl
 8005986:	4641      	mov	r1, r8
 8005988:	4638      	mov	r0, r7
 800598a:	47c8      	blx	r9
 800598c:	3001      	adds	r0, #1
 800598e:	d103      	bne.n	8005998 <_printf_common+0xac>
 8005990:	f04f 30ff 	mov.w	r0, #4294967295
 8005994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005998:	3501      	adds	r5, #1
 800599a:	e7c6      	b.n	800592a <_printf_common+0x3e>
 800599c:	18e1      	adds	r1, r4, r3
 800599e:	1c5a      	adds	r2, r3, #1
 80059a0:	2030      	movs	r0, #48	@ 0x30
 80059a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80059a6:	4422      	add	r2, r4
 80059a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80059ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80059b0:	3302      	adds	r3, #2
 80059b2:	e7c7      	b.n	8005944 <_printf_common+0x58>
 80059b4:	2301      	movs	r3, #1
 80059b6:	4622      	mov	r2, r4
 80059b8:	4641      	mov	r1, r8
 80059ba:	4638      	mov	r0, r7
 80059bc:	47c8      	blx	r9
 80059be:	3001      	adds	r0, #1
 80059c0:	d0e6      	beq.n	8005990 <_printf_common+0xa4>
 80059c2:	3601      	adds	r6, #1
 80059c4:	e7d9      	b.n	800597a <_printf_common+0x8e>
	...

080059c8 <_printf_i>:
 80059c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059cc:	7e0f      	ldrb	r7, [r1, #24]
 80059ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80059d0:	2f78      	cmp	r7, #120	@ 0x78
 80059d2:	4691      	mov	r9, r2
 80059d4:	4680      	mov	r8, r0
 80059d6:	460c      	mov	r4, r1
 80059d8:	469a      	mov	sl, r3
 80059da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80059de:	d807      	bhi.n	80059f0 <_printf_i+0x28>
 80059e0:	2f62      	cmp	r7, #98	@ 0x62
 80059e2:	d80a      	bhi.n	80059fa <_printf_i+0x32>
 80059e4:	2f00      	cmp	r7, #0
 80059e6:	f000 80d1 	beq.w	8005b8c <_printf_i+0x1c4>
 80059ea:	2f58      	cmp	r7, #88	@ 0x58
 80059ec:	f000 80b8 	beq.w	8005b60 <_printf_i+0x198>
 80059f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80059f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80059f8:	e03a      	b.n	8005a70 <_printf_i+0xa8>
 80059fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80059fe:	2b15      	cmp	r3, #21
 8005a00:	d8f6      	bhi.n	80059f0 <_printf_i+0x28>
 8005a02:	a101      	add	r1, pc, #4	@ (adr r1, 8005a08 <_printf_i+0x40>)
 8005a04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a08:	08005a61 	.word	0x08005a61
 8005a0c:	08005a75 	.word	0x08005a75
 8005a10:	080059f1 	.word	0x080059f1
 8005a14:	080059f1 	.word	0x080059f1
 8005a18:	080059f1 	.word	0x080059f1
 8005a1c:	080059f1 	.word	0x080059f1
 8005a20:	08005a75 	.word	0x08005a75
 8005a24:	080059f1 	.word	0x080059f1
 8005a28:	080059f1 	.word	0x080059f1
 8005a2c:	080059f1 	.word	0x080059f1
 8005a30:	080059f1 	.word	0x080059f1
 8005a34:	08005b73 	.word	0x08005b73
 8005a38:	08005a9f 	.word	0x08005a9f
 8005a3c:	08005b2d 	.word	0x08005b2d
 8005a40:	080059f1 	.word	0x080059f1
 8005a44:	080059f1 	.word	0x080059f1
 8005a48:	08005b95 	.word	0x08005b95
 8005a4c:	080059f1 	.word	0x080059f1
 8005a50:	08005a9f 	.word	0x08005a9f
 8005a54:	080059f1 	.word	0x080059f1
 8005a58:	080059f1 	.word	0x080059f1
 8005a5c:	08005b35 	.word	0x08005b35
 8005a60:	6833      	ldr	r3, [r6, #0]
 8005a62:	1d1a      	adds	r2, r3, #4
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	6032      	str	r2, [r6, #0]
 8005a68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a6c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005a70:	2301      	movs	r3, #1
 8005a72:	e09c      	b.n	8005bae <_printf_i+0x1e6>
 8005a74:	6833      	ldr	r3, [r6, #0]
 8005a76:	6820      	ldr	r0, [r4, #0]
 8005a78:	1d19      	adds	r1, r3, #4
 8005a7a:	6031      	str	r1, [r6, #0]
 8005a7c:	0606      	lsls	r6, r0, #24
 8005a7e:	d501      	bpl.n	8005a84 <_printf_i+0xbc>
 8005a80:	681d      	ldr	r5, [r3, #0]
 8005a82:	e003      	b.n	8005a8c <_printf_i+0xc4>
 8005a84:	0645      	lsls	r5, r0, #25
 8005a86:	d5fb      	bpl.n	8005a80 <_printf_i+0xb8>
 8005a88:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005a8c:	2d00      	cmp	r5, #0
 8005a8e:	da03      	bge.n	8005a98 <_printf_i+0xd0>
 8005a90:	232d      	movs	r3, #45	@ 0x2d
 8005a92:	426d      	negs	r5, r5
 8005a94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a98:	4858      	ldr	r0, [pc, #352]	@ (8005bfc <_printf_i+0x234>)
 8005a9a:	230a      	movs	r3, #10
 8005a9c:	e011      	b.n	8005ac2 <_printf_i+0xfa>
 8005a9e:	6821      	ldr	r1, [r4, #0]
 8005aa0:	6833      	ldr	r3, [r6, #0]
 8005aa2:	0608      	lsls	r0, r1, #24
 8005aa4:	f853 5b04 	ldr.w	r5, [r3], #4
 8005aa8:	d402      	bmi.n	8005ab0 <_printf_i+0xe8>
 8005aaa:	0649      	lsls	r1, r1, #25
 8005aac:	bf48      	it	mi
 8005aae:	b2ad      	uxthmi	r5, r5
 8005ab0:	2f6f      	cmp	r7, #111	@ 0x6f
 8005ab2:	4852      	ldr	r0, [pc, #328]	@ (8005bfc <_printf_i+0x234>)
 8005ab4:	6033      	str	r3, [r6, #0]
 8005ab6:	bf14      	ite	ne
 8005ab8:	230a      	movne	r3, #10
 8005aba:	2308      	moveq	r3, #8
 8005abc:	2100      	movs	r1, #0
 8005abe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005ac2:	6866      	ldr	r6, [r4, #4]
 8005ac4:	60a6      	str	r6, [r4, #8]
 8005ac6:	2e00      	cmp	r6, #0
 8005ac8:	db05      	blt.n	8005ad6 <_printf_i+0x10e>
 8005aca:	6821      	ldr	r1, [r4, #0]
 8005acc:	432e      	orrs	r6, r5
 8005ace:	f021 0104 	bic.w	r1, r1, #4
 8005ad2:	6021      	str	r1, [r4, #0]
 8005ad4:	d04b      	beq.n	8005b6e <_printf_i+0x1a6>
 8005ad6:	4616      	mov	r6, r2
 8005ad8:	fbb5 f1f3 	udiv	r1, r5, r3
 8005adc:	fb03 5711 	mls	r7, r3, r1, r5
 8005ae0:	5dc7      	ldrb	r7, [r0, r7]
 8005ae2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005ae6:	462f      	mov	r7, r5
 8005ae8:	42bb      	cmp	r3, r7
 8005aea:	460d      	mov	r5, r1
 8005aec:	d9f4      	bls.n	8005ad8 <_printf_i+0x110>
 8005aee:	2b08      	cmp	r3, #8
 8005af0:	d10b      	bne.n	8005b0a <_printf_i+0x142>
 8005af2:	6823      	ldr	r3, [r4, #0]
 8005af4:	07df      	lsls	r7, r3, #31
 8005af6:	d508      	bpl.n	8005b0a <_printf_i+0x142>
 8005af8:	6923      	ldr	r3, [r4, #16]
 8005afa:	6861      	ldr	r1, [r4, #4]
 8005afc:	4299      	cmp	r1, r3
 8005afe:	bfde      	ittt	le
 8005b00:	2330      	movle	r3, #48	@ 0x30
 8005b02:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005b06:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005b0a:	1b92      	subs	r2, r2, r6
 8005b0c:	6122      	str	r2, [r4, #16]
 8005b0e:	f8cd a000 	str.w	sl, [sp]
 8005b12:	464b      	mov	r3, r9
 8005b14:	aa03      	add	r2, sp, #12
 8005b16:	4621      	mov	r1, r4
 8005b18:	4640      	mov	r0, r8
 8005b1a:	f7ff fee7 	bl	80058ec <_printf_common>
 8005b1e:	3001      	adds	r0, #1
 8005b20:	d14a      	bne.n	8005bb8 <_printf_i+0x1f0>
 8005b22:	f04f 30ff 	mov.w	r0, #4294967295
 8005b26:	b004      	add	sp, #16
 8005b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b2c:	6823      	ldr	r3, [r4, #0]
 8005b2e:	f043 0320 	orr.w	r3, r3, #32
 8005b32:	6023      	str	r3, [r4, #0]
 8005b34:	4832      	ldr	r0, [pc, #200]	@ (8005c00 <_printf_i+0x238>)
 8005b36:	2778      	movs	r7, #120	@ 0x78
 8005b38:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005b3c:	6823      	ldr	r3, [r4, #0]
 8005b3e:	6831      	ldr	r1, [r6, #0]
 8005b40:	061f      	lsls	r7, r3, #24
 8005b42:	f851 5b04 	ldr.w	r5, [r1], #4
 8005b46:	d402      	bmi.n	8005b4e <_printf_i+0x186>
 8005b48:	065f      	lsls	r7, r3, #25
 8005b4a:	bf48      	it	mi
 8005b4c:	b2ad      	uxthmi	r5, r5
 8005b4e:	6031      	str	r1, [r6, #0]
 8005b50:	07d9      	lsls	r1, r3, #31
 8005b52:	bf44      	itt	mi
 8005b54:	f043 0320 	orrmi.w	r3, r3, #32
 8005b58:	6023      	strmi	r3, [r4, #0]
 8005b5a:	b11d      	cbz	r5, 8005b64 <_printf_i+0x19c>
 8005b5c:	2310      	movs	r3, #16
 8005b5e:	e7ad      	b.n	8005abc <_printf_i+0xf4>
 8005b60:	4826      	ldr	r0, [pc, #152]	@ (8005bfc <_printf_i+0x234>)
 8005b62:	e7e9      	b.n	8005b38 <_printf_i+0x170>
 8005b64:	6823      	ldr	r3, [r4, #0]
 8005b66:	f023 0320 	bic.w	r3, r3, #32
 8005b6a:	6023      	str	r3, [r4, #0]
 8005b6c:	e7f6      	b.n	8005b5c <_printf_i+0x194>
 8005b6e:	4616      	mov	r6, r2
 8005b70:	e7bd      	b.n	8005aee <_printf_i+0x126>
 8005b72:	6833      	ldr	r3, [r6, #0]
 8005b74:	6825      	ldr	r5, [r4, #0]
 8005b76:	6961      	ldr	r1, [r4, #20]
 8005b78:	1d18      	adds	r0, r3, #4
 8005b7a:	6030      	str	r0, [r6, #0]
 8005b7c:	062e      	lsls	r6, r5, #24
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	d501      	bpl.n	8005b86 <_printf_i+0x1be>
 8005b82:	6019      	str	r1, [r3, #0]
 8005b84:	e002      	b.n	8005b8c <_printf_i+0x1c4>
 8005b86:	0668      	lsls	r0, r5, #25
 8005b88:	d5fb      	bpl.n	8005b82 <_printf_i+0x1ba>
 8005b8a:	8019      	strh	r1, [r3, #0]
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	6123      	str	r3, [r4, #16]
 8005b90:	4616      	mov	r6, r2
 8005b92:	e7bc      	b.n	8005b0e <_printf_i+0x146>
 8005b94:	6833      	ldr	r3, [r6, #0]
 8005b96:	1d1a      	adds	r2, r3, #4
 8005b98:	6032      	str	r2, [r6, #0]
 8005b9a:	681e      	ldr	r6, [r3, #0]
 8005b9c:	6862      	ldr	r2, [r4, #4]
 8005b9e:	2100      	movs	r1, #0
 8005ba0:	4630      	mov	r0, r6
 8005ba2:	f7fa fb3d 	bl	8000220 <memchr>
 8005ba6:	b108      	cbz	r0, 8005bac <_printf_i+0x1e4>
 8005ba8:	1b80      	subs	r0, r0, r6
 8005baa:	6060      	str	r0, [r4, #4]
 8005bac:	6863      	ldr	r3, [r4, #4]
 8005bae:	6123      	str	r3, [r4, #16]
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005bb6:	e7aa      	b.n	8005b0e <_printf_i+0x146>
 8005bb8:	6923      	ldr	r3, [r4, #16]
 8005bba:	4632      	mov	r2, r6
 8005bbc:	4649      	mov	r1, r9
 8005bbe:	4640      	mov	r0, r8
 8005bc0:	47d0      	blx	sl
 8005bc2:	3001      	adds	r0, #1
 8005bc4:	d0ad      	beq.n	8005b22 <_printf_i+0x15a>
 8005bc6:	6823      	ldr	r3, [r4, #0]
 8005bc8:	079b      	lsls	r3, r3, #30
 8005bca:	d413      	bmi.n	8005bf4 <_printf_i+0x22c>
 8005bcc:	68e0      	ldr	r0, [r4, #12]
 8005bce:	9b03      	ldr	r3, [sp, #12]
 8005bd0:	4298      	cmp	r0, r3
 8005bd2:	bfb8      	it	lt
 8005bd4:	4618      	movlt	r0, r3
 8005bd6:	e7a6      	b.n	8005b26 <_printf_i+0x15e>
 8005bd8:	2301      	movs	r3, #1
 8005bda:	4632      	mov	r2, r6
 8005bdc:	4649      	mov	r1, r9
 8005bde:	4640      	mov	r0, r8
 8005be0:	47d0      	blx	sl
 8005be2:	3001      	adds	r0, #1
 8005be4:	d09d      	beq.n	8005b22 <_printf_i+0x15a>
 8005be6:	3501      	adds	r5, #1
 8005be8:	68e3      	ldr	r3, [r4, #12]
 8005bea:	9903      	ldr	r1, [sp, #12]
 8005bec:	1a5b      	subs	r3, r3, r1
 8005bee:	42ab      	cmp	r3, r5
 8005bf0:	dcf2      	bgt.n	8005bd8 <_printf_i+0x210>
 8005bf2:	e7eb      	b.n	8005bcc <_printf_i+0x204>
 8005bf4:	2500      	movs	r5, #0
 8005bf6:	f104 0619 	add.w	r6, r4, #25
 8005bfa:	e7f5      	b.n	8005be8 <_printf_i+0x220>
 8005bfc:	08009bfe 	.word	0x08009bfe
 8005c00:	08009c0f 	.word	0x08009c0f

08005c04 <_scanf_float>:
 8005c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c08:	b087      	sub	sp, #28
 8005c0a:	4691      	mov	r9, r2
 8005c0c:	9303      	str	r3, [sp, #12]
 8005c0e:	688b      	ldr	r3, [r1, #8]
 8005c10:	1e5a      	subs	r2, r3, #1
 8005c12:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005c16:	bf81      	itttt	hi
 8005c18:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005c1c:	eb03 0b05 	addhi.w	fp, r3, r5
 8005c20:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005c24:	608b      	strhi	r3, [r1, #8]
 8005c26:	680b      	ldr	r3, [r1, #0]
 8005c28:	460a      	mov	r2, r1
 8005c2a:	f04f 0500 	mov.w	r5, #0
 8005c2e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8005c32:	f842 3b1c 	str.w	r3, [r2], #28
 8005c36:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005c3a:	4680      	mov	r8, r0
 8005c3c:	460c      	mov	r4, r1
 8005c3e:	bf98      	it	ls
 8005c40:	f04f 0b00 	movls.w	fp, #0
 8005c44:	9201      	str	r2, [sp, #4]
 8005c46:	4616      	mov	r6, r2
 8005c48:	46aa      	mov	sl, r5
 8005c4a:	462f      	mov	r7, r5
 8005c4c:	9502      	str	r5, [sp, #8]
 8005c4e:	68a2      	ldr	r2, [r4, #8]
 8005c50:	b15a      	cbz	r2, 8005c6a <_scanf_float+0x66>
 8005c52:	f8d9 3000 	ldr.w	r3, [r9]
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	2b4e      	cmp	r3, #78	@ 0x4e
 8005c5a:	d863      	bhi.n	8005d24 <_scanf_float+0x120>
 8005c5c:	2b40      	cmp	r3, #64	@ 0x40
 8005c5e:	d83b      	bhi.n	8005cd8 <_scanf_float+0xd4>
 8005c60:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8005c64:	b2c8      	uxtb	r0, r1
 8005c66:	280e      	cmp	r0, #14
 8005c68:	d939      	bls.n	8005cde <_scanf_float+0xda>
 8005c6a:	b11f      	cbz	r7, 8005c74 <_scanf_float+0x70>
 8005c6c:	6823      	ldr	r3, [r4, #0]
 8005c6e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c72:	6023      	str	r3, [r4, #0]
 8005c74:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c78:	f1ba 0f01 	cmp.w	sl, #1
 8005c7c:	f200 8114 	bhi.w	8005ea8 <_scanf_float+0x2a4>
 8005c80:	9b01      	ldr	r3, [sp, #4]
 8005c82:	429e      	cmp	r6, r3
 8005c84:	f200 8105 	bhi.w	8005e92 <_scanf_float+0x28e>
 8005c88:	2001      	movs	r0, #1
 8005c8a:	b007      	add	sp, #28
 8005c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c90:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8005c94:	2a0d      	cmp	r2, #13
 8005c96:	d8e8      	bhi.n	8005c6a <_scanf_float+0x66>
 8005c98:	a101      	add	r1, pc, #4	@ (adr r1, 8005ca0 <_scanf_float+0x9c>)
 8005c9a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005c9e:	bf00      	nop
 8005ca0:	08005de9 	.word	0x08005de9
 8005ca4:	08005c6b 	.word	0x08005c6b
 8005ca8:	08005c6b 	.word	0x08005c6b
 8005cac:	08005c6b 	.word	0x08005c6b
 8005cb0:	08005e45 	.word	0x08005e45
 8005cb4:	08005e1f 	.word	0x08005e1f
 8005cb8:	08005c6b 	.word	0x08005c6b
 8005cbc:	08005c6b 	.word	0x08005c6b
 8005cc0:	08005df7 	.word	0x08005df7
 8005cc4:	08005c6b 	.word	0x08005c6b
 8005cc8:	08005c6b 	.word	0x08005c6b
 8005ccc:	08005c6b 	.word	0x08005c6b
 8005cd0:	08005c6b 	.word	0x08005c6b
 8005cd4:	08005db3 	.word	0x08005db3
 8005cd8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8005cdc:	e7da      	b.n	8005c94 <_scanf_float+0x90>
 8005cde:	290e      	cmp	r1, #14
 8005ce0:	d8c3      	bhi.n	8005c6a <_scanf_float+0x66>
 8005ce2:	a001      	add	r0, pc, #4	@ (adr r0, 8005ce8 <_scanf_float+0xe4>)
 8005ce4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005ce8:	08005da3 	.word	0x08005da3
 8005cec:	08005c6b 	.word	0x08005c6b
 8005cf0:	08005da3 	.word	0x08005da3
 8005cf4:	08005e33 	.word	0x08005e33
 8005cf8:	08005c6b 	.word	0x08005c6b
 8005cfc:	08005d45 	.word	0x08005d45
 8005d00:	08005d89 	.word	0x08005d89
 8005d04:	08005d89 	.word	0x08005d89
 8005d08:	08005d89 	.word	0x08005d89
 8005d0c:	08005d89 	.word	0x08005d89
 8005d10:	08005d89 	.word	0x08005d89
 8005d14:	08005d89 	.word	0x08005d89
 8005d18:	08005d89 	.word	0x08005d89
 8005d1c:	08005d89 	.word	0x08005d89
 8005d20:	08005d89 	.word	0x08005d89
 8005d24:	2b6e      	cmp	r3, #110	@ 0x6e
 8005d26:	d809      	bhi.n	8005d3c <_scanf_float+0x138>
 8005d28:	2b60      	cmp	r3, #96	@ 0x60
 8005d2a:	d8b1      	bhi.n	8005c90 <_scanf_float+0x8c>
 8005d2c:	2b54      	cmp	r3, #84	@ 0x54
 8005d2e:	d07b      	beq.n	8005e28 <_scanf_float+0x224>
 8005d30:	2b59      	cmp	r3, #89	@ 0x59
 8005d32:	d19a      	bne.n	8005c6a <_scanf_float+0x66>
 8005d34:	2d07      	cmp	r5, #7
 8005d36:	d198      	bne.n	8005c6a <_scanf_float+0x66>
 8005d38:	2508      	movs	r5, #8
 8005d3a:	e02f      	b.n	8005d9c <_scanf_float+0x198>
 8005d3c:	2b74      	cmp	r3, #116	@ 0x74
 8005d3e:	d073      	beq.n	8005e28 <_scanf_float+0x224>
 8005d40:	2b79      	cmp	r3, #121	@ 0x79
 8005d42:	e7f6      	b.n	8005d32 <_scanf_float+0x12e>
 8005d44:	6821      	ldr	r1, [r4, #0]
 8005d46:	05c8      	lsls	r0, r1, #23
 8005d48:	d51e      	bpl.n	8005d88 <_scanf_float+0x184>
 8005d4a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8005d4e:	6021      	str	r1, [r4, #0]
 8005d50:	3701      	adds	r7, #1
 8005d52:	f1bb 0f00 	cmp.w	fp, #0
 8005d56:	d003      	beq.n	8005d60 <_scanf_float+0x15c>
 8005d58:	3201      	adds	r2, #1
 8005d5a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005d5e:	60a2      	str	r2, [r4, #8]
 8005d60:	68a3      	ldr	r3, [r4, #8]
 8005d62:	3b01      	subs	r3, #1
 8005d64:	60a3      	str	r3, [r4, #8]
 8005d66:	6923      	ldr	r3, [r4, #16]
 8005d68:	3301      	adds	r3, #1
 8005d6a:	6123      	str	r3, [r4, #16]
 8005d6c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8005d70:	3b01      	subs	r3, #1
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	f8c9 3004 	str.w	r3, [r9, #4]
 8005d78:	f340 8082 	ble.w	8005e80 <_scanf_float+0x27c>
 8005d7c:	f8d9 3000 	ldr.w	r3, [r9]
 8005d80:	3301      	adds	r3, #1
 8005d82:	f8c9 3000 	str.w	r3, [r9]
 8005d86:	e762      	b.n	8005c4e <_scanf_float+0x4a>
 8005d88:	eb1a 0105 	adds.w	r1, sl, r5
 8005d8c:	f47f af6d 	bne.w	8005c6a <_scanf_float+0x66>
 8005d90:	6822      	ldr	r2, [r4, #0]
 8005d92:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8005d96:	6022      	str	r2, [r4, #0]
 8005d98:	460d      	mov	r5, r1
 8005d9a:	468a      	mov	sl, r1
 8005d9c:	f806 3b01 	strb.w	r3, [r6], #1
 8005da0:	e7de      	b.n	8005d60 <_scanf_float+0x15c>
 8005da2:	6822      	ldr	r2, [r4, #0]
 8005da4:	0610      	lsls	r0, r2, #24
 8005da6:	f57f af60 	bpl.w	8005c6a <_scanf_float+0x66>
 8005daa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005dae:	6022      	str	r2, [r4, #0]
 8005db0:	e7f4      	b.n	8005d9c <_scanf_float+0x198>
 8005db2:	f1ba 0f00 	cmp.w	sl, #0
 8005db6:	d10c      	bne.n	8005dd2 <_scanf_float+0x1ce>
 8005db8:	b977      	cbnz	r7, 8005dd8 <_scanf_float+0x1d4>
 8005dba:	6822      	ldr	r2, [r4, #0]
 8005dbc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005dc0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005dc4:	d108      	bne.n	8005dd8 <_scanf_float+0x1d4>
 8005dc6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005dca:	6022      	str	r2, [r4, #0]
 8005dcc:	f04f 0a01 	mov.w	sl, #1
 8005dd0:	e7e4      	b.n	8005d9c <_scanf_float+0x198>
 8005dd2:	f1ba 0f02 	cmp.w	sl, #2
 8005dd6:	d050      	beq.n	8005e7a <_scanf_float+0x276>
 8005dd8:	2d01      	cmp	r5, #1
 8005dda:	d002      	beq.n	8005de2 <_scanf_float+0x1de>
 8005ddc:	2d04      	cmp	r5, #4
 8005dde:	f47f af44 	bne.w	8005c6a <_scanf_float+0x66>
 8005de2:	3501      	adds	r5, #1
 8005de4:	b2ed      	uxtb	r5, r5
 8005de6:	e7d9      	b.n	8005d9c <_scanf_float+0x198>
 8005de8:	f1ba 0f01 	cmp.w	sl, #1
 8005dec:	f47f af3d 	bne.w	8005c6a <_scanf_float+0x66>
 8005df0:	f04f 0a02 	mov.w	sl, #2
 8005df4:	e7d2      	b.n	8005d9c <_scanf_float+0x198>
 8005df6:	b975      	cbnz	r5, 8005e16 <_scanf_float+0x212>
 8005df8:	2f00      	cmp	r7, #0
 8005dfa:	f47f af37 	bne.w	8005c6c <_scanf_float+0x68>
 8005dfe:	6822      	ldr	r2, [r4, #0]
 8005e00:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005e04:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005e08:	f040 8103 	bne.w	8006012 <_scanf_float+0x40e>
 8005e0c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005e10:	6022      	str	r2, [r4, #0]
 8005e12:	2501      	movs	r5, #1
 8005e14:	e7c2      	b.n	8005d9c <_scanf_float+0x198>
 8005e16:	2d03      	cmp	r5, #3
 8005e18:	d0e3      	beq.n	8005de2 <_scanf_float+0x1de>
 8005e1a:	2d05      	cmp	r5, #5
 8005e1c:	e7df      	b.n	8005dde <_scanf_float+0x1da>
 8005e1e:	2d02      	cmp	r5, #2
 8005e20:	f47f af23 	bne.w	8005c6a <_scanf_float+0x66>
 8005e24:	2503      	movs	r5, #3
 8005e26:	e7b9      	b.n	8005d9c <_scanf_float+0x198>
 8005e28:	2d06      	cmp	r5, #6
 8005e2a:	f47f af1e 	bne.w	8005c6a <_scanf_float+0x66>
 8005e2e:	2507      	movs	r5, #7
 8005e30:	e7b4      	b.n	8005d9c <_scanf_float+0x198>
 8005e32:	6822      	ldr	r2, [r4, #0]
 8005e34:	0591      	lsls	r1, r2, #22
 8005e36:	f57f af18 	bpl.w	8005c6a <_scanf_float+0x66>
 8005e3a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8005e3e:	6022      	str	r2, [r4, #0]
 8005e40:	9702      	str	r7, [sp, #8]
 8005e42:	e7ab      	b.n	8005d9c <_scanf_float+0x198>
 8005e44:	6822      	ldr	r2, [r4, #0]
 8005e46:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8005e4a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005e4e:	d005      	beq.n	8005e5c <_scanf_float+0x258>
 8005e50:	0550      	lsls	r0, r2, #21
 8005e52:	f57f af0a 	bpl.w	8005c6a <_scanf_float+0x66>
 8005e56:	2f00      	cmp	r7, #0
 8005e58:	f000 80db 	beq.w	8006012 <_scanf_float+0x40e>
 8005e5c:	0591      	lsls	r1, r2, #22
 8005e5e:	bf58      	it	pl
 8005e60:	9902      	ldrpl	r1, [sp, #8]
 8005e62:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005e66:	bf58      	it	pl
 8005e68:	1a79      	subpl	r1, r7, r1
 8005e6a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8005e6e:	bf58      	it	pl
 8005e70:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005e74:	6022      	str	r2, [r4, #0]
 8005e76:	2700      	movs	r7, #0
 8005e78:	e790      	b.n	8005d9c <_scanf_float+0x198>
 8005e7a:	f04f 0a03 	mov.w	sl, #3
 8005e7e:	e78d      	b.n	8005d9c <_scanf_float+0x198>
 8005e80:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005e84:	4649      	mov	r1, r9
 8005e86:	4640      	mov	r0, r8
 8005e88:	4798      	blx	r3
 8005e8a:	2800      	cmp	r0, #0
 8005e8c:	f43f aedf 	beq.w	8005c4e <_scanf_float+0x4a>
 8005e90:	e6eb      	b.n	8005c6a <_scanf_float+0x66>
 8005e92:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005e96:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005e9a:	464a      	mov	r2, r9
 8005e9c:	4640      	mov	r0, r8
 8005e9e:	4798      	blx	r3
 8005ea0:	6923      	ldr	r3, [r4, #16]
 8005ea2:	3b01      	subs	r3, #1
 8005ea4:	6123      	str	r3, [r4, #16]
 8005ea6:	e6eb      	b.n	8005c80 <_scanf_float+0x7c>
 8005ea8:	1e6b      	subs	r3, r5, #1
 8005eaa:	2b06      	cmp	r3, #6
 8005eac:	d824      	bhi.n	8005ef8 <_scanf_float+0x2f4>
 8005eae:	2d02      	cmp	r5, #2
 8005eb0:	d836      	bhi.n	8005f20 <_scanf_float+0x31c>
 8005eb2:	9b01      	ldr	r3, [sp, #4]
 8005eb4:	429e      	cmp	r6, r3
 8005eb6:	f67f aee7 	bls.w	8005c88 <_scanf_float+0x84>
 8005eba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005ebe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005ec2:	464a      	mov	r2, r9
 8005ec4:	4640      	mov	r0, r8
 8005ec6:	4798      	blx	r3
 8005ec8:	6923      	ldr	r3, [r4, #16]
 8005eca:	3b01      	subs	r3, #1
 8005ecc:	6123      	str	r3, [r4, #16]
 8005ece:	e7f0      	b.n	8005eb2 <_scanf_float+0x2ae>
 8005ed0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005ed4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005ed8:	464a      	mov	r2, r9
 8005eda:	4640      	mov	r0, r8
 8005edc:	4798      	blx	r3
 8005ede:	6923      	ldr	r3, [r4, #16]
 8005ee0:	3b01      	subs	r3, #1
 8005ee2:	6123      	str	r3, [r4, #16]
 8005ee4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005ee8:	fa5f fa8a 	uxtb.w	sl, sl
 8005eec:	f1ba 0f02 	cmp.w	sl, #2
 8005ef0:	d1ee      	bne.n	8005ed0 <_scanf_float+0x2cc>
 8005ef2:	3d03      	subs	r5, #3
 8005ef4:	b2ed      	uxtb	r5, r5
 8005ef6:	1b76      	subs	r6, r6, r5
 8005ef8:	6823      	ldr	r3, [r4, #0]
 8005efa:	05da      	lsls	r2, r3, #23
 8005efc:	d530      	bpl.n	8005f60 <_scanf_float+0x35c>
 8005efe:	055b      	lsls	r3, r3, #21
 8005f00:	d511      	bpl.n	8005f26 <_scanf_float+0x322>
 8005f02:	9b01      	ldr	r3, [sp, #4]
 8005f04:	429e      	cmp	r6, r3
 8005f06:	f67f aebf 	bls.w	8005c88 <_scanf_float+0x84>
 8005f0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005f0e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005f12:	464a      	mov	r2, r9
 8005f14:	4640      	mov	r0, r8
 8005f16:	4798      	blx	r3
 8005f18:	6923      	ldr	r3, [r4, #16]
 8005f1a:	3b01      	subs	r3, #1
 8005f1c:	6123      	str	r3, [r4, #16]
 8005f1e:	e7f0      	b.n	8005f02 <_scanf_float+0x2fe>
 8005f20:	46aa      	mov	sl, r5
 8005f22:	46b3      	mov	fp, r6
 8005f24:	e7de      	b.n	8005ee4 <_scanf_float+0x2e0>
 8005f26:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005f2a:	6923      	ldr	r3, [r4, #16]
 8005f2c:	2965      	cmp	r1, #101	@ 0x65
 8005f2e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005f32:	f106 35ff 	add.w	r5, r6, #4294967295
 8005f36:	6123      	str	r3, [r4, #16]
 8005f38:	d00c      	beq.n	8005f54 <_scanf_float+0x350>
 8005f3a:	2945      	cmp	r1, #69	@ 0x45
 8005f3c:	d00a      	beq.n	8005f54 <_scanf_float+0x350>
 8005f3e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005f42:	464a      	mov	r2, r9
 8005f44:	4640      	mov	r0, r8
 8005f46:	4798      	blx	r3
 8005f48:	6923      	ldr	r3, [r4, #16]
 8005f4a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	1eb5      	subs	r5, r6, #2
 8005f52:	6123      	str	r3, [r4, #16]
 8005f54:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005f58:	464a      	mov	r2, r9
 8005f5a:	4640      	mov	r0, r8
 8005f5c:	4798      	blx	r3
 8005f5e:	462e      	mov	r6, r5
 8005f60:	6822      	ldr	r2, [r4, #0]
 8005f62:	f012 0210 	ands.w	r2, r2, #16
 8005f66:	d001      	beq.n	8005f6c <_scanf_float+0x368>
 8005f68:	2000      	movs	r0, #0
 8005f6a:	e68e      	b.n	8005c8a <_scanf_float+0x86>
 8005f6c:	7032      	strb	r2, [r6, #0]
 8005f6e:	6823      	ldr	r3, [r4, #0]
 8005f70:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005f74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f78:	d125      	bne.n	8005fc6 <_scanf_float+0x3c2>
 8005f7a:	9b02      	ldr	r3, [sp, #8]
 8005f7c:	429f      	cmp	r7, r3
 8005f7e:	d00a      	beq.n	8005f96 <_scanf_float+0x392>
 8005f80:	1bda      	subs	r2, r3, r7
 8005f82:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8005f86:	429e      	cmp	r6, r3
 8005f88:	bf28      	it	cs
 8005f8a:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8005f8e:	4922      	ldr	r1, [pc, #136]	@ (8006018 <_scanf_float+0x414>)
 8005f90:	4630      	mov	r0, r6
 8005f92:	f000 f907 	bl	80061a4 <siprintf>
 8005f96:	9901      	ldr	r1, [sp, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	4640      	mov	r0, r8
 8005f9c:	f002 fbf4 	bl	8008788 <_strtod_r>
 8005fa0:	9b03      	ldr	r3, [sp, #12]
 8005fa2:	6821      	ldr	r1, [r4, #0]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f011 0f02 	tst.w	r1, #2
 8005faa:	ec57 6b10 	vmov	r6, r7, d0
 8005fae:	f103 0204 	add.w	r2, r3, #4
 8005fb2:	d015      	beq.n	8005fe0 <_scanf_float+0x3dc>
 8005fb4:	9903      	ldr	r1, [sp, #12]
 8005fb6:	600a      	str	r2, [r1, #0]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	e9c3 6700 	strd	r6, r7, [r3]
 8005fbe:	68e3      	ldr	r3, [r4, #12]
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	60e3      	str	r3, [r4, #12]
 8005fc4:	e7d0      	b.n	8005f68 <_scanf_float+0x364>
 8005fc6:	9b04      	ldr	r3, [sp, #16]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d0e4      	beq.n	8005f96 <_scanf_float+0x392>
 8005fcc:	9905      	ldr	r1, [sp, #20]
 8005fce:	230a      	movs	r3, #10
 8005fd0:	3101      	adds	r1, #1
 8005fd2:	4640      	mov	r0, r8
 8005fd4:	f002 fc58 	bl	8008888 <_strtol_r>
 8005fd8:	9b04      	ldr	r3, [sp, #16]
 8005fda:	9e05      	ldr	r6, [sp, #20]
 8005fdc:	1ac2      	subs	r2, r0, r3
 8005fde:	e7d0      	b.n	8005f82 <_scanf_float+0x37e>
 8005fe0:	f011 0f04 	tst.w	r1, #4
 8005fe4:	9903      	ldr	r1, [sp, #12]
 8005fe6:	600a      	str	r2, [r1, #0]
 8005fe8:	d1e6      	bne.n	8005fb8 <_scanf_float+0x3b4>
 8005fea:	681d      	ldr	r5, [r3, #0]
 8005fec:	4632      	mov	r2, r6
 8005fee:	463b      	mov	r3, r7
 8005ff0:	4630      	mov	r0, r6
 8005ff2:	4639      	mov	r1, r7
 8005ff4:	f7fa fdc2 	bl	8000b7c <__aeabi_dcmpun>
 8005ff8:	b128      	cbz	r0, 8006006 <_scanf_float+0x402>
 8005ffa:	4808      	ldr	r0, [pc, #32]	@ (800601c <_scanf_float+0x418>)
 8005ffc:	f000 f9b8 	bl	8006370 <nanf>
 8006000:	ed85 0a00 	vstr	s0, [r5]
 8006004:	e7db      	b.n	8005fbe <_scanf_float+0x3ba>
 8006006:	4630      	mov	r0, r6
 8006008:	4639      	mov	r1, r7
 800600a:	f7fa fe15 	bl	8000c38 <__aeabi_d2f>
 800600e:	6028      	str	r0, [r5, #0]
 8006010:	e7d5      	b.n	8005fbe <_scanf_float+0x3ba>
 8006012:	2700      	movs	r7, #0
 8006014:	e62e      	b.n	8005c74 <_scanf_float+0x70>
 8006016:	bf00      	nop
 8006018:	08009c20 	.word	0x08009c20
 800601c:	08009d61 	.word	0x08009d61

08006020 <std>:
 8006020:	2300      	movs	r3, #0
 8006022:	b510      	push	{r4, lr}
 8006024:	4604      	mov	r4, r0
 8006026:	e9c0 3300 	strd	r3, r3, [r0]
 800602a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800602e:	6083      	str	r3, [r0, #8]
 8006030:	8181      	strh	r1, [r0, #12]
 8006032:	6643      	str	r3, [r0, #100]	@ 0x64
 8006034:	81c2      	strh	r2, [r0, #14]
 8006036:	6183      	str	r3, [r0, #24]
 8006038:	4619      	mov	r1, r3
 800603a:	2208      	movs	r2, #8
 800603c:	305c      	adds	r0, #92	@ 0x5c
 800603e:	f000 f916 	bl	800626e <memset>
 8006042:	4b0d      	ldr	r3, [pc, #52]	@ (8006078 <std+0x58>)
 8006044:	6263      	str	r3, [r4, #36]	@ 0x24
 8006046:	4b0d      	ldr	r3, [pc, #52]	@ (800607c <std+0x5c>)
 8006048:	62a3      	str	r3, [r4, #40]	@ 0x28
 800604a:	4b0d      	ldr	r3, [pc, #52]	@ (8006080 <std+0x60>)
 800604c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800604e:	4b0d      	ldr	r3, [pc, #52]	@ (8006084 <std+0x64>)
 8006050:	6323      	str	r3, [r4, #48]	@ 0x30
 8006052:	4b0d      	ldr	r3, [pc, #52]	@ (8006088 <std+0x68>)
 8006054:	6224      	str	r4, [r4, #32]
 8006056:	429c      	cmp	r4, r3
 8006058:	d006      	beq.n	8006068 <std+0x48>
 800605a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800605e:	4294      	cmp	r4, r2
 8006060:	d002      	beq.n	8006068 <std+0x48>
 8006062:	33d0      	adds	r3, #208	@ 0xd0
 8006064:	429c      	cmp	r4, r3
 8006066:	d105      	bne.n	8006074 <std+0x54>
 8006068:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800606c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006070:	f000 b97a 	b.w	8006368 <__retarget_lock_init_recursive>
 8006074:	bd10      	pop	{r4, pc}
 8006076:	bf00      	nop
 8006078:	080061e9 	.word	0x080061e9
 800607c:	0800620b 	.word	0x0800620b
 8006080:	08006243 	.word	0x08006243
 8006084:	08006267 	.word	0x08006267
 8006088:	20000354 	.word	0x20000354

0800608c <stdio_exit_handler>:
 800608c:	4a02      	ldr	r2, [pc, #8]	@ (8006098 <stdio_exit_handler+0xc>)
 800608e:	4903      	ldr	r1, [pc, #12]	@ (800609c <stdio_exit_handler+0x10>)
 8006090:	4803      	ldr	r0, [pc, #12]	@ (80060a0 <stdio_exit_handler+0x14>)
 8006092:	f000 b869 	b.w	8006168 <_fwalk_sglue>
 8006096:	bf00      	nop
 8006098:	2000000c 	.word	0x2000000c
 800609c:	08008c45 	.word	0x08008c45
 80060a0:	2000001c 	.word	0x2000001c

080060a4 <cleanup_stdio>:
 80060a4:	6841      	ldr	r1, [r0, #4]
 80060a6:	4b0c      	ldr	r3, [pc, #48]	@ (80060d8 <cleanup_stdio+0x34>)
 80060a8:	4299      	cmp	r1, r3
 80060aa:	b510      	push	{r4, lr}
 80060ac:	4604      	mov	r4, r0
 80060ae:	d001      	beq.n	80060b4 <cleanup_stdio+0x10>
 80060b0:	f002 fdc8 	bl	8008c44 <_fflush_r>
 80060b4:	68a1      	ldr	r1, [r4, #8]
 80060b6:	4b09      	ldr	r3, [pc, #36]	@ (80060dc <cleanup_stdio+0x38>)
 80060b8:	4299      	cmp	r1, r3
 80060ba:	d002      	beq.n	80060c2 <cleanup_stdio+0x1e>
 80060bc:	4620      	mov	r0, r4
 80060be:	f002 fdc1 	bl	8008c44 <_fflush_r>
 80060c2:	68e1      	ldr	r1, [r4, #12]
 80060c4:	4b06      	ldr	r3, [pc, #24]	@ (80060e0 <cleanup_stdio+0x3c>)
 80060c6:	4299      	cmp	r1, r3
 80060c8:	d004      	beq.n	80060d4 <cleanup_stdio+0x30>
 80060ca:	4620      	mov	r0, r4
 80060cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060d0:	f002 bdb8 	b.w	8008c44 <_fflush_r>
 80060d4:	bd10      	pop	{r4, pc}
 80060d6:	bf00      	nop
 80060d8:	20000354 	.word	0x20000354
 80060dc:	200003bc 	.word	0x200003bc
 80060e0:	20000424 	.word	0x20000424

080060e4 <global_stdio_init.part.0>:
 80060e4:	b510      	push	{r4, lr}
 80060e6:	4b0b      	ldr	r3, [pc, #44]	@ (8006114 <global_stdio_init.part.0+0x30>)
 80060e8:	4c0b      	ldr	r4, [pc, #44]	@ (8006118 <global_stdio_init.part.0+0x34>)
 80060ea:	4a0c      	ldr	r2, [pc, #48]	@ (800611c <global_stdio_init.part.0+0x38>)
 80060ec:	601a      	str	r2, [r3, #0]
 80060ee:	4620      	mov	r0, r4
 80060f0:	2200      	movs	r2, #0
 80060f2:	2104      	movs	r1, #4
 80060f4:	f7ff ff94 	bl	8006020 <std>
 80060f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80060fc:	2201      	movs	r2, #1
 80060fe:	2109      	movs	r1, #9
 8006100:	f7ff ff8e 	bl	8006020 <std>
 8006104:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006108:	2202      	movs	r2, #2
 800610a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800610e:	2112      	movs	r1, #18
 8006110:	f7ff bf86 	b.w	8006020 <std>
 8006114:	2000048c 	.word	0x2000048c
 8006118:	20000354 	.word	0x20000354
 800611c:	0800608d 	.word	0x0800608d

08006120 <__sfp_lock_acquire>:
 8006120:	4801      	ldr	r0, [pc, #4]	@ (8006128 <__sfp_lock_acquire+0x8>)
 8006122:	f000 b922 	b.w	800636a <__retarget_lock_acquire_recursive>
 8006126:	bf00      	nop
 8006128:	20000495 	.word	0x20000495

0800612c <__sfp_lock_release>:
 800612c:	4801      	ldr	r0, [pc, #4]	@ (8006134 <__sfp_lock_release+0x8>)
 800612e:	f000 b91d 	b.w	800636c <__retarget_lock_release_recursive>
 8006132:	bf00      	nop
 8006134:	20000495 	.word	0x20000495

08006138 <__sinit>:
 8006138:	b510      	push	{r4, lr}
 800613a:	4604      	mov	r4, r0
 800613c:	f7ff fff0 	bl	8006120 <__sfp_lock_acquire>
 8006140:	6a23      	ldr	r3, [r4, #32]
 8006142:	b11b      	cbz	r3, 800614c <__sinit+0x14>
 8006144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006148:	f7ff bff0 	b.w	800612c <__sfp_lock_release>
 800614c:	4b04      	ldr	r3, [pc, #16]	@ (8006160 <__sinit+0x28>)
 800614e:	6223      	str	r3, [r4, #32]
 8006150:	4b04      	ldr	r3, [pc, #16]	@ (8006164 <__sinit+0x2c>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d1f5      	bne.n	8006144 <__sinit+0xc>
 8006158:	f7ff ffc4 	bl	80060e4 <global_stdio_init.part.0>
 800615c:	e7f2      	b.n	8006144 <__sinit+0xc>
 800615e:	bf00      	nop
 8006160:	080060a5 	.word	0x080060a5
 8006164:	2000048c 	.word	0x2000048c

08006168 <_fwalk_sglue>:
 8006168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800616c:	4607      	mov	r7, r0
 800616e:	4688      	mov	r8, r1
 8006170:	4614      	mov	r4, r2
 8006172:	2600      	movs	r6, #0
 8006174:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006178:	f1b9 0901 	subs.w	r9, r9, #1
 800617c:	d505      	bpl.n	800618a <_fwalk_sglue+0x22>
 800617e:	6824      	ldr	r4, [r4, #0]
 8006180:	2c00      	cmp	r4, #0
 8006182:	d1f7      	bne.n	8006174 <_fwalk_sglue+0xc>
 8006184:	4630      	mov	r0, r6
 8006186:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800618a:	89ab      	ldrh	r3, [r5, #12]
 800618c:	2b01      	cmp	r3, #1
 800618e:	d907      	bls.n	80061a0 <_fwalk_sglue+0x38>
 8006190:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006194:	3301      	adds	r3, #1
 8006196:	d003      	beq.n	80061a0 <_fwalk_sglue+0x38>
 8006198:	4629      	mov	r1, r5
 800619a:	4638      	mov	r0, r7
 800619c:	47c0      	blx	r8
 800619e:	4306      	orrs	r6, r0
 80061a0:	3568      	adds	r5, #104	@ 0x68
 80061a2:	e7e9      	b.n	8006178 <_fwalk_sglue+0x10>

080061a4 <siprintf>:
 80061a4:	b40e      	push	{r1, r2, r3}
 80061a6:	b510      	push	{r4, lr}
 80061a8:	b09d      	sub	sp, #116	@ 0x74
 80061aa:	ab1f      	add	r3, sp, #124	@ 0x7c
 80061ac:	9002      	str	r0, [sp, #8]
 80061ae:	9006      	str	r0, [sp, #24]
 80061b0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80061b4:	480a      	ldr	r0, [pc, #40]	@ (80061e0 <siprintf+0x3c>)
 80061b6:	9107      	str	r1, [sp, #28]
 80061b8:	9104      	str	r1, [sp, #16]
 80061ba:	490a      	ldr	r1, [pc, #40]	@ (80061e4 <siprintf+0x40>)
 80061bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80061c0:	9105      	str	r1, [sp, #20]
 80061c2:	2400      	movs	r4, #0
 80061c4:	a902      	add	r1, sp, #8
 80061c6:	6800      	ldr	r0, [r0, #0]
 80061c8:	9301      	str	r3, [sp, #4]
 80061ca:	941b      	str	r4, [sp, #108]	@ 0x6c
 80061cc:	f002 fbba 	bl	8008944 <_svfiprintf_r>
 80061d0:	9b02      	ldr	r3, [sp, #8]
 80061d2:	701c      	strb	r4, [r3, #0]
 80061d4:	b01d      	add	sp, #116	@ 0x74
 80061d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061da:	b003      	add	sp, #12
 80061dc:	4770      	bx	lr
 80061de:	bf00      	nop
 80061e0:	20000018 	.word	0x20000018
 80061e4:	ffff0208 	.word	0xffff0208

080061e8 <__sread>:
 80061e8:	b510      	push	{r4, lr}
 80061ea:	460c      	mov	r4, r1
 80061ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061f0:	f000 f86c 	bl	80062cc <_read_r>
 80061f4:	2800      	cmp	r0, #0
 80061f6:	bfab      	itete	ge
 80061f8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80061fa:	89a3      	ldrhlt	r3, [r4, #12]
 80061fc:	181b      	addge	r3, r3, r0
 80061fe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006202:	bfac      	ite	ge
 8006204:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006206:	81a3      	strhlt	r3, [r4, #12]
 8006208:	bd10      	pop	{r4, pc}

0800620a <__swrite>:
 800620a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800620e:	461f      	mov	r7, r3
 8006210:	898b      	ldrh	r3, [r1, #12]
 8006212:	05db      	lsls	r3, r3, #23
 8006214:	4605      	mov	r5, r0
 8006216:	460c      	mov	r4, r1
 8006218:	4616      	mov	r6, r2
 800621a:	d505      	bpl.n	8006228 <__swrite+0x1e>
 800621c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006220:	2302      	movs	r3, #2
 8006222:	2200      	movs	r2, #0
 8006224:	f000 f840 	bl	80062a8 <_lseek_r>
 8006228:	89a3      	ldrh	r3, [r4, #12]
 800622a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800622e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006232:	81a3      	strh	r3, [r4, #12]
 8006234:	4632      	mov	r2, r6
 8006236:	463b      	mov	r3, r7
 8006238:	4628      	mov	r0, r5
 800623a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800623e:	f000 b857 	b.w	80062f0 <_write_r>

08006242 <__sseek>:
 8006242:	b510      	push	{r4, lr}
 8006244:	460c      	mov	r4, r1
 8006246:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800624a:	f000 f82d 	bl	80062a8 <_lseek_r>
 800624e:	1c43      	adds	r3, r0, #1
 8006250:	89a3      	ldrh	r3, [r4, #12]
 8006252:	bf15      	itete	ne
 8006254:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006256:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800625a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800625e:	81a3      	strheq	r3, [r4, #12]
 8006260:	bf18      	it	ne
 8006262:	81a3      	strhne	r3, [r4, #12]
 8006264:	bd10      	pop	{r4, pc}

08006266 <__sclose>:
 8006266:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800626a:	f000 b80d 	b.w	8006288 <_close_r>

0800626e <memset>:
 800626e:	4402      	add	r2, r0
 8006270:	4603      	mov	r3, r0
 8006272:	4293      	cmp	r3, r2
 8006274:	d100      	bne.n	8006278 <memset+0xa>
 8006276:	4770      	bx	lr
 8006278:	f803 1b01 	strb.w	r1, [r3], #1
 800627c:	e7f9      	b.n	8006272 <memset+0x4>
	...

08006280 <_localeconv_r>:
 8006280:	4800      	ldr	r0, [pc, #0]	@ (8006284 <_localeconv_r+0x4>)
 8006282:	4770      	bx	lr
 8006284:	20000158 	.word	0x20000158

08006288 <_close_r>:
 8006288:	b538      	push	{r3, r4, r5, lr}
 800628a:	4d06      	ldr	r5, [pc, #24]	@ (80062a4 <_close_r+0x1c>)
 800628c:	2300      	movs	r3, #0
 800628e:	4604      	mov	r4, r0
 8006290:	4608      	mov	r0, r1
 8006292:	602b      	str	r3, [r5, #0]
 8006294:	f7fb faf8 	bl	8001888 <_close>
 8006298:	1c43      	adds	r3, r0, #1
 800629a:	d102      	bne.n	80062a2 <_close_r+0x1a>
 800629c:	682b      	ldr	r3, [r5, #0]
 800629e:	b103      	cbz	r3, 80062a2 <_close_r+0x1a>
 80062a0:	6023      	str	r3, [r4, #0]
 80062a2:	bd38      	pop	{r3, r4, r5, pc}
 80062a4:	20000490 	.word	0x20000490

080062a8 <_lseek_r>:
 80062a8:	b538      	push	{r3, r4, r5, lr}
 80062aa:	4d07      	ldr	r5, [pc, #28]	@ (80062c8 <_lseek_r+0x20>)
 80062ac:	4604      	mov	r4, r0
 80062ae:	4608      	mov	r0, r1
 80062b0:	4611      	mov	r1, r2
 80062b2:	2200      	movs	r2, #0
 80062b4:	602a      	str	r2, [r5, #0]
 80062b6:	461a      	mov	r2, r3
 80062b8:	f7fb fb0d 	bl	80018d6 <_lseek>
 80062bc:	1c43      	adds	r3, r0, #1
 80062be:	d102      	bne.n	80062c6 <_lseek_r+0x1e>
 80062c0:	682b      	ldr	r3, [r5, #0]
 80062c2:	b103      	cbz	r3, 80062c6 <_lseek_r+0x1e>
 80062c4:	6023      	str	r3, [r4, #0]
 80062c6:	bd38      	pop	{r3, r4, r5, pc}
 80062c8:	20000490 	.word	0x20000490

080062cc <_read_r>:
 80062cc:	b538      	push	{r3, r4, r5, lr}
 80062ce:	4d07      	ldr	r5, [pc, #28]	@ (80062ec <_read_r+0x20>)
 80062d0:	4604      	mov	r4, r0
 80062d2:	4608      	mov	r0, r1
 80062d4:	4611      	mov	r1, r2
 80062d6:	2200      	movs	r2, #0
 80062d8:	602a      	str	r2, [r5, #0]
 80062da:	461a      	mov	r2, r3
 80062dc:	f7fb fa9b 	bl	8001816 <_read>
 80062e0:	1c43      	adds	r3, r0, #1
 80062e2:	d102      	bne.n	80062ea <_read_r+0x1e>
 80062e4:	682b      	ldr	r3, [r5, #0]
 80062e6:	b103      	cbz	r3, 80062ea <_read_r+0x1e>
 80062e8:	6023      	str	r3, [r4, #0]
 80062ea:	bd38      	pop	{r3, r4, r5, pc}
 80062ec:	20000490 	.word	0x20000490

080062f0 <_write_r>:
 80062f0:	b538      	push	{r3, r4, r5, lr}
 80062f2:	4d07      	ldr	r5, [pc, #28]	@ (8006310 <_write_r+0x20>)
 80062f4:	4604      	mov	r4, r0
 80062f6:	4608      	mov	r0, r1
 80062f8:	4611      	mov	r1, r2
 80062fa:	2200      	movs	r2, #0
 80062fc:	602a      	str	r2, [r5, #0]
 80062fe:	461a      	mov	r2, r3
 8006300:	f7fb faa6 	bl	8001850 <_write>
 8006304:	1c43      	adds	r3, r0, #1
 8006306:	d102      	bne.n	800630e <_write_r+0x1e>
 8006308:	682b      	ldr	r3, [r5, #0]
 800630a:	b103      	cbz	r3, 800630e <_write_r+0x1e>
 800630c:	6023      	str	r3, [r4, #0]
 800630e:	bd38      	pop	{r3, r4, r5, pc}
 8006310:	20000490 	.word	0x20000490

08006314 <__errno>:
 8006314:	4b01      	ldr	r3, [pc, #4]	@ (800631c <__errno+0x8>)
 8006316:	6818      	ldr	r0, [r3, #0]
 8006318:	4770      	bx	lr
 800631a:	bf00      	nop
 800631c:	20000018 	.word	0x20000018

08006320 <__libc_init_array>:
 8006320:	b570      	push	{r4, r5, r6, lr}
 8006322:	4d0d      	ldr	r5, [pc, #52]	@ (8006358 <__libc_init_array+0x38>)
 8006324:	4c0d      	ldr	r4, [pc, #52]	@ (800635c <__libc_init_array+0x3c>)
 8006326:	1b64      	subs	r4, r4, r5
 8006328:	10a4      	asrs	r4, r4, #2
 800632a:	2600      	movs	r6, #0
 800632c:	42a6      	cmp	r6, r4
 800632e:	d109      	bne.n	8006344 <__libc_init_array+0x24>
 8006330:	4d0b      	ldr	r5, [pc, #44]	@ (8006360 <__libc_init_array+0x40>)
 8006332:	4c0c      	ldr	r4, [pc, #48]	@ (8006364 <__libc_init_array+0x44>)
 8006334:	f003 fb76 	bl	8009a24 <_init>
 8006338:	1b64      	subs	r4, r4, r5
 800633a:	10a4      	asrs	r4, r4, #2
 800633c:	2600      	movs	r6, #0
 800633e:	42a6      	cmp	r6, r4
 8006340:	d105      	bne.n	800634e <__libc_init_array+0x2e>
 8006342:	bd70      	pop	{r4, r5, r6, pc}
 8006344:	f855 3b04 	ldr.w	r3, [r5], #4
 8006348:	4798      	blx	r3
 800634a:	3601      	adds	r6, #1
 800634c:	e7ee      	b.n	800632c <__libc_init_array+0xc>
 800634e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006352:	4798      	blx	r3
 8006354:	3601      	adds	r6, #1
 8006356:	e7f2      	b.n	800633e <__libc_init_array+0x1e>
 8006358:	0800a01c 	.word	0x0800a01c
 800635c:	0800a01c 	.word	0x0800a01c
 8006360:	0800a01c 	.word	0x0800a01c
 8006364:	0800a020 	.word	0x0800a020

08006368 <__retarget_lock_init_recursive>:
 8006368:	4770      	bx	lr

0800636a <__retarget_lock_acquire_recursive>:
 800636a:	4770      	bx	lr

0800636c <__retarget_lock_release_recursive>:
 800636c:	4770      	bx	lr
	...

08006370 <nanf>:
 8006370:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006378 <nanf+0x8>
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop
 8006378:	7fc00000 	.word	0x7fc00000

0800637c <quorem>:
 800637c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006380:	6903      	ldr	r3, [r0, #16]
 8006382:	690c      	ldr	r4, [r1, #16]
 8006384:	42a3      	cmp	r3, r4
 8006386:	4607      	mov	r7, r0
 8006388:	db7e      	blt.n	8006488 <quorem+0x10c>
 800638a:	3c01      	subs	r4, #1
 800638c:	f101 0814 	add.w	r8, r1, #20
 8006390:	00a3      	lsls	r3, r4, #2
 8006392:	f100 0514 	add.w	r5, r0, #20
 8006396:	9300      	str	r3, [sp, #0]
 8006398:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800639c:	9301      	str	r3, [sp, #4]
 800639e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80063a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80063a6:	3301      	adds	r3, #1
 80063a8:	429a      	cmp	r2, r3
 80063aa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80063ae:	fbb2 f6f3 	udiv	r6, r2, r3
 80063b2:	d32e      	bcc.n	8006412 <quorem+0x96>
 80063b4:	f04f 0a00 	mov.w	sl, #0
 80063b8:	46c4      	mov	ip, r8
 80063ba:	46ae      	mov	lr, r5
 80063bc:	46d3      	mov	fp, sl
 80063be:	f85c 3b04 	ldr.w	r3, [ip], #4
 80063c2:	b298      	uxth	r0, r3
 80063c4:	fb06 a000 	mla	r0, r6, r0, sl
 80063c8:	0c02      	lsrs	r2, r0, #16
 80063ca:	0c1b      	lsrs	r3, r3, #16
 80063cc:	fb06 2303 	mla	r3, r6, r3, r2
 80063d0:	f8de 2000 	ldr.w	r2, [lr]
 80063d4:	b280      	uxth	r0, r0
 80063d6:	b292      	uxth	r2, r2
 80063d8:	1a12      	subs	r2, r2, r0
 80063da:	445a      	add	r2, fp
 80063dc:	f8de 0000 	ldr.w	r0, [lr]
 80063e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80063ea:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80063ee:	b292      	uxth	r2, r2
 80063f0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80063f4:	45e1      	cmp	r9, ip
 80063f6:	f84e 2b04 	str.w	r2, [lr], #4
 80063fa:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80063fe:	d2de      	bcs.n	80063be <quorem+0x42>
 8006400:	9b00      	ldr	r3, [sp, #0]
 8006402:	58eb      	ldr	r3, [r5, r3]
 8006404:	b92b      	cbnz	r3, 8006412 <quorem+0x96>
 8006406:	9b01      	ldr	r3, [sp, #4]
 8006408:	3b04      	subs	r3, #4
 800640a:	429d      	cmp	r5, r3
 800640c:	461a      	mov	r2, r3
 800640e:	d32f      	bcc.n	8006470 <quorem+0xf4>
 8006410:	613c      	str	r4, [r7, #16]
 8006412:	4638      	mov	r0, r7
 8006414:	f001 f9c8 	bl	80077a8 <__mcmp>
 8006418:	2800      	cmp	r0, #0
 800641a:	db25      	blt.n	8006468 <quorem+0xec>
 800641c:	4629      	mov	r1, r5
 800641e:	2000      	movs	r0, #0
 8006420:	f858 2b04 	ldr.w	r2, [r8], #4
 8006424:	f8d1 c000 	ldr.w	ip, [r1]
 8006428:	fa1f fe82 	uxth.w	lr, r2
 800642c:	fa1f f38c 	uxth.w	r3, ip
 8006430:	eba3 030e 	sub.w	r3, r3, lr
 8006434:	4403      	add	r3, r0
 8006436:	0c12      	lsrs	r2, r2, #16
 8006438:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800643c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006440:	b29b      	uxth	r3, r3
 8006442:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006446:	45c1      	cmp	r9, r8
 8006448:	f841 3b04 	str.w	r3, [r1], #4
 800644c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006450:	d2e6      	bcs.n	8006420 <quorem+0xa4>
 8006452:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006456:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800645a:	b922      	cbnz	r2, 8006466 <quorem+0xea>
 800645c:	3b04      	subs	r3, #4
 800645e:	429d      	cmp	r5, r3
 8006460:	461a      	mov	r2, r3
 8006462:	d30b      	bcc.n	800647c <quorem+0x100>
 8006464:	613c      	str	r4, [r7, #16]
 8006466:	3601      	adds	r6, #1
 8006468:	4630      	mov	r0, r6
 800646a:	b003      	add	sp, #12
 800646c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006470:	6812      	ldr	r2, [r2, #0]
 8006472:	3b04      	subs	r3, #4
 8006474:	2a00      	cmp	r2, #0
 8006476:	d1cb      	bne.n	8006410 <quorem+0x94>
 8006478:	3c01      	subs	r4, #1
 800647a:	e7c6      	b.n	800640a <quorem+0x8e>
 800647c:	6812      	ldr	r2, [r2, #0]
 800647e:	3b04      	subs	r3, #4
 8006480:	2a00      	cmp	r2, #0
 8006482:	d1ef      	bne.n	8006464 <quorem+0xe8>
 8006484:	3c01      	subs	r4, #1
 8006486:	e7ea      	b.n	800645e <quorem+0xe2>
 8006488:	2000      	movs	r0, #0
 800648a:	e7ee      	b.n	800646a <quorem+0xee>
 800648c:	0000      	movs	r0, r0
	...

08006490 <_dtoa_r>:
 8006490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006494:	69c7      	ldr	r7, [r0, #28]
 8006496:	b097      	sub	sp, #92	@ 0x5c
 8006498:	ed8d 0b04 	vstr	d0, [sp, #16]
 800649c:	ec55 4b10 	vmov	r4, r5, d0
 80064a0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80064a2:	9107      	str	r1, [sp, #28]
 80064a4:	4681      	mov	r9, r0
 80064a6:	920c      	str	r2, [sp, #48]	@ 0x30
 80064a8:	9311      	str	r3, [sp, #68]	@ 0x44
 80064aa:	b97f      	cbnz	r7, 80064cc <_dtoa_r+0x3c>
 80064ac:	2010      	movs	r0, #16
 80064ae:	f000 fe09 	bl	80070c4 <malloc>
 80064b2:	4602      	mov	r2, r0
 80064b4:	f8c9 001c 	str.w	r0, [r9, #28]
 80064b8:	b920      	cbnz	r0, 80064c4 <_dtoa_r+0x34>
 80064ba:	4ba9      	ldr	r3, [pc, #676]	@ (8006760 <_dtoa_r+0x2d0>)
 80064bc:	21ef      	movs	r1, #239	@ 0xef
 80064be:	48a9      	ldr	r0, [pc, #676]	@ (8006764 <_dtoa_r+0x2d4>)
 80064c0:	f002 fc3a 	bl	8008d38 <__assert_func>
 80064c4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80064c8:	6007      	str	r7, [r0, #0]
 80064ca:	60c7      	str	r7, [r0, #12]
 80064cc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80064d0:	6819      	ldr	r1, [r3, #0]
 80064d2:	b159      	cbz	r1, 80064ec <_dtoa_r+0x5c>
 80064d4:	685a      	ldr	r2, [r3, #4]
 80064d6:	604a      	str	r2, [r1, #4]
 80064d8:	2301      	movs	r3, #1
 80064da:	4093      	lsls	r3, r2
 80064dc:	608b      	str	r3, [r1, #8]
 80064de:	4648      	mov	r0, r9
 80064e0:	f000 fee6 	bl	80072b0 <_Bfree>
 80064e4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80064e8:	2200      	movs	r2, #0
 80064ea:	601a      	str	r2, [r3, #0]
 80064ec:	1e2b      	subs	r3, r5, #0
 80064ee:	bfb9      	ittee	lt
 80064f0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80064f4:	9305      	strlt	r3, [sp, #20]
 80064f6:	2300      	movge	r3, #0
 80064f8:	6033      	strge	r3, [r6, #0]
 80064fa:	9f05      	ldr	r7, [sp, #20]
 80064fc:	4b9a      	ldr	r3, [pc, #616]	@ (8006768 <_dtoa_r+0x2d8>)
 80064fe:	bfbc      	itt	lt
 8006500:	2201      	movlt	r2, #1
 8006502:	6032      	strlt	r2, [r6, #0]
 8006504:	43bb      	bics	r3, r7
 8006506:	d112      	bne.n	800652e <_dtoa_r+0x9e>
 8006508:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800650a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800650e:	6013      	str	r3, [r2, #0]
 8006510:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006514:	4323      	orrs	r3, r4
 8006516:	f000 855a 	beq.w	8006fce <_dtoa_r+0xb3e>
 800651a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800651c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800677c <_dtoa_r+0x2ec>
 8006520:	2b00      	cmp	r3, #0
 8006522:	f000 855c 	beq.w	8006fde <_dtoa_r+0xb4e>
 8006526:	f10a 0303 	add.w	r3, sl, #3
 800652a:	f000 bd56 	b.w	8006fda <_dtoa_r+0xb4a>
 800652e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006532:	2200      	movs	r2, #0
 8006534:	ec51 0b17 	vmov	r0, r1, d7
 8006538:	2300      	movs	r3, #0
 800653a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800653e:	f7fa faeb 	bl	8000b18 <__aeabi_dcmpeq>
 8006542:	4680      	mov	r8, r0
 8006544:	b158      	cbz	r0, 800655e <_dtoa_r+0xce>
 8006546:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006548:	2301      	movs	r3, #1
 800654a:	6013      	str	r3, [r2, #0]
 800654c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800654e:	b113      	cbz	r3, 8006556 <_dtoa_r+0xc6>
 8006550:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006552:	4b86      	ldr	r3, [pc, #536]	@ (800676c <_dtoa_r+0x2dc>)
 8006554:	6013      	str	r3, [r2, #0]
 8006556:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8006780 <_dtoa_r+0x2f0>
 800655a:	f000 bd40 	b.w	8006fde <_dtoa_r+0xb4e>
 800655e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8006562:	aa14      	add	r2, sp, #80	@ 0x50
 8006564:	a915      	add	r1, sp, #84	@ 0x54
 8006566:	4648      	mov	r0, r9
 8006568:	f001 fa3e 	bl	80079e8 <__d2b>
 800656c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006570:	9002      	str	r0, [sp, #8]
 8006572:	2e00      	cmp	r6, #0
 8006574:	d078      	beq.n	8006668 <_dtoa_r+0x1d8>
 8006576:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006578:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800657c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006580:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006584:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006588:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800658c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006590:	4619      	mov	r1, r3
 8006592:	2200      	movs	r2, #0
 8006594:	4b76      	ldr	r3, [pc, #472]	@ (8006770 <_dtoa_r+0x2e0>)
 8006596:	f7f9 fe9f 	bl	80002d8 <__aeabi_dsub>
 800659a:	a36b      	add	r3, pc, #428	@ (adr r3, 8006748 <_dtoa_r+0x2b8>)
 800659c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a0:	f7fa f852 	bl	8000648 <__aeabi_dmul>
 80065a4:	a36a      	add	r3, pc, #424	@ (adr r3, 8006750 <_dtoa_r+0x2c0>)
 80065a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065aa:	f7f9 fe97 	bl	80002dc <__adddf3>
 80065ae:	4604      	mov	r4, r0
 80065b0:	4630      	mov	r0, r6
 80065b2:	460d      	mov	r5, r1
 80065b4:	f7f9 ffde 	bl	8000574 <__aeabi_i2d>
 80065b8:	a367      	add	r3, pc, #412	@ (adr r3, 8006758 <_dtoa_r+0x2c8>)
 80065ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065be:	f7fa f843 	bl	8000648 <__aeabi_dmul>
 80065c2:	4602      	mov	r2, r0
 80065c4:	460b      	mov	r3, r1
 80065c6:	4620      	mov	r0, r4
 80065c8:	4629      	mov	r1, r5
 80065ca:	f7f9 fe87 	bl	80002dc <__adddf3>
 80065ce:	4604      	mov	r4, r0
 80065d0:	460d      	mov	r5, r1
 80065d2:	f7fa fae9 	bl	8000ba8 <__aeabi_d2iz>
 80065d6:	2200      	movs	r2, #0
 80065d8:	4607      	mov	r7, r0
 80065da:	2300      	movs	r3, #0
 80065dc:	4620      	mov	r0, r4
 80065de:	4629      	mov	r1, r5
 80065e0:	f7fa faa4 	bl	8000b2c <__aeabi_dcmplt>
 80065e4:	b140      	cbz	r0, 80065f8 <_dtoa_r+0x168>
 80065e6:	4638      	mov	r0, r7
 80065e8:	f7f9 ffc4 	bl	8000574 <__aeabi_i2d>
 80065ec:	4622      	mov	r2, r4
 80065ee:	462b      	mov	r3, r5
 80065f0:	f7fa fa92 	bl	8000b18 <__aeabi_dcmpeq>
 80065f4:	b900      	cbnz	r0, 80065f8 <_dtoa_r+0x168>
 80065f6:	3f01      	subs	r7, #1
 80065f8:	2f16      	cmp	r7, #22
 80065fa:	d852      	bhi.n	80066a2 <_dtoa_r+0x212>
 80065fc:	4b5d      	ldr	r3, [pc, #372]	@ (8006774 <_dtoa_r+0x2e4>)
 80065fe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006606:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800660a:	f7fa fa8f 	bl	8000b2c <__aeabi_dcmplt>
 800660e:	2800      	cmp	r0, #0
 8006610:	d049      	beq.n	80066a6 <_dtoa_r+0x216>
 8006612:	3f01      	subs	r7, #1
 8006614:	2300      	movs	r3, #0
 8006616:	9310      	str	r3, [sp, #64]	@ 0x40
 8006618:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800661a:	1b9b      	subs	r3, r3, r6
 800661c:	1e5a      	subs	r2, r3, #1
 800661e:	bf45      	ittet	mi
 8006620:	f1c3 0301 	rsbmi	r3, r3, #1
 8006624:	9300      	strmi	r3, [sp, #0]
 8006626:	2300      	movpl	r3, #0
 8006628:	2300      	movmi	r3, #0
 800662a:	9206      	str	r2, [sp, #24]
 800662c:	bf54      	ite	pl
 800662e:	9300      	strpl	r3, [sp, #0]
 8006630:	9306      	strmi	r3, [sp, #24]
 8006632:	2f00      	cmp	r7, #0
 8006634:	db39      	blt.n	80066aa <_dtoa_r+0x21a>
 8006636:	9b06      	ldr	r3, [sp, #24]
 8006638:	970d      	str	r7, [sp, #52]	@ 0x34
 800663a:	443b      	add	r3, r7
 800663c:	9306      	str	r3, [sp, #24]
 800663e:	2300      	movs	r3, #0
 8006640:	9308      	str	r3, [sp, #32]
 8006642:	9b07      	ldr	r3, [sp, #28]
 8006644:	2b09      	cmp	r3, #9
 8006646:	d863      	bhi.n	8006710 <_dtoa_r+0x280>
 8006648:	2b05      	cmp	r3, #5
 800664a:	bfc4      	itt	gt
 800664c:	3b04      	subgt	r3, #4
 800664e:	9307      	strgt	r3, [sp, #28]
 8006650:	9b07      	ldr	r3, [sp, #28]
 8006652:	f1a3 0302 	sub.w	r3, r3, #2
 8006656:	bfcc      	ite	gt
 8006658:	2400      	movgt	r4, #0
 800665a:	2401      	movle	r4, #1
 800665c:	2b03      	cmp	r3, #3
 800665e:	d863      	bhi.n	8006728 <_dtoa_r+0x298>
 8006660:	e8df f003 	tbb	[pc, r3]
 8006664:	2b375452 	.word	0x2b375452
 8006668:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800666c:	441e      	add	r6, r3
 800666e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006672:	2b20      	cmp	r3, #32
 8006674:	bfc1      	itttt	gt
 8006676:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800667a:	409f      	lslgt	r7, r3
 800667c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006680:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006684:	bfd6      	itet	le
 8006686:	f1c3 0320 	rsble	r3, r3, #32
 800668a:	ea47 0003 	orrgt.w	r0, r7, r3
 800668e:	fa04 f003 	lslle.w	r0, r4, r3
 8006692:	f7f9 ff5f 	bl	8000554 <__aeabi_ui2d>
 8006696:	2201      	movs	r2, #1
 8006698:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800669c:	3e01      	subs	r6, #1
 800669e:	9212      	str	r2, [sp, #72]	@ 0x48
 80066a0:	e776      	b.n	8006590 <_dtoa_r+0x100>
 80066a2:	2301      	movs	r3, #1
 80066a4:	e7b7      	b.n	8006616 <_dtoa_r+0x186>
 80066a6:	9010      	str	r0, [sp, #64]	@ 0x40
 80066a8:	e7b6      	b.n	8006618 <_dtoa_r+0x188>
 80066aa:	9b00      	ldr	r3, [sp, #0]
 80066ac:	1bdb      	subs	r3, r3, r7
 80066ae:	9300      	str	r3, [sp, #0]
 80066b0:	427b      	negs	r3, r7
 80066b2:	9308      	str	r3, [sp, #32]
 80066b4:	2300      	movs	r3, #0
 80066b6:	930d      	str	r3, [sp, #52]	@ 0x34
 80066b8:	e7c3      	b.n	8006642 <_dtoa_r+0x1b2>
 80066ba:	2301      	movs	r3, #1
 80066bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80066be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80066c0:	eb07 0b03 	add.w	fp, r7, r3
 80066c4:	f10b 0301 	add.w	r3, fp, #1
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	9303      	str	r3, [sp, #12]
 80066cc:	bfb8      	it	lt
 80066ce:	2301      	movlt	r3, #1
 80066d0:	e006      	b.n	80066e0 <_dtoa_r+0x250>
 80066d2:	2301      	movs	r3, #1
 80066d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80066d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80066d8:	2b00      	cmp	r3, #0
 80066da:	dd28      	ble.n	800672e <_dtoa_r+0x29e>
 80066dc:	469b      	mov	fp, r3
 80066de:	9303      	str	r3, [sp, #12]
 80066e0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80066e4:	2100      	movs	r1, #0
 80066e6:	2204      	movs	r2, #4
 80066e8:	f102 0514 	add.w	r5, r2, #20
 80066ec:	429d      	cmp	r5, r3
 80066ee:	d926      	bls.n	800673e <_dtoa_r+0x2ae>
 80066f0:	6041      	str	r1, [r0, #4]
 80066f2:	4648      	mov	r0, r9
 80066f4:	f000 fd9c 	bl	8007230 <_Balloc>
 80066f8:	4682      	mov	sl, r0
 80066fa:	2800      	cmp	r0, #0
 80066fc:	d142      	bne.n	8006784 <_dtoa_r+0x2f4>
 80066fe:	4b1e      	ldr	r3, [pc, #120]	@ (8006778 <_dtoa_r+0x2e8>)
 8006700:	4602      	mov	r2, r0
 8006702:	f240 11af 	movw	r1, #431	@ 0x1af
 8006706:	e6da      	b.n	80064be <_dtoa_r+0x2e>
 8006708:	2300      	movs	r3, #0
 800670a:	e7e3      	b.n	80066d4 <_dtoa_r+0x244>
 800670c:	2300      	movs	r3, #0
 800670e:	e7d5      	b.n	80066bc <_dtoa_r+0x22c>
 8006710:	2401      	movs	r4, #1
 8006712:	2300      	movs	r3, #0
 8006714:	9307      	str	r3, [sp, #28]
 8006716:	9409      	str	r4, [sp, #36]	@ 0x24
 8006718:	f04f 3bff 	mov.w	fp, #4294967295
 800671c:	2200      	movs	r2, #0
 800671e:	f8cd b00c 	str.w	fp, [sp, #12]
 8006722:	2312      	movs	r3, #18
 8006724:	920c      	str	r2, [sp, #48]	@ 0x30
 8006726:	e7db      	b.n	80066e0 <_dtoa_r+0x250>
 8006728:	2301      	movs	r3, #1
 800672a:	9309      	str	r3, [sp, #36]	@ 0x24
 800672c:	e7f4      	b.n	8006718 <_dtoa_r+0x288>
 800672e:	f04f 0b01 	mov.w	fp, #1
 8006732:	f8cd b00c 	str.w	fp, [sp, #12]
 8006736:	465b      	mov	r3, fp
 8006738:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800673c:	e7d0      	b.n	80066e0 <_dtoa_r+0x250>
 800673e:	3101      	adds	r1, #1
 8006740:	0052      	lsls	r2, r2, #1
 8006742:	e7d1      	b.n	80066e8 <_dtoa_r+0x258>
 8006744:	f3af 8000 	nop.w
 8006748:	636f4361 	.word	0x636f4361
 800674c:	3fd287a7 	.word	0x3fd287a7
 8006750:	8b60c8b3 	.word	0x8b60c8b3
 8006754:	3fc68a28 	.word	0x3fc68a28
 8006758:	509f79fb 	.word	0x509f79fb
 800675c:	3fd34413 	.word	0x3fd34413
 8006760:	08009c32 	.word	0x08009c32
 8006764:	08009c49 	.word	0x08009c49
 8006768:	7ff00000 	.word	0x7ff00000
 800676c:	08009bfd 	.word	0x08009bfd
 8006770:	3ff80000 	.word	0x3ff80000
 8006774:	08009df8 	.word	0x08009df8
 8006778:	08009ca1 	.word	0x08009ca1
 800677c:	08009c2e 	.word	0x08009c2e
 8006780:	08009bfc 	.word	0x08009bfc
 8006784:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006788:	6018      	str	r0, [r3, #0]
 800678a:	9b03      	ldr	r3, [sp, #12]
 800678c:	2b0e      	cmp	r3, #14
 800678e:	f200 80a1 	bhi.w	80068d4 <_dtoa_r+0x444>
 8006792:	2c00      	cmp	r4, #0
 8006794:	f000 809e 	beq.w	80068d4 <_dtoa_r+0x444>
 8006798:	2f00      	cmp	r7, #0
 800679a:	dd33      	ble.n	8006804 <_dtoa_r+0x374>
 800679c:	4b9c      	ldr	r3, [pc, #624]	@ (8006a10 <_dtoa_r+0x580>)
 800679e:	f007 020f 	and.w	r2, r7, #15
 80067a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067a6:	ed93 7b00 	vldr	d7, [r3]
 80067aa:	05f8      	lsls	r0, r7, #23
 80067ac:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80067b0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80067b4:	d516      	bpl.n	80067e4 <_dtoa_r+0x354>
 80067b6:	4b97      	ldr	r3, [pc, #604]	@ (8006a14 <_dtoa_r+0x584>)
 80067b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80067bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80067c0:	f7fa f86c 	bl	800089c <__aeabi_ddiv>
 80067c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80067c8:	f004 040f 	and.w	r4, r4, #15
 80067cc:	2603      	movs	r6, #3
 80067ce:	4d91      	ldr	r5, [pc, #580]	@ (8006a14 <_dtoa_r+0x584>)
 80067d0:	b954      	cbnz	r4, 80067e8 <_dtoa_r+0x358>
 80067d2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80067d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067da:	f7fa f85f 	bl	800089c <__aeabi_ddiv>
 80067de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80067e2:	e028      	b.n	8006836 <_dtoa_r+0x3a6>
 80067e4:	2602      	movs	r6, #2
 80067e6:	e7f2      	b.n	80067ce <_dtoa_r+0x33e>
 80067e8:	07e1      	lsls	r1, r4, #31
 80067ea:	d508      	bpl.n	80067fe <_dtoa_r+0x36e>
 80067ec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80067f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80067f4:	f7f9 ff28 	bl	8000648 <__aeabi_dmul>
 80067f8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80067fc:	3601      	adds	r6, #1
 80067fe:	1064      	asrs	r4, r4, #1
 8006800:	3508      	adds	r5, #8
 8006802:	e7e5      	b.n	80067d0 <_dtoa_r+0x340>
 8006804:	f000 80af 	beq.w	8006966 <_dtoa_r+0x4d6>
 8006808:	427c      	negs	r4, r7
 800680a:	4b81      	ldr	r3, [pc, #516]	@ (8006a10 <_dtoa_r+0x580>)
 800680c:	4d81      	ldr	r5, [pc, #516]	@ (8006a14 <_dtoa_r+0x584>)
 800680e:	f004 020f 	and.w	r2, r4, #15
 8006812:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800681a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800681e:	f7f9 ff13 	bl	8000648 <__aeabi_dmul>
 8006822:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006826:	1124      	asrs	r4, r4, #4
 8006828:	2300      	movs	r3, #0
 800682a:	2602      	movs	r6, #2
 800682c:	2c00      	cmp	r4, #0
 800682e:	f040 808f 	bne.w	8006950 <_dtoa_r+0x4c0>
 8006832:	2b00      	cmp	r3, #0
 8006834:	d1d3      	bne.n	80067de <_dtoa_r+0x34e>
 8006836:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006838:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800683c:	2b00      	cmp	r3, #0
 800683e:	f000 8094 	beq.w	800696a <_dtoa_r+0x4da>
 8006842:	4b75      	ldr	r3, [pc, #468]	@ (8006a18 <_dtoa_r+0x588>)
 8006844:	2200      	movs	r2, #0
 8006846:	4620      	mov	r0, r4
 8006848:	4629      	mov	r1, r5
 800684a:	f7fa f96f 	bl	8000b2c <__aeabi_dcmplt>
 800684e:	2800      	cmp	r0, #0
 8006850:	f000 808b 	beq.w	800696a <_dtoa_r+0x4da>
 8006854:	9b03      	ldr	r3, [sp, #12]
 8006856:	2b00      	cmp	r3, #0
 8006858:	f000 8087 	beq.w	800696a <_dtoa_r+0x4da>
 800685c:	f1bb 0f00 	cmp.w	fp, #0
 8006860:	dd34      	ble.n	80068cc <_dtoa_r+0x43c>
 8006862:	4620      	mov	r0, r4
 8006864:	4b6d      	ldr	r3, [pc, #436]	@ (8006a1c <_dtoa_r+0x58c>)
 8006866:	2200      	movs	r2, #0
 8006868:	4629      	mov	r1, r5
 800686a:	f7f9 feed 	bl	8000648 <__aeabi_dmul>
 800686e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006872:	f107 38ff 	add.w	r8, r7, #4294967295
 8006876:	3601      	adds	r6, #1
 8006878:	465c      	mov	r4, fp
 800687a:	4630      	mov	r0, r6
 800687c:	f7f9 fe7a 	bl	8000574 <__aeabi_i2d>
 8006880:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006884:	f7f9 fee0 	bl	8000648 <__aeabi_dmul>
 8006888:	4b65      	ldr	r3, [pc, #404]	@ (8006a20 <_dtoa_r+0x590>)
 800688a:	2200      	movs	r2, #0
 800688c:	f7f9 fd26 	bl	80002dc <__adddf3>
 8006890:	4605      	mov	r5, r0
 8006892:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006896:	2c00      	cmp	r4, #0
 8006898:	d16a      	bne.n	8006970 <_dtoa_r+0x4e0>
 800689a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800689e:	4b61      	ldr	r3, [pc, #388]	@ (8006a24 <_dtoa_r+0x594>)
 80068a0:	2200      	movs	r2, #0
 80068a2:	f7f9 fd19 	bl	80002d8 <__aeabi_dsub>
 80068a6:	4602      	mov	r2, r0
 80068a8:	460b      	mov	r3, r1
 80068aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80068ae:	462a      	mov	r2, r5
 80068b0:	4633      	mov	r3, r6
 80068b2:	f7fa f959 	bl	8000b68 <__aeabi_dcmpgt>
 80068b6:	2800      	cmp	r0, #0
 80068b8:	f040 8298 	bne.w	8006dec <_dtoa_r+0x95c>
 80068bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068c0:	462a      	mov	r2, r5
 80068c2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80068c6:	f7fa f931 	bl	8000b2c <__aeabi_dcmplt>
 80068ca:	bb38      	cbnz	r0, 800691c <_dtoa_r+0x48c>
 80068cc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80068d0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80068d4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	f2c0 8157 	blt.w	8006b8a <_dtoa_r+0x6fa>
 80068dc:	2f0e      	cmp	r7, #14
 80068de:	f300 8154 	bgt.w	8006b8a <_dtoa_r+0x6fa>
 80068e2:	4b4b      	ldr	r3, [pc, #300]	@ (8006a10 <_dtoa_r+0x580>)
 80068e4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80068e8:	ed93 7b00 	vldr	d7, [r3]
 80068ec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	ed8d 7b00 	vstr	d7, [sp]
 80068f4:	f280 80e5 	bge.w	8006ac2 <_dtoa_r+0x632>
 80068f8:	9b03      	ldr	r3, [sp, #12]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	f300 80e1 	bgt.w	8006ac2 <_dtoa_r+0x632>
 8006900:	d10c      	bne.n	800691c <_dtoa_r+0x48c>
 8006902:	4b48      	ldr	r3, [pc, #288]	@ (8006a24 <_dtoa_r+0x594>)
 8006904:	2200      	movs	r2, #0
 8006906:	ec51 0b17 	vmov	r0, r1, d7
 800690a:	f7f9 fe9d 	bl	8000648 <__aeabi_dmul>
 800690e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006912:	f7fa f91f 	bl	8000b54 <__aeabi_dcmpge>
 8006916:	2800      	cmp	r0, #0
 8006918:	f000 8266 	beq.w	8006de8 <_dtoa_r+0x958>
 800691c:	2400      	movs	r4, #0
 800691e:	4625      	mov	r5, r4
 8006920:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006922:	4656      	mov	r6, sl
 8006924:	ea6f 0803 	mvn.w	r8, r3
 8006928:	2700      	movs	r7, #0
 800692a:	4621      	mov	r1, r4
 800692c:	4648      	mov	r0, r9
 800692e:	f000 fcbf 	bl	80072b0 <_Bfree>
 8006932:	2d00      	cmp	r5, #0
 8006934:	f000 80bd 	beq.w	8006ab2 <_dtoa_r+0x622>
 8006938:	b12f      	cbz	r7, 8006946 <_dtoa_r+0x4b6>
 800693a:	42af      	cmp	r7, r5
 800693c:	d003      	beq.n	8006946 <_dtoa_r+0x4b6>
 800693e:	4639      	mov	r1, r7
 8006940:	4648      	mov	r0, r9
 8006942:	f000 fcb5 	bl	80072b0 <_Bfree>
 8006946:	4629      	mov	r1, r5
 8006948:	4648      	mov	r0, r9
 800694a:	f000 fcb1 	bl	80072b0 <_Bfree>
 800694e:	e0b0      	b.n	8006ab2 <_dtoa_r+0x622>
 8006950:	07e2      	lsls	r2, r4, #31
 8006952:	d505      	bpl.n	8006960 <_dtoa_r+0x4d0>
 8006954:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006958:	f7f9 fe76 	bl	8000648 <__aeabi_dmul>
 800695c:	3601      	adds	r6, #1
 800695e:	2301      	movs	r3, #1
 8006960:	1064      	asrs	r4, r4, #1
 8006962:	3508      	adds	r5, #8
 8006964:	e762      	b.n	800682c <_dtoa_r+0x39c>
 8006966:	2602      	movs	r6, #2
 8006968:	e765      	b.n	8006836 <_dtoa_r+0x3a6>
 800696a:	9c03      	ldr	r4, [sp, #12]
 800696c:	46b8      	mov	r8, r7
 800696e:	e784      	b.n	800687a <_dtoa_r+0x3ea>
 8006970:	4b27      	ldr	r3, [pc, #156]	@ (8006a10 <_dtoa_r+0x580>)
 8006972:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006974:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006978:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800697c:	4454      	add	r4, sl
 800697e:	2900      	cmp	r1, #0
 8006980:	d054      	beq.n	8006a2c <_dtoa_r+0x59c>
 8006982:	4929      	ldr	r1, [pc, #164]	@ (8006a28 <_dtoa_r+0x598>)
 8006984:	2000      	movs	r0, #0
 8006986:	f7f9 ff89 	bl	800089c <__aeabi_ddiv>
 800698a:	4633      	mov	r3, r6
 800698c:	462a      	mov	r2, r5
 800698e:	f7f9 fca3 	bl	80002d8 <__aeabi_dsub>
 8006992:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006996:	4656      	mov	r6, sl
 8006998:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800699c:	f7fa f904 	bl	8000ba8 <__aeabi_d2iz>
 80069a0:	4605      	mov	r5, r0
 80069a2:	f7f9 fde7 	bl	8000574 <__aeabi_i2d>
 80069a6:	4602      	mov	r2, r0
 80069a8:	460b      	mov	r3, r1
 80069aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069ae:	f7f9 fc93 	bl	80002d8 <__aeabi_dsub>
 80069b2:	3530      	adds	r5, #48	@ 0x30
 80069b4:	4602      	mov	r2, r0
 80069b6:	460b      	mov	r3, r1
 80069b8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80069bc:	f806 5b01 	strb.w	r5, [r6], #1
 80069c0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80069c4:	f7fa f8b2 	bl	8000b2c <__aeabi_dcmplt>
 80069c8:	2800      	cmp	r0, #0
 80069ca:	d172      	bne.n	8006ab2 <_dtoa_r+0x622>
 80069cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069d0:	4911      	ldr	r1, [pc, #68]	@ (8006a18 <_dtoa_r+0x588>)
 80069d2:	2000      	movs	r0, #0
 80069d4:	f7f9 fc80 	bl	80002d8 <__aeabi_dsub>
 80069d8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80069dc:	f7fa f8a6 	bl	8000b2c <__aeabi_dcmplt>
 80069e0:	2800      	cmp	r0, #0
 80069e2:	f040 80b4 	bne.w	8006b4e <_dtoa_r+0x6be>
 80069e6:	42a6      	cmp	r6, r4
 80069e8:	f43f af70 	beq.w	80068cc <_dtoa_r+0x43c>
 80069ec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80069f0:	4b0a      	ldr	r3, [pc, #40]	@ (8006a1c <_dtoa_r+0x58c>)
 80069f2:	2200      	movs	r2, #0
 80069f4:	f7f9 fe28 	bl	8000648 <__aeabi_dmul>
 80069f8:	4b08      	ldr	r3, [pc, #32]	@ (8006a1c <_dtoa_r+0x58c>)
 80069fa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80069fe:	2200      	movs	r2, #0
 8006a00:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a04:	f7f9 fe20 	bl	8000648 <__aeabi_dmul>
 8006a08:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006a0c:	e7c4      	b.n	8006998 <_dtoa_r+0x508>
 8006a0e:	bf00      	nop
 8006a10:	08009df8 	.word	0x08009df8
 8006a14:	08009dd0 	.word	0x08009dd0
 8006a18:	3ff00000 	.word	0x3ff00000
 8006a1c:	40240000 	.word	0x40240000
 8006a20:	401c0000 	.word	0x401c0000
 8006a24:	40140000 	.word	0x40140000
 8006a28:	3fe00000 	.word	0x3fe00000
 8006a2c:	4631      	mov	r1, r6
 8006a2e:	4628      	mov	r0, r5
 8006a30:	f7f9 fe0a 	bl	8000648 <__aeabi_dmul>
 8006a34:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006a38:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006a3a:	4656      	mov	r6, sl
 8006a3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a40:	f7fa f8b2 	bl	8000ba8 <__aeabi_d2iz>
 8006a44:	4605      	mov	r5, r0
 8006a46:	f7f9 fd95 	bl	8000574 <__aeabi_i2d>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	460b      	mov	r3, r1
 8006a4e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a52:	f7f9 fc41 	bl	80002d8 <__aeabi_dsub>
 8006a56:	3530      	adds	r5, #48	@ 0x30
 8006a58:	f806 5b01 	strb.w	r5, [r6], #1
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	460b      	mov	r3, r1
 8006a60:	42a6      	cmp	r6, r4
 8006a62:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006a66:	f04f 0200 	mov.w	r2, #0
 8006a6a:	d124      	bne.n	8006ab6 <_dtoa_r+0x626>
 8006a6c:	4baf      	ldr	r3, [pc, #700]	@ (8006d2c <_dtoa_r+0x89c>)
 8006a6e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006a72:	f7f9 fc33 	bl	80002dc <__adddf3>
 8006a76:	4602      	mov	r2, r0
 8006a78:	460b      	mov	r3, r1
 8006a7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a7e:	f7fa f873 	bl	8000b68 <__aeabi_dcmpgt>
 8006a82:	2800      	cmp	r0, #0
 8006a84:	d163      	bne.n	8006b4e <_dtoa_r+0x6be>
 8006a86:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006a8a:	49a8      	ldr	r1, [pc, #672]	@ (8006d2c <_dtoa_r+0x89c>)
 8006a8c:	2000      	movs	r0, #0
 8006a8e:	f7f9 fc23 	bl	80002d8 <__aeabi_dsub>
 8006a92:	4602      	mov	r2, r0
 8006a94:	460b      	mov	r3, r1
 8006a96:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a9a:	f7fa f847 	bl	8000b2c <__aeabi_dcmplt>
 8006a9e:	2800      	cmp	r0, #0
 8006aa0:	f43f af14 	beq.w	80068cc <_dtoa_r+0x43c>
 8006aa4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006aa6:	1e73      	subs	r3, r6, #1
 8006aa8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006aaa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006aae:	2b30      	cmp	r3, #48	@ 0x30
 8006ab0:	d0f8      	beq.n	8006aa4 <_dtoa_r+0x614>
 8006ab2:	4647      	mov	r7, r8
 8006ab4:	e03b      	b.n	8006b2e <_dtoa_r+0x69e>
 8006ab6:	4b9e      	ldr	r3, [pc, #632]	@ (8006d30 <_dtoa_r+0x8a0>)
 8006ab8:	f7f9 fdc6 	bl	8000648 <__aeabi_dmul>
 8006abc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ac0:	e7bc      	b.n	8006a3c <_dtoa_r+0x5ac>
 8006ac2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006ac6:	4656      	mov	r6, sl
 8006ac8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006acc:	4620      	mov	r0, r4
 8006ace:	4629      	mov	r1, r5
 8006ad0:	f7f9 fee4 	bl	800089c <__aeabi_ddiv>
 8006ad4:	f7fa f868 	bl	8000ba8 <__aeabi_d2iz>
 8006ad8:	4680      	mov	r8, r0
 8006ada:	f7f9 fd4b 	bl	8000574 <__aeabi_i2d>
 8006ade:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ae2:	f7f9 fdb1 	bl	8000648 <__aeabi_dmul>
 8006ae6:	4602      	mov	r2, r0
 8006ae8:	460b      	mov	r3, r1
 8006aea:	4620      	mov	r0, r4
 8006aec:	4629      	mov	r1, r5
 8006aee:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006af2:	f7f9 fbf1 	bl	80002d8 <__aeabi_dsub>
 8006af6:	f806 4b01 	strb.w	r4, [r6], #1
 8006afa:	9d03      	ldr	r5, [sp, #12]
 8006afc:	eba6 040a 	sub.w	r4, r6, sl
 8006b00:	42a5      	cmp	r5, r4
 8006b02:	4602      	mov	r2, r0
 8006b04:	460b      	mov	r3, r1
 8006b06:	d133      	bne.n	8006b70 <_dtoa_r+0x6e0>
 8006b08:	f7f9 fbe8 	bl	80002dc <__adddf3>
 8006b0c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b10:	4604      	mov	r4, r0
 8006b12:	460d      	mov	r5, r1
 8006b14:	f7fa f828 	bl	8000b68 <__aeabi_dcmpgt>
 8006b18:	b9c0      	cbnz	r0, 8006b4c <_dtoa_r+0x6bc>
 8006b1a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b1e:	4620      	mov	r0, r4
 8006b20:	4629      	mov	r1, r5
 8006b22:	f7f9 fff9 	bl	8000b18 <__aeabi_dcmpeq>
 8006b26:	b110      	cbz	r0, 8006b2e <_dtoa_r+0x69e>
 8006b28:	f018 0f01 	tst.w	r8, #1
 8006b2c:	d10e      	bne.n	8006b4c <_dtoa_r+0x6bc>
 8006b2e:	9902      	ldr	r1, [sp, #8]
 8006b30:	4648      	mov	r0, r9
 8006b32:	f000 fbbd 	bl	80072b0 <_Bfree>
 8006b36:	2300      	movs	r3, #0
 8006b38:	7033      	strb	r3, [r6, #0]
 8006b3a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006b3c:	3701      	adds	r7, #1
 8006b3e:	601f      	str	r7, [r3, #0]
 8006b40:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	f000 824b 	beq.w	8006fde <_dtoa_r+0xb4e>
 8006b48:	601e      	str	r6, [r3, #0]
 8006b4a:	e248      	b.n	8006fde <_dtoa_r+0xb4e>
 8006b4c:	46b8      	mov	r8, r7
 8006b4e:	4633      	mov	r3, r6
 8006b50:	461e      	mov	r6, r3
 8006b52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b56:	2a39      	cmp	r2, #57	@ 0x39
 8006b58:	d106      	bne.n	8006b68 <_dtoa_r+0x6d8>
 8006b5a:	459a      	cmp	sl, r3
 8006b5c:	d1f8      	bne.n	8006b50 <_dtoa_r+0x6c0>
 8006b5e:	2230      	movs	r2, #48	@ 0x30
 8006b60:	f108 0801 	add.w	r8, r8, #1
 8006b64:	f88a 2000 	strb.w	r2, [sl]
 8006b68:	781a      	ldrb	r2, [r3, #0]
 8006b6a:	3201      	adds	r2, #1
 8006b6c:	701a      	strb	r2, [r3, #0]
 8006b6e:	e7a0      	b.n	8006ab2 <_dtoa_r+0x622>
 8006b70:	4b6f      	ldr	r3, [pc, #444]	@ (8006d30 <_dtoa_r+0x8a0>)
 8006b72:	2200      	movs	r2, #0
 8006b74:	f7f9 fd68 	bl	8000648 <__aeabi_dmul>
 8006b78:	2200      	movs	r2, #0
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	4604      	mov	r4, r0
 8006b7e:	460d      	mov	r5, r1
 8006b80:	f7f9 ffca 	bl	8000b18 <__aeabi_dcmpeq>
 8006b84:	2800      	cmp	r0, #0
 8006b86:	d09f      	beq.n	8006ac8 <_dtoa_r+0x638>
 8006b88:	e7d1      	b.n	8006b2e <_dtoa_r+0x69e>
 8006b8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b8c:	2a00      	cmp	r2, #0
 8006b8e:	f000 80ea 	beq.w	8006d66 <_dtoa_r+0x8d6>
 8006b92:	9a07      	ldr	r2, [sp, #28]
 8006b94:	2a01      	cmp	r2, #1
 8006b96:	f300 80cd 	bgt.w	8006d34 <_dtoa_r+0x8a4>
 8006b9a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006b9c:	2a00      	cmp	r2, #0
 8006b9e:	f000 80c1 	beq.w	8006d24 <_dtoa_r+0x894>
 8006ba2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006ba6:	9c08      	ldr	r4, [sp, #32]
 8006ba8:	9e00      	ldr	r6, [sp, #0]
 8006baa:	9a00      	ldr	r2, [sp, #0]
 8006bac:	441a      	add	r2, r3
 8006bae:	9200      	str	r2, [sp, #0]
 8006bb0:	9a06      	ldr	r2, [sp, #24]
 8006bb2:	2101      	movs	r1, #1
 8006bb4:	441a      	add	r2, r3
 8006bb6:	4648      	mov	r0, r9
 8006bb8:	9206      	str	r2, [sp, #24]
 8006bba:	f000 fc77 	bl	80074ac <__i2b>
 8006bbe:	4605      	mov	r5, r0
 8006bc0:	b166      	cbz	r6, 8006bdc <_dtoa_r+0x74c>
 8006bc2:	9b06      	ldr	r3, [sp, #24]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	dd09      	ble.n	8006bdc <_dtoa_r+0x74c>
 8006bc8:	42b3      	cmp	r3, r6
 8006bca:	9a00      	ldr	r2, [sp, #0]
 8006bcc:	bfa8      	it	ge
 8006bce:	4633      	movge	r3, r6
 8006bd0:	1ad2      	subs	r2, r2, r3
 8006bd2:	9200      	str	r2, [sp, #0]
 8006bd4:	9a06      	ldr	r2, [sp, #24]
 8006bd6:	1af6      	subs	r6, r6, r3
 8006bd8:	1ad3      	subs	r3, r2, r3
 8006bda:	9306      	str	r3, [sp, #24]
 8006bdc:	9b08      	ldr	r3, [sp, #32]
 8006bde:	b30b      	cbz	r3, 8006c24 <_dtoa_r+0x794>
 8006be0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	f000 80c6 	beq.w	8006d74 <_dtoa_r+0x8e4>
 8006be8:	2c00      	cmp	r4, #0
 8006bea:	f000 80c0 	beq.w	8006d6e <_dtoa_r+0x8de>
 8006bee:	4629      	mov	r1, r5
 8006bf0:	4622      	mov	r2, r4
 8006bf2:	4648      	mov	r0, r9
 8006bf4:	f000 fd12 	bl	800761c <__pow5mult>
 8006bf8:	9a02      	ldr	r2, [sp, #8]
 8006bfa:	4601      	mov	r1, r0
 8006bfc:	4605      	mov	r5, r0
 8006bfe:	4648      	mov	r0, r9
 8006c00:	f000 fc6a 	bl	80074d8 <__multiply>
 8006c04:	9902      	ldr	r1, [sp, #8]
 8006c06:	4680      	mov	r8, r0
 8006c08:	4648      	mov	r0, r9
 8006c0a:	f000 fb51 	bl	80072b0 <_Bfree>
 8006c0e:	9b08      	ldr	r3, [sp, #32]
 8006c10:	1b1b      	subs	r3, r3, r4
 8006c12:	9308      	str	r3, [sp, #32]
 8006c14:	f000 80b1 	beq.w	8006d7a <_dtoa_r+0x8ea>
 8006c18:	9a08      	ldr	r2, [sp, #32]
 8006c1a:	4641      	mov	r1, r8
 8006c1c:	4648      	mov	r0, r9
 8006c1e:	f000 fcfd 	bl	800761c <__pow5mult>
 8006c22:	9002      	str	r0, [sp, #8]
 8006c24:	2101      	movs	r1, #1
 8006c26:	4648      	mov	r0, r9
 8006c28:	f000 fc40 	bl	80074ac <__i2b>
 8006c2c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006c2e:	4604      	mov	r4, r0
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	f000 81d8 	beq.w	8006fe6 <_dtoa_r+0xb56>
 8006c36:	461a      	mov	r2, r3
 8006c38:	4601      	mov	r1, r0
 8006c3a:	4648      	mov	r0, r9
 8006c3c:	f000 fcee 	bl	800761c <__pow5mult>
 8006c40:	9b07      	ldr	r3, [sp, #28]
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	4604      	mov	r4, r0
 8006c46:	f300 809f 	bgt.w	8006d88 <_dtoa_r+0x8f8>
 8006c4a:	9b04      	ldr	r3, [sp, #16]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	f040 8097 	bne.w	8006d80 <_dtoa_r+0x8f0>
 8006c52:	9b05      	ldr	r3, [sp, #20]
 8006c54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	f040 8093 	bne.w	8006d84 <_dtoa_r+0x8f4>
 8006c5e:	9b05      	ldr	r3, [sp, #20]
 8006c60:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006c64:	0d1b      	lsrs	r3, r3, #20
 8006c66:	051b      	lsls	r3, r3, #20
 8006c68:	b133      	cbz	r3, 8006c78 <_dtoa_r+0x7e8>
 8006c6a:	9b00      	ldr	r3, [sp, #0]
 8006c6c:	3301      	adds	r3, #1
 8006c6e:	9300      	str	r3, [sp, #0]
 8006c70:	9b06      	ldr	r3, [sp, #24]
 8006c72:	3301      	adds	r3, #1
 8006c74:	9306      	str	r3, [sp, #24]
 8006c76:	2301      	movs	r3, #1
 8006c78:	9308      	str	r3, [sp, #32]
 8006c7a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	f000 81b8 	beq.w	8006ff2 <_dtoa_r+0xb62>
 8006c82:	6923      	ldr	r3, [r4, #16]
 8006c84:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006c88:	6918      	ldr	r0, [r3, #16]
 8006c8a:	f000 fbc3 	bl	8007414 <__hi0bits>
 8006c8e:	f1c0 0020 	rsb	r0, r0, #32
 8006c92:	9b06      	ldr	r3, [sp, #24]
 8006c94:	4418      	add	r0, r3
 8006c96:	f010 001f 	ands.w	r0, r0, #31
 8006c9a:	f000 8082 	beq.w	8006da2 <_dtoa_r+0x912>
 8006c9e:	f1c0 0320 	rsb	r3, r0, #32
 8006ca2:	2b04      	cmp	r3, #4
 8006ca4:	dd73      	ble.n	8006d8e <_dtoa_r+0x8fe>
 8006ca6:	9b00      	ldr	r3, [sp, #0]
 8006ca8:	f1c0 001c 	rsb	r0, r0, #28
 8006cac:	4403      	add	r3, r0
 8006cae:	9300      	str	r3, [sp, #0]
 8006cb0:	9b06      	ldr	r3, [sp, #24]
 8006cb2:	4403      	add	r3, r0
 8006cb4:	4406      	add	r6, r0
 8006cb6:	9306      	str	r3, [sp, #24]
 8006cb8:	9b00      	ldr	r3, [sp, #0]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	dd05      	ble.n	8006cca <_dtoa_r+0x83a>
 8006cbe:	9902      	ldr	r1, [sp, #8]
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	4648      	mov	r0, r9
 8006cc4:	f000 fd04 	bl	80076d0 <__lshift>
 8006cc8:	9002      	str	r0, [sp, #8]
 8006cca:	9b06      	ldr	r3, [sp, #24]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	dd05      	ble.n	8006cdc <_dtoa_r+0x84c>
 8006cd0:	4621      	mov	r1, r4
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	4648      	mov	r0, r9
 8006cd6:	f000 fcfb 	bl	80076d0 <__lshift>
 8006cda:	4604      	mov	r4, r0
 8006cdc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d061      	beq.n	8006da6 <_dtoa_r+0x916>
 8006ce2:	9802      	ldr	r0, [sp, #8]
 8006ce4:	4621      	mov	r1, r4
 8006ce6:	f000 fd5f 	bl	80077a8 <__mcmp>
 8006cea:	2800      	cmp	r0, #0
 8006cec:	da5b      	bge.n	8006da6 <_dtoa_r+0x916>
 8006cee:	2300      	movs	r3, #0
 8006cf0:	9902      	ldr	r1, [sp, #8]
 8006cf2:	220a      	movs	r2, #10
 8006cf4:	4648      	mov	r0, r9
 8006cf6:	f000 fafd 	bl	80072f4 <__multadd>
 8006cfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cfc:	9002      	str	r0, [sp, #8]
 8006cfe:	f107 38ff 	add.w	r8, r7, #4294967295
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	f000 8177 	beq.w	8006ff6 <_dtoa_r+0xb66>
 8006d08:	4629      	mov	r1, r5
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	220a      	movs	r2, #10
 8006d0e:	4648      	mov	r0, r9
 8006d10:	f000 faf0 	bl	80072f4 <__multadd>
 8006d14:	f1bb 0f00 	cmp.w	fp, #0
 8006d18:	4605      	mov	r5, r0
 8006d1a:	dc6f      	bgt.n	8006dfc <_dtoa_r+0x96c>
 8006d1c:	9b07      	ldr	r3, [sp, #28]
 8006d1e:	2b02      	cmp	r3, #2
 8006d20:	dc49      	bgt.n	8006db6 <_dtoa_r+0x926>
 8006d22:	e06b      	b.n	8006dfc <_dtoa_r+0x96c>
 8006d24:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006d26:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006d2a:	e73c      	b.n	8006ba6 <_dtoa_r+0x716>
 8006d2c:	3fe00000 	.word	0x3fe00000
 8006d30:	40240000 	.word	0x40240000
 8006d34:	9b03      	ldr	r3, [sp, #12]
 8006d36:	1e5c      	subs	r4, r3, #1
 8006d38:	9b08      	ldr	r3, [sp, #32]
 8006d3a:	42a3      	cmp	r3, r4
 8006d3c:	db09      	blt.n	8006d52 <_dtoa_r+0x8c2>
 8006d3e:	1b1c      	subs	r4, r3, r4
 8006d40:	9b03      	ldr	r3, [sp, #12]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	f6bf af30 	bge.w	8006ba8 <_dtoa_r+0x718>
 8006d48:	9b00      	ldr	r3, [sp, #0]
 8006d4a:	9a03      	ldr	r2, [sp, #12]
 8006d4c:	1a9e      	subs	r6, r3, r2
 8006d4e:	2300      	movs	r3, #0
 8006d50:	e72b      	b.n	8006baa <_dtoa_r+0x71a>
 8006d52:	9b08      	ldr	r3, [sp, #32]
 8006d54:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006d56:	9408      	str	r4, [sp, #32]
 8006d58:	1ae3      	subs	r3, r4, r3
 8006d5a:	441a      	add	r2, r3
 8006d5c:	9e00      	ldr	r6, [sp, #0]
 8006d5e:	9b03      	ldr	r3, [sp, #12]
 8006d60:	920d      	str	r2, [sp, #52]	@ 0x34
 8006d62:	2400      	movs	r4, #0
 8006d64:	e721      	b.n	8006baa <_dtoa_r+0x71a>
 8006d66:	9c08      	ldr	r4, [sp, #32]
 8006d68:	9e00      	ldr	r6, [sp, #0]
 8006d6a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8006d6c:	e728      	b.n	8006bc0 <_dtoa_r+0x730>
 8006d6e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006d72:	e751      	b.n	8006c18 <_dtoa_r+0x788>
 8006d74:	9a08      	ldr	r2, [sp, #32]
 8006d76:	9902      	ldr	r1, [sp, #8]
 8006d78:	e750      	b.n	8006c1c <_dtoa_r+0x78c>
 8006d7a:	f8cd 8008 	str.w	r8, [sp, #8]
 8006d7e:	e751      	b.n	8006c24 <_dtoa_r+0x794>
 8006d80:	2300      	movs	r3, #0
 8006d82:	e779      	b.n	8006c78 <_dtoa_r+0x7e8>
 8006d84:	9b04      	ldr	r3, [sp, #16]
 8006d86:	e777      	b.n	8006c78 <_dtoa_r+0x7e8>
 8006d88:	2300      	movs	r3, #0
 8006d8a:	9308      	str	r3, [sp, #32]
 8006d8c:	e779      	b.n	8006c82 <_dtoa_r+0x7f2>
 8006d8e:	d093      	beq.n	8006cb8 <_dtoa_r+0x828>
 8006d90:	9a00      	ldr	r2, [sp, #0]
 8006d92:	331c      	adds	r3, #28
 8006d94:	441a      	add	r2, r3
 8006d96:	9200      	str	r2, [sp, #0]
 8006d98:	9a06      	ldr	r2, [sp, #24]
 8006d9a:	441a      	add	r2, r3
 8006d9c:	441e      	add	r6, r3
 8006d9e:	9206      	str	r2, [sp, #24]
 8006da0:	e78a      	b.n	8006cb8 <_dtoa_r+0x828>
 8006da2:	4603      	mov	r3, r0
 8006da4:	e7f4      	b.n	8006d90 <_dtoa_r+0x900>
 8006da6:	9b03      	ldr	r3, [sp, #12]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	46b8      	mov	r8, r7
 8006dac:	dc20      	bgt.n	8006df0 <_dtoa_r+0x960>
 8006dae:	469b      	mov	fp, r3
 8006db0:	9b07      	ldr	r3, [sp, #28]
 8006db2:	2b02      	cmp	r3, #2
 8006db4:	dd1e      	ble.n	8006df4 <_dtoa_r+0x964>
 8006db6:	f1bb 0f00 	cmp.w	fp, #0
 8006dba:	f47f adb1 	bne.w	8006920 <_dtoa_r+0x490>
 8006dbe:	4621      	mov	r1, r4
 8006dc0:	465b      	mov	r3, fp
 8006dc2:	2205      	movs	r2, #5
 8006dc4:	4648      	mov	r0, r9
 8006dc6:	f000 fa95 	bl	80072f4 <__multadd>
 8006dca:	4601      	mov	r1, r0
 8006dcc:	4604      	mov	r4, r0
 8006dce:	9802      	ldr	r0, [sp, #8]
 8006dd0:	f000 fcea 	bl	80077a8 <__mcmp>
 8006dd4:	2800      	cmp	r0, #0
 8006dd6:	f77f ada3 	ble.w	8006920 <_dtoa_r+0x490>
 8006dda:	4656      	mov	r6, sl
 8006ddc:	2331      	movs	r3, #49	@ 0x31
 8006dde:	f806 3b01 	strb.w	r3, [r6], #1
 8006de2:	f108 0801 	add.w	r8, r8, #1
 8006de6:	e59f      	b.n	8006928 <_dtoa_r+0x498>
 8006de8:	9c03      	ldr	r4, [sp, #12]
 8006dea:	46b8      	mov	r8, r7
 8006dec:	4625      	mov	r5, r4
 8006dee:	e7f4      	b.n	8006dda <_dtoa_r+0x94a>
 8006df0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8006df4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	f000 8101 	beq.w	8006ffe <_dtoa_r+0xb6e>
 8006dfc:	2e00      	cmp	r6, #0
 8006dfe:	dd05      	ble.n	8006e0c <_dtoa_r+0x97c>
 8006e00:	4629      	mov	r1, r5
 8006e02:	4632      	mov	r2, r6
 8006e04:	4648      	mov	r0, r9
 8006e06:	f000 fc63 	bl	80076d0 <__lshift>
 8006e0a:	4605      	mov	r5, r0
 8006e0c:	9b08      	ldr	r3, [sp, #32]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d05c      	beq.n	8006ecc <_dtoa_r+0xa3c>
 8006e12:	6869      	ldr	r1, [r5, #4]
 8006e14:	4648      	mov	r0, r9
 8006e16:	f000 fa0b 	bl	8007230 <_Balloc>
 8006e1a:	4606      	mov	r6, r0
 8006e1c:	b928      	cbnz	r0, 8006e2a <_dtoa_r+0x99a>
 8006e1e:	4b82      	ldr	r3, [pc, #520]	@ (8007028 <_dtoa_r+0xb98>)
 8006e20:	4602      	mov	r2, r0
 8006e22:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006e26:	f7ff bb4a 	b.w	80064be <_dtoa_r+0x2e>
 8006e2a:	692a      	ldr	r2, [r5, #16]
 8006e2c:	3202      	adds	r2, #2
 8006e2e:	0092      	lsls	r2, r2, #2
 8006e30:	f105 010c 	add.w	r1, r5, #12
 8006e34:	300c      	adds	r0, #12
 8006e36:	f001 ff69 	bl	8008d0c <memcpy>
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	4631      	mov	r1, r6
 8006e3e:	4648      	mov	r0, r9
 8006e40:	f000 fc46 	bl	80076d0 <__lshift>
 8006e44:	f10a 0301 	add.w	r3, sl, #1
 8006e48:	9300      	str	r3, [sp, #0]
 8006e4a:	eb0a 030b 	add.w	r3, sl, fp
 8006e4e:	9308      	str	r3, [sp, #32]
 8006e50:	9b04      	ldr	r3, [sp, #16]
 8006e52:	f003 0301 	and.w	r3, r3, #1
 8006e56:	462f      	mov	r7, r5
 8006e58:	9306      	str	r3, [sp, #24]
 8006e5a:	4605      	mov	r5, r0
 8006e5c:	9b00      	ldr	r3, [sp, #0]
 8006e5e:	9802      	ldr	r0, [sp, #8]
 8006e60:	4621      	mov	r1, r4
 8006e62:	f103 3bff 	add.w	fp, r3, #4294967295
 8006e66:	f7ff fa89 	bl	800637c <quorem>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	3330      	adds	r3, #48	@ 0x30
 8006e6e:	9003      	str	r0, [sp, #12]
 8006e70:	4639      	mov	r1, r7
 8006e72:	9802      	ldr	r0, [sp, #8]
 8006e74:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e76:	f000 fc97 	bl	80077a8 <__mcmp>
 8006e7a:	462a      	mov	r2, r5
 8006e7c:	9004      	str	r0, [sp, #16]
 8006e7e:	4621      	mov	r1, r4
 8006e80:	4648      	mov	r0, r9
 8006e82:	f000 fcad 	bl	80077e0 <__mdiff>
 8006e86:	68c2      	ldr	r2, [r0, #12]
 8006e88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e8a:	4606      	mov	r6, r0
 8006e8c:	bb02      	cbnz	r2, 8006ed0 <_dtoa_r+0xa40>
 8006e8e:	4601      	mov	r1, r0
 8006e90:	9802      	ldr	r0, [sp, #8]
 8006e92:	f000 fc89 	bl	80077a8 <__mcmp>
 8006e96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e98:	4602      	mov	r2, r0
 8006e9a:	4631      	mov	r1, r6
 8006e9c:	4648      	mov	r0, r9
 8006e9e:	920c      	str	r2, [sp, #48]	@ 0x30
 8006ea0:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ea2:	f000 fa05 	bl	80072b0 <_Bfree>
 8006ea6:	9b07      	ldr	r3, [sp, #28]
 8006ea8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006eaa:	9e00      	ldr	r6, [sp, #0]
 8006eac:	ea42 0103 	orr.w	r1, r2, r3
 8006eb0:	9b06      	ldr	r3, [sp, #24]
 8006eb2:	4319      	orrs	r1, r3
 8006eb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006eb6:	d10d      	bne.n	8006ed4 <_dtoa_r+0xa44>
 8006eb8:	2b39      	cmp	r3, #57	@ 0x39
 8006eba:	d027      	beq.n	8006f0c <_dtoa_r+0xa7c>
 8006ebc:	9a04      	ldr	r2, [sp, #16]
 8006ebe:	2a00      	cmp	r2, #0
 8006ec0:	dd01      	ble.n	8006ec6 <_dtoa_r+0xa36>
 8006ec2:	9b03      	ldr	r3, [sp, #12]
 8006ec4:	3331      	adds	r3, #49	@ 0x31
 8006ec6:	f88b 3000 	strb.w	r3, [fp]
 8006eca:	e52e      	b.n	800692a <_dtoa_r+0x49a>
 8006ecc:	4628      	mov	r0, r5
 8006ece:	e7b9      	b.n	8006e44 <_dtoa_r+0x9b4>
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	e7e2      	b.n	8006e9a <_dtoa_r+0xa0a>
 8006ed4:	9904      	ldr	r1, [sp, #16]
 8006ed6:	2900      	cmp	r1, #0
 8006ed8:	db04      	blt.n	8006ee4 <_dtoa_r+0xa54>
 8006eda:	9807      	ldr	r0, [sp, #28]
 8006edc:	4301      	orrs	r1, r0
 8006ede:	9806      	ldr	r0, [sp, #24]
 8006ee0:	4301      	orrs	r1, r0
 8006ee2:	d120      	bne.n	8006f26 <_dtoa_r+0xa96>
 8006ee4:	2a00      	cmp	r2, #0
 8006ee6:	ddee      	ble.n	8006ec6 <_dtoa_r+0xa36>
 8006ee8:	9902      	ldr	r1, [sp, #8]
 8006eea:	9300      	str	r3, [sp, #0]
 8006eec:	2201      	movs	r2, #1
 8006eee:	4648      	mov	r0, r9
 8006ef0:	f000 fbee 	bl	80076d0 <__lshift>
 8006ef4:	4621      	mov	r1, r4
 8006ef6:	9002      	str	r0, [sp, #8]
 8006ef8:	f000 fc56 	bl	80077a8 <__mcmp>
 8006efc:	2800      	cmp	r0, #0
 8006efe:	9b00      	ldr	r3, [sp, #0]
 8006f00:	dc02      	bgt.n	8006f08 <_dtoa_r+0xa78>
 8006f02:	d1e0      	bne.n	8006ec6 <_dtoa_r+0xa36>
 8006f04:	07da      	lsls	r2, r3, #31
 8006f06:	d5de      	bpl.n	8006ec6 <_dtoa_r+0xa36>
 8006f08:	2b39      	cmp	r3, #57	@ 0x39
 8006f0a:	d1da      	bne.n	8006ec2 <_dtoa_r+0xa32>
 8006f0c:	2339      	movs	r3, #57	@ 0x39
 8006f0e:	f88b 3000 	strb.w	r3, [fp]
 8006f12:	4633      	mov	r3, r6
 8006f14:	461e      	mov	r6, r3
 8006f16:	3b01      	subs	r3, #1
 8006f18:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006f1c:	2a39      	cmp	r2, #57	@ 0x39
 8006f1e:	d04e      	beq.n	8006fbe <_dtoa_r+0xb2e>
 8006f20:	3201      	adds	r2, #1
 8006f22:	701a      	strb	r2, [r3, #0]
 8006f24:	e501      	b.n	800692a <_dtoa_r+0x49a>
 8006f26:	2a00      	cmp	r2, #0
 8006f28:	dd03      	ble.n	8006f32 <_dtoa_r+0xaa2>
 8006f2a:	2b39      	cmp	r3, #57	@ 0x39
 8006f2c:	d0ee      	beq.n	8006f0c <_dtoa_r+0xa7c>
 8006f2e:	3301      	adds	r3, #1
 8006f30:	e7c9      	b.n	8006ec6 <_dtoa_r+0xa36>
 8006f32:	9a00      	ldr	r2, [sp, #0]
 8006f34:	9908      	ldr	r1, [sp, #32]
 8006f36:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006f3a:	428a      	cmp	r2, r1
 8006f3c:	d028      	beq.n	8006f90 <_dtoa_r+0xb00>
 8006f3e:	9902      	ldr	r1, [sp, #8]
 8006f40:	2300      	movs	r3, #0
 8006f42:	220a      	movs	r2, #10
 8006f44:	4648      	mov	r0, r9
 8006f46:	f000 f9d5 	bl	80072f4 <__multadd>
 8006f4a:	42af      	cmp	r7, r5
 8006f4c:	9002      	str	r0, [sp, #8]
 8006f4e:	f04f 0300 	mov.w	r3, #0
 8006f52:	f04f 020a 	mov.w	r2, #10
 8006f56:	4639      	mov	r1, r7
 8006f58:	4648      	mov	r0, r9
 8006f5a:	d107      	bne.n	8006f6c <_dtoa_r+0xadc>
 8006f5c:	f000 f9ca 	bl	80072f4 <__multadd>
 8006f60:	4607      	mov	r7, r0
 8006f62:	4605      	mov	r5, r0
 8006f64:	9b00      	ldr	r3, [sp, #0]
 8006f66:	3301      	adds	r3, #1
 8006f68:	9300      	str	r3, [sp, #0]
 8006f6a:	e777      	b.n	8006e5c <_dtoa_r+0x9cc>
 8006f6c:	f000 f9c2 	bl	80072f4 <__multadd>
 8006f70:	4629      	mov	r1, r5
 8006f72:	4607      	mov	r7, r0
 8006f74:	2300      	movs	r3, #0
 8006f76:	220a      	movs	r2, #10
 8006f78:	4648      	mov	r0, r9
 8006f7a:	f000 f9bb 	bl	80072f4 <__multadd>
 8006f7e:	4605      	mov	r5, r0
 8006f80:	e7f0      	b.n	8006f64 <_dtoa_r+0xad4>
 8006f82:	f1bb 0f00 	cmp.w	fp, #0
 8006f86:	bfcc      	ite	gt
 8006f88:	465e      	movgt	r6, fp
 8006f8a:	2601      	movle	r6, #1
 8006f8c:	4456      	add	r6, sl
 8006f8e:	2700      	movs	r7, #0
 8006f90:	9902      	ldr	r1, [sp, #8]
 8006f92:	9300      	str	r3, [sp, #0]
 8006f94:	2201      	movs	r2, #1
 8006f96:	4648      	mov	r0, r9
 8006f98:	f000 fb9a 	bl	80076d0 <__lshift>
 8006f9c:	4621      	mov	r1, r4
 8006f9e:	9002      	str	r0, [sp, #8]
 8006fa0:	f000 fc02 	bl	80077a8 <__mcmp>
 8006fa4:	2800      	cmp	r0, #0
 8006fa6:	dcb4      	bgt.n	8006f12 <_dtoa_r+0xa82>
 8006fa8:	d102      	bne.n	8006fb0 <_dtoa_r+0xb20>
 8006faa:	9b00      	ldr	r3, [sp, #0]
 8006fac:	07db      	lsls	r3, r3, #31
 8006fae:	d4b0      	bmi.n	8006f12 <_dtoa_r+0xa82>
 8006fb0:	4633      	mov	r3, r6
 8006fb2:	461e      	mov	r6, r3
 8006fb4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006fb8:	2a30      	cmp	r2, #48	@ 0x30
 8006fba:	d0fa      	beq.n	8006fb2 <_dtoa_r+0xb22>
 8006fbc:	e4b5      	b.n	800692a <_dtoa_r+0x49a>
 8006fbe:	459a      	cmp	sl, r3
 8006fc0:	d1a8      	bne.n	8006f14 <_dtoa_r+0xa84>
 8006fc2:	2331      	movs	r3, #49	@ 0x31
 8006fc4:	f108 0801 	add.w	r8, r8, #1
 8006fc8:	f88a 3000 	strb.w	r3, [sl]
 8006fcc:	e4ad      	b.n	800692a <_dtoa_r+0x49a>
 8006fce:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006fd0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800702c <_dtoa_r+0xb9c>
 8006fd4:	b11b      	cbz	r3, 8006fde <_dtoa_r+0xb4e>
 8006fd6:	f10a 0308 	add.w	r3, sl, #8
 8006fda:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006fdc:	6013      	str	r3, [r2, #0]
 8006fde:	4650      	mov	r0, sl
 8006fe0:	b017      	add	sp, #92	@ 0x5c
 8006fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fe6:	9b07      	ldr	r3, [sp, #28]
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	f77f ae2e 	ble.w	8006c4a <_dtoa_r+0x7ba>
 8006fee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006ff0:	9308      	str	r3, [sp, #32]
 8006ff2:	2001      	movs	r0, #1
 8006ff4:	e64d      	b.n	8006c92 <_dtoa_r+0x802>
 8006ff6:	f1bb 0f00 	cmp.w	fp, #0
 8006ffa:	f77f aed9 	ble.w	8006db0 <_dtoa_r+0x920>
 8006ffe:	4656      	mov	r6, sl
 8007000:	9802      	ldr	r0, [sp, #8]
 8007002:	4621      	mov	r1, r4
 8007004:	f7ff f9ba 	bl	800637c <quorem>
 8007008:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800700c:	f806 3b01 	strb.w	r3, [r6], #1
 8007010:	eba6 020a 	sub.w	r2, r6, sl
 8007014:	4593      	cmp	fp, r2
 8007016:	ddb4      	ble.n	8006f82 <_dtoa_r+0xaf2>
 8007018:	9902      	ldr	r1, [sp, #8]
 800701a:	2300      	movs	r3, #0
 800701c:	220a      	movs	r2, #10
 800701e:	4648      	mov	r0, r9
 8007020:	f000 f968 	bl	80072f4 <__multadd>
 8007024:	9002      	str	r0, [sp, #8]
 8007026:	e7eb      	b.n	8007000 <_dtoa_r+0xb70>
 8007028:	08009ca1 	.word	0x08009ca1
 800702c:	08009c25 	.word	0x08009c25

08007030 <_free_r>:
 8007030:	b538      	push	{r3, r4, r5, lr}
 8007032:	4605      	mov	r5, r0
 8007034:	2900      	cmp	r1, #0
 8007036:	d041      	beq.n	80070bc <_free_r+0x8c>
 8007038:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800703c:	1f0c      	subs	r4, r1, #4
 800703e:	2b00      	cmp	r3, #0
 8007040:	bfb8      	it	lt
 8007042:	18e4      	addlt	r4, r4, r3
 8007044:	f000 f8e8 	bl	8007218 <__malloc_lock>
 8007048:	4a1d      	ldr	r2, [pc, #116]	@ (80070c0 <_free_r+0x90>)
 800704a:	6813      	ldr	r3, [r2, #0]
 800704c:	b933      	cbnz	r3, 800705c <_free_r+0x2c>
 800704e:	6063      	str	r3, [r4, #4]
 8007050:	6014      	str	r4, [r2, #0]
 8007052:	4628      	mov	r0, r5
 8007054:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007058:	f000 b8e4 	b.w	8007224 <__malloc_unlock>
 800705c:	42a3      	cmp	r3, r4
 800705e:	d908      	bls.n	8007072 <_free_r+0x42>
 8007060:	6820      	ldr	r0, [r4, #0]
 8007062:	1821      	adds	r1, r4, r0
 8007064:	428b      	cmp	r3, r1
 8007066:	bf01      	itttt	eq
 8007068:	6819      	ldreq	r1, [r3, #0]
 800706a:	685b      	ldreq	r3, [r3, #4]
 800706c:	1809      	addeq	r1, r1, r0
 800706e:	6021      	streq	r1, [r4, #0]
 8007070:	e7ed      	b.n	800704e <_free_r+0x1e>
 8007072:	461a      	mov	r2, r3
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	b10b      	cbz	r3, 800707c <_free_r+0x4c>
 8007078:	42a3      	cmp	r3, r4
 800707a:	d9fa      	bls.n	8007072 <_free_r+0x42>
 800707c:	6811      	ldr	r1, [r2, #0]
 800707e:	1850      	adds	r0, r2, r1
 8007080:	42a0      	cmp	r0, r4
 8007082:	d10b      	bne.n	800709c <_free_r+0x6c>
 8007084:	6820      	ldr	r0, [r4, #0]
 8007086:	4401      	add	r1, r0
 8007088:	1850      	adds	r0, r2, r1
 800708a:	4283      	cmp	r3, r0
 800708c:	6011      	str	r1, [r2, #0]
 800708e:	d1e0      	bne.n	8007052 <_free_r+0x22>
 8007090:	6818      	ldr	r0, [r3, #0]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	6053      	str	r3, [r2, #4]
 8007096:	4408      	add	r0, r1
 8007098:	6010      	str	r0, [r2, #0]
 800709a:	e7da      	b.n	8007052 <_free_r+0x22>
 800709c:	d902      	bls.n	80070a4 <_free_r+0x74>
 800709e:	230c      	movs	r3, #12
 80070a0:	602b      	str	r3, [r5, #0]
 80070a2:	e7d6      	b.n	8007052 <_free_r+0x22>
 80070a4:	6820      	ldr	r0, [r4, #0]
 80070a6:	1821      	adds	r1, r4, r0
 80070a8:	428b      	cmp	r3, r1
 80070aa:	bf04      	itt	eq
 80070ac:	6819      	ldreq	r1, [r3, #0]
 80070ae:	685b      	ldreq	r3, [r3, #4]
 80070b0:	6063      	str	r3, [r4, #4]
 80070b2:	bf04      	itt	eq
 80070b4:	1809      	addeq	r1, r1, r0
 80070b6:	6021      	streq	r1, [r4, #0]
 80070b8:	6054      	str	r4, [r2, #4]
 80070ba:	e7ca      	b.n	8007052 <_free_r+0x22>
 80070bc:	bd38      	pop	{r3, r4, r5, pc}
 80070be:	bf00      	nop
 80070c0:	2000049c 	.word	0x2000049c

080070c4 <malloc>:
 80070c4:	4b02      	ldr	r3, [pc, #8]	@ (80070d0 <malloc+0xc>)
 80070c6:	4601      	mov	r1, r0
 80070c8:	6818      	ldr	r0, [r3, #0]
 80070ca:	f000 b825 	b.w	8007118 <_malloc_r>
 80070ce:	bf00      	nop
 80070d0:	20000018 	.word	0x20000018

080070d4 <sbrk_aligned>:
 80070d4:	b570      	push	{r4, r5, r6, lr}
 80070d6:	4e0f      	ldr	r6, [pc, #60]	@ (8007114 <sbrk_aligned+0x40>)
 80070d8:	460c      	mov	r4, r1
 80070da:	6831      	ldr	r1, [r6, #0]
 80070dc:	4605      	mov	r5, r0
 80070de:	b911      	cbnz	r1, 80070e6 <sbrk_aligned+0x12>
 80070e0:	f001 fe04 	bl	8008cec <_sbrk_r>
 80070e4:	6030      	str	r0, [r6, #0]
 80070e6:	4621      	mov	r1, r4
 80070e8:	4628      	mov	r0, r5
 80070ea:	f001 fdff 	bl	8008cec <_sbrk_r>
 80070ee:	1c43      	adds	r3, r0, #1
 80070f0:	d103      	bne.n	80070fa <sbrk_aligned+0x26>
 80070f2:	f04f 34ff 	mov.w	r4, #4294967295
 80070f6:	4620      	mov	r0, r4
 80070f8:	bd70      	pop	{r4, r5, r6, pc}
 80070fa:	1cc4      	adds	r4, r0, #3
 80070fc:	f024 0403 	bic.w	r4, r4, #3
 8007100:	42a0      	cmp	r0, r4
 8007102:	d0f8      	beq.n	80070f6 <sbrk_aligned+0x22>
 8007104:	1a21      	subs	r1, r4, r0
 8007106:	4628      	mov	r0, r5
 8007108:	f001 fdf0 	bl	8008cec <_sbrk_r>
 800710c:	3001      	adds	r0, #1
 800710e:	d1f2      	bne.n	80070f6 <sbrk_aligned+0x22>
 8007110:	e7ef      	b.n	80070f2 <sbrk_aligned+0x1e>
 8007112:	bf00      	nop
 8007114:	20000498 	.word	0x20000498

08007118 <_malloc_r>:
 8007118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800711c:	1ccd      	adds	r5, r1, #3
 800711e:	f025 0503 	bic.w	r5, r5, #3
 8007122:	3508      	adds	r5, #8
 8007124:	2d0c      	cmp	r5, #12
 8007126:	bf38      	it	cc
 8007128:	250c      	movcc	r5, #12
 800712a:	2d00      	cmp	r5, #0
 800712c:	4606      	mov	r6, r0
 800712e:	db01      	blt.n	8007134 <_malloc_r+0x1c>
 8007130:	42a9      	cmp	r1, r5
 8007132:	d904      	bls.n	800713e <_malloc_r+0x26>
 8007134:	230c      	movs	r3, #12
 8007136:	6033      	str	r3, [r6, #0]
 8007138:	2000      	movs	r0, #0
 800713a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800713e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007214 <_malloc_r+0xfc>
 8007142:	f000 f869 	bl	8007218 <__malloc_lock>
 8007146:	f8d8 3000 	ldr.w	r3, [r8]
 800714a:	461c      	mov	r4, r3
 800714c:	bb44      	cbnz	r4, 80071a0 <_malloc_r+0x88>
 800714e:	4629      	mov	r1, r5
 8007150:	4630      	mov	r0, r6
 8007152:	f7ff ffbf 	bl	80070d4 <sbrk_aligned>
 8007156:	1c43      	adds	r3, r0, #1
 8007158:	4604      	mov	r4, r0
 800715a:	d158      	bne.n	800720e <_malloc_r+0xf6>
 800715c:	f8d8 4000 	ldr.w	r4, [r8]
 8007160:	4627      	mov	r7, r4
 8007162:	2f00      	cmp	r7, #0
 8007164:	d143      	bne.n	80071ee <_malloc_r+0xd6>
 8007166:	2c00      	cmp	r4, #0
 8007168:	d04b      	beq.n	8007202 <_malloc_r+0xea>
 800716a:	6823      	ldr	r3, [r4, #0]
 800716c:	4639      	mov	r1, r7
 800716e:	4630      	mov	r0, r6
 8007170:	eb04 0903 	add.w	r9, r4, r3
 8007174:	f001 fdba 	bl	8008cec <_sbrk_r>
 8007178:	4581      	cmp	r9, r0
 800717a:	d142      	bne.n	8007202 <_malloc_r+0xea>
 800717c:	6821      	ldr	r1, [r4, #0]
 800717e:	1a6d      	subs	r5, r5, r1
 8007180:	4629      	mov	r1, r5
 8007182:	4630      	mov	r0, r6
 8007184:	f7ff ffa6 	bl	80070d4 <sbrk_aligned>
 8007188:	3001      	adds	r0, #1
 800718a:	d03a      	beq.n	8007202 <_malloc_r+0xea>
 800718c:	6823      	ldr	r3, [r4, #0]
 800718e:	442b      	add	r3, r5
 8007190:	6023      	str	r3, [r4, #0]
 8007192:	f8d8 3000 	ldr.w	r3, [r8]
 8007196:	685a      	ldr	r2, [r3, #4]
 8007198:	bb62      	cbnz	r2, 80071f4 <_malloc_r+0xdc>
 800719a:	f8c8 7000 	str.w	r7, [r8]
 800719e:	e00f      	b.n	80071c0 <_malloc_r+0xa8>
 80071a0:	6822      	ldr	r2, [r4, #0]
 80071a2:	1b52      	subs	r2, r2, r5
 80071a4:	d420      	bmi.n	80071e8 <_malloc_r+0xd0>
 80071a6:	2a0b      	cmp	r2, #11
 80071a8:	d917      	bls.n	80071da <_malloc_r+0xc2>
 80071aa:	1961      	adds	r1, r4, r5
 80071ac:	42a3      	cmp	r3, r4
 80071ae:	6025      	str	r5, [r4, #0]
 80071b0:	bf18      	it	ne
 80071b2:	6059      	strne	r1, [r3, #4]
 80071b4:	6863      	ldr	r3, [r4, #4]
 80071b6:	bf08      	it	eq
 80071b8:	f8c8 1000 	streq.w	r1, [r8]
 80071bc:	5162      	str	r2, [r4, r5]
 80071be:	604b      	str	r3, [r1, #4]
 80071c0:	4630      	mov	r0, r6
 80071c2:	f000 f82f 	bl	8007224 <__malloc_unlock>
 80071c6:	f104 000b 	add.w	r0, r4, #11
 80071ca:	1d23      	adds	r3, r4, #4
 80071cc:	f020 0007 	bic.w	r0, r0, #7
 80071d0:	1ac2      	subs	r2, r0, r3
 80071d2:	bf1c      	itt	ne
 80071d4:	1a1b      	subne	r3, r3, r0
 80071d6:	50a3      	strne	r3, [r4, r2]
 80071d8:	e7af      	b.n	800713a <_malloc_r+0x22>
 80071da:	6862      	ldr	r2, [r4, #4]
 80071dc:	42a3      	cmp	r3, r4
 80071de:	bf0c      	ite	eq
 80071e0:	f8c8 2000 	streq.w	r2, [r8]
 80071e4:	605a      	strne	r2, [r3, #4]
 80071e6:	e7eb      	b.n	80071c0 <_malloc_r+0xa8>
 80071e8:	4623      	mov	r3, r4
 80071ea:	6864      	ldr	r4, [r4, #4]
 80071ec:	e7ae      	b.n	800714c <_malloc_r+0x34>
 80071ee:	463c      	mov	r4, r7
 80071f0:	687f      	ldr	r7, [r7, #4]
 80071f2:	e7b6      	b.n	8007162 <_malloc_r+0x4a>
 80071f4:	461a      	mov	r2, r3
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	42a3      	cmp	r3, r4
 80071fa:	d1fb      	bne.n	80071f4 <_malloc_r+0xdc>
 80071fc:	2300      	movs	r3, #0
 80071fe:	6053      	str	r3, [r2, #4]
 8007200:	e7de      	b.n	80071c0 <_malloc_r+0xa8>
 8007202:	230c      	movs	r3, #12
 8007204:	6033      	str	r3, [r6, #0]
 8007206:	4630      	mov	r0, r6
 8007208:	f000 f80c 	bl	8007224 <__malloc_unlock>
 800720c:	e794      	b.n	8007138 <_malloc_r+0x20>
 800720e:	6005      	str	r5, [r0, #0]
 8007210:	e7d6      	b.n	80071c0 <_malloc_r+0xa8>
 8007212:	bf00      	nop
 8007214:	2000049c 	.word	0x2000049c

08007218 <__malloc_lock>:
 8007218:	4801      	ldr	r0, [pc, #4]	@ (8007220 <__malloc_lock+0x8>)
 800721a:	f7ff b8a6 	b.w	800636a <__retarget_lock_acquire_recursive>
 800721e:	bf00      	nop
 8007220:	20000494 	.word	0x20000494

08007224 <__malloc_unlock>:
 8007224:	4801      	ldr	r0, [pc, #4]	@ (800722c <__malloc_unlock+0x8>)
 8007226:	f7ff b8a1 	b.w	800636c <__retarget_lock_release_recursive>
 800722a:	bf00      	nop
 800722c:	20000494 	.word	0x20000494

08007230 <_Balloc>:
 8007230:	b570      	push	{r4, r5, r6, lr}
 8007232:	69c6      	ldr	r6, [r0, #28]
 8007234:	4604      	mov	r4, r0
 8007236:	460d      	mov	r5, r1
 8007238:	b976      	cbnz	r6, 8007258 <_Balloc+0x28>
 800723a:	2010      	movs	r0, #16
 800723c:	f7ff ff42 	bl	80070c4 <malloc>
 8007240:	4602      	mov	r2, r0
 8007242:	61e0      	str	r0, [r4, #28]
 8007244:	b920      	cbnz	r0, 8007250 <_Balloc+0x20>
 8007246:	4b18      	ldr	r3, [pc, #96]	@ (80072a8 <_Balloc+0x78>)
 8007248:	4818      	ldr	r0, [pc, #96]	@ (80072ac <_Balloc+0x7c>)
 800724a:	216b      	movs	r1, #107	@ 0x6b
 800724c:	f001 fd74 	bl	8008d38 <__assert_func>
 8007250:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007254:	6006      	str	r6, [r0, #0]
 8007256:	60c6      	str	r6, [r0, #12]
 8007258:	69e6      	ldr	r6, [r4, #28]
 800725a:	68f3      	ldr	r3, [r6, #12]
 800725c:	b183      	cbz	r3, 8007280 <_Balloc+0x50>
 800725e:	69e3      	ldr	r3, [r4, #28]
 8007260:	68db      	ldr	r3, [r3, #12]
 8007262:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007266:	b9b8      	cbnz	r0, 8007298 <_Balloc+0x68>
 8007268:	2101      	movs	r1, #1
 800726a:	fa01 f605 	lsl.w	r6, r1, r5
 800726e:	1d72      	adds	r2, r6, #5
 8007270:	0092      	lsls	r2, r2, #2
 8007272:	4620      	mov	r0, r4
 8007274:	f001 fd7e 	bl	8008d74 <_calloc_r>
 8007278:	b160      	cbz	r0, 8007294 <_Balloc+0x64>
 800727a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800727e:	e00e      	b.n	800729e <_Balloc+0x6e>
 8007280:	2221      	movs	r2, #33	@ 0x21
 8007282:	2104      	movs	r1, #4
 8007284:	4620      	mov	r0, r4
 8007286:	f001 fd75 	bl	8008d74 <_calloc_r>
 800728a:	69e3      	ldr	r3, [r4, #28]
 800728c:	60f0      	str	r0, [r6, #12]
 800728e:	68db      	ldr	r3, [r3, #12]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d1e4      	bne.n	800725e <_Balloc+0x2e>
 8007294:	2000      	movs	r0, #0
 8007296:	bd70      	pop	{r4, r5, r6, pc}
 8007298:	6802      	ldr	r2, [r0, #0]
 800729a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800729e:	2300      	movs	r3, #0
 80072a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80072a4:	e7f7      	b.n	8007296 <_Balloc+0x66>
 80072a6:	bf00      	nop
 80072a8:	08009c32 	.word	0x08009c32
 80072ac:	08009cb2 	.word	0x08009cb2

080072b0 <_Bfree>:
 80072b0:	b570      	push	{r4, r5, r6, lr}
 80072b2:	69c6      	ldr	r6, [r0, #28]
 80072b4:	4605      	mov	r5, r0
 80072b6:	460c      	mov	r4, r1
 80072b8:	b976      	cbnz	r6, 80072d8 <_Bfree+0x28>
 80072ba:	2010      	movs	r0, #16
 80072bc:	f7ff ff02 	bl	80070c4 <malloc>
 80072c0:	4602      	mov	r2, r0
 80072c2:	61e8      	str	r0, [r5, #28]
 80072c4:	b920      	cbnz	r0, 80072d0 <_Bfree+0x20>
 80072c6:	4b09      	ldr	r3, [pc, #36]	@ (80072ec <_Bfree+0x3c>)
 80072c8:	4809      	ldr	r0, [pc, #36]	@ (80072f0 <_Bfree+0x40>)
 80072ca:	218f      	movs	r1, #143	@ 0x8f
 80072cc:	f001 fd34 	bl	8008d38 <__assert_func>
 80072d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80072d4:	6006      	str	r6, [r0, #0]
 80072d6:	60c6      	str	r6, [r0, #12]
 80072d8:	b13c      	cbz	r4, 80072ea <_Bfree+0x3a>
 80072da:	69eb      	ldr	r3, [r5, #28]
 80072dc:	6862      	ldr	r2, [r4, #4]
 80072de:	68db      	ldr	r3, [r3, #12]
 80072e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80072e4:	6021      	str	r1, [r4, #0]
 80072e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80072ea:	bd70      	pop	{r4, r5, r6, pc}
 80072ec:	08009c32 	.word	0x08009c32
 80072f0:	08009cb2 	.word	0x08009cb2

080072f4 <__multadd>:
 80072f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072f8:	690d      	ldr	r5, [r1, #16]
 80072fa:	4607      	mov	r7, r0
 80072fc:	460c      	mov	r4, r1
 80072fe:	461e      	mov	r6, r3
 8007300:	f101 0c14 	add.w	ip, r1, #20
 8007304:	2000      	movs	r0, #0
 8007306:	f8dc 3000 	ldr.w	r3, [ip]
 800730a:	b299      	uxth	r1, r3
 800730c:	fb02 6101 	mla	r1, r2, r1, r6
 8007310:	0c1e      	lsrs	r6, r3, #16
 8007312:	0c0b      	lsrs	r3, r1, #16
 8007314:	fb02 3306 	mla	r3, r2, r6, r3
 8007318:	b289      	uxth	r1, r1
 800731a:	3001      	adds	r0, #1
 800731c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007320:	4285      	cmp	r5, r0
 8007322:	f84c 1b04 	str.w	r1, [ip], #4
 8007326:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800732a:	dcec      	bgt.n	8007306 <__multadd+0x12>
 800732c:	b30e      	cbz	r6, 8007372 <__multadd+0x7e>
 800732e:	68a3      	ldr	r3, [r4, #8]
 8007330:	42ab      	cmp	r3, r5
 8007332:	dc19      	bgt.n	8007368 <__multadd+0x74>
 8007334:	6861      	ldr	r1, [r4, #4]
 8007336:	4638      	mov	r0, r7
 8007338:	3101      	adds	r1, #1
 800733a:	f7ff ff79 	bl	8007230 <_Balloc>
 800733e:	4680      	mov	r8, r0
 8007340:	b928      	cbnz	r0, 800734e <__multadd+0x5a>
 8007342:	4602      	mov	r2, r0
 8007344:	4b0c      	ldr	r3, [pc, #48]	@ (8007378 <__multadd+0x84>)
 8007346:	480d      	ldr	r0, [pc, #52]	@ (800737c <__multadd+0x88>)
 8007348:	21ba      	movs	r1, #186	@ 0xba
 800734a:	f001 fcf5 	bl	8008d38 <__assert_func>
 800734e:	6922      	ldr	r2, [r4, #16]
 8007350:	3202      	adds	r2, #2
 8007352:	f104 010c 	add.w	r1, r4, #12
 8007356:	0092      	lsls	r2, r2, #2
 8007358:	300c      	adds	r0, #12
 800735a:	f001 fcd7 	bl	8008d0c <memcpy>
 800735e:	4621      	mov	r1, r4
 8007360:	4638      	mov	r0, r7
 8007362:	f7ff ffa5 	bl	80072b0 <_Bfree>
 8007366:	4644      	mov	r4, r8
 8007368:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800736c:	3501      	adds	r5, #1
 800736e:	615e      	str	r6, [r3, #20]
 8007370:	6125      	str	r5, [r4, #16]
 8007372:	4620      	mov	r0, r4
 8007374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007378:	08009ca1 	.word	0x08009ca1
 800737c:	08009cb2 	.word	0x08009cb2

08007380 <__s2b>:
 8007380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007384:	460c      	mov	r4, r1
 8007386:	4615      	mov	r5, r2
 8007388:	461f      	mov	r7, r3
 800738a:	2209      	movs	r2, #9
 800738c:	3308      	adds	r3, #8
 800738e:	4606      	mov	r6, r0
 8007390:	fb93 f3f2 	sdiv	r3, r3, r2
 8007394:	2100      	movs	r1, #0
 8007396:	2201      	movs	r2, #1
 8007398:	429a      	cmp	r2, r3
 800739a:	db09      	blt.n	80073b0 <__s2b+0x30>
 800739c:	4630      	mov	r0, r6
 800739e:	f7ff ff47 	bl	8007230 <_Balloc>
 80073a2:	b940      	cbnz	r0, 80073b6 <__s2b+0x36>
 80073a4:	4602      	mov	r2, r0
 80073a6:	4b19      	ldr	r3, [pc, #100]	@ (800740c <__s2b+0x8c>)
 80073a8:	4819      	ldr	r0, [pc, #100]	@ (8007410 <__s2b+0x90>)
 80073aa:	21d3      	movs	r1, #211	@ 0xd3
 80073ac:	f001 fcc4 	bl	8008d38 <__assert_func>
 80073b0:	0052      	lsls	r2, r2, #1
 80073b2:	3101      	adds	r1, #1
 80073b4:	e7f0      	b.n	8007398 <__s2b+0x18>
 80073b6:	9b08      	ldr	r3, [sp, #32]
 80073b8:	6143      	str	r3, [r0, #20]
 80073ba:	2d09      	cmp	r5, #9
 80073bc:	f04f 0301 	mov.w	r3, #1
 80073c0:	6103      	str	r3, [r0, #16]
 80073c2:	dd16      	ble.n	80073f2 <__s2b+0x72>
 80073c4:	f104 0909 	add.w	r9, r4, #9
 80073c8:	46c8      	mov	r8, r9
 80073ca:	442c      	add	r4, r5
 80073cc:	f818 3b01 	ldrb.w	r3, [r8], #1
 80073d0:	4601      	mov	r1, r0
 80073d2:	3b30      	subs	r3, #48	@ 0x30
 80073d4:	220a      	movs	r2, #10
 80073d6:	4630      	mov	r0, r6
 80073d8:	f7ff ff8c 	bl	80072f4 <__multadd>
 80073dc:	45a0      	cmp	r8, r4
 80073de:	d1f5      	bne.n	80073cc <__s2b+0x4c>
 80073e0:	f1a5 0408 	sub.w	r4, r5, #8
 80073e4:	444c      	add	r4, r9
 80073e6:	1b2d      	subs	r5, r5, r4
 80073e8:	1963      	adds	r3, r4, r5
 80073ea:	42bb      	cmp	r3, r7
 80073ec:	db04      	blt.n	80073f8 <__s2b+0x78>
 80073ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073f2:	340a      	adds	r4, #10
 80073f4:	2509      	movs	r5, #9
 80073f6:	e7f6      	b.n	80073e6 <__s2b+0x66>
 80073f8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80073fc:	4601      	mov	r1, r0
 80073fe:	3b30      	subs	r3, #48	@ 0x30
 8007400:	220a      	movs	r2, #10
 8007402:	4630      	mov	r0, r6
 8007404:	f7ff ff76 	bl	80072f4 <__multadd>
 8007408:	e7ee      	b.n	80073e8 <__s2b+0x68>
 800740a:	bf00      	nop
 800740c:	08009ca1 	.word	0x08009ca1
 8007410:	08009cb2 	.word	0x08009cb2

08007414 <__hi0bits>:
 8007414:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007418:	4603      	mov	r3, r0
 800741a:	bf36      	itet	cc
 800741c:	0403      	lslcc	r3, r0, #16
 800741e:	2000      	movcs	r0, #0
 8007420:	2010      	movcc	r0, #16
 8007422:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007426:	bf3c      	itt	cc
 8007428:	021b      	lslcc	r3, r3, #8
 800742a:	3008      	addcc	r0, #8
 800742c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007430:	bf3c      	itt	cc
 8007432:	011b      	lslcc	r3, r3, #4
 8007434:	3004      	addcc	r0, #4
 8007436:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800743a:	bf3c      	itt	cc
 800743c:	009b      	lslcc	r3, r3, #2
 800743e:	3002      	addcc	r0, #2
 8007440:	2b00      	cmp	r3, #0
 8007442:	db05      	blt.n	8007450 <__hi0bits+0x3c>
 8007444:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007448:	f100 0001 	add.w	r0, r0, #1
 800744c:	bf08      	it	eq
 800744e:	2020      	moveq	r0, #32
 8007450:	4770      	bx	lr

08007452 <__lo0bits>:
 8007452:	6803      	ldr	r3, [r0, #0]
 8007454:	4602      	mov	r2, r0
 8007456:	f013 0007 	ands.w	r0, r3, #7
 800745a:	d00b      	beq.n	8007474 <__lo0bits+0x22>
 800745c:	07d9      	lsls	r1, r3, #31
 800745e:	d421      	bmi.n	80074a4 <__lo0bits+0x52>
 8007460:	0798      	lsls	r0, r3, #30
 8007462:	bf49      	itett	mi
 8007464:	085b      	lsrmi	r3, r3, #1
 8007466:	089b      	lsrpl	r3, r3, #2
 8007468:	2001      	movmi	r0, #1
 800746a:	6013      	strmi	r3, [r2, #0]
 800746c:	bf5c      	itt	pl
 800746e:	6013      	strpl	r3, [r2, #0]
 8007470:	2002      	movpl	r0, #2
 8007472:	4770      	bx	lr
 8007474:	b299      	uxth	r1, r3
 8007476:	b909      	cbnz	r1, 800747c <__lo0bits+0x2a>
 8007478:	0c1b      	lsrs	r3, r3, #16
 800747a:	2010      	movs	r0, #16
 800747c:	b2d9      	uxtb	r1, r3
 800747e:	b909      	cbnz	r1, 8007484 <__lo0bits+0x32>
 8007480:	3008      	adds	r0, #8
 8007482:	0a1b      	lsrs	r3, r3, #8
 8007484:	0719      	lsls	r1, r3, #28
 8007486:	bf04      	itt	eq
 8007488:	091b      	lsreq	r3, r3, #4
 800748a:	3004      	addeq	r0, #4
 800748c:	0799      	lsls	r1, r3, #30
 800748e:	bf04      	itt	eq
 8007490:	089b      	lsreq	r3, r3, #2
 8007492:	3002      	addeq	r0, #2
 8007494:	07d9      	lsls	r1, r3, #31
 8007496:	d403      	bmi.n	80074a0 <__lo0bits+0x4e>
 8007498:	085b      	lsrs	r3, r3, #1
 800749a:	f100 0001 	add.w	r0, r0, #1
 800749e:	d003      	beq.n	80074a8 <__lo0bits+0x56>
 80074a0:	6013      	str	r3, [r2, #0]
 80074a2:	4770      	bx	lr
 80074a4:	2000      	movs	r0, #0
 80074a6:	4770      	bx	lr
 80074a8:	2020      	movs	r0, #32
 80074aa:	4770      	bx	lr

080074ac <__i2b>:
 80074ac:	b510      	push	{r4, lr}
 80074ae:	460c      	mov	r4, r1
 80074b0:	2101      	movs	r1, #1
 80074b2:	f7ff febd 	bl	8007230 <_Balloc>
 80074b6:	4602      	mov	r2, r0
 80074b8:	b928      	cbnz	r0, 80074c6 <__i2b+0x1a>
 80074ba:	4b05      	ldr	r3, [pc, #20]	@ (80074d0 <__i2b+0x24>)
 80074bc:	4805      	ldr	r0, [pc, #20]	@ (80074d4 <__i2b+0x28>)
 80074be:	f240 1145 	movw	r1, #325	@ 0x145
 80074c2:	f001 fc39 	bl	8008d38 <__assert_func>
 80074c6:	2301      	movs	r3, #1
 80074c8:	6144      	str	r4, [r0, #20]
 80074ca:	6103      	str	r3, [r0, #16]
 80074cc:	bd10      	pop	{r4, pc}
 80074ce:	bf00      	nop
 80074d0:	08009ca1 	.word	0x08009ca1
 80074d4:	08009cb2 	.word	0x08009cb2

080074d8 <__multiply>:
 80074d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074dc:	4617      	mov	r7, r2
 80074de:	690a      	ldr	r2, [r1, #16]
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	429a      	cmp	r2, r3
 80074e4:	bfa8      	it	ge
 80074e6:	463b      	movge	r3, r7
 80074e8:	4689      	mov	r9, r1
 80074ea:	bfa4      	itt	ge
 80074ec:	460f      	movge	r7, r1
 80074ee:	4699      	movge	r9, r3
 80074f0:	693d      	ldr	r5, [r7, #16]
 80074f2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	6879      	ldr	r1, [r7, #4]
 80074fa:	eb05 060a 	add.w	r6, r5, sl
 80074fe:	42b3      	cmp	r3, r6
 8007500:	b085      	sub	sp, #20
 8007502:	bfb8      	it	lt
 8007504:	3101      	addlt	r1, #1
 8007506:	f7ff fe93 	bl	8007230 <_Balloc>
 800750a:	b930      	cbnz	r0, 800751a <__multiply+0x42>
 800750c:	4602      	mov	r2, r0
 800750e:	4b41      	ldr	r3, [pc, #260]	@ (8007614 <__multiply+0x13c>)
 8007510:	4841      	ldr	r0, [pc, #260]	@ (8007618 <__multiply+0x140>)
 8007512:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007516:	f001 fc0f 	bl	8008d38 <__assert_func>
 800751a:	f100 0414 	add.w	r4, r0, #20
 800751e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007522:	4623      	mov	r3, r4
 8007524:	2200      	movs	r2, #0
 8007526:	4573      	cmp	r3, lr
 8007528:	d320      	bcc.n	800756c <__multiply+0x94>
 800752a:	f107 0814 	add.w	r8, r7, #20
 800752e:	f109 0114 	add.w	r1, r9, #20
 8007532:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8007536:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800753a:	9302      	str	r3, [sp, #8]
 800753c:	1beb      	subs	r3, r5, r7
 800753e:	3b15      	subs	r3, #21
 8007540:	f023 0303 	bic.w	r3, r3, #3
 8007544:	3304      	adds	r3, #4
 8007546:	3715      	adds	r7, #21
 8007548:	42bd      	cmp	r5, r7
 800754a:	bf38      	it	cc
 800754c:	2304      	movcc	r3, #4
 800754e:	9301      	str	r3, [sp, #4]
 8007550:	9b02      	ldr	r3, [sp, #8]
 8007552:	9103      	str	r1, [sp, #12]
 8007554:	428b      	cmp	r3, r1
 8007556:	d80c      	bhi.n	8007572 <__multiply+0x9a>
 8007558:	2e00      	cmp	r6, #0
 800755a:	dd03      	ble.n	8007564 <__multiply+0x8c>
 800755c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007560:	2b00      	cmp	r3, #0
 8007562:	d055      	beq.n	8007610 <__multiply+0x138>
 8007564:	6106      	str	r6, [r0, #16]
 8007566:	b005      	add	sp, #20
 8007568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800756c:	f843 2b04 	str.w	r2, [r3], #4
 8007570:	e7d9      	b.n	8007526 <__multiply+0x4e>
 8007572:	f8b1 a000 	ldrh.w	sl, [r1]
 8007576:	f1ba 0f00 	cmp.w	sl, #0
 800757a:	d01f      	beq.n	80075bc <__multiply+0xe4>
 800757c:	46c4      	mov	ip, r8
 800757e:	46a1      	mov	r9, r4
 8007580:	2700      	movs	r7, #0
 8007582:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007586:	f8d9 3000 	ldr.w	r3, [r9]
 800758a:	fa1f fb82 	uxth.w	fp, r2
 800758e:	b29b      	uxth	r3, r3
 8007590:	fb0a 330b 	mla	r3, sl, fp, r3
 8007594:	443b      	add	r3, r7
 8007596:	f8d9 7000 	ldr.w	r7, [r9]
 800759a:	0c12      	lsrs	r2, r2, #16
 800759c:	0c3f      	lsrs	r7, r7, #16
 800759e:	fb0a 7202 	mla	r2, sl, r2, r7
 80075a2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80075ac:	4565      	cmp	r5, ip
 80075ae:	f849 3b04 	str.w	r3, [r9], #4
 80075b2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80075b6:	d8e4      	bhi.n	8007582 <__multiply+0xaa>
 80075b8:	9b01      	ldr	r3, [sp, #4]
 80075ba:	50e7      	str	r7, [r4, r3]
 80075bc:	9b03      	ldr	r3, [sp, #12]
 80075be:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80075c2:	3104      	adds	r1, #4
 80075c4:	f1b9 0f00 	cmp.w	r9, #0
 80075c8:	d020      	beq.n	800760c <__multiply+0x134>
 80075ca:	6823      	ldr	r3, [r4, #0]
 80075cc:	4647      	mov	r7, r8
 80075ce:	46a4      	mov	ip, r4
 80075d0:	f04f 0a00 	mov.w	sl, #0
 80075d4:	f8b7 b000 	ldrh.w	fp, [r7]
 80075d8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80075dc:	fb09 220b 	mla	r2, r9, fp, r2
 80075e0:	4452      	add	r2, sl
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80075e8:	f84c 3b04 	str.w	r3, [ip], #4
 80075ec:	f857 3b04 	ldr.w	r3, [r7], #4
 80075f0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80075f4:	f8bc 3000 	ldrh.w	r3, [ip]
 80075f8:	fb09 330a 	mla	r3, r9, sl, r3
 80075fc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007600:	42bd      	cmp	r5, r7
 8007602:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007606:	d8e5      	bhi.n	80075d4 <__multiply+0xfc>
 8007608:	9a01      	ldr	r2, [sp, #4]
 800760a:	50a3      	str	r3, [r4, r2]
 800760c:	3404      	adds	r4, #4
 800760e:	e79f      	b.n	8007550 <__multiply+0x78>
 8007610:	3e01      	subs	r6, #1
 8007612:	e7a1      	b.n	8007558 <__multiply+0x80>
 8007614:	08009ca1 	.word	0x08009ca1
 8007618:	08009cb2 	.word	0x08009cb2

0800761c <__pow5mult>:
 800761c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007620:	4615      	mov	r5, r2
 8007622:	f012 0203 	ands.w	r2, r2, #3
 8007626:	4607      	mov	r7, r0
 8007628:	460e      	mov	r6, r1
 800762a:	d007      	beq.n	800763c <__pow5mult+0x20>
 800762c:	4c25      	ldr	r4, [pc, #148]	@ (80076c4 <__pow5mult+0xa8>)
 800762e:	3a01      	subs	r2, #1
 8007630:	2300      	movs	r3, #0
 8007632:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007636:	f7ff fe5d 	bl	80072f4 <__multadd>
 800763a:	4606      	mov	r6, r0
 800763c:	10ad      	asrs	r5, r5, #2
 800763e:	d03d      	beq.n	80076bc <__pow5mult+0xa0>
 8007640:	69fc      	ldr	r4, [r7, #28]
 8007642:	b97c      	cbnz	r4, 8007664 <__pow5mult+0x48>
 8007644:	2010      	movs	r0, #16
 8007646:	f7ff fd3d 	bl	80070c4 <malloc>
 800764a:	4602      	mov	r2, r0
 800764c:	61f8      	str	r0, [r7, #28]
 800764e:	b928      	cbnz	r0, 800765c <__pow5mult+0x40>
 8007650:	4b1d      	ldr	r3, [pc, #116]	@ (80076c8 <__pow5mult+0xac>)
 8007652:	481e      	ldr	r0, [pc, #120]	@ (80076cc <__pow5mult+0xb0>)
 8007654:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007658:	f001 fb6e 	bl	8008d38 <__assert_func>
 800765c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007660:	6004      	str	r4, [r0, #0]
 8007662:	60c4      	str	r4, [r0, #12]
 8007664:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007668:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800766c:	b94c      	cbnz	r4, 8007682 <__pow5mult+0x66>
 800766e:	f240 2171 	movw	r1, #625	@ 0x271
 8007672:	4638      	mov	r0, r7
 8007674:	f7ff ff1a 	bl	80074ac <__i2b>
 8007678:	2300      	movs	r3, #0
 800767a:	f8c8 0008 	str.w	r0, [r8, #8]
 800767e:	4604      	mov	r4, r0
 8007680:	6003      	str	r3, [r0, #0]
 8007682:	f04f 0900 	mov.w	r9, #0
 8007686:	07eb      	lsls	r3, r5, #31
 8007688:	d50a      	bpl.n	80076a0 <__pow5mult+0x84>
 800768a:	4631      	mov	r1, r6
 800768c:	4622      	mov	r2, r4
 800768e:	4638      	mov	r0, r7
 8007690:	f7ff ff22 	bl	80074d8 <__multiply>
 8007694:	4631      	mov	r1, r6
 8007696:	4680      	mov	r8, r0
 8007698:	4638      	mov	r0, r7
 800769a:	f7ff fe09 	bl	80072b0 <_Bfree>
 800769e:	4646      	mov	r6, r8
 80076a0:	106d      	asrs	r5, r5, #1
 80076a2:	d00b      	beq.n	80076bc <__pow5mult+0xa0>
 80076a4:	6820      	ldr	r0, [r4, #0]
 80076a6:	b938      	cbnz	r0, 80076b8 <__pow5mult+0x9c>
 80076a8:	4622      	mov	r2, r4
 80076aa:	4621      	mov	r1, r4
 80076ac:	4638      	mov	r0, r7
 80076ae:	f7ff ff13 	bl	80074d8 <__multiply>
 80076b2:	6020      	str	r0, [r4, #0]
 80076b4:	f8c0 9000 	str.w	r9, [r0]
 80076b8:	4604      	mov	r4, r0
 80076ba:	e7e4      	b.n	8007686 <__pow5mult+0x6a>
 80076bc:	4630      	mov	r0, r6
 80076be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076c2:	bf00      	nop
 80076c4:	08009dc4 	.word	0x08009dc4
 80076c8:	08009c32 	.word	0x08009c32
 80076cc:	08009cb2 	.word	0x08009cb2

080076d0 <__lshift>:
 80076d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076d4:	460c      	mov	r4, r1
 80076d6:	6849      	ldr	r1, [r1, #4]
 80076d8:	6923      	ldr	r3, [r4, #16]
 80076da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80076de:	68a3      	ldr	r3, [r4, #8]
 80076e0:	4607      	mov	r7, r0
 80076e2:	4691      	mov	r9, r2
 80076e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80076e8:	f108 0601 	add.w	r6, r8, #1
 80076ec:	42b3      	cmp	r3, r6
 80076ee:	db0b      	blt.n	8007708 <__lshift+0x38>
 80076f0:	4638      	mov	r0, r7
 80076f2:	f7ff fd9d 	bl	8007230 <_Balloc>
 80076f6:	4605      	mov	r5, r0
 80076f8:	b948      	cbnz	r0, 800770e <__lshift+0x3e>
 80076fa:	4602      	mov	r2, r0
 80076fc:	4b28      	ldr	r3, [pc, #160]	@ (80077a0 <__lshift+0xd0>)
 80076fe:	4829      	ldr	r0, [pc, #164]	@ (80077a4 <__lshift+0xd4>)
 8007700:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007704:	f001 fb18 	bl	8008d38 <__assert_func>
 8007708:	3101      	adds	r1, #1
 800770a:	005b      	lsls	r3, r3, #1
 800770c:	e7ee      	b.n	80076ec <__lshift+0x1c>
 800770e:	2300      	movs	r3, #0
 8007710:	f100 0114 	add.w	r1, r0, #20
 8007714:	f100 0210 	add.w	r2, r0, #16
 8007718:	4618      	mov	r0, r3
 800771a:	4553      	cmp	r3, sl
 800771c:	db33      	blt.n	8007786 <__lshift+0xb6>
 800771e:	6920      	ldr	r0, [r4, #16]
 8007720:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007724:	f104 0314 	add.w	r3, r4, #20
 8007728:	f019 091f 	ands.w	r9, r9, #31
 800772c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007730:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007734:	d02b      	beq.n	800778e <__lshift+0xbe>
 8007736:	f1c9 0e20 	rsb	lr, r9, #32
 800773a:	468a      	mov	sl, r1
 800773c:	2200      	movs	r2, #0
 800773e:	6818      	ldr	r0, [r3, #0]
 8007740:	fa00 f009 	lsl.w	r0, r0, r9
 8007744:	4310      	orrs	r0, r2
 8007746:	f84a 0b04 	str.w	r0, [sl], #4
 800774a:	f853 2b04 	ldr.w	r2, [r3], #4
 800774e:	459c      	cmp	ip, r3
 8007750:	fa22 f20e 	lsr.w	r2, r2, lr
 8007754:	d8f3      	bhi.n	800773e <__lshift+0x6e>
 8007756:	ebac 0304 	sub.w	r3, ip, r4
 800775a:	3b15      	subs	r3, #21
 800775c:	f023 0303 	bic.w	r3, r3, #3
 8007760:	3304      	adds	r3, #4
 8007762:	f104 0015 	add.w	r0, r4, #21
 8007766:	4560      	cmp	r0, ip
 8007768:	bf88      	it	hi
 800776a:	2304      	movhi	r3, #4
 800776c:	50ca      	str	r2, [r1, r3]
 800776e:	b10a      	cbz	r2, 8007774 <__lshift+0xa4>
 8007770:	f108 0602 	add.w	r6, r8, #2
 8007774:	3e01      	subs	r6, #1
 8007776:	4638      	mov	r0, r7
 8007778:	612e      	str	r6, [r5, #16]
 800777a:	4621      	mov	r1, r4
 800777c:	f7ff fd98 	bl	80072b0 <_Bfree>
 8007780:	4628      	mov	r0, r5
 8007782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007786:	f842 0f04 	str.w	r0, [r2, #4]!
 800778a:	3301      	adds	r3, #1
 800778c:	e7c5      	b.n	800771a <__lshift+0x4a>
 800778e:	3904      	subs	r1, #4
 8007790:	f853 2b04 	ldr.w	r2, [r3], #4
 8007794:	f841 2f04 	str.w	r2, [r1, #4]!
 8007798:	459c      	cmp	ip, r3
 800779a:	d8f9      	bhi.n	8007790 <__lshift+0xc0>
 800779c:	e7ea      	b.n	8007774 <__lshift+0xa4>
 800779e:	bf00      	nop
 80077a0:	08009ca1 	.word	0x08009ca1
 80077a4:	08009cb2 	.word	0x08009cb2

080077a8 <__mcmp>:
 80077a8:	690a      	ldr	r2, [r1, #16]
 80077aa:	4603      	mov	r3, r0
 80077ac:	6900      	ldr	r0, [r0, #16]
 80077ae:	1a80      	subs	r0, r0, r2
 80077b0:	b530      	push	{r4, r5, lr}
 80077b2:	d10e      	bne.n	80077d2 <__mcmp+0x2a>
 80077b4:	3314      	adds	r3, #20
 80077b6:	3114      	adds	r1, #20
 80077b8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80077bc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80077c0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80077c4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80077c8:	4295      	cmp	r5, r2
 80077ca:	d003      	beq.n	80077d4 <__mcmp+0x2c>
 80077cc:	d205      	bcs.n	80077da <__mcmp+0x32>
 80077ce:	f04f 30ff 	mov.w	r0, #4294967295
 80077d2:	bd30      	pop	{r4, r5, pc}
 80077d4:	42a3      	cmp	r3, r4
 80077d6:	d3f3      	bcc.n	80077c0 <__mcmp+0x18>
 80077d8:	e7fb      	b.n	80077d2 <__mcmp+0x2a>
 80077da:	2001      	movs	r0, #1
 80077dc:	e7f9      	b.n	80077d2 <__mcmp+0x2a>
	...

080077e0 <__mdiff>:
 80077e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077e4:	4689      	mov	r9, r1
 80077e6:	4606      	mov	r6, r0
 80077e8:	4611      	mov	r1, r2
 80077ea:	4648      	mov	r0, r9
 80077ec:	4614      	mov	r4, r2
 80077ee:	f7ff ffdb 	bl	80077a8 <__mcmp>
 80077f2:	1e05      	subs	r5, r0, #0
 80077f4:	d112      	bne.n	800781c <__mdiff+0x3c>
 80077f6:	4629      	mov	r1, r5
 80077f8:	4630      	mov	r0, r6
 80077fa:	f7ff fd19 	bl	8007230 <_Balloc>
 80077fe:	4602      	mov	r2, r0
 8007800:	b928      	cbnz	r0, 800780e <__mdiff+0x2e>
 8007802:	4b3f      	ldr	r3, [pc, #252]	@ (8007900 <__mdiff+0x120>)
 8007804:	f240 2137 	movw	r1, #567	@ 0x237
 8007808:	483e      	ldr	r0, [pc, #248]	@ (8007904 <__mdiff+0x124>)
 800780a:	f001 fa95 	bl	8008d38 <__assert_func>
 800780e:	2301      	movs	r3, #1
 8007810:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007814:	4610      	mov	r0, r2
 8007816:	b003      	add	sp, #12
 8007818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800781c:	bfbc      	itt	lt
 800781e:	464b      	movlt	r3, r9
 8007820:	46a1      	movlt	r9, r4
 8007822:	4630      	mov	r0, r6
 8007824:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007828:	bfba      	itte	lt
 800782a:	461c      	movlt	r4, r3
 800782c:	2501      	movlt	r5, #1
 800782e:	2500      	movge	r5, #0
 8007830:	f7ff fcfe 	bl	8007230 <_Balloc>
 8007834:	4602      	mov	r2, r0
 8007836:	b918      	cbnz	r0, 8007840 <__mdiff+0x60>
 8007838:	4b31      	ldr	r3, [pc, #196]	@ (8007900 <__mdiff+0x120>)
 800783a:	f240 2145 	movw	r1, #581	@ 0x245
 800783e:	e7e3      	b.n	8007808 <__mdiff+0x28>
 8007840:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007844:	6926      	ldr	r6, [r4, #16]
 8007846:	60c5      	str	r5, [r0, #12]
 8007848:	f109 0310 	add.w	r3, r9, #16
 800784c:	f109 0514 	add.w	r5, r9, #20
 8007850:	f104 0e14 	add.w	lr, r4, #20
 8007854:	f100 0b14 	add.w	fp, r0, #20
 8007858:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800785c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007860:	9301      	str	r3, [sp, #4]
 8007862:	46d9      	mov	r9, fp
 8007864:	f04f 0c00 	mov.w	ip, #0
 8007868:	9b01      	ldr	r3, [sp, #4]
 800786a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800786e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007872:	9301      	str	r3, [sp, #4]
 8007874:	fa1f f38a 	uxth.w	r3, sl
 8007878:	4619      	mov	r1, r3
 800787a:	b283      	uxth	r3, r0
 800787c:	1acb      	subs	r3, r1, r3
 800787e:	0c00      	lsrs	r0, r0, #16
 8007880:	4463      	add	r3, ip
 8007882:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007886:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800788a:	b29b      	uxth	r3, r3
 800788c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007890:	4576      	cmp	r6, lr
 8007892:	f849 3b04 	str.w	r3, [r9], #4
 8007896:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800789a:	d8e5      	bhi.n	8007868 <__mdiff+0x88>
 800789c:	1b33      	subs	r3, r6, r4
 800789e:	3b15      	subs	r3, #21
 80078a0:	f023 0303 	bic.w	r3, r3, #3
 80078a4:	3415      	adds	r4, #21
 80078a6:	3304      	adds	r3, #4
 80078a8:	42a6      	cmp	r6, r4
 80078aa:	bf38      	it	cc
 80078ac:	2304      	movcc	r3, #4
 80078ae:	441d      	add	r5, r3
 80078b0:	445b      	add	r3, fp
 80078b2:	461e      	mov	r6, r3
 80078b4:	462c      	mov	r4, r5
 80078b6:	4544      	cmp	r4, r8
 80078b8:	d30e      	bcc.n	80078d8 <__mdiff+0xf8>
 80078ba:	f108 0103 	add.w	r1, r8, #3
 80078be:	1b49      	subs	r1, r1, r5
 80078c0:	f021 0103 	bic.w	r1, r1, #3
 80078c4:	3d03      	subs	r5, #3
 80078c6:	45a8      	cmp	r8, r5
 80078c8:	bf38      	it	cc
 80078ca:	2100      	movcc	r1, #0
 80078cc:	440b      	add	r3, r1
 80078ce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80078d2:	b191      	cbz	r1, 80078fa <__mdiff+0x11a>
 80078d4:	6117      	str	r7, [r2, #16]
 80078d6:	e79d      	b.n	8007814 <__mdiff+0x34>
 80078d8:	f854 1b04 	ldr.w	r1, [r4], #4
 80078dc:	46e6      	mov	lr, ip
 80078de:	0c08      	lsrs	r0, r1, #16
 80078e0:	fa1c fc81 	uxtah	ip, ip, r1
 80078e4:	4471      	add	r1, lr
 80078e6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80078ea:	b289      	uxth	r1, r1
 80078ec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80078f0:	f846 1b04 	str.w	r1, [r6], #4
 80078f4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80078f8:	e7dd      	b.n	80078b6 <__mdiff+0xd6>
 80078fa:	3f01      	subs	r7, #1
 80078fc:	e7e7      	b.n	80078ce <__mdiff+0xee>
 80078fe:	bf00      	nop
 8007900:	08009ca1 	.word	0x08009ca1
 8007904:	08009cb2 	.word	0x08009cb2

08007908 <__ulp>:
 8007908:	b082      	sub	sp, #8
 800790a:	ed8d 0b00 	vstr	d0, [sp]
 800790e:	9a01      	ldr	r2, [sp, #4]
 8007910:	4b0f      	ldr	r3, [pc, #60]	@ (8007950 <__ulp+0x48>)
 8007912:	4013      	ands	r3, r2
 8007914:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007918:	2b00      	cmp	r3, #0
 800791a:	dc08      	bgt.n	800792e <__ulp+0x26>
 800791c:	425b      	negs	r3, r3
 800791e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8007922:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007926:	da04      	bge.n	8007932 <__ulp+0x2a>
 8007928:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800792c:	4113      	asrs	r3, r2
 800792e:	2200      	movs	r2, #0
 8007930:	e008      	b.n	8007944 <__ulp+0x3c>
 8007932:	f1a2 0314 	sub.w	r3, r2, #20
 8007936:	2b1e      	cmp	r3, #30
 8007938:	bfda      	itte	le
 800793a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800793e:	40da      	lsrle	r2, r3
 8007940:	2201      	movgt	r2, #1
 8007942:	2300      	movs	r3, #0
 8007944:	4619      	mov	r1, r3
 8007946:	4610      	mov	r0, r2
 8007948:	ec41 0b10 	vmov	d0, r0, r1
 800794c:	b002      	add	sp, #8
 800794e:	4770      	bx	lr
 8007950:	7ff00000 	.word	0x7ff00000

08007954 <__b2d>:
 8007954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007958:	6906      	ldr	r6, [r0, #16]
 800795a:	f100 0814 	add.w	r8, r0, #20
 800795e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8007962:	1f37      	subs	r7, r6, #4
 8007964:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007968:	4610      	mov	r0, r2
 800796a:	f7ff fd53 	bl	8007414 <__hi0bits>
 800796e:	f1c0 0320 	rsb	r3, r0, #32
 8007972:	280a      	cmp	r0, #10
 8007974:	600b      	str	r3, [r1, #0]
 8007976:	491b      	ldr	r1, [pc, #108]	@ (80079e4 <__b2d+0x90>)
 8007978:	dc15      	bgt.n	80079a6 <__b2d+0x52>
 800797a:	f1c0 0c0b 	rsb	ip, r0, #11
 800797e:	fa22 f30c 	lsr.w	r3, r2, ip
 8007982:	45b8      	cmp	r8, r7
 8007984:	ea43 0501 	orr.w	r5, r3, r1
 8007988:	bf34      	ite	cc
 800798a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800798e:	2300      	movcs	r3, #0
 8007990:	3015      	adds	r0, #21
 8007992:	fa02 f000 	lsl.w	r0, r2, r0
 8007996:	fa23 f30c 	lsr.w	r3, r3, ip
 800799a:	4303      	orrs	r3, r0
 800799c:	461c      	mov	r4, r3
 800799e:	ec45 4b10 	vmov	d0, r4, r5
 80079a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079a6:	45b8      	cmp	r8, r7
 80079a8:	bf3a      	itte	cc
 80079aa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80079ae:	f1a6 0708 	subcc.w	r7, r6, #8
 80079b2:	2300      	movcs	r3, #0
 80079b4:	380b      	subs	r0, #11
 80079b6:	d012      	beq.n	80079de <__b2d+0x8a>
 80079b8:	f1c0 0120 	rsb	r1, r0, #32
 80079bc:	fa23 f401 	lsr.w	r4, r3, r1
 80079c0:	4082      	lsls	r2, r0
 80079c2:	4322      	orrs	r2, r4
 80079c4:	4547      	cmp	r7, r8
 80079c6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80079ca:	bf8c      	ite	hi
 80079cc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80079d0:	2200      	movls	r2, #0
 80079d2:	4083      	lsls	r3, r0
 80079d4:	40ca      	lsrs	r2, r1
 80079d6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80079da:	4313      	orrs	r3, r2
 80079dc:	e7de      	b.n	800799c <__b2d+0x48>
 80079de:	ea42 0501 	orr.w	r5, r2, r1
 80079e2:	e7db      	b.n	800799c <__b2d+0x48>
 80079e4:	3ff00000 	.word	0x3ff00000

080079e8 <__d2b>:
 80079e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80079ec:	460f      	mov	r7, r1
 80079ee:	2101      	movs	r1, #1
 80079f0:	ec59 8b10 	vmov	r8, r9, d0
 80079f4:	4616      	mov	r6, r2
 80079f6:	f7ff fc1b 	bl	8007230 <_Balloc>
 80079fa:	4604      	mov	r4, r0
 80079fc:	b930      	cbnz	r0, 8007a0c <__d2b+0x24>
 80079fe:	4602      	mov	r2, r0
 8007a00:	4b23      	ldr	r3, [pc, #140]	@ (8007a90 <__d2b+0xa8>)
 8007a02:	4824      	ldr	r0, [pc, #144]	@ (8007a94 <__d2b+0xac>)
 8007a04:	f240 310f 	movw	r1, #783	@ 0x30f
 8007a08:	f001 f996 	bl	8008d38 <__assert_func>
 8007a0c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007a10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007a14:	b10d      	cbz	r5, 8007a1a <__d2b+0x32>
 8007a16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007a1a:	9301      	str	r3, [sp, #4]
 8007a1c:	f1b8 0300 	subs.w	r3, r8, #0
 8007a20:	d023      	beq.n	8007a6a <__d2b+0x82>
 8007a22:	4668      	mov	r0, sp
 8007a24:	9300      	str	r3, [sp, #0]
 8007a26:	f7ff fd14 	bl	8007452 <__lo0bits>
 8007a2a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007a2e:	b1d0      	cbz	r0, 8007a66 <__d2b+0x7e>
 8007a30:	f1c0 0320 	rsb	r3, r0, #32
 8007a34:	fa02 f303 	lsl.w	r3, r2, r3
 8007a38:	430b      	orrs	r3, r1
 8007a3a:	40c2      	lsrs	r2, r0
 8007a3c:	6163      	str	r3, [r4, #20]
 8007a3e:	9201      	str	r2, [sp, #4]
 8007a40:	9b01      	ldr	r3, [sp, #4]
 8007a42:	61a3      	str	r3, [r4, #24]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	bf0c      	ite	eq
 8007a48:	2201      	moveq	r2, #1
 8007a4a:	2202      	movne	r2, #2
 8007a4c:	6122      	str	r2, [r4, #16]
 8007a4e:	b1a5      	cbz	r5, 8007a7a <__d2b+0x92>
 8007a50:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007a54:	4405      	add	r5, r0
 8007a56:	603d      	str	r5, [r7, #0]
 8007a58:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007a5c:	6030      	str	r0, [r6, #0]
 8007a5e:	4620      	mov	r0, r4
 8007a60:	b003      	add	sp, #12
 8007a62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a66:	6161      	str	r1, [r4, #20]
 8007a68:	e7ea      	b.n	8007a40 <__d2b+0x58>
 8007a6a:	a801      	add	r0, sp, #4
 8007a6c:	f7ff fcf1 	bl	8007452 <__lo0bits>
 8007a70:	9b01      	ldr	r3, [sp, #4]
 8007a72:	6163      	str	r3, [r4, #20]
 8007a74:	3020      	adds	r0, #32
 8007a76:	2201      	movs	r2, #1
 8007a78:	e7e8      	b.n	8007a4c <__d2b+0x64>
 8007a7a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007a7e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007a82:	6038      	str	r0, [r7, #0]
 8007a84:	6918      	ldr	r0, [r3, #16]
 8007a86:	f7ff fcc5 	bl	8007414 <__hi0bits>
 8007a8a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007a8e:	e7e5      	b.n	8007a5c <__d2b+0x74>
 8007a90:	08009ca1 	.word	0x08009ca1
 8007a94:	08009cb2 	.word	0x08009cb2

08007a98 <__ratio>:
 8007a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a9c:	b085      	sub	sp, #20
 8007a9e:	e9cd 1000 	strd	r1, r0, [sp]
 8007aa2:	a902      	add	r1, sp, #8
 8007aa4:	f7ff ff56 	bl	8007954 <__b2d>
 8007aa8:	9800      	ldr	r0, [sp, #0]
 8007aaa:	a903      	add	r1, sp, #12
 8007aac:	ec55 4b10 	vmov	r4, r5, d0
 8007ab0:	f7ff ff50 	bl	8007954 <__b2d>
 8007ab4:	9b01      	ldr	r3, [sp, #4]
 8007ab6:	6919      	ldr	r1, [r3, #16]
 8007ab8:	9b00      	ldr	r3, [sp, #0]
 8007aba:	691b      	ldr	r3, [r3, #16]
 8007abc:	1ac9      	subs	r1, r1, r3
 8007abe:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007ac2:	1a9b      	subs	r3, r3, r2
 8007ac4:	ec5b ab10 	vmov	sl, fp, d0
 8007ac8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	bfce      	itee	gt
 8007ad0:	462a      	movgt	r2, r5
 8007ad2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007ad6:	465a      	movle	r2, fp
 8007ad8:	462f      	mov	r7, r5
 8007ada:	46d9      	mov	r9, fp
 8007adc:	bfcc      	ite	gt
 8007ade:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007ae2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8007ae6:	464b      	mov	r3, r9
 8007ae8:	4652      	mov	r2, sl
 8007aea:	4620      	mov	r0, r4
 8007aec:	4639      	mov	r1, r7
 8007aee:	f7f8 fed5 	bl	800089c <__aeabi_ddiv>
 8007af2:	ec41 0b10 	vmov	d0, r0, r1
 8007af6:	b005      	add	sp, #20
 8007af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007afc <__copybits>:
 8007afc:	3901      	subs	r1, #1
 8007afe:	b570      	push	{r4, r5, r6, lr}
 8007b00:	1149      	asrs	r1, r1, #5
 8007b02:	6914      	ldr	r4, [r2, #16]
 8007b04:	3101      	adds	r1, #1
 8007b06:	f102 0314 	add.w	r3, r2, #20
 8007b0a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007b0e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007b12:	1f05      	subs	r5, r0, #4
 8007b14:	42a3      	cmp	r3, r4
 8007b16:	d30c      	bcc.n	8007b32 <__copybits+0x36>
 8007b18:	1aa3      	subs	r3, r4, r2
 8007b1a:	3b11      	subs	r3, #17
 8007b1c:	f023 0303 	bic.w	r3, r3, #3
 8007b20:	3211      	adds	r2, #17
 8007b22:	42a2      	cmp	r2, r4
 8007b24:	bf88      	it	hi
 8007b26:	2300      	movhi	r3, #0
 8007b28:	4418      	add	r0, r3
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	4288      	cmp	r0, r1
 8007b2e:	d305      	bcc.n	8007b3c <__copybits+0x40>
 8007b30:	bd70      	pop	{r4, r5, r6, pc}
 8007b32:	f853 6b04 	ldr.w	r6, [r3], #4
 8007b36:	f845 6f04 	str.w	r6, [r5, #4]!
 8007b3a:	e7eb      	b.n	8007b14 <__copybits+0x18>
 8007b3c:	f840 3b04 	str.w	r3, [r0], #4
 8007b40:	e7f4      	b.n	8007b2c <__copybits+0x30>

08007b42 <__any_on>:
 8007b42:	f100 0214 	add.w	r2, r0, #20
 8007b46:	6900      	ldr	r0, [r0, #16]
 8007b48:	114b      	asrs	r3, r1, #5
 8007b4a:	4298      	cmp	r0, r3
 8007b4c:	b510      	push	{r4, lr}
 8007b4e:	db11      	blt.n	8007b74 <__any_on+0x32>
 8007b50:	dd0a      	ble.n	8007b68 <__any_on+0x26>
 8007b52:	f011 011f 	ands.w	r1, r1, #31
 8007b56:	d007      	beq.n	8007b68 <__any_on+0x26>
 8007b58:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007b5c:	fa24 f001 	lsr.w	r0, r4, r1
 8007b60:	fa00 f101 	lsl.w	r1, r0, r1
 8007b64:	428c      	cmp	r4, r1
 8007b66:	d10b      	bne.n	8007b80 <__any_on+0x3e>
 8007b68:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d803      	bhi.n	8007b78 <__any_on+0x36>
 8007b70:	2000      	movs	r0, #0
 8007b72:	bd10      	pop	{r4, pc}
 8007b74:	4603      	mov	r3, r0
 8007b76:	e7f7      	b.n	8007b68 <__any_on+0x26>
 8007b78:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007b7c:	2900      	cmp	r1, #0
 8007b7e:	d0f5      	beq.n	8007b6c <__any_on+0x2a>
 8007b80:	2001      	movs	r0, #1
 8007b82:	e7f6      	b.n	8007b72 <__any_on+0x30>

08007b84 <sulp>:
 8007b84:	b570      	push	{r4, r5, r6, lr}
 8007b86:	4604      	mov	r4, r0
 8007b88:	460d      	mov	r5, r1
 8007b8a:	ec45 4b10 	vmov	d0, r4, r5
 8007b8e:	4616      	mov	r6, r2
 8007b90:	f7ff feba 	bl	8007908 <__ulp>
 8007b94:	ec51 0b10 	vmov	r0, r1, d0
 8007b98:	b17e      	cbz	r6, 8007bba <sulp+0x36>
 8007b9a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007b9e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	dd09      	ble.n	8007bba <sulp+0x36>
 8007ba6:	051b      	lsls	r3, r3, #20
 8007ba8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007bac:	2400      	movs	r4, #0
 8007bae:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007bb2:	4622      	mov	r2, r4
 8007bb4:	462b      	mov	r3, r5
 8007bb6:	f7f8 fd47 	bl	8000648 <__aeabi_dmul>
 8007bba:	ec41 0b10 	vmov	d0, r0, r1
 8007bbe:	bd70      	pop	{r4, r5, r6, pc}

08007bc0 <_strtod_l>:
 8007bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bc4:	b09f      	sub	sp, #124	@ 0x7c
 8007bc6:	460c      	mov	r4, r1
 8007bc8:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007bca:	2200      	movs	r2, #0
 8007bcc:	921a      	str	r2, [sp, #104]	@ 0x68
 8007bce:	9005      	str	r0, [sp, #20]
 8007bd0:	f04f 0a00 	mov.w	sl, #0
 8007bd4:	f04f 0b00 	mov.w	fp, #0
 8007bd8:	460a      	mov	r2, r1
 8007bda:	9219      	str	r2, [sp, #100]	@ 0x64
 8007bdc:	7811      	ldrb	r1, [r2, #0]
 8007bde:	292b      	cmp	r1, #43	@ 0x2b
 8007be0:	d04a      	beq.n	8007c78 <_strtod_l+0xb8>
 8007be2:	d838      	bhi.n	8007c56 <_strtod_l+0x96>
 8007be4:	290d      	cmp	r1, #13
 8007be6:	d832      	bhi.n	8007c4e <_strtod_l+0x8e>
 8007be8:	2908      	cmp	r1, #8
 8007bea:	d832      	bhi.n	8007c52 <_strtod_l+0x92>
 8007bec:	2900      	cmp	r1, #0
 8007bee:	d03b      	beq.n	8007c68 <_strtod_l+0xa8>
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	920e      	str	r2, [sp, #56]	@ 0x38
 8007bf4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007bf6:	782a      	ldrb	r2, [r5, #0]
 8007bf8:	2a30      	cmp	r2, #48	@ 0x30
 8007bfa:	f040 80b2 	bne.w	8007d62 <_strtod_l+0x1a2>
 8007bfe:	786a      	ldrb	r2, [r5, #1]
 8007c00:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007c04:	2a58      	cmp	r2, #88	@ 0x58
 8007c06:	d16e      	bne.n	8007ce6 <_strtod_l+0x126>
 8007c08:	9302      	str	r3, [sp, #8]
 8007c0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007c0c:	9301      	str	r3, [sp, #4]
 8007c0e:	ab1a      	add	r3, sp, #104	@ 0x68
 8007c10:	9300      	str	r3, [sp, #0]
 8007c12:	4a8f      	ldr	r2, [pc, #572]	@ (8007e50 <_strtod_l+0x290>)
 8007c14:	9805      	ldr	r0, [sp, #20]
 8007c16:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007c18:	a919      	add	r1, sp, #100	@ 0x64
 8007c1a:	f001 f927 	bl	8008e6c <__gethex>
 8007c1e:	f010 060f 	ands.w	r6, r0, #15
 8007c22:	4604      	mov	r4, r0
 8007c24:	d005      	beq.n	8007c32 <_strtod_l+0x72>
 8007c26:	2e06      	cmp	r6, #6
 8007c28:	d128      	bne.n	8007c7c <_strtod_l+0xbc>
 8007c2a:	3501      	adds	r5, #1
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	9519      	str	r5, [sp, #100]	@ 0x64
 8007c30:	930e      	str	r3, [sp, #56]	@ 0x38
 8007c32:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	f040 858e 	bne.w	8008756 <_strtod_l+0xb96>
 8007c3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007c3c:	b1cb      	cbz	r3, 8007c72 <_strtod_l+0xb2>
 8007c3e:	4652      	mov	r2, sl
 8007c40:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8007c44:	ec43 2b10 	vmov	d0, r2, r3
 8007c48:	b01f      	add	sp, #124	@ 0x7c
 8007c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c4e:	2920      	cmp	r1, #32
 8007c50:	d1ce      	bne.n	8007bf0 <_strtod_l+0x30>
 8007c52:	3201      	adds	r2, #1
 8007c54:	e7c1      	b.n	8007bda <_strtod_l+0x1a>
 8007c56:	292d      	cmp	r1, #45	@ 0x2d
 8007c58:	d1ca      	bne.n	8007bf0 <_strtod_l+0x30>
 8007c5a:	2101      	movs	r1, #1
 8007c5c:	910e      	str	r1, [sp, #56]	@ 0x38
 8007c5e:	1c51      	adds	r1, r2, #1
 8007c60:	9119      	str	r1, [sp, #100]	@ 0x64
 8007c62:	7852      	ldrb	r2, [r2, #1]
 8007c64:	2a00      	cmp	r2, #0
 8007c66:	d1c5      	bne.n	8007bf4 <_strtod_l+0x34>
 8007c68:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007c6a:	9419      	str	r4, [sp, #100]	@ 0x64
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	f040 8570 	bne.w	8008752 <_strtod_l+0xb92>
 8007c72:	4652      	mov	r2, sl
 8007c74:	465b      	mov	r3, fp
 8007c76:	e7e5      	b.n	8007c44 <_strtod_l+0x84>
 8007c78:	2100      	movs	r1, #0
 8007c7a:	e7ef      	b.n	8007c5c <_strtod_l+0x9c>
 8007c7c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007c7e:	b13a      	cbz	r2, 8007c90 <_strtod_l+0xd0>
 8007c80:	2135      	movs	r1, #53	@ 0x35
 8007c82:	a81c      	add	r0, sp, #112	@ 0x70
 8007c84:	f7ff ff3a 	bl	8007afc <__copybits>
 8007c88:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007c8a:	9805      	ldr	r0, [sp, #20]
 8007c8c:	f7ff fb10 	bl	80072b0 <_Bfree>
 8007c90:	3e01      	subs	r6, #1
 8007c92:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007c94:	2e04      	cmp	r6, #4
 8007c96:	d806      	bhi.n	8007ca6 <_strtod_l+0xe6>
 8007c98:	e8df f006 	tbb	[pc, r6]
 8007c9c:	201d0314 	.word	0x201d0314
 8007ca0:	14          	.byte	0x14
 8007ca1:	00          	.byte	0x00
 8007ca2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007ca6:	05e1      	lsls	r1, r4, #23
 8007ca8:	bf48      	it	mi
 8007caa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007cae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007cb2:	0d1b      	lsrs	r3, r3, #20
 8007cb4:	051b      	lsls	r3, r3, #20
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d1bb      	bne.n	8007c32 <_strtod_l+0x72>
 8007cba:	f7fe fb2b 	bl	8006314 <__errno>
 8007cbe:	2322      	movs	r3, #34	@ 0x22
 8007cc0:	6003      	str	r3, [r0, #0]
 8007cc2:	e7b6      	b.n	8007c32 <_strtod_l+0x72>
 8007cc4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007cc8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007ccc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007cd0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007cd4:	e7e7      	b.n	8007ca6 <_strtod_l+0xe6>
 8007cd6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8007e58 <_strtod_l+0x298>
 8007cda:	e7e4      	b.n	8007ca6 <_strtod_l+0xe6>
 8007cdc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007ce0:	f04f 3aff 	mov.w	sl, #4294967295
 8007ce4:	e7df      	b.n	8007ca6 <_strtod_l+0xe6>
 8007ce6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007ce8:	1c5a      	adds	r2, r3, #1
 8007cea:	9219      	str	r2, [sp, #100]	@ 0x64
 8007cec:	785b      	ldrb	r3, [r3, #1]
 8007cee:	2b30      	cmp	r3, #48	@ 0x30
 8007cf0:	d0f9      	beq.n	8007ce6 <_strtod_l+0x126>
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d09d      	beq.n	8007c32 <_strtod_l+0x72>
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	2700      	movs	r7, #0
 8007cfa:	9308      	str	r3, [sp, #32]
 8007cfc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007cfe:	930c      	str	r3, [sp, #48]	@ 0x30
 8007d00:	970b      	str	r7, [sp, #44]	@ 0x2c
 8007d02:	46b9      	mov	r9, r7
 8007d04:	220a      	movs	r2, #10
 8007d06:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007d08:	7805      	ldrb	r5, [r0, #0]
 8007d0a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007d0e:	b2d9      	uxtb	r1, r3
 8007d10:	2909      	cmp	r1, #9
 8007d12:	d928      	bls.n	8007d66 <_strtod_l+0x1a6>
 8007d14:	494f      	ldr	r1, [pc, #316]	@ (8007e54 <_strtod_l+0x294>)
 8007d16:	2201      	movs	r2, #1
 8007d18:	f000 ffd6 	bl	8008cc8 <strncmp>
 8007d1c:	2800      	cmp	r0, #0
 8007d1e:	d032      	beq.n	8007d86 <_strtod_l+0x1c6>
 8007d20:	2000      	movs	r0, #0
 8007d22:	462a      	mov	r2, r5
 8007d24:	900a      	str	r0, [sp, #40]	@ 0x28
 8007d26:	464d      	mov	r5, r9
 8007d28:	4603      	mov	r3, r0
 8007d2a:	2a65      	cmp	r2, #101	@ 0x65
 8007d2c:	d001      	beq.n	8007d32 <_strtod_l+0x172>
 8007d2e:	2a45      	cmp	r2, #69	@ 0x45
 8007d30:	d114      	bne.n	8007d5c <_strtod_l+0x19c>
 8007d32:	b91d      	cbnz	r5, 8007d3c <_strtod_l+0x17c>
 8007d34:	9a08      	ldr	r2, [sp, #32]
 8007d36:	4302      	orrs	r2, r0
 8007d38:	d096      	beq.n	8007c68 <_strtod_l+0xa8>
 8007d3a:	2500      	movs	r5, #0
 8007d3c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007d3e:	1c62      	adds	r2, r4, #1
 8007d40:	9219      	str	r2, [sp, #100]	@ 0x64
 8007d42:	7862      	ldrb	r2, [r4, #1]
 8007d44:	2a2b      	cmp	r2, #43	@ 0x2b
 8007d46:	d07a      	beq.n	8007e3e <_strtod_l+0x27e>
 8007d48:	2a2d      	cmp	r2, #45	@ 0x2d
 8007d4a:	d07e      	beq.n	8007e4a <_strtod_l+0x28a>
 8007d4c:	f04f 0c00 	mov.w	ip, #0
 8007d50:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007d54:	2909      	cmp	r1, #9
 8007d56:	f240 8085 	bls.w	8007e64 <_strtod_l+0x2a4>
 8007d5a:	9419      	str	r4, [sp, #100]	@ 0x64
 8007d5c:	f04f 0800 	mov.w	r8, #0
 8007d60:	e0a5      	b.n	8007eae <_strtod_l+0x2ee>
 8007d62:	2300      	movs	r3, #0
 8007d64:	e7c8      	b.n	8007cf8 <_strtod_l+0x138>
 8007d66:	f1b9 0f08 	cmp.w	r9, #8
 8007d6a:	bfd8      	it	le
 8007d6c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8007d6e:	f100 0001 	add.w	r0, r0, #1
 8007d72:	bfda      	itte	le
 8007d74:	fb02 3301 	mlale	r3, r2, r1, r3
 8007d78:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8007d7a:	fb02 3707 	mlagt	r7, r2, r7, r3
 8007d7e:	f109 0901 	add.w	r9, r9, #1
 8007d82:	9019      	str	r0, [sp, #100]	@ 0x64
 8007d84:	e7bf      	b.n	8007d06 <_strtod_l+0x146>
 8007d86:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007d88:	1c5a      	adds	r2, r3, #1
 8007d8a:	9219      	str	r2, [sp, #100]	@ 0x64
 8007d8c:	785a      	ldrb	r2, [r3, #1]
 8007d8e:	f1b9 0f00 	cmp.w	r9, #0
 8007d92:	d03b      	beq.n	8007e0c <_strtod_l+0x24c>
 8007d94:	900a      	str	r0, [sp, #40]	@ 0x28
 8007d96:	464d      	mov	r5, r9
 8007d98:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007d9c:	2b09      	cmp	r3, #9
 8007d9e:	d912      	bls.n	8007dc6 <_strtod_l+0x206>
 8007da0:	2301      	movs	r3, #1
 8007da2:	e7c2      	b.n	8007d2a <_strtod_l+0x16a>
 8007da4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007da6:	1c5a      	adds	r2, r3, #1
 8007da8:	9219      	str	r2, [sp, #100]	@ 0x64
 8007daa:	785a      	ldrb	r2, [r3, #1]
 8007dac:	3001      	adds	r0, #1
 8007dae:	2a30      	cmp	r2, #48	@ 0x30
 8007db0:	d0f8      	beq.n	8007da4 <_strtod_l+0x1e4>
 8007db2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007db6:	2b08      	cmp	r3, #8
 8007db8:	f200 84d2 	bhi.w	8008760 <_strtod_l+0xba0>
 8007dbc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007dbe:	900a      	str	r0, [sp, #40]	@ 0x28
 8007dc0:	2000      	movs	r0, #0
 8007dc2:	930c      	str	r3, [sp, #48]	@ 0x30
 8007dc4:	4605      	mov	r5, r0
 8007dc6:	3a30      	subs	r2, #48	@ 0x30
 8007dc8:	f100 0301 	add.w	r3, r0, #1
 8007dcc:	d018      	beq.n	8007e00 <_strtod_l+0x240>
 8007dce:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007dd0:	4419      	add	r1, r3
 8007dd2:	910a      	str	r1, [sp, #40]	@ 0x28
 8007dd4:	462e      	mov	r6, r5
 8007dd6:	f04f 0e0a 	mov.w	lr, #10
 8007dda:	1c71      	adds	r1, r6, #1
 8007ddc:	eba1 0c05 	sub.w	ip, r1, r5
 8007de0:	4563      	cmp	r3, ip
 8007de2:	dc15      	bgt.n	8007e10 <_strtod_l+0x250>
 8007de4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8007de8:	182b      	adds	r3, r5, r0
 8007dea:	2b08      	cmp	r3, #8
 8007dec:	f105 0501 	add.w	r5, r5, #1
 8007df0:	4405      	add	r5, r0
 8007df2:	dc1a      	bgt.n	8007e2a <_strtod_l+0x26a>
 8007df4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007df6:	230a      	movs	r3, #10
 8007df8:	fb03 2301 	mla	r3, r3, r1, r2
 8007dfc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007dfe:	2300      	movs	r3, #0
 8007e00:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007e02:	1c51      	adds	r1, r2, #1
 8007e04:	9119      	str	r1, [sp, #100]	@ 0x64
 8007e06:	7852      	ldrb	r2, [r2, #1]
 8007e08:	4618      	mov	r0, r3
 8007e0a:	e7c5      	b.n	8007d98 <_strtod_l+0x1d8>
 8007e0c:	4648      	mov	r0, r9
 8007e0e:	e7ce      	b.n	8007dae <_strtod_l+0x1ee>
 8007e10:	2e08      	cmp	r6, #8
 8007e12:	dc05      	bgt.n	8007e20 <_strtod_l+0x260>
 8007e14:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007e16:	fb0e f606 	mul.w	r6, lr, r6
 8007e1a:	960b      	str	r6, [sp, #44]	@ 0x2c
 8007e1c:	460e      	mov	r6, r1
 8007e1e:	e7dc      	b.n	8007dda <_strtod_l+0x21a>
 8007e20:	2910      	cmp	r1, #16
 8007e22:	bfd8      	it	le
 8007e24:	fb0e f707 	mulle.w	r7, lr, r7
 8007e28:	e7f8      	b.n	8007e1c <_strtod_l+0x25c>
 8007e2a:	2b0f      	cmp	r3, #15
 8007e2c:	bfdc      	itt	le
 8007e2e:	230a      	movle	r3, #10
 8007e30:	fb03 2707 	mlale	r7, r3, r7, r2
 8007e34:	e7e3      	b.n	8007dfe <_strtod_l+0x23e>
 8007e36:	2300      	movs	r3, #0
 8007e38:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	e77a      	b.n	8007d34 <_strtod_l+0x174>
 8007e3e:	f04f 0c00 	mov.w	ip, #0
 8007e42:	1ca2      	adds	r2, r4, #2
 8007e44:	9219      	str	r2, [sp, #100]	@ 0x64
 8007e46:	78a2      	ldrb	r2, [r4, #2]
 8007e48:	e782      	b.n	8007d50 <_strtod_l+0x190>
 8007e4a:	f04f 0c01 	mov.w	ip, #1
 8007e4e:	e7f8      	b.n	8007e42 <_strtod_l+0x282>
 8007e50:	08009ed4 	.word	0x08009ed4
 8007e54:	08009d0b 	.word	0x08009d0b
 8007e58:	7ff00000 	.word	0x7ff00000
 8007e5c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007e5e:	1c51      	adds	r1, r2, #1
 8007e60:	9119      	str	r1, [sp, #100]	@ 0x64
 8007e62:	7852      	ldrb	r2, [r2, #1]
 8007e64:	2a30      	cmp	r2, #48	@ 0x30
 8007e66:	d0f9      	beq.n	8007e5c <_strtod_l+0x29c>
 8007e68:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007e6c:	2908      	cmp	r1, #8
 8007e6e:	f63f af75 	bhi.w	8007d5c <_strtod_l+0x19c>
 8007e72:	3a30      	subs	r2, #48	@ 0x30
 8007e74:	9209      	str	r2, [sp, #36]	@ 0x24
 8007e76:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007e78:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007e7a:	f04f 080a 	mov.w	r8, #10
 8007e7e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007e80:	1c56      	adds	r6, r2, #1
 8007e82:	9619      	str	r6, [sp, #100]	@ 0x64
 8007e84:	7852      	ldrb	r2, [r2, #1]
 8007e86:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007e8a:	f1be 0f09 	cmp.w	lr, #9
 8007e8e:	d939      	bls.n	8007f04 <_strtod_l+0x344>
 8007e90:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007e92:	1a76      	subs	r6, r6, r1
 8007e94:	2e08      	cmp	r6, #8
 8007e96:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007e9a:	dc03      	bgt.n	8007ea4 <_strtod_l+0x2e4>
 8007e9c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007e9e:	4588      	cmp	r8, r1
 8007ea0:	bfa8      	it	ge
 8007ea2:	4688      	movge	r8, r1
 8007ea4:	f1bc 0f00 	cmp.w	ip, #0
 8007ea8:	d001      	beq.n	8007eae <_strtod_l+0x2ee>
 8007eaa:	f1c8 0800 	rsb	r8, r8, #0
 8007eae:	2d00      	cmp	r5, #0
 8007eb0:	d14e      	bne.n	8007f50 <_strtod_l+0x390>
 8007eb2:	9908      	ldr	r1, [sp, #32]
 8007eb4:	4308      	orrs	r0, r1
 8007eb6:	f47f aebc 	bne.w	8007c32 <_strtod_l+0x72>
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	f47f aed4 	bne.w	8007c68 <_strtod_l+0xa8>
 8007ec0:	2a69      	cmp	r2, #105	@ 0x69
 8007ec2:	d028      	beq.n	8007f16 <_strtod_l+0x356>
 8007ec4:	dc25      	bgt.n	8007f12 <_strtod_l+0x352>
 8007ec6:	2a49      	cmp	r2, #73	@ 0x49
 8007ec8:	d025      	beq.n	8007f16 <_strtod_l+0x356>
 8007eca:	2a4e      	cmp	r2, #78	@ 0x4e
 8007ecc:	f47f aecc 	bne.w	8007c68 <_strtod_l+0xa8>
 8007ed0:	499a      	ldr	r1, [pc, #616]	@ (800813c <_strtod_l+0x57c>)
 8007ed2:	a819      	add	r0, sp, #100	@ 0x64
 8007ed4:	f001 f9ec 	bl	80092b0 <__match>
 8007ed8:	2800      	cmp	r0, #0
 8007eda:	f43f aec5 	beq.w	8007c68 <_strtod_l+0xa8>
 8007ede:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	2b28      	cmp	r3, #40	@ 0x28
 8007ee4:	d12e      	bne.n	8007f44 <_strtod_l+0x384>
 8007ee6:	4996      	ldr	r1, [pc, #600]	@ (8008140 <_strtod_l+0x580>)
 8007ee8:	aa1c      	add	r2, sp, #112	@ 0x70
 8007eea:	a819      	add	r0, sp, #100	@ 0x64
 8007eec:	f001 f9f4 	bl	80092d8 <__hexnan>
 8007ef0:	2805      	cmp	r0, #5
 8007ef2:	d127      	bne.n	8007f44 <_strtod_l+0x384>
 8007ef4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007ef6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007efa:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007efe:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007f02:	e696      	b.n	8007c32 <_strtod_l+0x72>
 8007f04:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007f06:	fb08 2101 	mla	r1, r8, r1, r2
 8007f0a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007f0e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007f10:	e7b5      	b.n	8007e7e <_strtod_l+0x2be>
 8007f12:	2a6e      	cmp	r2, #110	@ 0x6e
 8007f14:	e7da      	b.n	8007ecc <_strtod_l+0x30c>
 8007f16:	498b      	ldr	r1, [pc, #556]	@ (8008144 <_strtod_l+0x584>)
 8007f18:	a819      	add	r0, sp, #100	@ 0x64
 8007f1a:	f001 f9c9 	bl	80092b0 <__match>
 8007f1e:	2800      	cmp	r0, #0
 8007f20:	f43f aea2 	beq.w	8007c68 <_strtod_l+0xa8>
 8007f24:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007f26:	4988      	ldr	r1, [pc, #544]	@ (8008148 <_strtod_l+0x588>)
 8007f28:	3b01      	subs	r3, #1
 8007f2a:	a819      	add	r0, sp, #100	@ 0x64
 8007f2c:	9319      	str	r3, [sp, #100]	@ 0x64
 8007f2e:	f001 f9bf 	bl	80092b0 <__match>
 8007f32:	b910      	cbnz	r0, 8007f3a <_strtod_l+0x37a>
 8007f34:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007f36:	3301      	adds	r3, #1
 8007f38:	9319      	str	r3, [sp, #100]	@ 0x64
 8007f3a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8008158 <_strtod_l+0x598>
 8007f3e:	f04f 0a00 	mov.w	sl, #0
 8007f42:	e676      	b.n	8007c32 <_strtod_l+0x72>
 8007f44:	4881      	ldr	r0, [pc, #516]	@ (800814c <_strtod_l+0x58c>)
 8007f46:	f000 feef 	bl	8008d28 <nan>
 8007f4a:	ec5b ab10 	vmov	sl, fp, d0
 8007f4e:	e670      	b.n	8007c32 <_strtod_l+0x72>
 8007f50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f52:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8007f54:	eba8 0303 	sub.w	r3, r8, r3
 8007f58:	f1b9 0f00 	cmp.w	r9, #0
 8007f5c:	bf08      	it	eq
 8007f5e:	46a9      	moveq	r9, r5
 8007f60:	2d10      	cmp	r5, #16
 8007f62:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f64:	462c      	mov	r4, r5
 8007f66:	bfa8      	it	ge
 8007f68:	2410      	movge	r4, #16
 8007f6a:	f7f8 faf3 	bl	8000554 <__aeabi_ui2d>
 8007f6e:	2d09      	cmp	r5, #9
 8007f70:	4682      	mov	sl, r0
 8007f72:	468b      	mov	fp, r1
 8007f74:	dc13      	bgt.n	8007f9e <_strtod_l+0x3de>
 8007f76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	f43f ae5a 	beq.w	8007c32 <_strtod_l+0x72>
 8007f7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f80:	dd78      	ble.n	8008074 <_strtod_l+0x4b4>
 8007f82:	2b16      	cmp	r3, #22
 8007f84:	dc5f      	bgt.n	8008046 <_strtod_l+0x486>
 8007f86:	4972      	ldr	r1, [pc, #456]	@ (8008150 <_strtod_l+0x590>)
 8007f88:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007f8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f90:	4652      	mov	r2, sl
 8007f92:	465b      	mov	r3, fp
 8007f94:	f7f8 fb58 	bl	8000648 <__aeabi_dmul>
 8007f98:	4682      	mov	sl, r0
 8007f9a:	468b      	mov	fp, r1
 8007f9c:	e649      	b.n	8007c32 <_strtod_l+0x72>
 8007f9e:	4b6c      	ldr	r3, [pc, #432]	@ (8008150 <_strtod_l+0x590>)
 8007fa0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007fa4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007fa8:	f7f8 fb4e 	bl	8000648 <__aeabi_dmul>
 8007fac:	4682      	mov	sl, r0
 8007fae:	4638      	mov	r0, r7
 8007fb0:	468b      	mov	fp, r1
 8007fb2:	f7f8 facf 	bl	8000554 <__aeabi_ui2d>
 8007fb6:	4602      	mov	r2, r0
 8007fb8:	460b      	mov	r3, r1
 8007fba:	4650      	mov	r0, sl
 8007fbc:	4659      	mov	r1, fp
 8007fbe:	f7f8 f98d 	bl	80002dc <__adddf3>
 8007fc2:	2d0f      	cmp	r5, #15
 8007fc4:	4682      	mov	sl, r0
 8007fc6:	468b      	mov	fp, r1
 8007fc8:	ddd5      	ble.n	8007f76 <_strtod_l+0x3b6>
 8007fca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fcc:	1b2c      	subs	r4, r5, r4
 8007fce:	441c      	add	r4, r3
 8007fd0:	2c00      	cmp	r4, #0
 8007fd2:	f340 8093 	ble.w	80080fc <_strtod_l+0x53c>
 8007fd6:	f014 030f 	ands.w	r3, r4, #15
 8007fda:	d00a      	beq.n	8007ff2 <_strtod_l+0x432>
 8007fdc:	495c      	ldr	r1, [pc, #368]	@ (8008150 <_strtod_l+0x590>)
 8007fde:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007fe2:	4652      	mov	r2, sl
 8007fe4:	465b      	mov	r3, fp
 8007fe6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fea:	f7f8 fb2d 	bl	8000648 <__aeabi_dmul>
 8007fee:	4682      	mov	sl, r0
 8007ff0:	468b      	mov	fp, r1
 8007ff2:	f034 040f 	bics.w	r4, r4, #15
 8007ff6:	d073      	beq.n	80080e0 <_strtod_l+0x520>
 8007ff8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007ffc:	dd49      	ble.n	8008092 <_strtod_l+0x4d2>
 8007ffe:	2400      	movs	r4, #0
 8008000:	46a0      	mov	r8, r4
 8008002:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008004:	46a1      	mov	r9, r4
 8008006:	9a05      	ldr	r2, [sp, #20]
 8008008:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8008158 <_strtod_l+0x598>
 800800c:	2322      	movs	r3, #34	@ 0x22
 800800e:	6013      	str	r3, [r2, #0]
 8008010:	f04f 0a00 	mov.w	sl, #0
 8008014:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008016:	2b00      	cmp	r3, #0
 8008018:	f43f ae0b 	beq.w	8007c32 <_strtod_l+0x72>
 800801c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800801e:	9805      	ldr	r0, [sp, #20]
 8008020:	f7ff f946 	bl	80072b0 <_Bfree>
 8008024:	9805      	ldr	r0, [sp, #20]
 8008026:	4649      	mov	r1, r9
 8008028:	f7ff f942 	bl	80072b0 <_Bfree>
 800802c:	9805      	ldr	r0, [sp, #20]
 800802e:	4641      	mov	r1, r8
 8008030:	f7ff f93e 	bl	80072b0 <_Bfree>
 8008034:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008036:	9805      	ldr	r0, [sp, #20]
 8008038:	f7ff f93a 	bl	80072b0 <_Bfree>
 800803c:	9805      	ldr	r0, [sp, #20]
 800803e:	4621      	mov	r1, r4
 8008040:	f7ff f936 	bl	80072b0 <_Bfree>
 8008044:	e5f5      	b.n	8007c32 <_strtod_l+0x72>
 8008046:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008048:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800804c:	4293      	cmp	r3, r2
 800804e:	dbbc      	blt.n	8007fca <_strtod_l+0x40a>
 8008050:	4c3f      	ldr	r4, [pc, #252]	@ (8008150 <_strtod_l+0x590>)
 8008052:	f1c5 050f 	rsb	r5, r5, #15
 8008056:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800805a:	4652      	mov	r2, sl
 800805c:	465b      	mov	r3, fp
 800805e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008062:	f7f8 faf1 	bl	8000648 <__aeabi_dmul>
 8008066:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008068:	1b5d      	subs	r5, r3, r5
 800806a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800806e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008072:	e78f      	b.n	8007f94 <_strtod_l+0x3d4>
 8008074:	3316      	adds	r3, #22
 8008076:	dba8      	blt.n	8007fca <_strtod_l+0x40a>
 8008078:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800807a:	eba3 0808 	sub.w	r8, r3, r8
 800807e:	4b34      	ldr	r3, [pc, #208]	@ (8008150 <_strtod_l+0x590>)
 8008080:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008084:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008088:	4650      	mov	r0, sl
 800808a:	4659      	mov	r1, fp
 800808c:	f7f8 fc06 	bl	800089c <__aeabi_ddiv>
 8008090:	e782      	b.n	8007f98 <_strtod_l+0x3d8>
 8008092:	2300      	movs	r3, #0
 8008094:	4f2f      	ldr	r7, [pc, #188]	@ (8008154 <_strtod_l+0x594>)
 8008096:	1124      	asrs	r4, r4, #4
 8008098:	4650      	mov	r0, sl
 800809a:	4659      	mov	r1, fp
 800809c:	461e      	mov	r6, r3
 800809e:	2c01      	cmp	r4, #1
 80080a0:	dc21      	bgt.n	80080e6 <_strtod_l+0x526>
 80080a2:	b10b      	cbz	r3, 80080a8 <_strtod_l+0x4e8>
 80080a4:	4682      	mov	sl, r0
 80080a6:	468b      	mov	fp, r1
 80080a8:	492a      	ldr	r1, [pc, #168]	@ (8008154 <_strtod_l+0x594>)
 80080aa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80080ae:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80080b2:	4652      	mov	r2, sl
 80080b4:	465b      	mov	r3, fp
 80080b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080ba:	f7f8 fac5 	bl	8000648 <__aeabi_dmul>
 80080be:	4b26      	ldr	r3, [pc, #152]	@ (8008158 <_strtod_l+0x598>)
 80080c0:	460a      	mov	r2, r1
 80080c2:	400b      	ands	r3, r1
 80080c4:	4925      	ldr	r1, [pc, #148]	@ (800815c <_strtod_l+0x59c>)
 80080c6:	428b      	cmp	r3, r1
 80080c8:	4682      	mov	sl, r0
 80080ca:	d898      	bhi.n	8007ffe <_strtod_l+0x43e>
 80080cc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80080d0:	428b      	cmp	r3, r1
 80080d2:	bf86      	itte	hi
 80080d4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8008160 <_strtod_l+0x5a0>
 80080d8:	f04f 3aff 	movhi.w	sl, #4294967295
 80080dc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80080e0:	2300      	movs	r3, #0
 80080e2:	9308      	str	r3, [sp, #32]
 80080e4:	e076      	b.n	80081d4 <_strtod_l+0x614>
 80080e6:	07e2      	lsls	r2, r4, #31
 80080e8:	d504      	bpl.n	80080f4 <_strtod_l+0x534>
 80080ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080ee:	f7f8 faab 	bl	8000648 <__aeabi_dmul>
 80080f2:	2301      	movs	r3, #1
 80080f4:	3601      	adds	r6, #1
 80080f6:	1064      	asrs	r4, r4, #1
 80080f8:	3708      	adds	r7, #8
 80080fa:	e7d0      	b.n	800809e <_strtod_l+0x4de>
 80080fc:	d0f0      	beq.n	80080e0 <_strtod_l+0x520>
 80080fe:	4264      	negs	r4, r4
 8008100:	f014 020f 	ands.w	r2, r4, #15
 8008104:	d00a      	beq.n	800811c <_strtod_l+0x55c>
 8008106:	4b12      	ldr	r3, [pc, #72]	@ (8008150 <_strtod_l+0x590>)
 8008108:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800810c:	4650      	mov	r0, sl
 800810e:	4659      	mov	r1, fp
 8008110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008114:	f7f8 fbc2 	bl	800089c <__aeabi_ddiv>
 8008118:	4682      	mov	sl, r0
 800811a:	468b      	mov	fp, r1
 800811c:	1124      	asrs	r4, r4, #4
 800811e:	d0df      	beq.n	80080e0 <_strtod_l+0x520>
 8008120:	2c1f      	cmp	r4, #31
 8008122:	dd1f      	ble.n	8008164 <_strtod_l+0x5a4>
 8008124:	2400      	movs	r4, #0
 8008126:	46a0      	mov	r8, r4
 8008128:	940b      	str	r4, [sp, #44]	@ 0x2c
 800812a:	46a1      	mov	r9, r4
 800812c:	9a05      	ldr	r2, [sp, #20]
 800812e:	2322      	movs	r3, #34	@ 0x22
 8008130:	f04f 0a00 	mov.w	sl, #0
 8008134:	f04f 0b00 	mov.w	fp, #0
 8008138:	6013      	str	r3, [r2, #0]
 800813a:	e76b      	b.n	8008014 <_strtod_l+0x454>
 800813c:	08009bf9 	.word	0x08009bf9
 8008140:	08009ec0 	.word	0x08009ec0
 8008144:	08009bf1 	.word	0x08009bf1
 8008148:	08009c28 	.word	0x08009c28
 800814c:	08009d61 	.word	0x08009d61
 8008150:	08009df8 	.word	0x08009df8
 8008154:	08009dd0 	.word	0x08009dd0
 8008158:	7ff00000 	.word	0x7ff00000
 800815c:	7ca00000 	.word	0x7ca00000
 8008160:	7fefffff 	.word	0x7fefffff
 8008164:	f014 0310 	ands.w	r3, r4, #16
 8008168:	bf18      	it	ne
 800816a:	236a      	movne	r3, #106	@ 0x6a
 800816c:	4ea9      	ldr	r6, [pc, #676]	@ (8008414 <_strtod_l+0x854>)
 800816e:	9308      	str	r3, [sp, #32]
 8008170:	4650      	mov	r0, sl
 8008172:	4659      	mov	r1, fp
 8008174:	2300      	movs	r3, #0
 8008176:	07e7      	lsls	r7, r4, #31
 8008178:	d504      	bpl.n	8008184 <_strtod_l+0x5c4>
 800817a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800817e:	f7f8 fa63 	bl	8000648 <__aeabi_dmul>
 8008182:	2301      	movs	r3, #1
 8008184:	1064      	asrs	r4, r4, #1
 8008186:	f106 0608 	add.w	r6, r6, #8
 800818a:	d1f4      	bne.n	8008176 <_strtod_l+0x5b6>
 800818c:	b10b      	cbz	r3, 8008192 <_strtod_l+0x5d2>
 800818e:	4682      	mov	sl, r0
 8008190:	468b      	mov	fp, r1
 8008192:	9b08      	ldr	r3, [sp, #32]
 8008194:	b1b3      	cbz	r3, 80081c4 <_strtod_l+0x604>
 8008196:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800819a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800819e:	2b00      	cmp	r3, #0
 80081a0:	4659      	mov	r1, fp
 80081a2:	dd0f      	ble.n	80081c4 <_strtod_l+0x604>
 80081a4:	2b1f      	cmp	r3, #31
 80081a6:	dd56      	ble.n	8008256 <_strtod_l+0x696>
 80081a8:	2b34      	cmp	r3, #52	@ 0x34
 80081aa:	bfde      	ittt	le
 80081ac:	f04f 33ff 	movle.w	r3, #4294967295
 80081b0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80081b4:	4093      	lslle	r3, r2
 80081b6:	f04f 0a00 	mov.w	sl, #0
 80081ba:	bfcc      	ite	gt
 80081bc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80081c0:	ea03 0b01 	andle.w	fp, r3, r1
 80081c4:	2200      	movs	r2, #0
 80081c6:	2300      	movs	r3, #0
 80081c8:	4650      	mov	r0, sl
 80081ca:	4659      	mov	r1, fp
 80081cc:	f7f8 fca4 	bl	8000b18 <__aeabi_dcmpeq>
 80081d0:	2800      	cmp	r0, #0
 80081d2:	d1a7      	bne.n	8008124 <_strtod_l+0x564>
 80081d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80081d6:	9300      	str	r3, [sp, #0]
 80081d8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80081da:	9805      	ldr	r0, [sp, #20]
 80081dc:	462b      	mov	r3, r5
 80081de:	464a      	mov	r2, r9
 80081e0:	f7ff f8ce 	bl	8007380 <__s2b>
 80081e4:	900b      	str	r0, [sp, #44]	@ 0x2c
 80081e6:	2800      	cmp	r0, #0
 80081e8:	f43f af09 	beq.w	8007ffe <_strtod_l+0x43e>
 80081ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80081ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081f0:	2a00      	cmp	r2, #0
 80081f2:	eba3 0308 	sub.w	r3, r3, r8
 80081f6:	bfa8      	it	ge
 80081f8:	2300      	movge	r3, #0
 80081fa:	9312      	str	r3, [sp, #72]	@ 0x48
 80081fc:	2400      	movs	r4, #0
 80081fe:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008202:	9316      	str	r3, [sp, #88]	@ 0x58
 8008204:	46a0      	mov	r8, r4
 8008206:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008208:	9805      	ldr	r0, [sp, #20]
 800820a:	6859      	ldr	r1, [r3, #4]
 800820c:	f7ff f810 	bl	8007230 <_Balloc>
 8008210:	4681      	mov	r9, r0
 8008212:	2800      	cmp	r0, #0
 8008214:	f43f aef7 	beq.w	8008006 <_strtod_l+0x446>
 8008218:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800821a:	691a      	ldr	r2, [r3, #16]
 800821c:	3202      	adds	r2, #2
 800821e:	f103 010c 	add.w	r1, r3, #12
 8008222:	0092      	lsls	r2, r2, #2
 8008224:	300c      	adds	r0, #12
 8008226:	f000 fd71 	bl	8008d0c <memcpy>
 800822a:	ec4b ab10 	vmov	d0, sl, fp
 800822e:	9805      	ldr	r0, [sp, #20]
 8008230:	aa1c      	add	r2, sp, #112	@ 0x70
 8008232:	a91b      	add	r1, sp, #108	@ 0x6c
 8008234:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008238:	f7ff fbd6 	bl	80079e8 <__d2b>
 800823c:	901a      	str	r0, [sp, #104]	@ 0x68
 800823e:	2800      	cmp	r0, #0
 8008240:	f43f aee1 	beq.w	8008006 <_strtod_l+0x446>
 8008244:	9805      	ldr	r0, [sp, #20]
 8008246:	2101      	movs	r1, #1
 8008248:	f7ff f930 	bl	80074ac <__i2b>
 800824c:	4680      	mov	r8, r0
 800824e:	b948      	cbnz	r0, 8008264 <_strtod_l+0x6a4>
 8008250:	f04f 0800 	mov.w	r8, #0
 8008254:	e6d7      	b.n	8008006 <_strtod_l+0x446>
 8008256:	f04f 32ff 	mov.w	r2, #4294967295
 800825a:	fa02 f303 	lsl.w	r3, r2, r3
 800825e:	ea03 0a0a 	and.w	sl, r3, sl
 8008262:	e7af      	b.n	80081c4 <_strtod_l+0x604>
 8008264:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008266:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008268:	2d00      	cmp	r5, #0
 800826a:	bfab      	itete	ge
 800826c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800826e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008270:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008272:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008274:	bfac      	ite	ge
 8008276:	18ef      	addge	r7, r5, r3
 8008278:	1b5e      	sublt	r6, r3, r5
 800827a:	9b08      	ldr	r3, [sp, #32]
 800827c:	1aed      	subs	r5, r5, r3
 800827e:	4415      	add	r5, r2
 8008280:	4b65      	ldr	r3, [pc, #404]	@ (8008418 <_strtod_l+0x858>)
 8008282:	3d01      	subs	r5, #1
 8008284:	429d      	cmp	r5, r3
 8008286:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800828a:	da50      	bge.n	800832e <_strtod_l+0x76e>
 800828c:	1b5b      	subs	r3, r3, r5
 800828e:	2b1f      	cmp	r3, #31
 8008290:	eba2 0203 	sub.w	r2, r2, r3
 8008294:	f04f 0101 	mov.w	r1, #1
 8008298:	dc3d      	bgt.n	8008316 <_strtod_l+0x756>
 800829a:	fa01 f303 	lsl.w	r3, r1, r3
 800829e:	9313      	str	r3, [sp, #76]	@ 0x4c
 80082a0:	2300      	movs	r3, #0
 80082a2:	9310      	str	r3, [sp, #64]	@ 0x40
 80082a4:	18bd      	adds	r5, r7, r2
 80082a6:	9b08      	ldr	r3, [sp, #32]
 80082a8:	42af      	cmp	r7, r5
 80082aa:	4416      	add	r6, r2
 80082ac:	441e      	add	r6, r3
 80082ae:	463b      	mov	r3, r7
 80082b0:	bfa8      	it	ge
 80082b2:	462b      	movge	r3, r5
 80082b4:	42b3      	cmp	r3, r6
 80082b6:	bfa8      	it	ge
 80082b8:	4633      	movge	r3, r6
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	bfc2      	ittt	gt
 80082be:	1aed      	subgt	r5, r5, r3
 80082c0:	1af6      	subgt	r6, r6, r3
 80082c2:	1aff      	subgt	r7, r7, r3
 80082c4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	dd16      	ble.n	80082f8 <_strtod_l+0x738>
 80082ca:	4641      	mov	r1, r8
 80082cc:	9805      	ldr	r0, [sp, #20]
 80082ce:	461a      	mov	r2, r3
 80082d0:	f7ff f9a4 	bl	800761c <__pow5mult>
 80082d4:	4680      	mov	r8, r0
 80082d6:	2800      	cmp	r0, #0
 80082d8:	d0ba      	beq.n	8008250 <_strtod_l+0x690>
 80082da:	4601      	mov	r1, r0
 80082dc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80082de:	9805      	ldr	r0, [sp, #20]
 80082e0:	f7ff f8fa 	bl	80074d8 <__multiply>
 80082e4:	900a      	str	r0, [sp, #40]	@ 0x28
 80082e6:	2800      	cmp	r0, #0
 80082e8:	f43f ae8d 	beq.w	8008006 <_strtod_l+0x446>
 80082ec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80082ee:	9805      	ldr	r0, [sp, #20]
 80082f0:	f7fe ffde 	bl	80072b0 <_Bfree>
 80082f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80082f6:	931a      	str	r3, [sp, #104]	@ 0x68
 80082f8:	2d00      	cmp	r5, #0
 80082fa:	dc1d      	bgt.n	8008338 <_strtod_l+0x778>
 80082fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082fe:	2b00      	cmp	r3, #0
 8008300:	dd23      	ble.n	800834a <_strtod_l+0x78a>
 8008302:	4649      	mov	r1, r9
 8008304:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008306:	9805      	ldr	r0, [sp, #20]
 8008308:	f7ff f988 	bl	800761c <__pow5mult>
 800830c:	4681      	mov	r9, r0
 800830e:	b9e0      	cbnz	r0, 800834a <_strtod_l+0x78a>
 8008310:	f04f 0900 	mov.w	r9, #0
 8008314:	e677      	b.n	8008006 <_strtod_l+0x446>
 8008316:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800831a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800831e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008322:	35e2      	adds	r5, #226	@ 0xe2
 8008324:	fa01 f305 	lsl.w	r3, r1, r5
 8008328:	9310      	str	r3, [sp, #64]	@ 0x40
 800832a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800832c:	e7ba      	b.n	80082a4 <_strtod_l+0x6e4>
 800832e:	2300      	movs	r3, #0
 8008330:	9310      	str	r3, [sp, #64]	@ 0x40
 8008332:	2301      	movs	r3, #1
 8008334:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008336:	e7b5      	b.n	80082a4 <_strtod_l+0x6e4>
 8008338:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800833a:	9805      	ldr	r0, [sp, #20]
 800833c:	462a      	mov	r2, r5
 800833e:	f7ff f9c7 	bl	80076d0 <__lshift>
 8008342:	901a      	str	r0, [sp, #104]	@ 0x68
 8008344:	2800      	cmp	r0, #0
 8008346:	d1d9      	bne.n	80082fc <_strtod_l+0x73c>
 8008348:	e65d      	b.n	8008006 <_strtod_l+0x446>
 800834a:	2e00      	cmp	r6, #0
 800834c:	dd07      	ble.n	800835e <_strtod_l+0x79e>
 800834e:	4649      	mov	r1, r9
 8008350:	9805      	ldr	r0, [sp, #20]
 8008352:	4632      	mov	r2, r6
 8008354:	f7ff f9bc 	bl	80076d0 <__lshift>
 8008358:	4681      	mov	r9, r0
 800835a:	2800      	cmp	r0, #0
 800835c:	d0d8      	beq.n	8008310 <_strtod_l+0x750>
 800835e:	2f00      	cmp	r7, #0
 8008360:	dd08      	ble.n	8008374 <_strtod_l+0x7b4>
 8008362:	4641      	mov	r1, r8
 8008364:	9805      	ldr	r0, [sp, #20]
 8008366:	463a      	mov	r2, r7
 8008368:	f7ff f9b2 	bl	80076d0 <__lshift>
 800836c:	4680      	mov	r8, r0
 800836e:	2800      	cmp	r0, #0
 8008370:	f43f ae49 	beq.w	8008006 <_strtod_l+0x446>
 8008374:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008376:	9805      	ldr	r0, [sp, #20]
 8008378:	464a      	mov	r2, r9
 800837a:	f7ff fa31 	bl	80077e0 <__mdiff>
 800837e:	4604      	mov	r4, r0
 8008380:	2800      	cmp	r0, #0
 8008382:	f43f ae40 	beq.w	8008006 <_strtod_l+0x446>
 8008386:	68c3      	ldr	r3, [r0, #12]
 8008388:	930f      	str	r3, [sp, #60]	@ 0x3c
 800838a:	2300      	movs	r3, #0
 800838c:	60c3      	str	r3, [r0, #12]
 800838e:	4641      	mov	r1, r8
 8008390:	f7ff fa0a 	bl	80077a8 <__mcmp>
 8008394:	2800      	cmp	r0, #0
 8008396:	da45      	bge.n	8008424 <_strtod_l+0x864>
 8008398:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800839a:	ea53 030a 	orrs.w	r3, r3, sl
 800839e:	d16b      	bne.n	8008478 <_strtod_l+0x8b8>
 80083a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d167      	bne.n	8008478 <_strtod_l+0x8b8>
 80083a8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80083ac:	0d1b      	lsrs	r3, r3, #20
 80083ae:	051b      	lsls	r3, r3, #20
 80083b0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80083b4:	d960      	bls.n	8008478 <_strtod_l+0x8b8>
 80083b6:	6963      	ldr	r3, [r4, #20]
 80083b8:	b913      	cbnz	r3, 80083c0 <_strtod_l+0x800>
 80083ba:	6923      	ldr	r3, [r4, #16]
 80083bc:	2b01      	cmp	r3, #1
 80083be:	dd5b      	ble.n	8008478 <_strtod_l+0x8b8>
 80083c0:	4621      	mov	r1, r4
 80083c2:	2201      	movs	r2, #1
 80083c4:	9805      	ldr	r0, [sp, #20]
 80083c6:	f7ff f983 	bl	80076d0 <__lshift>
 80083ca:	4641      	mov	r1, r8
 80083cc:	4604      	mov	r4, r0
 80083ce:	f7ff f9eb 	bl	80077a8 <__mcmp>
 80083d2:	2800      	cmp	r0, #0
 80083d4:	dd50      	ble.n	8008478 <_strtod_l+0x8b8>
 80083d6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80083da:	9a08      	ldr	r2, [sp, #32]
 80083dc:	0d1b      	lsrs	r3, r3, #20
 80083de:	051b      	lsls	r3, r3, #20
 80083e0:	2a00      	cmp	r2, #0
 80083e2:	d06a      	beq.n	80084ba <_strtod_l+0x8fa>
 80083e4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80083e8:	d867      	bhi.n	80084ba <_strtod_l+0x8fa>
 80083ea:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80083ee:	f67f ae9d 	bls.w	800812c <_strtod_l+0x56c>
 80083f2:	4b0a      	ldr	r3, [pc, #40]	@ (800841c <_strtod_l+0x85c>)
 80083f4:	4650      	mov	r0, sl
 80083f6:	4659      	mov	r1, fp
 80083f8:	2200      	movs	r2, #0
 80083fa:	f7f8 f925 	bl	8000648 <__aeabi_dmul>
 80083fe:	4b08      	ldr	r3, [pc, #32]	@ (8008420 <_strtod_l+0x860>)
 8008400:	400b      	ands	r3, r1
 8008402:	4682      	mov	sl, r0
 8008404:	468b      	mov	fp, r1
 8008406:	2b00      	cmp	r3, #0
 8008408:	f47f ae08 	bne.w	800801c <_strtod_l+0x45c>
 800840c:	9a05      	ldr	r2, [sp, #20]
 800840e:	2322      	movs	r3, #34	@ 0x22
 8008410:	6013      	str	r3, [r2, #0]
 8008412:	e603      	b.n	800801c <_strtod_l+0x45c>
 8008414:	08009ee8 	.word	0x08009ee8
 8008418:	fffffc02 	.word	0xfffffc02
 800841c:	39500000 	.word	0x39500000
 8008420:	7ff00000 	.word	0x7ff00000
 8008424:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8008428:	d165      	bne.n	80084f6 <_strtod_l+0x936>
 800842a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800842c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008430:	b35a      	cbz	r2, 800848a <_strtod_l+0x8ca>
 8008432:	4a9f      	ldr	r2, [pc, #636]	@ (80086b0 <_strtod_l+0xaf0>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d12b      	bne.n	8008490 <_strtod_l+0x8d0>
 8008438:	9b08      	ldr	r3, [sp, #32]
 800843a:	4651      	mov	r1, sl
 800843c:	b303      	cbz	r3, 8008480 <_strtod_l+0x8c0>
 800843e:	4b9d      	ldr	r3, [pc, #628]	@ (80086b4 <_strtod_l+0xaf4>)
 8008440:	465a      	mov	r2, fp
 8008442:	4013      	ands	r3, r2
 8008444:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008448:	f04f 32ff 	mov.w	r2, #4294967295
 800844c:	d81b      	bhi.n	8008486 <_strtod_l+0x8c6>
 800844e:	0d1b      	lsrs	r3, r3, #20
 8008450:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008454:	fa02 f303 	lsl.w	r3, r2, r3
 8008458:	4299      	cmp	r1, r3
 800845a:	d119      	bne.n	8008490 <_strtod_l+0x8d0>
 800845c:	4b96      	ldr	r3, [pc, #600]	@ (80086b8 <_strtod_l+0xaf8>)
 800845e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008460:	429a      	cmp	r2, r3
 8008462:	d102      	bne.n	800846a <_strtod_l+0x8aa>
 8008464:	3101      	adds	r1, #1
 8008466:	f43f adce 	beq.w	8008006 <_strtod_l+0x446>
 800846a:	4b92      	ldr	r3, [pc, #584]	@ (80086b4 <_strtod_l+0xaf4>)
 800846c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800846e:	401a      	ands	r2, r3
 8008470:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008474:	f04f 0a00 	mov.w	sl, #0
 8008478:	9b08      	ldr	r3, [sp, #32]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d1b9      	bne.n	80083f2 <_strtod_l+0x832>
 800847e:	e5cd      	b.n	800801c <_strtod_l+0x45c>
 8008480:	f04f 33ff 	mov.w	r3, #4294967295
 8008484:	e7e8      	b.n	8008458 <_strtod_l+0x898>
 8008486:	4613      	mov	r3, r2
 8008488:	e7e6      	b.n	8008458 <_strtod_l+0x898>
 800848a:	ea53 030a 	orrs.w	r3, r3, sl
 800848e:	d0a2      	beq.n	80083d6 <_strtod_l+0x816>
 8008490:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008492:	b1db      	cbz	r3, 80084cc <_strtod_l+0x90c>
 8008494:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008496:	4213      	tst	r3, r2
 8008498:	d0ee      	beq.n	8008478 <_strtod_l+0x8b8>
 800849a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800849c:	9a08      	ldr	r2, [sp, #32]
 800849e:	4650      	mov	r0, sl
 80084a0:	4659      	mov	r1, fp
 80084a2:	b1bb      	cbz	r3, 80084d4 <_strtod_l+0x914>
 80084a4:	f7ff fb6e 	bl	8007b84 <sulp>
 80084a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80084ac:	ec53 2b10 	vmov	r2, r3, d0
 80084b0:	f7f7 ff14 	bl	80002dc <__adddf3>
 80084b4:	4682      	mov	sl, r0
 80084b6:	468b      	mov	fp, r1
 80084b8:	e7de      	b.n	8008478 <_strtod_l+0x8b8>
 80084ba:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80084be:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80084c2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80084c6:	f04f 3aff 	mov.w	sl, #4294967295
 80084ca:	e7d5      	b.n	8008478 <_strtod_l+0x8b8>
 80084cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80084ce:	ea13 0f0a 	tst.w	r3, sl
 80084d2:	e7e1      	b.n	8008498 <_strtod_l+0x8d8>
 80084d4:	f7ff fb56 	bl	8007b84 <sulp>
 80084d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80084dc:	ec53 2b10 	vmov	r2, r3, d0
 80084e0:	f7f7 fefa 	bl	80002d8 <__aeabi_dsub>
 80084e4:	2200      	movs	r2, #0
 80084e6:	2300      	movs	r3, #0
 80084e8:	4682      	mov	sl, r0
 80084ea:	468b      	mov	fp, r1
 80084ec:	f7f8 fb14 	bl	8000b18 <__aeabi_dcmpeq>
 80084f0:	2800      	cmp	r0, #0
 80084f2:	d0c1      	beq.n	8008478 <_strtod_l+0x8b8>
 80084f4:	e61a      	b.n	800812c <_strtod_l+0x56c>
 80084f6:	4641      	mov	r1, r8
 80084f8:	4620      	mov	r0, r4
 80084fa:	f7ff facd 	bl	8007a98 <__ratio>
 80084fe:	ec57 6b10 	vmov	r6, r7, d0
 8008502:	2200      	movs	r2, #0
 8008504:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008508:	4630      	mov	r0, r6
 800850a:	4639      	mov	r1, r7
 800850c:	f7f8 fb18 	bl	8000b40 <__aeabi_dcmple>
 8008510:	2800      	cmp	r0, #0
 8008512:	d06f      	beq.n	80085f4 <_strtod_l+0xa34>
 8008514:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008516:	2b00      	cmp	r3, #0
 8008518:	d17a      	bne.n	8008610 <_strtod_l+0xa50>
 800851a:	f1ba 0f00 	cmp.w	sl, #0
 800851e:	d158      	bne.n	80085d2 <_strtod_l+0xa12>
 8008520:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008522:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008526:	2b00      	cmp	r3, #0
 8008528:	d15a      	bne.n	80085e0 <_strtod_l+0xa20>
 800852a:	4b64      	ldr	r3, [pc, #400]	@ (80086bc <_strtod_l+0xafc>)
 800852c:	2200      	movs	r2, #0
 800852e:	4630      	mov	r0, r6
 8008530:	4639      	mov	r1, r7
 8008532:	f7f8 fafb 	bl	8000b2c <__aeabi_dcmplt>
 8008536:	2800      	cmp	r0, #0
 8008538:	d159      	bne.n	80085ee <_strtod_l+0xa2e>
 800853a:	4630      	mov	r0, r6
 800853c:	4639      	mov	r1, r7
 800853e:	4b60      	ldr	r3, [pc, #384]	@ (80086c0 <_strtod_l+0xb00>)
 8008540:	2200      	movs	r2, #0
 8008542:	f7f8 f881 	bl	8000648 <__aeabi_dmul>
 8008546:	4606      	mov	r6, r0
 8008548:	460f      	mov	r7, r1
 800854a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800854e:	9606      	str	r6, [sp, #24]
 8008550:	9307      	str	r3, [sp, #28]
 8008552:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008556:	4d57      	ldr	r5, [pc, #348]	@ (80086b4 <_strtod_l+0xaf4>)
 8008558:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800855c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800855e:	401d      	ands	r5, r3
 8008560:	4b58      	ldr	r3, [pc, #352]	@ (80086c4 <_strtod_l+0xb04>)
 8008562:	429d      	cmp	r5, r3
 8008564:	f040 80b2 	bne.w	80086cc <_strtod_l+0xb0c>
 8008568:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800856a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800856e:	ec4b ab10 	vmov	d0, sl, fp
 8008572:	f7ff f9c9 	bl	8007908 <__ulp>
 8008576:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800857a:	ec51 0b10 	vmov	r0, r1, d0
 800857e:	f7f8 f863 	bl	8000648 <__aeabi_dmul>
 8008582:	4652      	mov	r2, sl
 8008584:	465b      	mov	r3, fp
 8008586:	f7f7 fea9 	bl	80002dc <__adddf3>
 800858a:	460b      	mov	r3, r1
 800858c:	4949      	ldr	r1, [pc, #292]	@ (80086b4 <_strtod_l+0xaf4>)
 800858e:	4a4e      	ldr	r2, [pc, #312]	@ (80086c8 <_strtod_l+0xb08>)
 8008590:	4019      	ands	r1, r3
 8008592:	4291      	cmp	r1, r2
 8008594:	4682      	mov	sl, r0
 8008596:	d942      	bls.n	800861e <_strtod_l+0xa5e>
 8008598:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800859a:	4b47      	ldr	r3, [pc, #284]	@ (80086b8 <_strtod_l+0xaf8>)
 800859c:	429a      	cmp	r2, r3
 800859e:	d103      	bne.n	80085a8 <_strtod_l+0x9e8>
 80085a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80085a2:	3301      	adds	r3, #1
 80085a4:	f43f ad2f 	beq.w	8008006 <_strtod_l+0x446>
 80085a8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80086b8 <_strtod_l+0xaf8>
 80085ac:	f04f 3aff 	mov.w	sl, #4294967295
 80085b0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80085b2:	9805      	ldr	r0, [sp, #20]
 80085b4:	f7fe fe7c 	bl	80072b0 <_Bfree>
 80085b8:	9805      	ldr	r0, [sp, #20]
 80085ba:	4649      	mov	r1, r9
 80085bc:	f7fe fe78 	bl	80072b0 <_Bfree>
 80085c0:	9805      	ldr	r0, [sp, #20]
 80085c2:	4641      	mov	r1, r8
 80085c4:	f7fe fe74 	bl	80072b0 <_Bfree>
 80085c8:	9805      	ldr	r0, [sp, #20]
 80085ca:	4621      	mov	r1, r4
 80085cc:	f7fe fe70 	bl	80072b0 <_Bfree>
 80085d0:	e619      	b.n	8008206 <_strtod_l+0x646>
 80085d2:	f1ba 0f01 	cmp.w	sl, #1
 80085d6:	d103      	bne.n	80085e0 <_strtod_l+0xa20>
 80085d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80085da:	2b00      	cmp	r3, #0
 80085dc:	f43f ada6 	beq.w	800812c <_strtod_l+0x56c>
 80085e0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008690 <_strtod_l+0xad0>
 80085e4:	4f35      	ldr	r7, [pc, #212]	@ (80086bc <_strtod_l+0xafc>)
 80085e6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80085ea:	2600      	movs	r6, #0
 80085ec:	e7b1      	b.n	8008552 <_strtod_l+0x992>
 80085ee:	4f34      	ldr	r7, [pc, #208]	@ (80086c0 <_strtod_l+0xb00>)
 80085f0:	2600      	movs	r6, #0
 80085f2:	e7aa      	b.n	800854a <_strtod_l+0x98a>
 80085f4:	4b32      	ldr	r3, [pc, #200]	@ (80086c0 <_strtod_l+0xb00>)
 80085f6:	4630      	mov	r0, r6
 80085f8:	4639      	mov	r1, r7
 80085fa:	2200      	movs	r2, #0
 80085fc:	f7f8 f824 	bl	8000648 <__aeabi_dmul>
 8008600:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008602:	4606      	mov	r6, r0
 8008604:	460f      	mov	r7, r1
 8008606:	2b00      	cmp	r3, #0
 8008608:	d09f      	beq.n	800854a <_strtod_l+0x98a>
 800860a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800860e:	e7a0      	b.n	8008552 <_strtod_l+0x992>
 8008610:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008698 <_strtod_l+0xad8>
 8008614:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008618:	ec57 6b17 	vmov	r6, r7, d7
 800861c:	e799      	b.n	8008552 <_strtod_l+0x992>
 800861e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008622:	9b08      	ldr	r3, [sp, #32]
 8008624:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8008628:	2b00      	cmp	r3, #0
 800862a:	d1c1      	bne.n	80085b0 <_strtod_l+0x9f0>
 800862c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008630:	0d1b      	lsrs	r3, r3, #20
 8008632:	051b      	lsls	r3, r3, #20
 8008634:	429d      	cmp	r5, r3
 8008636:	d1bb      	bne.n	80085b0 <_strtod_l+0x9f0>
 8008638:	4630      	mov	r0, r6
 800863a:	4639      	mov	r1, r7
 800863c:	f7f8 fb64 	bl	8000d08 <__aeabi_d2lz>
 8008640:	f7f7 ffd4 	bl	80005ec <__aeabi_l2d>
 8008644:	4602      	mov	r2, r0
 8008646:	460b      	mov	r3, r1
 8008648:	4630      	mov	r0, r6
 800864a:	4639      	mov	r1, r7
 800864c:	f7f7 fe44 	bl	80002d8 <__aeabi_dsub>
 8008650:	460b      	mov	r3, r1
 8008652:	4602      	mov	r2, r0
 8008654:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008658:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800865c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800865e:	ea46 060a 	orr.w	r6, r6, sl
 8008662:	431e      	orrs	r6, r3
 8008664:	d06f      	beq.n	8008746 <_strtod_l+0xb86>
 8008666:	a30e      	add	r3, pc, #56	@ (adr r3, 80086a0 <_strtod_l+0xae0>)
 8008668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800866c:	f7f8 fa5e 	bl	8000b2c <__aeabi_dcmplt>
 8008670:	2800      	cmp	r0, #0
 8008672:	f47f acd3 	bne.w	800801c <_strtod_l+0x45c>
 8008676:	a30c      	add	r3, pc, #48	@ (adr r3, 80086a8 <_strtod_l+0xae8>)
 8008678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800867c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008680:	f7f8 fa72 	bl	8000b68 <__aeabi_dcmpgt>
 8008684:	2800      	cmp	r0, #0
 8008686:	d093      	beq.n	80085b0 <_strtod_l+0x9f0>
 8008688:	e4c8      	b.n	800801c <_strtod_l+0x45c>
 800868a:	bf00      	nop
 800868c:	f3af 8000 	nop.w
 8008690:	00000000 	.word	0x00000000
 8008694:	bff00000 	.word	0xbff00000
 8008698:	00000000 	.word	0x00000000
 800869c:	3ff00000 	.word	0x3ff00000
 80086a0:	94a03595 	.word	0x94a03595
 80086a4:	3fdfffff 	.word	0x3fdfffff
 80086a8:	35afe535 	.word	0x35afe535
 80086ac:	3fe00000 	.word	0x3fe00000
 80086b0:	000fffff 	.word	0x000fffff
 80086b4:	7ff00000 	.word	0x7ff00000
 80086b8:	7fefffff 	.word	0x7fefffff
 80086bc:	3ff00000 	.word	0x3ff00000
 80086c0:	3fe00000 	.word	0x3fe00000
 80086c4:	7fe00000 	.word	0x7fe00000
 80086c8:	7c9fffff 	.word	0x7c9fffff
 80086cc:	9b08      	ldr	r3, [sp, #32]
 80086ce:	b323      	cbz	r3, 800871a <_strtod_l+0xb5a>
 80086d0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80086d4:	d821      	bhi.n	800871a <_strtod_l+0xb5a>
 80086d6:	a328      	add	r3, pc, #160	@ (adr r3, 8008778 <_strtod_l+0xbb8>)
 80086d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086dc:	4630      	mov	r0, r6
 80086de:	4639      	mov	r1, r7
 80086e0:	f7f8 fa2e 	bl	8000b40 <__aeabi_dcmple>
 80086e4:	b1a0      	cbz	r0, 8008710 <_strtod_l+0xb50>
 80086e6:	4639      	mov	r1, r7
 80086e8:	4630      	mov	r0, r6
 80086ea:	f7f8 fa85 	bl	8000bf8 <__aeabi_d2uiz>
 80086ee:	2801      	cmp	r0, #1
 80086f0:	bf38      	it	cc
 80086f2:	2001      	movcc	r0, #1
 80086f4:	f7f7 ff2e 	bl	8000554 <__aeabi_ui2d>
 80086f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80086fa:	4606      	mov	r6, r0
 80086fc:	460f      	mov	r7, r1
 80086fe:	b9fb      	cbnz	r3, 8008740 <_strtod_l+0xb80>
 8008700:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008704:	9014      	str	r0, [sp, #80]	@ 0x50
 8008706:	9315      	str	r3, [sp, #84]	@ 0x54
 8008708:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800870c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008710:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008712:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008716:	1b5b      	subs	r3, r3, r5
 8008718:	9311      	str	r3, [sp, #68]	@ 0x44
 800871a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800871e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008722:	f7ff f8f1 	bl	8007908 <__ulp>
 8008726:	4650      	mov	r0, sl
 8008728:	ec53 2b10 	vmov	r2, r3, d0
 800872c:	4659      	mov	r1, fp
 800872e:	f7f7 ff8b 	bl	8000648 <__aeabi_dmul>
 8008732:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008736:	f7f7 fdd1 	bl	80002dc <__adddf3>
 800873a:	4682      	mov	sl, r0
 800873c:	468b      	mov	fp, r1
 800873e:	e770      	b.n	8008622 <_strtod_l+0xa62>
 8008740:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008744:	e7e0      	b.n	8008708 <_strtod_l+0xb48>
 8008746:	a30e      	add	r3, pc, #56	@ (adr r3, 8008780 <_strtod_l+0xbc0>)
 8008748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800874c:	f7f8 f9ee 	bl	8000b2c <__aeabi_dcmplt>
 8008750:	e798      	b.n	8008684 <_strtod_l+0xac4>
 8008752:	2300      	movs	r3, #0
 8008754:	930e      	str	r3, [sp, #56]	@ 0x38
 8008756:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008758:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800875a:	6013      	str	r3, [r2, #0]
 800875c:	f7ff ba6d 	b.w	8007c3a <_strtod_l+0x7a>
 8008760:	2a65      	cmp	r2, #101	@ 0x65
 8008762:	f43f ab68 	beq.w	8007e36 <_strtod_l+0x276>
 8008766:	2a45      	cmp	r2, #69	@ 0x45
 8008768:	f43f ab65 	beq.w	8007e36 <_strtod_l+0x276>
 800876c:	2301      	movs	r3, #1
 800876e:	f7ff bba0 	b.w	8007eb2 <_strtod_l+0x2f2>
 8008772:	bf00      	nop
 8008774:	f3af 8000 	nop.w
 8008778:	ffc00000 	.word	0xffc00000
 800877c:	41dfffff 	.word	0x41dfffff
 8008780:	94a03595 	.word	0x94a03595
 8008784:	3fcfffff 	.word	0x3fcfffff

08008788 <_strtod_r>:
 8008788:	4b01      	ldr	r3, [pc, #4]	@ (8008790 <_strtod_r+0x8>)
 800878a:	f7ff ba19 	b.w	8007bc0 <_strtod_l>
 800878e:	bf00      	nop
 8008790:	20000068 	.word	0x20000068

08008794 <_strtol_l.isra.0>:
 8008794:	2b24      	cmp	r3, #36	@ 0x24
 8008796:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800879a:	4686      	mov	lr, r0
 800879c:	4690      	mov	r8, r2
 800879e:	d801      	bhi.n	80087a4 <_strtol_l.isra.0+0x10>
 80087a0:	2b01      	cmp	r3, #1
 80087a2:	d106      	bne.n	80087b2 <_strtol_l.isra.0+0x1e>
 80087a4:	f7fd fdb6 	bl	8006314 <__errno>
 80087a8:	2316      	movs	r3, #22
 80087aa:	6003      	str	r3, [r0, #0]
 80087ac:	2000      	movs	r0, #0
 80087ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087b2:	4834      	ldr	r0, [pc, #208]	@ (8008884 <_strtol_l.isra.0+0xf0>)
 80087b4:	460d      	mov	r5, r1
 80087b6:	462a      	mov	r2, r5
 80087b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80087bc:	5d06      	ldrb	r6, [r0, r4]
 80087be:	f016 0608 	ands.w	r6, r6, #8
 80087c2:	d1f8      	bne.n	80087b6 <_strtol_l.isra.0+0x22>
 80087c4:	2c2d      	cmp	r4, #45	@ 0x2d
 80087c6:	d110      	bne.n	80087ea <_strtol_l.isra.0+0x56>
 80087c8:	782c      	ldrb	r4, [r5, #0]
 80087ca:	2601      	movs	r6, #1
 80087cc:	1c95      	adds	r5, r2, #2
 80087ce:	f033 0210 	bics.w	r2, r3, #16
 80087d2:	d115      	bne.n	8008800 <_strtol_l.isra.0+0x6c>
 80087d4:	2c30      	cmp	r4, #48	@ 0x30
 80087d6:	d10d      	bne.n	80087f4 <_strtol_l.isra.0+0x60>
 80087d8:	782a      	ldrb	r2, [r5, #0]
 80087da:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80087de:	2a58      	cmp	r2, #88	@ 0x58
 80087e0:	d108      	bne.n	80087f4 <_strtol_l.isra.0+0x60>
 80087e2:	786c      	ldrb	r4, [r5, #1]
 80087e4:	3502      	adds	r5, #2
 80087e6:	2310      	movs	r3, #16
 80087e8:	e00a      	b.n	8008800 <_strtol_l.isra.0+0x6c>
 80087ea:	2c2b      	cmp	r4, #43	@ 0x2b
 80087ec:	bf04      	itt	eq
 80087ee:	782c      	ldrbeq	r4, [r5, #0]
 80087f0:	1c95      	addeq	r5, r2, #2
 80087f2:	e7ec      	b.n	80087ce <_strtol_l.isra.0+0x3a>
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d1f6      	bne.n	80087e6 <_strtol_l.isra.0+0x52>
 80087f8:	2c30      	cmp	r4, #48	@ 0x30
 80087fa:	bf14      	ite	ne
 80087fc:	230a      	movne	r3, #10
 80087fe:	2308      	moveq	r3, #8
 8008800:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008804:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008808:	2200      	movs	r2, #0
 800880a:	fbbc f9f3 	udiv	r9, ip, r3
 800880e:	4610      	mov	r0, r2
 8008810:	fb03 ca19 	mls	sl, r3, r9, ip
 8008814:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008818:	2f09      	cmp	r7, #9
 800881a:	d80f      	bhi.n	800883c <_strtol_l.isra.0+0xa8>
 800881c:	463c      	mov	r4, r7
 800881e:	42a3      	cmp	r3, r4
 8008820:	dd1b      	ble.n	800885a <_strtol_l.isra.0+0xc6>
 8008822:	1c57      	adds	r7, r2, #1
 8008824:	d007      	beq.n	8008836 <_strtol_l.isra.0+0xa2>
 8008826:	4581      	cmp	r9, r0
 8008828:	d314      	bcc.n	8008854 <_strtol_l.isra.0+0xc0>
 800882a:	d101      	bne.n	8008830 <_strtol_l.isra.0+0x9c>
 800882c:	45a2      	cmp	sl, r4
 800882e:	db11      	blt.n	8008854 <_strtol_l.isra.0+0xc0>
 8008830:	fb00 4003 	mla	r0, r0, r3, r4
 8008834:	2201      	movs	r2, #1
 8008836:	f815 4b01 	ldrb.w	r4, [r5], #1
 800883a:	e7eb      	b.n	8008814 <_strtol_l.isra.0+0x80>
 800883c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008840:	2f19      	cmp	r7, #25
 8008842:	d801      	bhi.n	8008848 <_strtol_l.isra.0+0xb4>
 8008844:	3c37      	subs	r4, #55	@ 0x37
 8008846:	e7ea      	b.n	800881e <_strtol_l.isra.0+0x8a>
 8008848:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800884c:	2f19      	cmp	r7, #25
 800884e:	d804      	bhi.n	800885a <_strtol_l.isra.0+0xc6>
 8008850:	3c57      	subs	r4, #87	@ 0x57
 8008852:	e7e4      	b.n	800881e <_strtol_l.isra.0+0x8a>
 8008854:	f04f 32ff 	mov.w	r2, #4294967295
 8008858:	e7ed      	b.n	8008836 <_strtol_l.isra.0+0xa2>
 800885a:	1c53      	adds	r3, r2, #1
 800885c:	d108      	bne.n	8008870 <_strtol_l.isra.0+0xdc>
 800885e:	2322      	movs	r3, #34	@ 0x22
 8008860:	f8ce 3000 	str.w	r3, [lr]
 8008864:	4660      	mov	r0, ip
 8008866:	f1b8 0f00 	cmp.w	r8, #0
 800886a:	d0a0      	beq.n	80087ae <_strtol_l.isra.0+0x1a>
 800886c:	1e69      	subs	r1, r5, #1
 800886e:	e006      	b.n	800887e <_strtol_l.isra.0+0xea>
 8008870:	b106      	cbz	r6, 8008874 <_strtol_l.isra.0+0xe0>
 8008872:	4240      	negs	r0, r0
 8008874:	f1b8 0f00 	cmp.w	r8, #0
 8008878:	d099      	beq.n	80087ae <_strtol_l.isra.0+0x1a>
 800887a:	2a00      	cmp	r2, #0
 800887c:	d1f6      	bne.n	800886c <_strtol_l.isra.0+0xd8>
 800887e:	f8c8 1000 	str.w	r1, [r8]
 8008882:	e794      	b.n	80087ae <_strtol_l.isra.0+0x1a>
 8008884:	08009f11 	.word	0x08009f11

08008888 <_strtol_r>:
 8008888:	f7ff bf84 	b.w	8008794 <_strtol_l.isra.0>

0800888c <__ssputs_r>:
 800888c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008890:	688e      	ldr	r6, [r1, #8]
 8008892:	461f      	mov	r7, r3
 8008894:	42be      	cmp	r6, r7
 8008896:	680b      	ldr	r3, [r1, #0]
 8008898:	4682      	mov	sl, r0
 800889a:	460c      	mov	r4, r1
 800889c:	4690      	mov	r8, r2
 800889e:	d82d      	bhi.n	80088fc <__ssputs_r+0x70>
 80088a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80088a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80088a8:	d026      	beq.n	80088f8 <__ssputs_r+0x6c>
 80088aa:	6965      	ldr	r5, [r4, #20]
 80088ac:	6909      	ldr	r1, [r1, #16]
 80088ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80088b2:	eba3 0901 	sub.w	r9, r3, r1
 80088b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80088ba:	1c7b      	adds	r3, r7, #1
 80088bc:	444b      	add	r3, r9
 80088be:	106d      	asrs	r5, r5, #1
 80088c0:	429d      	cmp	r5, r3
 80088c2:	bf38      	it	cc
 80088c4:	461d      	movcc	r5, r3
 80088c6:	0553      	lsls	r3, r2, #21
 80088c8:	d527      	bpl.n	800891a <__ssputs_r+0x8e>
 80088ca:	4629      	mov	r1, r5
 80088cc:	f7fe fc24 	bl	8007118 <_malloc_r>
 80088d0:	4606      	mov	r6, r0
 80088d2:	b360      	cbz	r0, 800892e <__ssputs_r+0xa2>
 80088d4:	6921      	ldr	r1, [r4, #16]
 80088d6:	464a      	mov	r2, r9
 80088d8:	f000 fa18 	bl	8008d0c <memcpy>
 80088dc:	89a3      	ldrh	r3, [r4, #12]
 80088de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80088e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088e6:	81a3      	strh	r3, [r4, #12]
 80088e8:	6126      	str	r6, [r4, #16]
 80088ea:	6165      	str	r5, [r4, #20]
 80088ec:	444e      	add	r6, r9
 80088ee:	eba5 0509 	sub.w	r5, r5, r9
 80088f2:	6026      	str	r6, [r4, #0]
 80088f4:	60a5      	str	r5, [r4, #8]
 80088f6:	463e      	mov	r6, r7
 80088f8:	42be      	cmp	r6, r7
 80088fa:	d900      	bls.n	80088fe <__ssputs_r+0x72>
 80088fc:	463e      	mov	r6, r7
 80088fe:	6820      	ldr	r0, [r4, #0]
 8008900:	4632      	mov	r2, r6
 8008902:	4641      	mov	r1, r8
 8008904:	f000 f9c6 	bl	8008c94 <memmove>
 8008908:	68a3      	ldr	r3, [r4, #8]
 800890a:	1b9b      	subs	r3, r3, r6
 800890c:	60a3      	str	r3, [r4, #8]
 800890e:	6823      	ldr	r3, [r4, #0]
 8008910:	4433      	add	r3, r6
 8008912:	6023      	str	r3, [r4, #0]
 8008914:	2000      	movs	r0, #0
 8008916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800891a:	462a      	mov	r2, r5
 800891c:	f000 fd89 	bl	8009432 <_realloc_r>
 8008920:	4606      	mov	r6, r0
 8008922:	2800      	cmp	r0, #0
 8008924:	d1e0      	bne.n	80088e8 <__ssputs_r+0x5c>
 8008926:	6921      	ldr	r1, [r4, #16]
 8008928:	4650      	mov	r0, sl
 800892a:	f7fe fb81 	bl	8007030 <_free_r>
 800892e:	230c      	movs	r3, #12
 8008930:	f8ca 3000 	str.w	r3, [sl]
 8008934:	89a3      	ldrh	r3, [r4, #12]
 8008936:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800893a:	81a3      	strh	r3, [r4, #12]
 800893c:	f04f 30ff 	mov.w	r0, #4294967295
 8008940:	e7e9      	b.n	8008916 <__ssputs_r+0x8a>
	...

08008944 <_svfiprintf_r>:
 8008944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008948:	4698      	mov	r8, r3
 800894a:	898b      	ldrh	r3, [r1, #12]
 800894c:	061b      	lsls	r3, r3, #24
 800894e:	b09d      	sub	sp, #116	@ 0x74
 8008950:	4607      	mov	r7, r0
 8008952:	460d      	mov	r5, r1
 8008954:	4614      	mov	r4, r2
 8008956:	d510      	bpl.n	800897a <_svfiprintf_r+0x36>
 8008958:	690b      	ldr	r3, [r1, #16]
 800895a:	b973      	cbnz	r3, 800897a <_svfiprintf_r+0x36>
 800895c:	2140      	movs	r1, #64	@ 0x40
 800895e:	f7fe fbdb 	bl	8007118 <_malloc_r>
 8008962:	6028      	str	r0, [r5, #0]
 8008964:	6128      	str	r0, [r5, #16]
 8008966:	b930      	cbnz	r0, 8008976 <_svfiprintf_r+0x32>
 8008968:	230c      	movs	r3, #12
 800896a:	603b      	str	r3, [r7, #0]
 800896c:	f04f 30ff 	mov.w	r0, #4294967295
 8008970:	b01d      	add	sp, #116	@ 0x74
 8008972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008976:	2340      	movs	r3, #64	@ 0x40
 8008978:	616b      	str	r3, [r5, #20]
 800897a:	2300      	movs	r3, #0
 800897c:	9309      	str	r3, [sp, #36]	@ 0x24
 800897e:	2320      	movs	r3, #32
 8008980:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008984:	f8cd 800c 	str.w	r8, [sp, #12]
 8008988:	2330      	movs	r3, #48	@ 0x30
 800898a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008b28 <_svfiprintf_r+0x1e4>
 800898e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008992:	f04f 0901 	mov.w	r9, #1
 8008996:	4623      	mov	r3, r4
 8008998:	469a      	mov	sl, r3
 800899a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800899e:	b10a      	cbz	r2, 80089a4 <_svfiprintf_r+0x60>
 80089a0:	2a25      	cmp	r2, #37	@ 0x25
 80089a2:	d1f9      	bne.n	8008998 <_svfiprintf_r+0x54>
 80089a4:	ebba 0b04 	subs.w	fp, sl, r4
 80089a8:	d00b      	beq.n	80089c2 <_svfiprintf_r+0x7e>
 80089aa:	465b      	mov	r3, fp
 80089ac:	4622      	mov	r2, r4
 80089ae:	4629      	mov	r1, r5
 80089b0:	4638      	mov	r0, r7
 80089b2:	f7ff ff6b 	bl	800888c <__ssputs_r>
 80089b6:	3001      	adds	r0, #1
 80089b8:	f000 80a7 	beq.w	8008b0a <_svfiprintf_r+0x1c6>
 80089bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80089be:	445a      	add	r2, fp
 80089c0:	9209      	str	r2, [sp, #36]	@ 0x24
 80089c2:	f89a 3000 	ldrb.w	r3, [sl]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	f000 809f 	beq.w	8008b0a <_svfiprintf_r+0x1c6>
 80089cc:	2300      	movs	r3, #0
 80089ce:	f04f 32ff 	mov.w	r2, #4294967295
 80089d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089d6:	f10a 0a01 	add.w	sl, sl, #1
 80089da:	9304      	str	r3, [sp, #16]
 80089dc:	9307      	str	r3, [sp, #28]
 80089de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80089e2:	931a      	str	r3, [sp, #104]	@ 0x68
 80089e4:	4654      	mov	r4, sl
 80089e6:	2205      	movs	r2, #5
 80089e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089ec:	484e      	ldr	r0, [pc, #312]	@ (8008b28 <_svfiprintf_r+0x1e4>)
 80089ee:	f7f7 fc17 	bl	8000220 <memchr>
 80089f2:	9a04      	ldr	r2, [sp, #16]
 80089f4:	b9d8      	cbnz	r0, 8008a2e <_svfiprintf_r+0xea>
 80089f6:	06d0      	lsls	r0, r2, #27
 80089f8:	bf44      	itt	mi
 80089fa:	2320      	movmi	r3, #32
 80089fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a00:	0711      	lsls	r1, r2, #28
 8008a02:	bf44      	itt	mi
 8008a04:	232b      	movmi	r3, #43	@ 0x2b
 8008a06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a0a:	f89a 3000 	ldrb.w	r3, [sl]
 8008a0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a10:	d015      	beq.n	8008a3e <_svfiprintf_r+0xfa>
 8008a12:	9a07      	ldr	r2, [sp, #28]
 8008a14:	4654      	mov	r4, sl
 8008a16:	2000      	movs	r0, #0
 8008a18:	f04f 0c0a 	mov.w	ip, #10
 8008a1c:	4621      	mov	r1, r4
 8008a1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a22:	3b30      	subs	r3, #48	@ 0x30
 8008a24:	2b09      	cmp	r3, #9
 8008a26:	d94b      	bls.n	8008ac0 <_svfiprintf_r+0x17c>
 8008a28:	b1b0      	cbz	r0, 8008a58 <_svfiprintf_r+0x114>
 8008a2a:	9207      	str	r2, [sp, #28]
 8008a2c:	e014      	b.n	8008a58 <_svfiprintf_r+0x114>
 8008a2e:	eba0 0308 	sub.w	r3, r0, r8
 8008a32:	fa09 f303 	lsl.w	r3, r9, r3
 8008a36:	4313      	orrs	r3, r2
 8008a38:	9304      	str	r3, [sp, #16]
 8008a3a:	46a2      	mov	sl, r4
 8008a3c:	e7d2      	b.n	80089e4 <_svfiprintf_r+0xa0>
 8008a3e:	9b03      	ldr	r3, [sp, #12]
 8008a40:	1d19      	adds	r1, r3, #4
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	9103      	str	r1, [sp, #12]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	bfbb      	ittet	lt
 8008a4a:	425b      	neglt	r3, r3
 8008a4c:	f042 0202 	orrlt.w	r2, r2, #2
 8008a50:	9307      	strge	r3, [sp, #28]
 8008a52:	9307      	strlt	r3, [sp, #28]
 8008a54:	bfb8      	it	lt
 8008a56:	9204      	strlt	r2, [sp, #16]
 8008a58:	7823      	ldrb	r3, [r4, #0]
 8008a5a:	2b2e      	cmp	r3, #46	@ 0x2e
 8008a5c:	d10a      	bne.n	8008a74 <_svfiprintf_r+0x130>
 8008a5e:	7863      	ldrb	r3, [r4, #1]
 8008a60:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a62:	d132      	bne.n	8008aca <_svfiprintf_r+0x186>
 8008a64:	9b03      	ldr	r3, [sp, #12]
 8008a66:	1d1a      	adds	r2, r3, #4
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	9203      	str	r2, [sp, #12]
 8008a6c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008a70:	3402      	adds	r4, #2
 8008a72:	9305      	str	r3, [sp, #20]
 8008a74:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008b38 <_svfiprintf_r+0x1f4>
 8008a78:	7821      	ldrb	r1, [r4, #0]
 8008a7a:	2203      	movs	r2, #3
 8008a7c:	4650      	mov	r0, sl
 8008a7e:	f7f7 fbcf 	bl	8000220 <memchr>
 8008a82:	b138      	cbz	r0, 8008a94 <_svfiprintf_r+0x150>
 8008a84:	9b04      	ldr	r3, [sp, #16]
 8008a86:	eba0 000a 	sub.w	r0, r0, sl
 8008a8a:	2240      	movs	r2, #64	@ 0x40
 8008a8c:	4082      	lsls	r2, r0
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	3401      	adds	r4, #1
 8008a92:	9304      	str	r3, [sp, #16]
 8008a94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a98:	4824      	ldr	r0, [pc, #144]	@ (8008b2c <_svfiprintf_r+0x1e8>)
 8008a9a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008a9e:	2206      	movs	r2, #6
 8008aa0:	f7f7 fbbe 	bl	8000220 <memchr>
 8008aa4:	2800      	cmp	r0, #0
 8008aa6:	d036      	beq.n	8008b16 <_svfiprintf_r+0x1d2>
 8008aa8:	4b21      	ldr	r3, [pc, #132]	@ (8008b30 <_svfiprintf_r+0x1ec>)
 8008aaa:	bb1b      	cbnz	r3, 8008af4 <_svfiprintf_r+0x1b0>
 8008aac:	9b03      	ldr	r3, [sp, #12]
 8008aae:	3307      	adds	r3, #7
 8008ab0:	f023 0307 	bic.w	r3, r3, #7
 8008ab4:	3308      	adds	r3, #8
 8008ab6:	9303      	str	r3, [sp, #12]
 8008ab8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008aba:	4433      	add	r3, r6
 8008abc:	9309      	str	r3, [sp, #36]	@ 0x24
 8008abe:	e76a      	b.n	8008996 <_svfiprintf_r+0x52>
 8008ac0:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ac4:	460c      	mov	r4, r1
 8008ac6:	2001      	movs	r0, #1
 8008ac8:	e7a8      	b.n	8008a1c <_svfiprintf_r+0xd8>
 8008aca:	2300      	movs	r3, #0
 8008acc:	3401      	adds	r4, #1
 8008ace:	9305      	str	r3, [sp, #20]
 8008ad0:	4619      	mov	r1, r3
 8008ad2:	f04f 0c0a 	mov.w	ip, #10
 8008ad6:	4620      	mov	r0, r4
 8008ad8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008adc:	3a30      	subs	r2, #48	@ 0x30
 8008ade:	2a09      	cmp	r2, #9
 8008ae0:	d903      	bls.n	8008aea <_svfiprintf_r+0x1a6>
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d0c6      	beq.n	8008a74 <_svfiprintf_r+0x130>
 8008ae6:	9105      	str	r1, [sp, #20]
 8008ae8:	e7c4      	b.n	8008a74 <_svfiprintf_r+0x130>
 8008aea:	fb0c 2101 	mla	r1, ip, r1, r2
 8008aee:	4604      	mov	r4, r0
 8008af0:	2301      	movs	r3, #1
 8008af2:	e7f0      	b.n	8008ad6 <_svfiprintf_r+0x192>
 8008af4:	ab03      	add	r3, sp, #12
 8008af6:	9300      	str	r3, [sp, #0]
 8008af8:	462a      	mov	r2, r5
 8008afa:	4b0e      	ldr	r3, [pc, #56]	@ (8008b34 <_svfiprintf_r+0x1f0>)
 8008afc:	a904      	add	r1, sp, #16
 8008afe:	4638      	mov	r0, r7
 8008b00:	f7fc fcca 	bl	8005498 <_printf_float>
 8008b04:	1c42      	adds	r2, r0, #1
 8008b06:	4606      	mov	r6, r0
 8008b08:	d1d6      	bne.n	8008ab8 <_svfiprintf_r+0x174>
 8008b0a:	89ab      	ldrh	r3, [r5, #12]
 8008b0c:	065b      	lsls	r3, r3, #25
 8008b0e:	f53f af2d 	bmi.w	800896c <_svfiprintf_r+0x28>
 8008b12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008b14:	e72c      	b.n	8008970 <_svfiprintf_r+0x2c>
 8008b16:	ab03      	add	r3, sp, #12
 8008b18:	9300      	str	r3, [sp, #0]
 8008b1a:	462a      	mov	r2, r5
 8008b1c:	4b05      	ldr	r3, [pc, #20]	@ (8008b34 <_svfiprintf_r+0x1f0>)
 8008b1e:	a904      	add	r1, sp, #16
 8008b20:	4638      	mov	r0, r7
 8008b22:	f7fc ff51 	bl	80059c8 <_printf_i>
 8008b26:	e7ed      	b.n	8008b04 <_svfiprintf_r+0x1c0>
 8008b28:	08009d0d 	.word	0x08009d0d
 8008b2c:	08009d17 	.word	0x08009d17
 8008b30:	08005499 	.word	0x08005499
 8008b34:	0800888d 	.word	0x0800888d
 8008b38:	08009d13 	.word	0x08009d13

08008b3c <__sflush_r>:
 8008b3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b44:	0716      	lsls	r6, r2, #28
 8008b46:	4605      	mov	r5, r0
 8008b48:	460c      	mov	r4, r1
 8008b4a:	d454      	bmi.n	8008bf6 <__sflush_r+0xba>
 8008b4c:	684b      	ldr	r3, [r1, #4]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	dc02      	bgt.n	8008b58 <__sflush_r+0x1c>
 8008b52:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	dd48      	ble.n	8008bea <__sflush_r+0xae>
 8008b58:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008b5a:	2e00      	cmp	r6, #0
 8008b5c:	d045      	beq.n	8008bea <__sflush_r+0xae>
 8008b5e:	2300      	movs	r3, #0
 8008b60:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008b64:	682f      	ldr	r7, [r5, #0]
 8008b66:	6a21      	ldr	r1, [r4, #32]
 8008b68:	602b      	str	r3, [r5, #0]
 8008b6a:	d030      	beq.n	8008bce <__sflush_r+0x92>
 8008b6c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008b6e:	89a3      	ldrh	r3, [r4, #12]
 8008b70:	0759      	lsls	r1, r3, #29
 8008b72:	d505      	bpl.n	8008b80 <__sflush_r+0x44>
 8008b74:	6863      	ldr	r3, [r4, #4]
 8008b76:	1ad2      	subs	r2, r2, r3
 8008b78:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008b7a:	b10b      	cbz	r3, 8008b80 <__sflush_r+0x44>
 8008b7c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008b7e:	1ad2      	subs	r2, r2, r3
 8008b80:	2300      	movs	r3, #0
 8008b82:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008b84:	6a21      	ldr	r1, [r4, #32]
 8008b86:	4628      	mov	r0, r5
 8008b88:	47b0      	blx	r6
 8008b8a:	1c43      	adds	r3, r0, #1
 8008b8c:	89a3      	ldrh	r3, [r4, #12]
 8008b8e:	d106      	bne.n	8008b9e <__sflush_r+0x62>
 8008b90:	6829      	ldr	r1, [r5, #0]
 8008b92:	291d      	cmp	r1, #29
 8008b94:	d82b      	bhi.n	8008bee <__sflush_r+0xb2>
 8008b96:	4a2a      	ldr	r2, [pc, #168]	@ (8008c40 <__sflush_r+0x104>)
 8008b98:	40ca      	lsrs	r2, r1
 8008b9a:	07d6      	lsls	r6, r2, #31
 8008b9c:	d527      	bpl.n	8008bee <__sflush_r+0xb2>
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	6062      	str	r2, [r4, #4]
 8008ba2:	04d9      	lsls	r1, r3, #19
 8008ba4:	6922      	ldr	r2, [r4, #16]
 8008ba6:	6022      	str	r2, [r4, #0]
 8008ba8:	d504      	bpl.n	8008bb4 <__sflush_r+0x78>
 8008baa:	1c42      	adds	r2, r0, #1
 8008bac:	d101      	bne.n	8008bb2 <__sflush_r+0x76>
 8008bae:	682b      	ldr	r3, [r5, #0]
 8008bb0:	b903      	cbnz	r3, 8008bb4 <__sflush_r+0x78>
 8008bb2:	6560      	str	r0, [r4, #84]	@ 0x54
 8008bb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008bb6:	602f      	str	r7, [r5, #0]
 8008bb8:	b1b9      	cbz	r1, 8008bea <__sflush_r+0xae>
 8008bba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008bbe:	4299      	cmp	r1, r3
 8008bc0:	d002      	beq.n	8008bc8 <__sflush_r+0x8c>
 8008bc2:	4628      	mov	r0, r5
 8008bc4:	f7fe fa34 	bl	8007030 <_free_r>
 8008bc8:	2300      	movs	r3, #0
 8008bca:	6363      	str	r3, [r4, #52]	@ 0x34
 8008bcc:	e00d      	b.n	8008bea <__sflush_r+0xae>
 8008bce:	2301      	movs	r3, #1
 8008bd0:	4628      	mov	r0, r5
 8008bd2:	47b0      	blx	r6
 8008bd4:	4602      	mov	r2, r0
 8008bd6:	1c50      	adds	r0, r2, #1
 8008bd8:	d1c9      	bne.n	8008b6e <__sflush_r+0x32>
 8008bda:	682b      	ldr	r3, [r5, #0]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d0c6      	beq.n	8008b6e <__sflush_r+0x32>
 8008be0:	2b1d      	cmp	r3, #29
 8008be2:	d001      	beq.n	8008be8 <__sflush_r+0xac>
 8008be4:	2b16      	cmp	r3, #22
 8008be6:	d11e      	bne.n	8008c26 <__sflush_r+0xea>
 8008be8:	602f      	str	r7, [r5, #0]
 8008bea:	2000      	movs	r0, #0
 8008bec:	e022      	b.n	8008c34 <__sflush_r+0xf8>
 8008bee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008bf2:	b21b      	sxth	r3, r3
 8008bf4:	e01b      	b.n	8008c2e <__sflush_r+0xf2>
 8008bf6:	690f      	ldr	r7, [r1, #16]
 8008bf8:	2f00      	cmp	r7, #0
 8008bfa:	d0f6      	beq.n	8008bea <__sflush_r+0xae>
 8008bfc:	0793      	lsls	r3, r2, #30
 8008bfe:	680e      	ldr	r6, [r1, #0]
 8008c00:	bf08      	it	eq
 8008c02:	694b      	ldreq	r3, [r1, #20]
 8008c04:	600f      	str	r7, [r1, #0]
 8008c06:	bf18      	it	ne
 8008c08:	2300      	movne	r3, #0
 8008c0a:	eba6 0807 	sub.w	r8, r6, r7
 8008c0e:	608b      	str	r3, [r1, #8]
 8008c10:	f1b8 0f00 	cmp.w	r8, #0
 8008c14:	dde9      	ble.n	8008bea <__sflush_r+0xae>
 8008c16:	6a21      	ldr	r1, [r4, #32]
 8008c18:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008c1a:	4643      	mov	r3, r8
 8008c1c:	463a      	mov	r2, r7
 8008c1e:	4628      	mov	r0, r5
 8008c20:	47b0      	blx	r6
 8008c22:	2800      	cmp	r0, #0
 8008c24:	dc08      	bgt.n	8008c38 <__sflush_r+0xfc>
 8008c26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c2e:	81a3      	strh	r3, [r4, #12]
 8008c30:	f04f 30ff 	mov.w	r0, #4294967295
 8008c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c38:	4407      	add	r7, r0
 8008c3a:	eba8 0800 	sub.w	r8, r8, r0
 8008c3e:	e7e7      	b.n	8008c10 <__sflush_r+0xd4>
 8008c40:	20400001 	.word	0x20400001

08008c44 <_fflush_r>:
 8008c44:	b538      	push	{r3, r4, r5, lr}
 8008c46:	690b      	ldr	r3, [r1, #16]
 8008c48:	4605      	mov	r5, r0
 8008c4a:	460c      	mov	r4, r1
 8008c4c:	b913      	cbnz	r3, 8008c54 <_fflush_r+0x10>
 8008c4e:	2500      	movs	r5, #0
 8008c50:	4628      	mov	r0, r5
 8008c52:	bd38      	pop	{r3, r4, r5, pc}
 8008c54:	b118      	cbz	r0, 8008c5e <_fflush_r+0x1a>
 8008c56:	6a03      	ldr	r3, [r0, #32]
 8008c58:	b90b      	cbnz	r3, 8008c5e <_fflush_r+0x1a>
 8008c5a:	f7fd fa6d 	bl	8006138 <__sinit>
 8008c5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d0f3      	beq.n	8008c4e <_fflush_r+0xa>
 8008c66:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008c68:	07d0      	lsls	r0, r2, #31
 8008c6a:	d404      	bmi.n	8008c76 <_fflush_r+0x32>
 8008c6c:	0599      	lsls	r1, r3, #22
 8008c6e:	d402      	bmi.n	8008c76 <_fflush_r+0x32>
 8008c70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c72:	f7fd fb7a 	bl	800636a <__retarget_lock_acquire_recursive>
 8008c76:	4628      	mov	r0, r5
 8008c78:	4621      	mov	r1, r4
 8008c7a:	f7ff ff5f 	bl	8008b3c <__sflush_r>
 8008c7e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008c80:	07da      	lsls	r2, r3, #31
 8008c82:	4605      	mov	r5, r0
 8008c84:	d4e4      	bmi.n	8008c50 <_fflush_r+0xc>
 8008c86:	89a3      	ldrh	r3, [r4, #12]
 8008c88:	059b      	lsls	r3, r3, #22
 8008c8a:	d4e1      	bmi.n	8008c50 <_fflush_r+0xc>
 8008c8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c8e:	f7fd fb6d 	bl	800636c <__retarget_lock_release_recursive>
 8008c92:	e7dd      	b.n	8008c50 <_fflush_r+0xc>

08008c94 <memmove>:
 8008c94:	4288      	cmp	r0, r1
 8008c96:	b510      	push	{r4, lr}
 8008c98:	eb01 0402 	add.w	r4, r1, r2
 8008c9c:	d902      	bls.n	8008ca4 <memmove+0x10>
 8008c9e:	4284      	cmp	r4, r0
 8008ca0:	4623      	mov	r3, r4
 8008ca2:	d807      	bhi.n	8008cb4 <memmove+0x20>
 8008ca4:	1e43      	subs	r3, r0, #1
 8008ca6:	42a1      	cmp	r1, r4
 8008ca8:	d008      	beq.n	8008cbc <memmove+0x28>
 8008caa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008cae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008cb2:	e7f8      	b.n	8008ca6 <memmove+0x12>
 8008cb4:	4402      	add	r2, r0
 8008cb6:	4601      	mov	r1, r0
 8008cb8:	428a      	cmp	r2, r1
 8008cba:	d100      	bne.n	8008cbe <memmove+0x2a>
 8008cbc:	bd10      	pop	{r4, pc}
 8008cbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008cc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008cc6:	e7f7      	b.n	8008cb8 <memmove+0x24>

08008cc8 <strncmp>:
 8008cc8:	b510      	push	{r4, lr}
 8008cca:	b16a      	cbz	r2, 8008ce8 <strncmp+0x20>
 8008ccc:	3901      	subs	r1, #1
 8008cce:	1884      	adds	r4, r0, r2
 8008cd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008cd4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	d103      	bne.n	8008ce4 <strncmp+0x1c>
 8008cdc:	42a0      	cmp	r0, r4
 8008cde:	d001      	beq.n	8008ce4 <strncmp+0x1c>
 8008ce0:	2a00      	cmp	r2, #0
 8008ce2:	d1f5      	bne.n	8008cd0 <strncmp+0x8>
 8008ce4:	1ad0      	subs	r0, r2, r3
 8008ce6:	bd10      	pop	{r4, pc}
 8008ce8:	4610      	mov	r0, r2
 8008cea:	e7fc      	b.n	8008ce6 <strncmp+0x1e>

08008cec <_sbrk_r>:
 8008cec:	b538      	push	{r3, r4, r5, lr}
 8008cee:	4d06      	ldr	r5, [pc, #24]	@ (8008d08 <_sbrk_r+0x1c>)
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	4604      	mov	r4, r0
 8008cf4:	4608      	mov	r0, r1
 8008cf6:	602b      	str	r3, [r5, #0]
 8008cf8:	f7f8 fdfa 	bl	80018f0 <_sbrk>
 8008cfc:	1c43      	adds	r3, r0, #1
 8008cfe:	d102      	bne.n	8008d06 <_sbrk_r+0x1a>
 8008d00:	682b      	ldr	r3, [r5, #0]
 8008d02:	b103      	cbz	r3, 8008d06 <_sbrk_r+0x1a>
 8008d04:	6023      	str	r3, [r4, #0]
 8008d06:	bd38      	pop	{r3, r4, r5, pc}
 8008d08:	20000490 	.word	0x20000490

08008d0c <memcpy>:
 8008d0c:	440a      	add	r2, r1
 8008d0e:	4291      	cmp	r1, r2
 8008d10:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d14:	d100      	bne.n	8008d18 <memcpy+0xc>
 8008d16:	4770      	bx	lr
 8008d18:	b510      	push	{r4, lr}
 8008d1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d22:	4291      	cmp	r1, r2
 8008d24:	d1f9      	bne.n	8008d1a <memcpy+0xe>
 8008d26:	bd10      	pop	{r4, pc}

08008d28 <nan>:
 8008d28:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008d30 <nan+0x8>
 8008d2c:	4770      	bx	lr
 8008d2e:	bf00      	nop
 8008d30:	00000000 	.word	0x00000000
 8008d34:	7ff80000 	.word	0x7ff80000

08008d38 <__assert_func>:
 8008d38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008d3a:	4614      	mov	r4, r2
 8008d3c:	461a      	mov	r2, r3
 8008d3e:	4b09      	ldr	r3, [pc, #36]	@ (8008d64 <__assert_func+0x2c>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4605      	mov	r5, r0
 8008d44:	68d8      	ldr	r0, [r3, #12]
 8008d46:	b14c      	cbz	r4, 8008d5c <__assert_func+0x24>
 8008d48:	4b07      	ldr	r3, [pc, #28]	@ (8008d68 <__assert_func+0x30>)
 8008d4a:	9100      	str	r1, [sp, #0]
 8008d4c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008d50:	4906      	ldr	r1, [pc, #24]	@ (8008d6c <__assert_func+0x34>)
 8008d52:	462b      	mov	r3, r5
 8008d54:	f000 fba8 	bl	80094a8 <fiprintf>
 8008d58:	f000 fbb8 	bl	80094cc <abort>
 8008d5c:	4b04      	ldr	r3, [pc, #16]	@ (8008d70 <__assert_func+0x38>)
 8008d5e:	461c      	mov	r4, r3
 8008d60:	e7f3      	b.n	8008d4a <__assert_func+0x12>
 8008d62:	bf00      	nop
 8008d64:	20000018 	.word	0x20000018
 8008d68:	08009d26 	.word	0x08009d26
 8008d6c:	08009d33 	.word	0x08009d33
 8008d70:	08009d61 	.word	0x08009d61

08008d74 <_calloc_r>:
 8008d74:	b570      	push	{r4, r5, r6, lr}
 8008d76:	fba1 5402 	umull	r5, r4, r1, r2
 8008d7a:	b934      	cbnz	r4, 8008d8a <_calloc_r+0x16>
 8008d7c:	4629      	mov	r1, r5
 8008d7e:	f7fe f9cb 	bl	8007118 <_malloc_r>
 8008d82:	4606      	mov	r6, r0
 8008d84:	b928      	cbnz	r0, 8008d92 <_calloc_r+0x1e>
 8008d86:	4630      	mov	r0, r6
 8008d88:	bd70      	pop	{r4, r5, r6, pc}
 8008d8a:	220c      	movs	r2, #12
 8008d8c:	6002      	str	r2, [r0, #0]
 8008d8e:	2600      	movs	r6, #0
 8008d90:	e7f9      	b.n	8008d86 <_calloc_r+0x12>
 8008d92:	462a      	mov	r2, r5
 8008d94:	4621      	mov	r1, r4
 8008d96:	f7fd fa6a 	bl	800626e <memset>
 8008d9a:	e7f4      	b.n	8008d86 <_calloc_r+0x12>

08008d9c <rshift>:
 8008d9c:	6903      	ldr	r3, [r0, #16]
 8008d9e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008da2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008da6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008daa:	f100 0414 	add.w	r4, r0, #20
 8008dae:	dd45      	ble.n	8008e3c <rshift+0xa0>
 8008db0:	f011 011f 	ands.w	r1, r1, #31
 8008db4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008db8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008dbc:	d10c      	bne.n	8008dd8 <rshift+0x3c>
 8008dbe:	f100 0710 	add.w	r7, r0, #16
 8008dc2:	4629      	mov	r1, r5
 8008dc4:	42b1      	cmp	r1, r6
 8008dc6:	d334      	bcc.n	8008e32 <rshift+0x96>
 8008dc8:	1a9b      	subs	r3, r3, r2
 8008dca:	009b      	lsls	r3, r3, #2
 8008dcc:	1eea      	subs	r2, r5, #3
 8008dce:	4296      	cmp	r6, r2
 8008dd0:	bf38      	it	cc
 8008dd2:	2300      	movcc	r3, #0
 8008dd4:	4423      	add	r3, r4
 8008dd6:	e015      	b.n	8008e04 <rshift+0x68>
 8008dd8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008ddc:	f1c1 0820 	rsb	r8, r1, #32
 8008de0:	40cf      	lsrs	r7, r1
 8008de2:	f105 0e04 	add.w	lr, r5, #4
 8008de6:	46a1      	mov	r9, r4
 8008de8:	4576      	cmp	r6, lr
 8008dea:	46f4      	mov	ip, lr
 8008dec:	d815      	bhi.n	8008e1a <rshift+0x7e>
 8008dee:	1a9a      	subs	r2, r3, r2
 8008df0:	0092      	lsls	r2, r2, #2
 8008df2:	3a04      	subs	r2, #4
 8008df4:	3501      	adds	r5, #1
 8008df6:	42ae      	cmp	r6, r5
 8008df8:	bf38      	it	cc
 8008dfa:	2200      	movcc	r2, #0
 8008dfc:	18a3      	adds	r3, r4, r2
 8008dfe:	50a7      	str	r7, [r4, r2]
 8008e00:	b107      	cbz	r7, 8008e04 <rshift+0x68>
 8008e02:	3304      	adds	r3, #4
 8008e04:	1b1a      	subs	r2, r3, r4
 8008e06:	42a3      	cmp	r3, r4
 8008e08:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008e0c:	bf08      	it	eq
 8008e0e:	2300      	moveq	r3, #0
 8008e10:	6102      	str	r2, [r0, #16]
 8008e12:	bf08      	it	eq
 8008e14:	6143      	streq	r3, [r0, #20]
 8008e16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e1a:	f8dc c000 	ldr.w	ip, [ip]
 8008e1e:	fa0c fc08 	lsl.w	ip, ip, r8
 8008e22:	ea4c 0707 	orr.w	r7, ip, r7
 8008e26:	f849 7b04 	str.w	r7, [r9], #4
 8008e2a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008e2e:	40cf      	lsrs	r7, r1
 8008e30:	e7da      	b.n	8008de8 <rshift+0x4c>
 8008e32:	f851 cb04 	ldr.w	ip, [r1], #4
 8008e36:	f847 cf04 	str.w	ip, [r7, #4]!
 8008e3a:	e7c3      	b.n	8008dc4 <rshift+0x28>
 8008e3c:	4623      	mov	r3, r4
 8008e3e:	e7e1      	b.n	8008e04 <rshift+0x68>

08008e40 <__hexdig_fun>:
 8008e40:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008e44:	2b09      	cmp	r3, #9
 8008e46:	d802      	bhi.n	8008e4e <__hexdig_fun+0xe>
 8008e48:	3820      	subs	r0, #32
 8008e4a:	b2c0      	uxtb	r0, r0
 8008e4c:	4770      	bx	lr
 8008e4e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008e52:	2b05      	cmp	r3, #5
 8008e54:	d801      	bhi.n	8008e5a <__hexdig_fun+0x1a>
 8008e56:	3847      	subs	r0, #71	@ 0x47
 8008e58:	e7f7      	b.n	8008e4a <__hexdig_fun+0xa>
 8008e5a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008e5e:	2b05      	cmp	r3, #5
 8008e60:	d801      	bhi.n	8008e66 <__hexdig_fun+0x26>
 8008e62:	3827      	subs	r0, #39	@ 0x27
 8008e64:	e7f1      	b.n	8008e4a <__hexdig_fun+0xa>
 8008e66:	2000      	movs	r0, #0
 8008e68:	4770      	bx	lr
	...

08008e6c <__gethex>:
 8008e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e70:	b085      	sub	sp, #20
 8008e72:	468a      	mov	sl, r1
 8008e74:	9302      	str	r3, [sp, #8]
 8008e76:	680b      	ldr	r3, [r1, #0]
 8008e78:	9001      	str	r0, [sp, #4]
 8008e7a:	4690      	mov	r8, r2
 8008e7c:	1c9c      	adds	r4, r3, #2
 8008e7e:	46a1      	mov	r9, r4
 8008e80:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008e84:	2830      	cmp	r0, #48	@ 0x30
 8008e86:	d0fa      	beq.n	8008e7e <__gethex+0x12>
 8008e88:	eba9 0303 	sub.w	r3, r9, r3
 8008e8c:	f1a3 0b02 	sub.w	fp, r3, #2
 8008e90:	f7ff ffd6 	bl	8008e40 <__hexdig_fun>
 8008e94:	4605      	mov	r5, r0
 8008e96:	2800      	cmp	r0, #0
 8008e98:	d168      	bne.n	8008f6c <__gethex+0x100>
 8008e9a:	49a0      	ldr	r1, [pc, #640]	@ (800911c <__gethex+0x2b0>)
 8008e9c:	2201      	movs	r2, #1
 8008e9e:	4648      	mov	r0, r9
 8008ea0:	f7ff ff12 	bl	8008cc8 <strncmp>
 8008ea4:	4607      	mov	r7, r0
 8008ea6:	2800      	cmp	r0, #0
 8008ea8:	d167      	bne.n	8008f7a <__gethex+0x10e>
 8008eaa:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008eae:	4626      	mov	r6, r4
 8008eb0:	f7ff ffc6 	bl	8008e40 <__hexdig_fun>
 8008eb4:	2800      	cmp	r0, #0
 8008eb6:	d062      	beq.n	8008f7e <__gethex+0x112>
 8008eb8:	4623      	mov	r3, r4
 8008eba:	7818      	ldrb	r0, [r3, #0]
 8008ebc:	2830      	cmp	r0, #48	@ 0x30
 8008ebe:	4699      	mov	r9, r3
 8008ec0:	f103 0301 	add.w	r3, r3, #1
 8008ec4:	d0f9      	beq.n	8008eba <__gethex+0x4e>
 8008ec6:	f7ff ffbb 	bl	8008e40 <__hexdig_fun>
 8008eca:	fab0 f580 	clz	r5, r0
 8008ece:	096d      	lsrs	r5, r5, #5
 8008ed0:	f04f 0b01 	mov.w	fp, #1
 8008ed4:	464a      	mov	r2, r9
 8008ed6:	4616      	mov	r6, r2
 8008ed8:	3201      	adds	r2, #1
 8008eda:	7830      	ldrb	r0, [r6, #0]
 8008edc:	f7ff ffb0 	bl	8008e40 <__hexdig_fun>
 8008ee0:	2800      	cmp	r0, #0
 8008ee2:	d1f8      	bne.n	8008ed6 <__gethex+0x6a>
 8008ee4:	498d      	ldr	r1, [pc, #564]	@ (800911c <__gethex+0x2b0>)
 8008ee6:	2201      	movs	r2, #1
 8008ee8:	4630      	mov	r0, r6
 8008eea:	f7ff feed 	bl	8008cc8 <strncmp>
 8008eee:	2800      	cmp	r0, #0
 8008ef0:	d13f      	bne.n	8008f72 <__gethex+0x106>
 8008ef2:	b944      	cbnz	r4, 8008f06 <__gethex+0x9a>
 8008ef4:	1c74      	adds	r4, r6, #1
 8008ef6:	4622      	mov	r2, r4
 8008ef8:	4616      	mov	r6, r2
 8008efa:	3201      	adds	r2, #1
 8008efc:	7830      	ldrb	r0, [r6, #0]
 8008efe:	f7ff ff9f 	bl	8008e40 <__hexdig_fun>
 8008f02:	2800      	cmp	r0, #0
 8008f04:	d1f8      	bne.n	8008ef8 <__gethex+0x8c>
 8008f06:	1ba4      	subs	r4, r4, r6
 8008f08:	00a7      	lsls	r7, r4, #2
 8008f0a:	7833      	ldrb	r3, [r6, #0]
 8008f0c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008f10:	2b50      	cmp	r3, #80	@ 0x50
 8008f12:	d13e      	bne.n	8008f92 <__gethex+0x126>
 8008f14:	7873      	ldrb	r3, [r6, #1]
 8008f16:	2b2b      	cmp	r3, #43	@ 0x2b
 8008f18:	d033      	beq.n	8008f82 <__gethex+0x116>
 8008f1a:	2b2d      	cmp	r3, #45	@ 0x2d
 8008f1c:	d034      	beq.n	8008f88 <__gethex+0x11c>
 8008f1e:	1c71      	adds	r1, r6, #1
 8008f20:	2400      	movs	r4, #0
 8008f22:	7808      	ldrb	r0, [r1, #0]
 8008f24:	f7ff ff8c 	bl	8008e40 <__hexdig_fun>
 8008f28:	1e43      	subs	r3, r0, #1
 8008f2a:	b2db      	uxtb	r3, r3
 8008f2c:	2b18      	cmp	r3, #24
 8008f2e:	d830      	bhi.n	8008f92 <__gethex+0x126>
 8008f30:	f1a0 0210 	sub.w	r2, r0, #16
 8008f34:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008f38:	f7ff ff82 	bl	8008e40 <__hexdig_fun>
 8008f3c:	f100 3cff 	add.w	ip, r0, #4294967295
 8008f40:	fa5f fc8c 	uxtb.w	ip, ip
 8008f44:	f1bc 0f18 	cmp.w	ip, #24
 8008f48:	f04f 030a 	mov.w	r3, #10
 8008f4c:	d91e      	bls.n	8008f8c <__gethex+0x120>
 8008f4e:	b104      	cbz	r4, 8008f52 <__gethex+0xe6>
 8008f50:	4252      	negs	r2, r2
 8008f52:	4417      	add	r7, r2
 8008f54:	f8ca 1000 	str.w	r1, [sl]
 8008f58:	b1ed      	cbz	r5, 8008f96 <__gethex+0x12a>
 8008f5a:	f1bb 0f00 	cmp.w	fp, #0
 8008f5e:	bf0c      	ite	eq
 8008f60:	2506      	moveq	r5, #6
 8008f62:	2500      	movne	r5, #0
 8008f64:	4628      	mov	r0, r5
 8008f66:	b005      	add	sp, #20
 8008f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f6c:	2500      	movs	r5, #0
 8008f6e:	462c      	mov	r4, r5
 8008f70:	e7b0      	b.n	8008ed4 <__gethex+0x68>
 8008f72:	2c00      	cmp	r4, #0
 8008f74:	d1c7      	bne.n	8008f06 <__gethex+0x9a>
 8008f76:	4627      	mov	r7, r4
 8008f78:	e7c7      	b.n	8008f0a <__gethex+0x9e>
 8008f7a:	464e      	mov	r6, r9
 8008f7c:	462f      	mov	r7, r5
 8008f7e:	2501      	movs	r5, #1
 8008f80:	e7c3      	b.n	8008f0a <__gethex+0x9e>
 8008f82:	2400      	movs	r4, #0
 8008f84:	1cb1      	adds	r1, r6, #2
 8008f86:	e7cc      	b.n	8008f22 <__gethex+0xb6>
 8008f88:	2401      	movs	r4, #1
 8008f8a:	e7fb      	b.n	8008f84 <__gethex+0x118>
 8008f8c:	fb03 0002 	mla	r0, r3, r2, r0
 8008f90:	e7ce      	b.n	8008f30 <__gethex+0xc4>
 8008f92:	4631      	mov	r1, r6
 8008f94:	e7de      	b.n	8008f54 <__gethex+0xe8>
 8008f96:	eba6 0309 	sub.w	r3, r6, r9
 8008f9a:	3b01      	subs	r3, #1
 8008f9c:	4629      	mov	r1, r5
 8008f9e:	2b07      	cmp	r3, #7
 8008fa0:	dc0a      	bgt.n	8008fb8 <__gethex+0x14c>
 8008fa2:	9801      	ldr	r0, [sp, #4]
 8008fa4:	f7fe f944 	bl	8007230 <_Balloc>
 8008fa8:	4604      	mov	r4, r0
 8008faa:	b940      	cbnz	r0, 8008fbe <__gethex+0x152>
 8008fac:	4b5c      	ldr	r3, [pc, #368]	@ (8009120 <__gethex+0x2b4>)
 8008fae:	4602      	mov	r2, r0
 8008fb0:	21e4      	movs	r1, #228	@ 0xe4
 8008fb2:	485c      	ldr	r0, [pc, #368]	@ (8009124 <__gethex+0x2b8>)
 8008fb4:	f7ff fec0 	bl	8008d38 <__assert_func>
 8008fb8:	3101      	adds	r1, #1
 8008fba:	105b      	asrs	r3, r3, #1
 8008fbc:	e7ef      	b.n	8008f9e <__gethex+0x132>
 8008fbe:	f100 0a14 	add.w	sl, r0, #20
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	4655      	mov	r5, sl
 8008fc6:	469b      	mov	fp, r3
 8008fc8:	45b1      	cmp	r9, r6
 8008fca:	d337      	bcc.n	800903c <__gethex+0x1d0>
 8008fcc:	f845 bb04 	str.w	fp, [r5], #4
 8008fd0:	eba5 050a 	sub.w	r5, r5, sl
 8008fd4:	10ad      	asrs	r5, r5, #2
 8008fd6:	6125      	str	r5, [r4, #16]
 8008fd8:	4658      	mov	r0, fp
 8008fda:	f7fe fa1b 	bl	8007414 <__hi0bits>
 8008fde:	016d      	lsls	r5, r5, #5
 8008fe0:	f8d8 6000 	ldr.w	r6, [r8]
 8008fe4:	1a2d      	subs	r5, r5, r0
 8008fe6:	42b5      	cmp	r5, r6
 8008fe8:	dd54      	ble.n	8009094 <__gethex+0x228>
 8008fea:	1bad      	subs	r5, r5, r6
 8008fec:	4629      	mov	r1, r5
 8008fee:	4620      	mov	r0, r4
 8008ff0:	f7fe fda7 	bl	8007b42 <__any_on>
 8008ff4:	4681      	mov	r9, r0
 8008ff6:	b178      	cbz	r0, 8009018 <__gethex+0x1ac>
 8008ff8:	1e6b      	subs	r3, r5, #1
 8008ffa:	1159      	asrs	r1, r3, #5
 8008ffc:	f003 021f 	and.w	r2, r3, #31
 8009000:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009004:	f04f 0901 	mov.w	r9, #1
 8009008:	fa09 f202 	lsl.w	r2, r9, r2
 800900c:	420a      	tst	r2, r1
 800900e:	d003      	beq.n	8009018 <__gethex+0x1ac>
 8009010:	454b      	cmp	r3, r9
 8009012:	dc36      	bgt.n	8009082 <__gethex+0x216>
 8009014:	f04f 0902 	mov.w	r9, #2
 8009018:	4629      	mov	r1, r5
 800901a:	4620      	mov	r0, r4
 800901c:	f7ff febe 	bl	8008d9c <rshift>
 8009020:	442f      	add	r7, r5
 8009022:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009026:	42bb      	cmp	r3, r7
 8009028:	da42      	bge.n	80090b0 <__gethex+0x244>
 800902a:	9801      	ldr	r0, [sp, #4]
 800902c:	4621      	mov	r1, r4
 800902e:	f7fe f93f 	bl	80072b0 <_Bfree>
 8009032:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009034:	2300      	movs	r3, #0
 8009036:	6013      	str	r3, [r2, #0]
 8009038:	25a3      	movs	r5, #163	@ 0xa3
 800903a:	e793      	b.n	8008f64 <__gethex+0xf8>
 800903c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009040:	2a2e      	cmp	r2, #46	@ 0x2e
 8009042:	d012      	beq.n	800906a <__gethex+0x1fe>
 8009044:	2b20      	cmp	r3, #32
 8009046:	d104      	bne.n	8009052 <__gethex+0x1e6>
 8009048:	f845 bb04 	str.w	fp, [r5], #4
 800904c:	f04f 0b00 	mov.w	fp, #0
 8009050:	465b      	mov	r3, fp
 8009052:	7830      	ldrb	r0, [r6, #0]
 8009054:	9303      	str	r3, [sp, #12]
 8009056:	f7ff fef3 	bl	8008e40 <__hexdig_fun>
 800905a:	9b03      	ldr	r3, [sp, #12]
 800905c:	f000 000f 	and.w	r0, r0, #15
 8009060:	4098      	lsls	r0, r3
 8009062:	ea4b 0b00 	orr.w	fp, fp, r0
 8009066:	3304      	adds	r3, #4
 8009068:	e7ae      	b.n	8008fc8 <__gethex+0x15c>
 800906a:	45b1      	cmp	r9, r6
 800906c:	d8ea      	bhi.n	8009044 <__gethex+0x1d8>
 800906e:	492b      	ldr	r1, [pc, #172]	@ (800911c <__gethex+0x2b0>)
 8009070:	9303      	str	r3, [sp, #12]
 8009072:	2201      	movs	r2, #1
 8009074:	4630      	mov	r0, r6
 8009076:	f7ff fe27 	bl	8008cc8 <strncmp>
 800907a:	9b03      	ldr	r3, [sp, #12]
 800907c:	2800      	cmp	r0, #0
 800907e:	d1e1      	bne.n	8009044 <__gethex+0x1d8>
 8009080:	e7a2      	b.n	8008fc8 <__gethex+0x15c>
 8009082:	1ea9      	subs	r1, r5, #2
 8009084:	4620      	mov	r0, r4
 8009086:	f7fe fd5c 	bl	8007b42 <__any_on>
 800908a:	2800      	cmp	r0, #0
 800908c:	d0c2      	beq.n	8009014 <__gethex+0x1a8>
 800908e:	f04f 0903 	mov.w	r9, #3
 8009092:	e7c1      	b.n	8009018 <__gethex+0x1ac>
 8009094:	da09      	bge.n	80090aa <__gethex+0x23e>
 8009096:	1b75      	subs	r5, r6, r5
 8009098:	4621      	mov	r1, r4
 800909a:	9801      	ldr	r0, [sp, #4]
 800909c:	462a      	mov	r2, r5
 800909e:	f7fe fb17 	bl	80076d0 <__lshift>
 80090a2:	1b7f      	subs	r7, r7, r5
 80090a4:	4604      	mov	r4, r0
 80090a6:	f100 0a14 	add.w	sl, r0, #20
 80090aa:	f04f 0900 	mov.w	r9, #0
 80090ae:	e7b8      	b.n	8009022 <__gethex+0x1b6>
 80090b0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80090b4:	42bd      	cmp	r5, r7
 80090b6:	dd6f      	ble.n	8009198 <__gethex+0x32c>
 80090b8:	1bed      	subs	r5, r5, r7
 80090ba:	42ae      	cmp	r6, r5
 80090bc:	dc34      	bgt.n	8009128 <__gethex+0x2bc>
 80090be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80090c2:	2b02      	cmp	r3, #2
 80090c4:	d022      	beq.n	800910c <__gethex+0x2a0>
 80090c6:	2b03      	cmp	r3, #3
 80090c8:	d024      	beq.n	8009114 <__gethex+0x2a8>
 80090ca:	2b01      	cmp	r3, #1
 80090cc:	d115      	bne.n	80090fa <__gethex+0x28e>
 80090ce:	42ae      	cmp	r6, r5
 80090d0:	d113      	bne.n	80090fa <__gethex+0x28e>
 80090d2:	2e01      	cmp	r6, #1
 80090d4:	d10b      	bne.n	80090ee <__gethex+0x282>
 80090d6:	9a02      	ldr	r2, [sp, #8]
 80090d8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80090dc:	6013      	str	r3, [r2, #0]
 80090de:	2301      	movs	r3, #1
 80090e0:	6123      	str	r3, [r4, #16]
 80090e2:	f8ca 3000 	str.w	r3, [sl]
 80090e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80090e8:	2562      	movs	r5, #98	@ 0x62
 80090ea:	601c      	str	r4, [r3, #0]
 80090ec:	e73a      	b.n	8008f64 <__gethex+0xf8>
 80090ee:	1e71      	subs	r1, r6, #1
 80090f0:	4620      	mov	r0, r4
 80090f2:	f7fe fd26 	bl	8007b42 <__any_on>
 80090f6:	2800      	cmp	r0, #0
 80090f8:	d1ed      	bne.n	80090d6 <__gethex+0x26a>
 80090fa:	9801      	ldr	r0, [sp, #4]
 80090fc:	4621      	mov	r1, r4
 80090fe:	f7fe f8d7 	bl	80072b0 <_Bfree>
 8009102:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009104:	2300      	movs	r3, #0
 8009106:	6013      	str	r3, [r2, #0]
 8009108:	2550      	movs	r5, #80	@ 0x50
 800910a:	e72b      	b.n	8008f64 <__gethex+0xf8>
 800910c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800910e:	2b00      	cmp	r3, #0
 8009110:	d1f3      	bne.n	80090fa <__gethex+0x28e>
 8009112:	e7e0      	b.n	80090d6 <__gethex+0x26a>
 8009114:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009116:	2b00      	cmp	r3, #0
 8009118:	d1dd      	bne.n	80090d6 <__gethex+0x26a>
 800911a:	e7ee      	b.n	80090fa <__gethex+0x28e>
 800911c:	08009d0b 	.word	0x08009d0b
 8009120:	08009ca1 	.word	0x08009ca1
 8009124:	08009d62 	.word	0x08009d62
 8009128:	1e6f      	subs	r7, r5, #1
 800912a:	f1b9 0f00 	cmp.w	r9, #0
 800912e:	d130      	bne.n	8009192 <__gethex+0x326>
 8009130:	b127      	cbz	r7, 800913c <__gethex+0x2d0>
 8009132:	4639      	mov	r1, r7
 8009134:	4620      	mov	r0, r4
 8009136:	f7fe fd04 	bl	8007b42 <__any_on>
 800913a:	4681      	mov	r9, r0
 800913c:	117a      	asrs	r2, r7, #5
 800913e:	2301      	movs	r3, #1
 8009140:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009144:	f007 071f 	and.w	r7, r7, #31
 8009148:	40bb      	lsls	r3, r7
 800914a:	4213      	tst	r3, r2
 800914c:	4629      	mov	r1, r5
 800914e:	4620      	mov	r0, r4
 8009150:	bf18      	it	ne
 8009152:	f049 0902 	orrne.w	r9, r9, #2
 8009156:	f7ff fe21 	bl	8008d9c <rshift>
 800915a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800915e:	1b76      	subs	r6, r6, r5
 8009160:	2502      	movs	r5, #2
 8009162:	f1b9 0f00 	cmp.w	r9, #0
 8009166:	d047      	beq.n	80091f8 <__gethex+0x38c>
 8009168:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800916c:	2b02      	cmp	r3, #2
 800916e:	d015      	beq.n	800919c <__gethex+0x330>
 8009170:	2b03      	cmp	r3, #3
 8009172:	d017      	beq.n	80091a4 <__gethex+0x338>
 8009174:	2b01      	cmp	r3, #1
 8009176:	d109      	bne.n	800918c <__gethex+0x320>
 8009178:	f019 0f02 	tst.w	r9, #2
 800917c:	d006      	beq.n	800918c <__gethex+0x320>
 800917e:	f8da 3000 	ldr.w	r3, [sl]
 8009182:	ea49 0903 	orr.w	r9, r9, r3
 8009186:	f019 0f01 	tst.w	r9, #1
 800918a:	d10e      	bne.n	80091aa <__gethex+0x33e>
 800918c:	f045 0510 	orr.w	r5, r5, #16
 8009190:	e032      	b.n	80091f8 <__gethex+0x38c>
 8009192:	f04f 0901 	mov.w	r9, #1
 8009196:	e7d1      	b.n	800913c <__gethex+0x2d0>
 8009198:	2501      	movs	r5, #1
 800919a:	e7e2      	b.n	8009162 <__gethex+0x2f6>
 800919c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800919e:	f1c3 0301 	rsb	r3, r3, #1
 80091a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80091a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d0f0      	beq.n	800918c <__gethex+0x320>
 80091aa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80091ae:	f104 0314 	add.w	r3, r4, #20
 80091b2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80091b6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80091ba:	f04f 0c00 	mov.w	ip, #0
 80091be:	4618      	mov	r0, r3
 80091c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80091c4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80091c8:	d01b      	beq.n	8009202 <__gethex+0x396>
 80091ca:	3201      	adds	r2, #1
 80091cc:	6002      	str	r2, [r0, #0]
 80091ce:	2d02      	cmp	r5, #2
 80091d0:	f104 0314 	add.w	r3, r4, #20
 80091d4:	d13c      	bne.n	8009250 <__gethex+0x3e4>
 80091d6:	f8d8 2000 	ldr.w	r2, [r8]
 80091da:	3a01      	subs	r2, #1
 80091dc:	42b2      	cmp	r2, r6
 80091de:	d109      	bne.n	80091f4 <__gethex+0x388>
 80091e0:	1171      	asrs	r1, r6, #5
 80091e2:	2201      	movs	r2, #1
 80091e4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80091e8:	f006 061f 	and.w	r6, r6, #31
 80091ec:	fa02 f606 	lsl.w	r6, r2, r6
 80091f0:	421e      	tst	r6, r3
 80091f2:	d13a      	bne.n	800926a <__gethex+0x3fe>
 80091f4:	f045 0520 	orr.w	r5, r5, #32
 80091f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80091fa:	601c      	str	r4, [r3, #0]
 80091fc:	9b02      	ldr	r3, [sp, #8]
 80091fe:	601f      	str	r7, [r3, #0]
 8009200:	e6b0      	b.n	8008f64 <__gethex+0xf8>
 8009202:	4299      	cmp	r1, r3
 8009204:	f843 cc04 	str.w	ip, [r3, #-4]
 8009208:	d8d9      	bhi.n	80091be <__gethex+0x352>
 800920a:	68a3      	ldr	r3, [r4, #8]
 800920c:	459b      	cmp	fp, r3
 800920e:	db17      	blt.n	8009240 <__gethex+0x3d4>
 8009210:	6861      	ldr	r1, [r4, #4]
 8009212:	9801      	ldr	r0, [sp, #4]
 8009214:	3101      	adds	r1, #1
 8009216:	f7fe f80b 	bl	8007230 <_Balloc>
 800921a:	4681      	mov	r9, r0
 800921c:	b918      	cbnz	r0, 8009226 <__gethex+0x3ba>
 800921e:	4b1a      	ldr	r3, [pc, #104]	@ (8009288 <__gethex+0x41c>)
 8009220:	4602      	mov	r2, r0
 8009222:	2184      	movs	r1, #132	@ 0x84
 8009224:	e6c5      	b.n	8008fb2 <__gethex+0x146>
 8009226:	6922      	ldr	r2, [r4, #16]
 8009228:	3202      	adds	r2, #2
 800922a:	f104 010c 	add.w	r1, r4, #12
 800922e:	0092      	lsls	r2, r2, #2
 8009230:	300c      	adds	r0, #12
 8009232:	f7ff fd6b 	bl	8008d0c <memcpy>
 8009236:	4621      	mov	r1, r4
 8009238:	9801      	ldr	r0, [sp, #4]
 800923a:	f7fe f839 	bl	80072b0 <_Bfree>
 800923e:	464c      	mov	r4, r9
 8009240:	6923      	ldr	r3, [r4, #16]
 8009242:	1c5a      	adds	r2, r3, #1
 8009244:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009248:	6122      	str	r2, [r4, #16]
 800924a:	2201      	movs	r2, #1
 800924c:	615a      	str	r2, [r3, #20]
 800924e:	e7be      	b.n	80091ce <__gethex+0x362>
 8009250:	6922      	ldr	r2, [r4, #16]
 8009252:	455a      	cmp	r2, fp
 8009254:	dd0b      	ble.n	800926e <__gethex+0x402>
 8009256:	2101      	movs	r1, #1
 8009258:	4620      	mov	r0, r4
 800925a:	f7ff fd9f 	bl	8008d9c <rshift>
 800925e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009262:	3701      	adds	r7, #1
 8009264:	42bb      	cmp	r3, r7
 8009266:	f6ff aee0 	blt.w	800902a <__gethex+0x1be>
 800926a:	2501      	movs	r5, #1
 800926c:	e7c2      	b.n	80091f4 <__gethex+0x388>
 800926e:	f016 061f 	ands.w	r6, r6, #31
 8009272:	d0fa      	beq.n	800926a <__gethex+0x3fe>
 8009274:	4453      	add	r3, sl
 8009276:	f1c6 0620 	rsb	r6, r6, #32
 800927a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800927e:	f7fe f8c9 	bl	8007414 <__hi0bits>
 8009282:	42b0      	cmp	r0, r6
 8009284:	dbe7      	blt.n	8009256 <__gethex+0x3ea>
 8009286:	e7f0      	b.n	800926a <__gethex+0x3fe>
 8009288:	08009ca1 	.word	0x08009ca1

0800928c <L_shift>:
 800928c:	f1c2 0208 	rsb	r2, r2, #8
 8009290:	0092      	lsls	r2, r2, #2
 8009292:	b570      	push	{r4, r5, r6, lr}
 8009294:	f1c2 0620 	rsb	r6, r2, #32
 8009298:	6843      	ldr	r3, [r0, #4]
 800929a:	6804      	ldr	r4, [r0, #0]
 800929c:	fa03 f506 	lsl.w	r5, r3, r6
 80092a0:	432c      	orrs	r4, r5
 80092a2:	40d3      	lsrs	r3, r2
 80092a4:	6004      	str	r4, [r0, #0]
 80092a6:	f840 3f04 	str.w	r3, [r0, #4]!
 80092aa:	4288      	cmp	r0, r1
 80092ac:	d3f4      	bcc.n	8009298 <L_shift+0xc>
 80092ae:	bd70      	pop	{r4, r5, r6, pc}

080092b0 <__match>:
 80092b0:	b530      	push	{r4, r5, lr}
 80092b2:	6803      	ldr	r3, [r0, #0]
 80092b4:	3301      	adds	r3, #1
 80092b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092ba:	b914      	cbnz	r4, 80092c2 <__match+0x12>
 80092bc:	6003      	str	r3, [r0, #0]
 80092be:	2001      	movs	r0, #1
 80092c0:	bd30      	pop	{r4, r5, pc}
 80092c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092c6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80092ca:	2d19      	cmp	r5, #25
 80092cc:	bf98      	it	ls
 80092ce:	3220      	addls	r2, #32
 80092d0:	42a2      	cmp	r2, r4
 80092d2:	d0f0      	beq.n	80092b6 <__match+0x6>
 80092d4:	2000      	movs	r0, #0
 80092d6:	e7f3      	b.n	80092c0 <__match+0x10>

080092d8 <__hexnan>:
 80092d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092dc:	680b      	ldr	r3, [r1, #0]
 80092de:	6801      	ldr	r1, [r0, #0]
 80092e0:	115e      	asrs	r6, r3, #5
 80092e2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80092e6:	f013 031f 	ands.w	r3, r3, #31
 80092ea:	b087      	sub	sp, #28
 80092ec:	bf18      	it	ne
 80092ee:	3604      	addne	r6, #4
 80092f0:	2500      	movs	r5, #0
 80092f2:	1f37      	subs	r7, r6, #4
 80092f4:	4682      	mov	sl, r0
 80092f6:	4690      	mov	r8, r2
 80092f8:	9301      	str	r3, [sp, #4]
 80092fa:	f846 5c04 	str.w	r5, [r6, #-4]
 80092fe:	46b9      	mov	r9, r7
 8009300:	463c      	mov	r4, r7
 8009302:	9502      	str	r5, [sp, #8]
 8009304:	46ab      	mov	fp, r5
 8009306:	784a      	ldrb	r2, [r1, #1]
 8009308:	1c4b      	adds	r3, r1, #1
 800930a:	9303      	str	r3, [sp, #12]
 800930c:	b342      	cbz	r2, 8009360 <__hexnan+0x88>
 800930e:	4610      	mov	r0, r2
 8009310:	9105      	str	r1, [sp, #20]
 8009312:	9204      	str	r2, [sp, #16]
 8009314:	f7ff fd94 	bl	8008e40 <__hexdig_fun>
 8009318:	2800      	cmp	r0, #0
 800931a:	d151      	bne.n	80093c0 <__hexnan+0xe8>
 800931c:	9a04      	ldr	r2, [sp, #16]
 800931e:	9905      	ldr	r1, [sp, #20]
 8009320:	2a20      	cmp	r2, #32
 8009322:	d818      	bhi.n	8009356 <__hexnan+0x7e>
 8009324:	9b02      	ldr	r3, [sp, #8]
 8009326:	459b      	cmp	fp, r3
 8009328:	dd13      	ble.n	8009352 <__hexnan+0x7a>
 800932a:	454c      	cmp	r4, r9
 800932c:	d206      	bcs.n	800933c <__hexnan+0x64>
 800932e:	2d07      	cmp	r5, #7
 8009330:	dc04      	bgt.n	800933c <__hexnan+0x64>
 8009332:	462a      	mov	r2, r5
 8009334:	4649      	mov	r1, r9
 8009336:	4620      	mov	r0, r4
 8009338:	f7ff ffa8 	bl	800928c <L_shift>
 800933c:	4544      	cmp	r4, r8
 800933e:	d952      	bls.n	80093e6 <__hexnan+0x10e>
 8009340:	2300      	movs	r3, #0
 8009342:	f1a4 0904 	sub.w	r9, r4, #4
 8009346:	f844 3c04 	str.w	r3, [r4, #-4]
 800934a:	f8cd b008 	str.w	fp, [sp, #8]
 800934e:	464c      	mov	r4, r9
 8009350:	461d      	mov	r5, r3
 8009352:	9903      	ldr	r1, [sp, #12]
 8009354:	e7d7      	b.n	8009306 <__hexnan+0x2e>
 8009356:	2a29      	cmp	r2, #41	@ 0x29
 8009358:	d157      	bne.n	800940a <__hexnan+0x132>
 800935a:	3102      	adds	r1, #2
 800935c:	f8ca 1000 	str.w	r1, [sl]
 8009360:	f1bb 0f00 	cmp.w	fp, #0
 8009364:	d051      	beq.n	800940a <__hexnan+0x132>
 8009366:	454c      	cmp	r4, r9
 8009368:	d206      	bcs.n	8009378 <__hexnan+0xa0>
 800936a:	2d07      	cmp	r5, #7
 800936c:	dc04      	bgt.n	8009378 <__hexnan+0xa0>
 800936e:	462a      	mov	r2, r5
 8009370:	4649      	mov	r1, r9
 8009372:	4620      	mov	r0, r4
 8009374:	f7ff ff8a 	bl	800928c <L_shift>
 8009378:	4544      	cmp	r4, r8
 800937a:	d936      	bls.n	80093ea <__hexnan+0x112>
 800937c:	f1a8 0204 	sub.w	r2, r8, #4
 8009380:	4623      	mov	r3, r4
 8009382:	f853 1b04 	ldr.w	r1, [r3], #4
 8009386:	f842 1f04 	str.w	r1, [r2, #4]!
 800938a:	429f      	cmp	r7, r3
 800938c:	d2f9      	bcs.n	8009382 <__hexnan+0xaa>
 800938e:	1b3b      	subs	r3, r7, r4
 8009390:	f023 0303 	bic.w	r3, r3, #3
 8009394:	3304      	adds	r3, #4
 8009396:	3401      	adds	r4, #1
 8009398:	3e03      	subs	r6, #3
 800939a:	42b4      	cmp	r4, r6
 800939c:	bf88      	it	hi
 800939e:	2304      	movhi	r3, #4
 80093a0:	4443      	add	r3, r8
 80093a2:	2200      	movs	r2, #0
 80093a4:	f843 2b04 	str.w	r2, [r3], #4
 80093a8:	429f      	cmp	r7, r3
 80093aa:	d2fb      	bcs.n	80093a4 <__hexnan+0xcc>
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	b91b      	cbnz	r3, 80093b8 <__hexnan+0xe0>
 80093b0:	4547      	cmp	r7, r8
 80093b2:	d128      	bne.n	8009406 <__hexnan+0x12e>
 80093b4:	2301      	movs	r3, #1
 80093b6:	603b      	str	r3, [r7, #0]
 80093b8:	2005      	movs	r0, #5
 80093ba:	b007      	add	sp, #28
 80093bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093c0:	3501      	adds	r5, #1
 80093c2:	2d08      	cmp	r5, #8
 80093c4:	f10b 0b01 	add.w	fp, fp, #1
 80093c8:	dd06      	ble.n	80093d8 <__hexnan+0x100>
 80093ca:	4544      	cmp	r4, r8
 80093cc:	d9c1      	bls.n	8009352 <__hexnan+0x7a>
 80093ce:	2300      	movs	r3, #0
 80093d0:	f844 3c04 	str.w	r3, [r4, #-4]
 80093d4:	2501      	movs	r5, #1
 80093d6:	3c04      	subs	r4, #4
 80093d8:	6822      	ldr	r2, [r4, #0]
 80093da:	f000 000f 	and.w	r0, r0, #15
 80093de:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80093e2:	6020      	str	r0, [r4, #0]
 80093e4:	e7b5      	b.n	8009352 <__hexnan+0x7a>
 80093e6:	2508      	movs	r5, #8
 80093e8:	e7b3      	b.n	8009352 <__hexnan+0x7a>
 80093ea:	9b01      	ldr	r3, [sp, #4]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d0dd      	beq.n	80093ac <__hexnan+0xd4>
 80093f0:	f1c3 0320 	rsb	r3, r3, #32
 80093f4:	f04f 32ff 	mov.w	r2, #4294967295
 80093f8:	40da      	lsrs	r2, r3
 80093fa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80093fe:	4013      	ands	r3, r2
 8009400:	f846 3c04 	str.w	r3, [r6, #-4]
 8009404:	e7d2      	b.n	80093ac <__hexnan+0xd4>
 8009406:	3f04      	subs	r7, #4
 8009408:	e7d0      	b.n	80093ac <__hexnan+0xd4>
 800940a:	2004      	movs	r0, #4
 800940c:	e7d5      	b.n	80093ba <__hexnan+0xe2>

0800940e <__ascii_mbtowc>:
 800940e:	b082      	sub	sp, #8
 8009410:	b901      	cbnz	r1, 8009414 <__ascii_mbtowc+0x6>
 8009412:	a901      	add	r1, sp, #4
 8009414:	b142      	cbz	r2, 8009428 <__ascii_mbtowc+0x1a>
 8009416:	b14b      	cbz	r3, 800942c <__ascii_mbtowc+0x1e>
 8009418:	7813      	ldrb	r3, [r2, #0]
 800941a:	600b      	str	r3, [r1, #0]
 800941c:	7812      	ldrb	r2, [r2, #0]
 800941e:	1e10      	subs	r0, r2, #0
 8009420:	bf18      	it	ne
 8009422:	2001      	movne	r0, #1
 8009424:	b002      	add	sp, #8
 8009426:	4770      	bx	lr
 8009428:	4610      	mov	r0, r2
 800942a:	e7fb      	b.n	8009424 <__ascii_mbtowc+0x16>
 800942c:	f06f 0001 	mvn.w	r0, #1
 8009430:	e7f8      	b.n	8009424 <__ascii_mbtowc+0x16>

08009432 <_realloc_r>:
 8009432:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009436:	4607      	mov	r7, r0
 8009438:	4614      	mov	r4, r2
 800943a:	460d      	mov	r5, r1
 800943c:	b921      	cbnz	r1, 8009448 <_realloc_r+0x16>
 800943e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009442:	4611      	mov	r1, r2
 8009444:	f7fd be68 	b.w	8007118 <_malloc_r>
 8009448:	b92a      	cbnz	r2, 8009456 <_realloc_r+0x24>
 800944a:	f7fd fdf1 	bl	8007030 <_free_r>
 800944e:	4625      	mov	r5, r4
 8009450:	4628      	mov	r0, r5
 8009452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009456:	f000 f840 	bl	80094da <_malloc_usable_size_r>
 800945a:	4284      	cmp	r4, r0
 800945c:	4606      	mov	r6, r0
 800945e:	d802      	bhi.n	8009466 <_realloc_r+0x34>
 8009460:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009464:	d8f4      	bhi.n	8009450 <_realloc_r+0x1e>
 8009466:	4621      	mov	r1, r4
 8009468:	4638      	mov	r0, r7
 800946a:	f7fd fe55 	bl	8007118 <_malloc_r>
 800946e:	4680      	mov	r8, r0
 8009470:	b908      	cbnz	r0, 8009476 <_realloc_r+0x44>
 8009472:	4645      	mov	r5, r8
 8009474:	e7ec      	b.n	8009450 <_realloc_r+0x1e>
 8009476:	42b4      	cmp	r4, r6
 8009478:	4622      	mov	r2, r4
 800947a:	4629      	mov	r1, r5
 800947c:	bf28      	it	cs
 800947e:	4632      	movcs	r2, r6
 8009480:	f7ff fc44 	bl	8008d0c <memcpy>
 8009484:	4629      	mov	r1, r5
 8009486:	4638      	mov	r0, r7
 8009488:	f7fd fdd2 	bl	8007030 <_free_r>
 800948c:	e7f1      	b.n	8009472 <_realloc_r+0x40>

0800948e <__ascii_wctomb>:
 800948e:	4603      	mov	r3, r0
 8009490:	4608      	mov	r0, r1
 8009492:	b141      	cbz	r1, 80094a6 <__ascii_wctomb+0x18>
 8009494:	2aff      	cmp	r2, #255	@ 0xff
 8009496:	d904      	bls.n	80094a2 <__ascii_wctomb+0x14>
 8009498:	228a      	movs	r2, #138	@ 0x8a
 800949a:	601a      	str	r2, [r3, #0]
 800949c:	f04f 30ff 	mov.w	r0, #4294967295
 80094a0:	4770      	bx	lr
 80094a2:	700a      	strb	r2, [r1, #0]
 80094a4:	2001      	movs	r0, #1
 80094a6:	4770      	bx	lr

080094a8 <fiprintf>:
 80094a8:	b40e      	push	{r1, r2, r3}
 80094aa:	b503      	push	{r0, r1, lr}
 80094ac:	4601      	mov	r1, r0
 80094ae:	ab03      	add	r3, sp, #12
 80094b0:	4805      	ldr	r0, [pc, #20]	@ (80094c8 <fiprintf+0x20>)
 80094b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80094b6:	6800      	ldr	r0, [r0, #0]
 80094b8:	9301      	str	r3, [sp, #4]
 80094ba:	f000 f83f 	bl	800953c <_vfiprintf_r>
 80094be:	b002      	add	sp, #8
 80094c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80094c4:	b003      	add	sp, #12
 80094c6:	4770      	bx	lr
 80094c8:	20000018 	.word	0x20000018

080094cc <abort>:
 80094cc:	b508      	push	{r3, lr}
 80094ce:	2006      	movs	r0, #6
 80094d0:	f000 fa08 	bl	80098e4 <raise>
 80094d4:	2001      	movs	r0, #1
 80094d6:	f7f8 f993 	bl	8001800 <_exit>

080094da <_malloc_usable_size_r>:
 80094da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094de:	1f18      	subs	r0, r3, #4
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	bfbc      	itt	lt
 80094e4:	580b      	ldrlt	r3, [r1, r0]
 80094e6:	18c0      	addlt	r0, r0, r3
 80094e8:	4770      	bx	lr

080094ea <__sfputc_r>:
 80094ea:	6893      	ldr	r3, [r2, #8]
 80094ec:	3b01      	subs	r3, #1
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	b410      	push	{r4}
 80094f2:	6093      	str	r3, [r2, #8]
 80094f4:	da08      	bge.n	8009508 <__sfputc_r+0x1e>
 80094f6:	6994      	ldr	r4, [r2, #24]
 80094f8:	42a3      	cmp	r3, r4
 80094fa:	db01      	blt.n	8009500 <__sfputc_r+0x16>
 80094fc:	290a      	cmp	r1, #10
 80094fe:	d103      	bne.n	8009508 <__sfputc_r+0x1e>
 8009500:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009504:	f000 b932 	b.w	800976c <__swbuf_r>
 8009508:	6813      	ldr	r3, [r2, #0]
 800950a:	1c58      	adds	r0, r3, #1
 800950c:	6010      	str	r0, [r2, #0]
 800950e:	7019      	strb	r1, [r3, #0]
 8009510:	4608      	mov	r0, r1
 8009512:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009516:	4770      	bx	lr

08009518 <__sfputs_r>:
 8009518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800951a:	4606      	mov	r6, r0
 800951c:	460f      	mov	r7, r1
 800951e:	4614      	mov	r4, r2
 8009520:	18d5      	adds	r5, r2, r3
 8009522:	42ac      	cmp	r4, r5
 8009524:	d101      	bne.n	800952a <__sfputs_r+0x12>
 8009526:	2000      	movs	r0, #0
 8009528:	e007      	b.n	800953a <__sfputs_r+0x22>
 800952a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800952e:	463a      	mov	r2, r7
 8009530:	4630      	mov	r0, r6
 8009532:	f7ff ffda 	bl	80094ea <__sfputc_r>
 8009536:	1c43      	adds	r3, r0, #1
 8009538:	d1f3      	bne.n	8009522 <__sfputs_r+0xa>
 800953a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800953c <_vfiprintf_r>:
 800953c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009540:	460d      	mov	r5, r1
 8009542:	b09d      	sub	sp, #116	@ 0x74
 8009544:	4614      	mov	r4, r2
 8009546:	4698      	mov	r8, r3
 8009548:	4606      	mov	r6, r0
 800954a:	b118      	cbz	r0, 8009554 <_vfiprintf_r+0x18>
 800954c:	6a03      	ldr	r3, [r0, #32]
 800954e:	b90b      	cbnz	r3, 8009554 <_vfiprintf_r+0x18>
 8009550:	f7fc fdf2 	bl	8006138 <__sinit>
 8009554:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009556:	07d9      	lsls	r1, r3, #31
 8009558:	d405      	bmi.n	8009566 <_vfiprintf_r+0x2a>
 800955a:	89ab      	ldrh	r3, [r5, #12]
 800955c:	059a      	lsls	r2, r3, #22
 800955e:	d402      	bmi.n	8009566 <_vfiprintf_r+0x2a>
 8009560:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009562:	f7fc ff02 	bl	800636a <__retarget_lock_acquire_recursive>
 8009566:	89ab      	ldrh	r3, [r5, #12]
 8009568:	071b      	lsls	r3, r3, #28
 800956a:	d501      	bpl.n	8009570 <_vfiprintf_r+0x34>
 800956c:	692b      	ldr	r3, [r5, #16]
 800956e:	b99b      	cbnz	r3, 8009598 <_vfiprintf_r+0x5c>
 8009570:	4629      	mov	r1, r5
 8009572:	4630      	mov	r0, r6
 8009574:	f000 f938 	bl	80097e8 <__swsetup_r>
 8009578:	b170      	cbz	r0, 8009598 <_vfiprintf_r+0x5c>
 800957a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800957c:	07dc      	lsls	r4, r3, #31
 800957e:	d504      	bpl.n	800958a <_vfiprintf_r+0x4e>
 8009580:	f04f 30ff 	mov.w	r0, #4294967295
 8009584:	b01d      	add	sp, #116	@ 0x74
 8009586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800958a:	89ab      	ldrh	r3, [r5, #12]
 800958c:	0598      	lsls	r0, r3, #22
 800958e:	d4f7      	bmi.n	8009580 <_vfiprintf_r+0x44>
 8009590:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009592:	f7fc feeb 	bl	800636c <__retarget_lock_release_recursive>
 8009596:	e7f3      	b.n	8009580 <_vfiprintf_r+0x44>
 8009598:	2300      	movs	r3, #0
 800959a:	9309      	str	r3, [sp, #36]	@ 0x24
 800959c:	2320      	movs	r3, #32
 800959e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80095a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80095a6:	2330      	movs	r3, #48	@ 0x30
 80095a8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009758 <_vfiprintf_r+0x21c>
 80095ac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80095b0:	f04f 0901 	mov.w	r9, #1
 80095b4:	4623      	mov	r3, r4
 80095b6:	469a      	mov	sl, r3
 80095b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095bc:	b10a      	cbz	r2, 80095c2 <_vfiprintf_r+0x86>
 80095be:	2a25      	cmp	r2, #37	@ 0x25
 80095c0:	d1f9      	bne.n	80095b6 <_vfiprintf_r+0x7a>
 80095c2:	ebba 0b04 	subs.w	fp, sl, r4
 80095c6:	d00b      	beq.n	80095e0 <_vfiprintf_r+0xa4>
 80095c8:	465b      	mov	r3, fp
 80095ca:	4622      	mov	r2, r4
 80095cc:	4629      	mov	r1, r5
 80095ce:	4630      	mov	r0, r6
 80095d0:	f7ff ffa2 	bl	8009518 <__sfputs_r>
 80095d4:	3001      	adds	r0, #1
 80095d6:	f000 80a7 	beq.w	8009728 <_vfiprintf_r+0x1ec>
 80095da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80095dc:	445a      	add	r2, fp
 80095de:	9209      	str	r2, [sp, #36]	@ 0x24
 80095e0:	f89a 3000 	ldrb.w	r3, [sl]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	f000 809f 	beq.w	8009728 <_vfiprintf_r+0x1ec>
 80095ea:	2300      	movs	r3, #0
 80095ec:	f04f 32ff 	mov.w	r2, #4294967295
 80095f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095f4:	f10a 0a01 	add.w	sl, sl, #1
 80095f8:	9304      	str	r3, [sp, #16]
 80095fa:	9307      	str	r3, [sp, #28]
 80095fc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009600:	931a      	str	r3, [sp, #104]	@ 0x68
 8009602:	4654      	mov	r4, sl
 8009604:	2205      	movs	r2, #5
 8009606:	f814 1b01 	ldrb.w	r1, [r4], #1
 800960a:	4853      	ldr	r0, [pc, #332]	@ (8009758 <_vfiprintf_r+0x21c>)
 800960c:	f7f6 fe08 	bl	8000220 <memchr>
 8009610:	9a04      	ldr	r2, [sp, #16]
 8009612:	b9d8      	cbnz	r0, 800964c <_vfiprintf_r+0x110>
 8009614:	06d1      	lsls	r1, r2, #27
 8009616:	bf44      	itt	mi
 8009618:	2320      	movmi	r3, #32
 800961a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800961e:	0713      	lsls	r3, r2, #28
 8009620:	bf44      	itt	mi
 8009622:	232b      	movmi	r3, #43	@ 0x2b
 8009624:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009628:	f89a 3000 	ldrb.w	r3, [sl]
 800962c:	2b2a      	cmp	r3, #42	@ 0x2a
 800962e:	d015      	beq.n	800965c <_vfiprintf_r+0x120>
 8009630:	9a07      	ldr	r2, [sp, #28]
 8009632:	4654      	mov	r4, sl
 8009634:	2000      	movs	r0, #0
 8009636:	f04f 0c0a 	mov.w	ip, #10
 800963a:	4621      	mov	r1, r4
 800963c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009640:	3b30      	subs	r3, #48	@ 0x30
 8009642:	2b09      	cmp	r3, #9
 8009644:	d94b      	bls.n	80096de <_vfiprintf_r+0x1a2>
 8009646:	b1b0      	cbz	r0, 8009676 <_vfiprintf_r+0x13a>
 8009648:	9207      	str	r2, [sp, #28]
 800964a:	e014      	b.n	8009676 <_vfiprintf_r+0x13a>
 800964c:	eba0 0308 	sub.w	r3, r0, r8
 8009650:	fa09 f303 	lsl.w	r3, r9, r3
 8009654:	4313      	orrs	r3, r2
 8009656:	9304      	str	r3, [sp, #16]
 8009658:	46a2      	mov	sl, r4
 800965a:	e7d2      	b.n	8009602 <_vfiprintf_r+0xc6>
 800965c:	9b03      	ldr	r3, [sp, #12]
 800965e:	1d19      	adds	r1, r3, #4
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	9103      	str	r1, [sp, #12]
 8009664:	2b00      	cmp	r3, #0
 8009666:	bfbb      	ittet	lt
 8009668:	425b      	neglt	r3, r3
 800966a:	f042 0202 	orrlt.w	r2, r2, #2
 800966e:	9307      	strge	r3, [sp, #28]
 8009670:	9307      	strlt	r3, [sp, #28]
 8009672:	bfb8      	it	lt
 8009674:	9204      	strlt	r2, [sp, #16]
 8009676:	7823      	ldrb	r3, [r4, #0]
 8009678:	2b2e      	cmp	r3, #46	@ 0x2e
 800967a:	d10a      	bne.n	8009692 <_vfiprintf_r+0x156>
 800967c:	7863      	ldrb	r3, [r4, #1]
 800967e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009680:	d132      	bne.n	80096e8 <_vfiprintf_r+0x1ac>
 8009682:	9b03      	ldr	r3, [sp, #12]
 8009684:	1d1a      	adds	r2, r3, #4
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	9203      	str	r2, [sp, #12]
 800968a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800968e:	3402      	adds	r4, #2
 8009690:	9305      	str	r3, [sp, #20]
 8009692:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009768 <_vfiprintf_r+0x22c>
 8009696:	7821      	ldrb	r1, [r4, #0]
 8009698:	2203      	movs	r2, #3
 800969a:	4650      	mov	r0, sl
 800969c:	f7f6 fdc0 	bl	8000220 <memchr>
 80096a0:	b138      	cbz	r0, 80096b2 <_vfiprintf_r+0x176>
 80096a2:	9b04      	ldr	r3, [sp, #16]
 80096a4:	eba0 000a 	sub.w	r0, r0, sl
 80096a8:	2240      	movs	r2, #64	@ 0x40
 80096aa:	4082      	lsls	r2, r0
 80096ac:	4313      	orrs	r3, r2
 80096ae:	3401      	adds	r4, #1
 80096b0:	9304      	str	r3, [sp, #16]
 80096b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096b6:	4829      	ldr	r0, [pc, #164]	@ (800975c <_vfiprintf_r+0x220>)
 80096b8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80096bc:	2206      	movs	r2, #6
 80096be:	f7f6 fdaf 	bl	8000220 <memchr>
 80096c2:	2800      	cmp	r0, #0
 80096c4:	d03f      	beq.n	8009746 <_vfiprintf_r+0x20a>
 80096c6:	4b26      	ldr	r3, [pc, #152]	@ (8009760 <_vfiprintf_r+0x224>)
 80096c8:	bb1b      	cbnz	r3, 8009712 <_vfiprintf_r+0x1d6>
 80096ca:	9b03      	ldr	r3, [sp, #12]
 80096cc:	3307      	adds	r3, #7
 80096ce:	f023 0307 	bic.w	r3, r3, #7
 80096d2:	3308      	adds	r3, #8
 80096d4:	9303      	str	r3, [sp, #12]
 80096d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096d8:	443b      	add	r3, r7
 80096da:	9309      	str	r3, [sp, #36]	@ 0x24
 80096dc:	e76a      	b.n	80095b4 <_vfiprintf_r+0x78>
 80096de:	fb0c 3202 	mla	r2, ip, r2, r3
 80096e2:	460c      	mov	r4, r1
 80096e4:	2001      	movs	r0, #1
 80096e6:	e7a8      	b.n	800963a <_vfiprintf_r+0xfe>
 80096e8:	2300      	movs	r3, #0
 80096ea:	3401      	adds	r4, #1
 80096ec:	9305      	str	r3, [sp, #20]
 80096ee:	4619      	mov	r1, r3
 80096f0:	f04f 0c0a 	mov.w	ip, #10
 80096f4:	4620      	mov	r0, r4
 80096f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096fa:	3a30      	subs	r2, #48	@ 0x30
 80096fc:	2a09      	cmp	r2, #9
 80096fe:	d903      	bls.n	8009708 <_vfiprintf_r+0x1cc>
 8009700:	2b00      	cmp	r3, #0
 8009702:	d0c6      	beq.n	8009692 <_vfiprintf_r+0x156>
 8009704:	9105      	str	r1, [sp, #20]
 8009706:	e7c4      	b.n	8009692 <_vfiprintf_r+0x156>
 8009708:	fb0c 2101 	mla	r1, ip, r1, r2
 800970c:	4604      	mov	r4, r0
 800970e:	2301      	movs	r3, #1
 8009710:	e7f0      	b.n	80096f4 <_vfiprintf_r+0x1b8>
 8009712:	ab03      	add	r3, sp, #12
 8009714:	9300      	str	r3, [sp, #0]
 8009716:	462a      	mov	r2, r5
 8009718:	4b12      	ldr	r3, [pc, #72]	@ (8009764 <_vfiprintf_r+0x228>)
 800971a:	a904      	add	r1, sp, #16
 800971c:	4630      	mov	r0, r6
 800971e:	f7fb febb 	bl	8005498 <_printf_float>
 8009722:	4607      	mov	r7, r0
 8009724:	1c78      	adds	r0, r7, #1
 8009726:	d1d6      	bne.n	80096d6 <_vfiprintf_r+0x19a>
 8009728:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800972a:	07d9      	lsls	r1, r3, #31
 800972c:	d405      	bmi.n	800973a <_vfiprintf_r+0x1fe>
 800972e:	89ab      	ldrh	r3, [r5, #12]
 8009730:	059a      	lsls	r2, r3, #22
 8009732:	d402      	bmi.n	800973a <_vfiprintf_r+0x1fe>
 8009734:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009736:	f7fc fe19 	bl	800636c <__retarget_lock_release_recursive>
 800973a:	89ab      	ldrh	r3, [r5, #12]
 800973c:	065b      	lsls	r3, r3, #25
 800973e:	f53f af1f 	bmi.w	8009580 <_vfiprintf_r+0x44>
 8009742:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009744:	e71e      	b.n	8009584 <_vfiprintf_r+0x48>
 8009746:	ab03      	add	r3, sp, #12
 8009748:	9300      	str	r3, [sp, #0]
 800974a:	462a      	mov	r2, r5
 800974c:	4b05      	ldr	r3, [pc, #20]	@ (8009764 <_vfiprintf_r+0x228>)
 800974e:	a904      	add	r1, sp, #16
 8009750:	4630      	mov	r0, r6
 8009752:	f7fc f939 	bl	80059c8 <_printf_i>
 8009756:	e7e4      	b.n	8009722 <_vfiprintf_r+0x1e6>
 8009758:	08009d0d 	.word	0x08009d0d
 800975c:	08009d17 	.word	0x08009d17
 8009760:	08005499 	.word	0x08005499
 8009764:	08009519 	.word	0x08009519
 8009768:	08009d13 	.word	0x08009d13

0800976c <__swbuf_r>:
 800976c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800976e:	460e      	mov	r6, r1
 8009770:	4614      	mov	r4, r2
 8009772:	4605      	mov	r5, r0
 8009774:	b118      	cbz	r0, 800977e <__swbuf_r+0x12>
 8009776:	6a03      	ldr	r3, [r0, #32]
 8009778:	b90b      	cbnz	r3, 800977e <__swbuf_r+0x12>
 800977a:	f7fc fcdd 	bl	8006138 <__sinit>
 800977e:	69a3      	ldr	r3, [r4, #24]
 8009780:	60a3      	str	r3, [r4, #8]
 8009782:	89a3      	ldrh	r3, [r4, #12]
 8009784:	071a      	lsls	r2, r3, #28
 8009786:	d501      	bpl.n	800978c <__swbuf_r+0x20>
 8009788:	6923      	ldr	r3, [r4, #16]
 800978a:	b943      	cbnz	r3, 800979e <__swbuf_r+0x32>
 800978c:	4621      	mov	r1, r4
 800978e:	4628      	mov	r0, r5
 8009790:	f000 f82a 	bl	80097e8 <__swsetup_r>
 8009794:	b118      	cbz	r0, 800979e <__swbuf_r+0x32>
 8009796:	f04f 37ff 	mov.w	r7, #4294967295
 800979a:	4638      	mov	r0, r7
 800979c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800979e:	6823      	ldr	r3, [r4, #0]
 80097a0:	6922      	ldr	r2, [r4, #16]
 80097a2:	1a98      	subs	r0, r3, r2
 80097a4:	6963      	ldr	r3, [r4, #20]
 80097a6:	b2f6      	uxtb	r6, r6
 80097a8:	4283      	cmp	r3, r0
 80097aa:	4637      	mov	r7, r6
 80097ac:	dc05      	bgt.n	80097ba <__swbuf_r+0x4e>
 80097ae:	4621      	mov	r1, r4
 80097b0:	4628      	mov	r0, r5
 80097b2:	f7ff fa47 	bl	8008c44 <_fflush_r>
 80097b6:	2800      	cmp	r0, #0
 80097b8:	d1ed      	bne.n	8009796 <__swbuf_r+0x2a>
 80097ba:	68a3      	ldr	r3, [r4, #8]
 80097bc:	3b01      	subs	r3, #1
 80097be:	60a3      	str	r3, [r4, #8]
 80097c0:	6823      	ldr	r3, [r4, #0]
 80097c2:	1c5a      	adds	r2, r3, #1
 80097c4:	6022      	str	r2, [r4, #0]
 80097c6:	701e      	strb	r6, [r3, #0]
 80097c8:	6962      	ldr	r2, [r4, #20]
 80097ca:	1c43      	adds	r3, r0, #1
 80097cc:	429a      	cmp	r2, r3
 80097ce:	d004      	beq.n	80097da <__swbuf_r+0x6e>
 80097d0:	89a3      	ldrh	r3, [r4, #12]
 80097d2:	07db      	lsls	r3, r3, #31
 80097d4:	d5e1      	bpl.n	800979a <__swbuf_r+0x2e>
 80097d6:	2e0a      	cmp	r6, #10
 80097d8:	d1df      	bne.n	800979a <__swbuf_r+0x2e>
 80097da:	4621      	mov	r1, r4
 80097dc:	4628      	mov	r0, r5
 80097de:	f7ff fa31 	bl	8008c44 <_fflush_r>
 80097e2:	2800      	cmp	r0, #0
 80097e4:	d0d9      	beq.n	800979a <__swbuf_r+0x2e>
 80097e6:	e7d6      	b.n	8009796 <__swbuf_r+0x2a>

080097e8 <__swsetup_r>:
 80097e8:	b538      	push	{r3, r4, r5, lr}
 80097ea:	4b29      	ldr	r3, [pc, #164]	@ (8009890 <__swsetup_r+0xa8>)
 80097ec:	4605      	mov	r5, r0
 80097ee:	6818      	ldr	r0, [r3, #0]
 80097f0:	460c      	mov	r4, r1
 80097f2:	b118      	cbz	r0, 80097fc <__swsetup_r+0x14>
 80097f4:	6a03      	ldr	r3, [r0, #32]
 80097f6:	b90b      	cbnz	r3, 80097fc <__swsetup_r+0x14>
 80097f8:	f7fc fc9e 	bl	8006138 <__sinit>
 80097fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009800:	0719      	lsls	r1, r3, #28
 8009802:	d422      	bmi.n	800984a <__swsetup_r+0x62>
 8009804:	06da      	lsls	r2, r3, #27
 8009806:	d407      	bmi.n	8009818 <__swsetup_r+0x30>
 8009808:	2209      	movs	r2, #9
 800980a:	602a      	str	r2, [r5, #0]
 800980c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009810:	81a3      	strh	r3, [r4, #12]
 8009812:	f04f 30ff 	mov.w	r0, #4294967295
 8009816:	e033      	b.n	8009880 <__swsetup_r+0x98>
 8009818:	0758      	lsls	r0, r3, #29
 800981a:	d512      	bpl.n	8009842 <__swsetup_r+0x5a>
 800981c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800981e:	b141      	cbz	r1, 8009832 <__swsetup_r+0x4a>
 8009820:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009824:	4299      	cmp	r1, r3
 8009826:	d002      	beq.n	800982e <__swsetup_r+0x46>
 8009828:	4628      	mov	r0, r5
 800982a:	f7fd fc01 	bl	8007030 <_free_r>
 800982e:	2300      	movs	r3, #0
 8009830:	6363      	str	r3, [r4, #52]	@ 0x34
 8009832:	89a3      	ldrh	r3, [r4, #12]
 8009834:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009838:	81a3      	strh	r3, [r4, #12]
 800983a:	2300      	movs	r3, #0
 800983c:	6063      	str	r3, [r4, #4]
 800983e:	6923      	ldr	r3, [r4, #16]
 8009840:	6023      	str	r3, [r4, #0]
 8009842:	89a3      	ldrh	r3, [r4, #12]
 8009844:	f043 0308 	orr.w	r3, r3, #8
 8009848:	81a3      	strh	r3, [r4, #12]
 800984a:	6923      	ldr	r3, [r4, #16]
 800984c:	b94b      	cbnz	r3, 8009862 <__swsetup_r+0x7a>
 800984e:	89a3      	ldrh	r3, [r4, #12]
 8009850:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009854:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009858:	d003      	beq.n	8009862 <__swsetup_r+0x7a>
 800985a:	4621      	mov	r1, r4
 800985c:	4628      	mov	r0, r5
 800985e:	f000 f883 	bl	8009968 <__smakebuf_r>
 8009862:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009866:	f013 0201 	ands.w	r2, r3, #1
 800986a:	d00a      	beq.n	8009882 <__swsetup_r+0x9a>
 800986c:	2200      	movs	r2, #0
 800986e:	60a2      	str	r2, [r4, #8]
 8009870:	6962      	ldr	r2, [r4, #20]
 8009872:	4252      	negs	r2, r2
 8009874:	61a2      	str	r2, [r4, #24]
 8009876:	6922      	ldr	r2, [r4, #16]
 8009878:	b942      	cbnz	r2, 800988c <__swsetup_r+0xa4>
 800987a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800987e:	d1c5      	bne.n	800980c <__swsetup_r+0x24>
 8009880:	bd38      	pop	{r3, r4, r5, pc}
 8009882:	0799      	lsls	r1, r3, #30
 8009884:	bf58      	it	pl
 8009886:	6962      	ldrpl	r2, [r4, #20]
 8009888:	60a2      	str	r2, [r4, #8]
 800988a:	e7f4      	b.n	8009876 <__swsetup_r+0x8e>
 800988c:	2000      	movs	r0, #0
 800988e:	e7f7      	b.n	8009880 <__swsetup_r+0x98>
 8009890:	20000018 	.word	0x20000018

08009894 <_raise_r>:
 8009894:	291f      	cmp	r1, #31
 8009896:	b538      	push	{r3, r4, r5, lr}
 8009898:	4605      	mov	r5, r0
 800989a:	460c      	mov	r4, r1
 800989c:	d904      	bls.n	80098a8 <_raise_r+0x14>
 800989e:	2316      	movs	r3, #22
 80098a0:	6003      	str	r3, [r0, #0]
 80098a2:	f04f 30ff 	mov.w	r0, #4294967295
 80098a6:	bd38      	pop	{r3, r4, r5, pc}
 80098a8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80098aa:	b112      	cbz	r2, 80098b2 <_raise_r+0x1e>
 80098ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80098b0:	b94b      	cbnz	r3, 80098c6 <_raise_r+0x32>
 80098b2:	4628      	mov	r0, r5
 80098b4:	f000 f830 	bl	8009918 <_getpid_r>
 80098b8:	4622      	mov	r2, r4
 80098ba:	4601      	mov	r1, r0
 80098bc:	4628      	mov	r0, r5
 80098be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098c2:	f000 b817 	b.w	80098f4 <_kill_r>
 80098c6:	2b01      	cmp	r3, #1
 80098c8:	d00a      	beq.n	80098e0 <_raise_r+0x4c>
 80098ca:	1c59      	adds	r1, r3, #1
 80098cc:	d103      	bne.n	80098d6 <_raise_r+0x42>
 80098ce:	2316      	movs	r3, #22
 80098d0:	6003      	str	r3, [r0, #0]
 80098d2:	2001      	movs	r0, #1
 80098d4:	e7e7      	b.n	80098a6 <_raise_r+0x12>
 80098d6:	2100      	movs	r1, #0
 80098d8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80098dc:	4620      	mov	r0, r4
 80098de:	4798      	blx	r3
 80098e0:	2000      	movs	r0, #0
 80098e2:	e7e0      	b.n	80098a6 <_raise_r+0x12>

080098e4 <raise>:
 80098e4:	4b02      	ldr	r3, [pc, #8]	@ (80098f0 <raise+0xc>)
 80098e6:	4601      	mov	r1, r0
 80098e8:	6818      	ldr	r0, [r3, #0]
 80098ea:	f7ff bfd3 	b.w	8009894 <_raise_r>
 80098ee:	bf00      	nop
 80098f0:	20000018 	.word	0x20000018

080098f4 <_kill_r>:
 80098f4:	b538      	push	{r3, r4, r5, lr}
 80098f6:	4d07      	ldr	r5, [pc, #28]	@ (8009914 <_kill_r+0x20>)
 80098f8:	2300      	movs	r3, #0
 80098fa:	4604      	mov	r4, r0
 80098fc:	4608      	mov	r0, r1
 80098fe:	4611      	mov	r1, r2
 8009900:	602b      	str	r3, [r5, #0]
 8009902:	f7f7 ff6d 	bl	80017e0 <_kill>
 8009906:	1c43      	adds	r3, r0, #1
 8009908:	d102      	bne.n	8009910 <_kill_r+0x1c>
 800990a:	682b      	ldr	r3, [r5, #0]
 800990c:	b103      	cbz	r3, 8009910 <_kill_r+0x1c>
 800990e:	6023      	str	r3, [r4, #0]
 8009910:	bd38      	pop	{r3, r4, r5, pc}
 8009912:	bf00      	nop
 8009914:	20000490 	.word	0x20000490

08009918 <_getpid_r>:
 8009918:	f7f7 bf5a 	b.w	80017d0 <_getpid>

0800991c <__swhatbuf_r>:
 800991c:	b570      	push	{r4, r5, r6, lr}
 800991e:	460c      	mov	r4, r1
 8009920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009924:	2900      	cmp	r1, #0
 8009926:	b096      	sub	sp, #88	@ 0x58
 8009928:	4615      	mov	r5, r2
 800992a:	461e      	mov	r6, r3
 800992c:	da0d      	bge.n	800994a <__swhatbuf_r+0x2e>
 800992e:	89a3      	ldrh	r3, [r4, #12]
 8009930:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009934:	f04f 0100 	mov.w	r1, #0
 8009938:	bf14      	ite	ne
 800993a:	2340      	movne	r3, #64	@ 0x40
 800993c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009940:	2000      	movs	r0, #0
 8009942:	6031      	str	r1, [r6, #0]
 8009944:	602b      	str	r3, [r5, #0]
 8009946:	b016      	add	sp, #88	@ 0x58
 8009948:	bd70      	pop	{r4, r5, r6, pc}
 800994a:	466a      	mov	r2, sp
 800994c:	f000 f848 	bl	80099e0 <_fstat_r>
 8009950:	2800      	cmp	r0, #0
 8009952:	dbec      	blt.n	800992e <__swhatbuf_r+0x12>
 8009954:	9901      	ldr	r1, [sp, #4]
 8009956:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800995a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800995e:	4259      	negs	r1, r3
 8009960:	4159      	adcs	r1, r3
 8009962:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009966:	e7eb      	b.n	8009940 <__swhatbuf_r+0x24>

08009968 <__smakebuf_r>:
 8009968:	898b      	ldrh	r3, [r1, #12]
 800996a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800996c:	079d      	lsls	r5, r3, #30
 800996e:	4606      	mov	r6, r0
 8009970:	460c      	mov	r4, r1
 8009972:	d507      	bpl.n	8009984 <__smakebuf_r+0x1c>
 8009974:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009978:	6023      	str	r3, [r4, #0]
 800997a:	6123      	str	r3, [r4, #16]
 800997c:	2301      	movs	r3, #1
 800997e:	6163      	str	r3, [r4, #20]
 8009980:	b003      	add	sp, #12
 8009982:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009984:	ab01      	add	r3, sp, #4
 8009986:	466a      	mov	r2, sp
 8009988:	f7ff ffc8 	bl	800991c <__swhatbuf_r>
 800998c:	9f00      	ldr	r7, [sp, #0]
 800998e:	4605      	mov	r5, r0
 8009990:	4639      	mov	r1, r7
 8009992:	4630      	mov	r0, r6
 8009994:	f7fd fbc0 	bl	8007118 <_malloc_r>
 8009998:	b948      	cbnz	r0, 80099ae <__smakebuf_r+0x46>
 800999a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800999e:	059a      	lsls	r2, r3, #22
 80099a0:	d4ee      	bmi.n	8009980 <__smakebuf_r+0x18>
 80099a2:	f023 0303 	bic.w	r3, r3, #3
 80099a6:	f043 0302 	orr.w	r3, r3, #2
 80099aa:	81a3      	strh	r3, [r4, #12]
 80099ac:	e7e2      	b.n	8009974 <__smakebuf_r+0xc>
 80099ae:	89a3      	ldrh	r3, [r4, #12]
 80099b0:	6020      	str	r0, [r4, #0]
 80099b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099b6:	81a3      	strh	r3, [r4, #12]
 80099b8:	9b01      	ldr	r3, [sp, #4]
 80099ba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80099be:	b15b      	cbz	r3, 80099d8 <__smakebuf_r+0x70>
 80099c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099c4:	4630      	mov	r0, r6
 80099c6:	f000 f81d 	bl	8009a04 <_isatty_r>
 80099ca:	b128      	cbz	r0, 80099d8 <__smakebuf_r+0x70>
 80099cc:	89a3      	ldrh	r3, [r4, #12]
 80099ce:	f023 0303 	bic.w	r3, r3, #3
 80099d2:	f043 0301 	orr.w	r3, r3, #1
 80099d6:	81a3      	strh	r3, [r4, #12]
 80099d8:	89a3      	ldrh	r3, [r4, #12]
 80099da:	431d      	orrs	r5, r3
 80099dc:	81a5      	strh	r5, [r4, #12]
 80099de:	e7cf      	b.n	8009980 <__smakebuf_r+0x18>

080099e0 <_fstat_r>:
 80099e0:	b538      	push	{r3, r4, r5, lr}
 80099e2:	4d07      	ldr	r5, [pc, #28]	@ (8009a00 <_fstat_r+0x20>)
 80099e4:	2300      	movs	r3, #0
 80099e6:	4604      	mov	r4, r0
 80099e8:	4608      	mov	r0, r1
 80099ea:	4611      	mov	r1, r2
 80099ec:	602b      	str	r3, [r5, #0]
 80099ee:	f7f7 ff57 	bl	80018a0 <_fstat>
 80099f2:	1c43      	adds	r3, r0, #1
 80099f4:	d102      	bne.n	80099fc <_fstat_r+0x1c>
 80099f6:	682b      	ldr	r3, [r5, #0]
 80099f8:	b103      	cbz	r3, 80099fc <_fstat_r+0x1c>
 80099fa:	6023      	str	r3, [r4, #0]
 80099fc:	bd38      	pop	{r3, r4, r5, pc}
 80099fe:	bf00      	nop
 8009a00:	20000490 	.word	0x20000490

08009a04 <_isatty_r>:
 8009a04:	b538      	push	{r3, r4, r5, lr}
 8009a06:	4d06      	ldr	r5, [pc, #24]	@ (8009a20 <_isatty_r+0x1c>)
 8009a08:	2300      	movs	r3, #0
 8009a0a:	4604      	mov	r4, r0
 8009a0c:	4608      	mov	r0, r1
 8009a0e:	602b      	str	r3, [r5, #0]
 8009a10:	f7f7 ff56 	bl	80018c0 <_isatty>
 8009a14:	1c43      	adds	r3, r0, #1
 8009a16:	d102      	bne.n	8009a1e <_isatty_r+0x1a>
 8009a18:	682b      	ldr	r3, [r5, #0]
 8009a1a:	b103      	cbz	r3, 8009a1e <_isatty_r+0x1a>
 8009a1c:	6023      	str	r3, [r4, #0]
 8009a1e:	bd38      	pop	{r3, r4, r5, pc}
 8009a20:	20000490 	.word	0x20000490

08009a24 <_init>:
 8009a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a26:	bf00      	nop
 8009a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a2a:	bc08      	pop	{r3}
 8009a2c:	469e      	mov	lr, r3
 8009a2e:	4770      	bx	lr

08009a30 <_fini>:
 8009a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a32:	bf00      	nop
 8009a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a36:	bc08      	pop	{r3}
 8009a38:	469e      	mov	lr, r3
 8009a3a:	4770      	bx	lr
