
AEAT9922_Configuration_SPI-4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000902c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000574  08009210  08009210  0000a210  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009784  08009784  0000b1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009784  08009784  0000a784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800978c  0800978c  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800978c  0800978c  0000a78c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009790  08009790  0000a790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08009794  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002cc  200001d4  08009968  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a0  08009968  0000b4a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fcf3  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022a0  00000000  00000000  0001aef7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce0  00000000  00000000  0001d198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009e7  00000000  00000000  0001de78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002cec  00000000  00000000  0001e85f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f8d7  00000000  00000000  0002154b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000edf09  00000000  00000000  00030e22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011ed2b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049a4  00000000  00000000  0011ed70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  00123714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	080091f4 	.word	0x080091f4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	080091f4 	.word	0x080091f4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9be 	b.w	800106c <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	468e      	mov	lr, r1
 8000d7c:	4604      	mov	r4, r0
 8000d7e:	4688      	mov	r8, r1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d14a      	bne.n	8000e1a <__udivmoddi4+0xa6>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4617      	mov	r7, r2
 8000d88:	d962      	bls.n	8000e50 <__udivmoddi4+0xdc>
 8000d8a:	fab2 f682 	clz	r6, r2
 8000d8e:	b14e      	cbz	r6, 8000da4 <__udivmoddi4+0x30>
 8000d90:	f1c6 0320 	rsb	r3, r6, #32
 8000d94:	fa01 f806 	lsl.w	r8, r1, r6
 8000d98:	fa20 f303 	lsr.w	r3, r0, r3
 8000d9c:	40b7      	lsls	r7, r6
 8000d9e:	ea43 0808 	orr.w	r8, r3, r8
 8000da2:	40b4      	lsls	r4, r6
 8000da4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000da8:	fa1f fc87 	uxth.w	ip, r7
 8000dac:	fbb8 f1fe 	udiv	r1, r8, lr
 8000db0:	0c23      	lsrs	r3, r4, #16
 8000db2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000db6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dba:	fb01 f20c 	mul.w	r2, r1, ip
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d909      	bls.n	8000dd6 <__udivmoddi4+0x62>
 8000dc2:	18fb      	adds	r3, r7, r3
 8000dc4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000dc8:	f080 80ea 	bcs.w	8000fa0 <__udivmoddi4+0x22c>
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	f240 80e7 	bls.w	8000fa0 <__udivmoddi4+0x22c>
 8000dd2:	3902      	subs	r1, #2
 8000dd4:	443b      	add	r3, r7
 8000dd6:	1a9a      	subs	r2, r3, r2
 8000dd8:	b2a3      	uxth	r3, r4
 8000dda:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dde:	fb0e 2210 	mls	r2, lr, r0, r2
 8000de2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000de6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dea:	459c      	cmp	ip, r3
 8000dec:	d909      	bls.n	8000e02 <__udivmoddi4+0x8e>
 8000dee:	18fb      	adds	r3, r7, r3
 8000df0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000df4:	f080 80d6 	bcs.w	8000fa4 <__udivmoddi4+0x230>
 8000df8:	459c      	cmp	ip, r3
 8000dfa:	f240 80d3 	bls.w	8000fa4 <__udivmoddi4+0x230>
 8000dfe:	443b      	add	r3, r7
 8000e00:	3802      	subs	r0, #2
 8000e02:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e06:	eba3 030c 	sub.w	r3, r3, ip
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	b11d      	cbz	r5, 8000e16 <__udivmoddi4+0xa2>
 8000e0e:	40f3      	lsrs	r3, r6
 8000e10:	2200      	movs	r2, #0
 8000e12:	e9c5 3200 	strd	r3, r2, [r5]
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d905      	bls.n	8000e2a <__udivmoddi4+0xb6>
 8000e1e:	b10d      	cbz	r5, 8000e24 <__udivmoddi4+0xb0>
 8000e20:	e9c5 0100 	strd	r0, r1, [r5]
 8000e24:	2100      	movs	r1, #0
 8000e26:	4608      	mov	r0, r1
 8000e28:	e7f5      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e2a:	fab3 f183 	clz	r1, r3
 8000e2e:	2900      	cmp	r1, #0
 8000e30:	d146      	bne.n	8000ec0 <__udivmoddi4+0x14c>
 8000e32:	4573      	cmp	r3, lr
 8000e34:	d302      	bcc.n	8000e3c <__udivmoddi4+0xc8>
 8000e36:	4282      	cmp	r2, r0
 8000e38:	f200 8105 	bhi.w	8001046 <__udivmoddi4+0x2d2>
 8000e3c:	1a84      	subs	r4, r0, r2
 8000e3e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e42:	2001      	movs	r0, #1
 8000e44:	4690      	mov	r8, r2
 8000e46:	2d00      	cmp	r5, #0
 8000e48:	d0e5      	beq.n	8000e16 <__udivmoddi4+0xa2>
 8000e4a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e4e:	e7e2      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e50:	2a00      	cmp	r2, #0
 8000e52:	f000 8090 	beq.w	8000f76 <__udivmoddi4+0x202>
 8000e56:	fab2 f682 	clz	r6, r2
 8000e5a:	2e00      	cmp	r6, #0
 8000e5c:	f040 80a4 	bne.w	8000fa8 <__udivmoddi4+0x234>
 8000e60:	1a8a      	subs	r2, r1, r2
 8000e62:	0c03      	lsrs	r3, r0, #16
 8000e64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e68:	b280      	uxth	r0, r0
 8000e6a:	b2bc      	uxth	r4, r7
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e72:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e7a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d907      	bls.n	8000e92 <__udivmoddi4+0x11e>
 8000e82:	18fb      	adds	r3, r7, r3
 8000e84:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e88:	d202      	bcs.n	8000e90 <__udivmoddi4+0x11c>
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	f200 80e0 	bhi.w	8001050 <__udivmoddi4+0x2dc>
 8000e90:	46c4      	mov	ip, r8
 8000e92:	1a9b      	subs	r3, r3, r2
 8000e94:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e98:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e9c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000ea0:	fb02 f404 	mul.w	r4, r2, r4
 8000ea4:	429c      	cmp	r4, r3
 8000ea6:	d907      	bls.n	8000eb8 <__udivmoddi4+0x144>
 8000ea8:	18fb      	adds	r3, r7, r3
 8000eaa:	f102 30ff 	add.w	r0, r2, #4294967295
 8000eae:	d202      	bcs.n	8000eb6 <__udivmoddi4+0x142>
 8000eb0:	429c      	cmp	r4, r3
 8000eb2:	f200 80ca 	bhi.w	800104a <__udivmoddi4+0x2d6>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	1b1b      	subs	r3, r3, r4
 8000eba:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000ebe:	e7a5      	b.n	8000e0c <__udivmoddi4+0x98>
 8000ec0:	f1c1 0620 	rsb	r6, r1, #32
 8000ec4:	408b      	lsls	r3, r1
 8000ec6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eca:	431f      	orrs	r7, r3
 8000ecc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ed0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ed4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ed8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000edc:	4323      	orrs	r3, r4
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	fa1f fc87 	uxth.w	ip, r7
 8000ee6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eea:	0c1c      	lsrs	r4, r3, #16
 8000eec:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ef0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ef4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	fa02 f201 	lsl.w	r2, r2, r1
 8000efe:	d909      	bls.n	8000f14 <__udivmoddi4+0x1a0>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f06:	f080 809c 	bcs.w	8001042 <__udivmoddi4+0x2ce>
 8000f0a:	45a6      	cmp	lr, r4
 8000f0c:	f240 8099 	bls.w	8001042 <__udivmoddi4+0x2ce>
 8000f10:	3802      	subs	r0, #2
 8000f12:	443c      	add	r4, r7
 8000f14:	eba4 040e 	sub.w	r4, r4, lr
 8000f18:	fa1f fe83 	uxth.w	lr, r3
 8000f1c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f20:	fb09 4413 	mls	r4, r9, r3, r4
 8000f24:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f28:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f2c:	45a4      	cmp	ip, r4
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x1ce>
 8000f30:	193c      	adds	r4, r7, r4
 8000f32:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f36:	f080 8082 	bcs.w	800103e <__udivmoddi4+0x2ca>
 8000f3a:	45a4      	cmp	ip, r4
 8000f3c:	d97f      	bls.n	800103e <__udivmoddi4+0x2ca>
 8000f3e:	3b02      	subs	r3, #2
 8000f40:	443c      	add	r4, r7
 8000f42:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f46:	eba4 040c 	sub.w	r4, r4, ip
 8000f4a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f4e:	4564      	cmp	r4, ip
 8000f50:	4673      	mov	r3, lr
 8000f52:	46e1      	mov	r9, ip
 8000f54:	d362      	bcc.n	800101c <__udivmoddi4+0x2a8>
 8000f56:	d05f      	beq.n	8001018 <__udivmoddi4+0x2a4>
 8000f58:	b15d      	cbz	r5, 8000f72 <__udivmoddi4+0x1fe>
 8000f5a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f5e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f62:	fa04 f606 	lsl.w	r6, r4, r6
 8000f66:	fa22 f301 	lsr.w	r3, r2, r1
 8000f6a:	431e      	orrs	r6, r3
 8000f6c:	40cc      	lsrs	r4, r1
 8000f6e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f72:	2100      	movs	r1, #0
 8000f74:	e74f      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000f76:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f7a:	0c01      	lsrs	r1, r0, #16
 8000f7c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f80:	b280      	uxth	r0, r0
 8000f82:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f86:	463b      	mov	r3, r7
 8000f88:	4638      	mov	r0, r7
 8000f8a:	463c      	mov	r4, r7
 8000f8c:	46b8      	mov	r8, r7
 8000f8e:	46be      	mov	lr, r7
 8000f90:	2620      	movs	r6, #32
 8000f92:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f96:	eba2 0208 	sub.w	r2, r2, r8
 8000f9a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f9e:	e766      	b.n	8000e6e <__udivmoddi4+0xfa>
 8000fa0:	4601      	mov	r1, r0
 8000fa2:	e718      	b.n	8000dd6 <__udivmoddi4+0x62>
 8000fa4:	4610      	mov	r0, r2
 8000fa6:	e72c      	b.n	8000e02 <__udivmoddi4+0x8e>
 8000fa8:	f1c6 0220 	rsb	r2, r6, #32
 8000fac:	fa2e f302 	lsr.w	r3, lr, r2
 8000fb0:	40b7      	lsls	r7, r6
 8000fb2:	40b1      	lsls	r1, r6
 8000fb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fc2:	b2bc      	uxth	r4, r7
 8000fc4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fc8:	0c11      	lsrs	r1, r2, #16
 8000fca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fce:	fb08 f904 	mul.w	r9, r8, r4
 8000fd2:	40b0      	lsls	r0, r6
 8000fd4:	4589      	cmp	r9, r1
 8000fd6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fda:	b280      	uxth	r0, r0
 8000fdc:	d93e      	bls.n	800105c <__udivmoddi4+0x2e8>
 8000fde:	1879      	adds	r1, r7, r1
 8000fe0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fe4:	d201      	bcs.n	8000fea <__udivmoddi4+0x276>
 8000fe6:	4589      	cmp	r9, r1
 8000fe8:	d81f      	bhi.n	800102a <__udivmoddi4+0x2b6>
 8000fea:	eba1 0109 	sub.w	r1, r1, r9
 8000fee:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff2:	fb09 f804 	mul.w	r8, r9, r4
 8000ff6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ffa:	b292      	uxth	r2, r2
 8000ffc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001000:	4542      	cmp	r2, r8
 8001002:	d229      	bcs.n	8001058 <__udivmoddi4+0x2e4>
 8001004:	18ba      	adds	r2, r7, r2
 8001006:	f109 31ff 	add.w	r1, r9, #4294967295
 800100a:	d2c4      	bcs.n	8000f96 <__udivmoddi4+0x222>
 800100c:	4542      	cmp	r2, r8
 800100e:	d2c2      	bcs.n	8000f96 <__udivmoddi4+0x222>
 8001010:	f1a9 0102 	sub.w	r1, r9, #2
 8001014:	443a      	add	r2, r7
 8001016:	e7be      	b.n	8000f96 <__udivmoddi4+0x222>
 8001018:	45f0      	cmp	r8, lr
 800101a:	d29d      	bcs.n	8000f58 <__udivmoddi4+0x1e4>
 800101c:	ebbe 0302 	subs.w	r3, lr, r2
 8001020:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001024:	3801      	subs	r0, #1
 8001026:	46e1      	mov	r9, ip
 8001028:	e796      	b.n	8000f58 <__udivmoddi4+0x1e4>
 800102a:	eba7 0909 	sub.w	r9, r7, r9
 800102e:	4449      	add	r1, r9
 8001030:	f1a8 0c02 	sub.w	ip, r8, #2
 8001034:	fbb1 f9fe 	udiv	r9, r1, lr
 8001038:	fb09 f804 	mul.w	r8, r9, r4
 800103c:	e7db      	b.n	8000ff6 <__udivmoddi4+0x282>
 800103e:	4673      	mov	r3, lr
 8001040:	e77f      	b.n	8000f42 <__udivmoddi4+0x1ce>
 8001042:	4650      	mov	r0, sl
 8001044:	e766      	b.n	8000f14 <__udivmoddi4+0x1a0>
 8001046:	4608      	mov	r0, r1
 8001048:	e6fd      	b.n	8000e46 <__udivmoddi4+0xd2>
 800104a:	443b      	add	r3, r7
 800104c:	3a02      	subs	r2, #2
 800104e:	e733      	b.n	8000eb8 <__udivmoddi4+0x144>
 8001050:	f1ac 0c02 	sub.w	ip, ip, #2
 8001054:	443b      	add	r3, r7
 8001056:	e71c      	b.n	8000e92 <__udivmoddi4+0x11e>
 8001058:	4649      	mov	r1, r9
 800105a:	e79c      	b.n	8000f96 <__udivmoddi4+0x222>
 800105c:	eba1 0109 	sub.w	r1, r1, r9
 8001060:	46c4      	mov	ip, r8
 8001062:	fbb1 f9fe 	udiv	r9, r1, lr
 8001066:	fb09 f804 	mul.w	r8, r9, r4
 800106a:	e7c4      	b.n	8000ff6 <__udivmoddi4+0x282>

0800106c <__aeabi_idiv0>:
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop

08001070 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b0e4      	sub	sp, #400	@ 0x190
 8001074:	af00      	add	r7, sp, #0


    char debug_msg[400];

    /* MCU Configuration--------------------------------------------------------*/
    HAL_Init();
 8001076:	f000 fc3c 	bl	80018f2 <HAL_Init>
    SystemClock_Config();
 800107a:	f000 f827 	bl	80010cc <SystemClock_Config>
    MX_GPIO_Init();
 800107e:	f000 f93f 	bl	8001300 <MX_GPIO_Init>
    MX_LPUART1_UART_Init();
 8001082:	f000 f877 	bl	8001174 <MX_LPUART1_UART_Init>
    MX_SPI2_Init();
 8001086:	f000 f8bf 	bl	8001208 <MX_SPI2_Init>
    MX_SPI3_Init();
 800108a:	f000 f8fb 	bl	8001284 <MX_SPI3_Init>

    /* Print startup message */
    sprintf(debug_msg, "\r\n=== AEAT9922 Encoder ===\r\n");
 800108e:	463b      	mov	r3, r7
 8001090:	490c      	ldr	r1, [pc, #48]	@ (80010c4 <main+0x54>)
 8001092:	4618      	mov	r0, r3
 8001094:	f004 fc70 	bl	8005978 <siprintf>
    HAL_UART_Transmit(&hlpuart1, (uint8_t*)debug_msg, strlen(debug_msg), HAL_MAX_DELAY);
 8001098:	463b      	mov	r3, r7
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff f910 	bl	80002c0 <strlen>
 80010a0:	4603      	mov	r3, r0
 80010a2:	b29a      	uxth	r2, r3
 80010a4:	4639      	mov	r1, r7
 80010a6:	f04f 33ff 	mov.w	r3, #4294967295
 80010aa:	4807      	ldr	r0, [pc, #28]	@ (80010c8 <main+0x58>)
 80010ac:	f002 fad3 	bl	8003656 <HAL_UART_Transmit>

    /* Wait for sensor power-up */
    HAL_Delay(100);
 80010b0:	2064      	movs	r0, #100	@ 0x64
 80010b2:	f000 fc8f 	bl	80019d4 <HAL_Delay>
 80010b6:	2300      	movs	r3, #0

			HAL_Delay(200);  // Read every 100ms
    	}
    }
    #endif
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	f507 77c8 	add.w	r7, r7, #400	@ 0x190
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	08009210 	.word	0x08009210
 80010c8:	200001f0 	.word	0x200001f0

080010cc <SystemClock_Config>:
    }
}

/* System configuration functions (same as in main.c) */
void SystemClock_Config(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b094      	sub	sp, #80	@ 0x50
 80010d0:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010d2:	f107 0318 	add.w	r3, r7, #24
 80010d6:	2238      	movs	r2, #56	@ 0x38
 80010d8:	2100      	movs	r1, #0
 80010da:	4618      	mov	r0, r3
 80010dc:	f004 fcb1 	bl	8005a42 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010e0:	1d3b      	adds	r3, r7, #4
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]
 80010e8:	609a      	str	r2, [r3, #8]
 80010ea:	60da      	str	r2, [r3, #12]
 80010ec:	611a      	str	r2, [r3, #16]

    HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80010ee:	2000      	movs	r0, #0
 80010f0:	f001 f820 	bl	8002134 <HAL_PWREx_ControlVoltageScaling>

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010f4:	2302      	movs	r3, #2
 80010f6:	61bb      	str	r3, [r7, #24]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010fc:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010fe:	2340      	movs	r3, #64	@ 0x40
 8001100:	62bb      	str	r3, [r7, #40]	@ 0x28
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001102:	2302      	movs	r3, #2
 8001104:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001106:	2302      	movs	r3, #2
 8001108:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800110a:	2304      	movs	r3, #4
 800110c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLN = 85;
 800110e:	2355      	movs	r3, #85	@ 0x55
 8001110:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001112:	2302      	movs	r3, #2
 8001114:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001116:	2302      	movs	r3, #2
 8001118:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800111a:	2302      	movs	r3, #2
 800111c:	64fb      	str	r3, [r7, #76]	@ 0x4c

    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800111e:	f107 0318 	add.w	r3, r7, #24
 8001122:	4618      	mov	r0, r3
 8001124:	f001 f8ba 	bl	800229c <HAL_RCC_OscConfig>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <SystemClock_Config+0x66>
        Error_Handler();
 800112e:	f000 f97b 	bl	8001428 <Error_Handler>
    }

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001132:	230f      	movs	r3, #15
 8001134:	607b      	str	r3, [r7, #4]
                                  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001136:	2303      	movs	r3, #3
 8001138:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800113a:	2300      	movs	r3, #0
 800113c:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800113e:	2300      	movs	r3, #0
 8001140:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001142:	2300      	movs	r3, #0
 8001144:	617b      	str	r3, [r7, #20]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8001146:	1d3b      	adds	r3, r7, #4
 8001148:	2104      	movs	r1, #4
 800114a:	4618      	mov	r0, r3
 800114c:	f001 fbb8 	bl	80028c0 <HAL_RCC_ClockConfig>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <SystemClock_Config+0x8e>
        Error_Handler();
 8001156:	f000 f967 	bl	8001428 <Error_Handler>
    }
    HAL_RCC_MCOConfig(RCC_MCO_PG10, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 800115a:	2200      	movs	r2, #0
 800115c:	f04f 7140 	mov.w	r1, #50331648	@ 0x3000000
 8001160:	4803      	ldr	r0, [pc, #12]	@ (8001170 <SystemClock_Config+0xa4>)
 8001162:	f001 fce9 	bl	8002b38 <HAL_RCC_MCOConfig>
}
 8001166:	bf00      	nop
 8001168:	3750      	adds	r7, #80	@ 0x50
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	00060400 	.word	0x00060400

08001174 <MX_LPUART1_UART_Init>:

static void MX_LPUART1_UART_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
    hlpuart1.Instance = LPUART1;
 8001178:	4b21      	ldr	r3, [pc, #132]	@ (8001200 <MX_LPUART1_UART_Init+0x8c>)
 800117a:	4a22      	ldr	r2, [pc, #136]	@ (8001204 <MX_LPUART1_UART_Init+0x90>)
 800117c:	601a      	str	r2, [r3, #0]
    hlpuart1.Init.BaudRate = 115200;
 800117e:	4b20      	ldr	r3, [pc, #128]	@ (8001200 <MX_LPUART1_UART_Init+0x8c>)
 8001180:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001184:	605a      	str	r2, [r3, #4]
    hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001186:	4b1e      	ldr	r3, [pc, #120]	@ (8001200 <MX_LPUART1_UART_Init+0x8c>)
 8001188:	2200      	movs	r2, #0
 800118a:	609a      	str	r2, [r3, #8]
    hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800118c:	4b1c      	ldr	r3, [pc, #112]	@ (8001200 <MX_LPUART1_UART_Init+0x8c>)
 800118e:	2200      	movs	r2, #0
 8001190:	60da      	str	r2, [r3, #12]
    hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001192:	4b1b      	ldr	r3, [pc, #108]	@ (8001200 <MX_LPUART1_UART_Init+0x8c>)
 8001194:	2200      	movs	r2, #0
 8001196:	611a      	str	r2, [r3, #16]
    hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001198:	4b19      	ldr	r3, [pc, #100]	@ (8001200 <MX_LPUART1_UART_Init+0x8c>)
 800119a:	220c      	movs	r2, #12
 800119c:	615a      	str	r2, [r3, #20]
    hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800119e:	4b18      	ldr	r3, [pc, #96]	@ (8001200 <MX_LPUART1_UART_Init+0x8c>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	619a      	str	r2, [r3, #24]
    hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011a4:	4b16      	ldr	r3, [pc, #88]	@ (8001200 <MX_LPUART1_UART_Init+0x8c>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	621a      	str	r2, [r3, #32]
    hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011aa:	4b15      	ldr	r3, [pc, #84]	@ (8001200 <MX_LPUART1_UART_Init+0x8c>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	625a      	str	r2, [r3, #36]	@ 0x24
    hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011b0:	4b13      	ldr	r3, [pc, #76]	@ (8001200 <MX_LPUART1_UART_Init+0x8c>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_UART_Init(&hlpuart1) != HAL_OK) {
 80011b6:	4812      	ldr	r0, [pc, #72]	@ (8001200 <MX_LPUART1_UART_Init+0x8c>)
 80011b8:	f002 f9fd 	bl	80035b6 <HAL_UART_Init>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_LPUART1_UART_Init+0x52>
        Error_Handler();
 80011c2:	f000 f931 	bl	8001428 <Error_Handler>
    }
    if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK) {
 80011c6:	2100      	movs	r1, #0
 80011c8:	480d      	ldr	r0, [pc, #52]	@ (8001200 <MX_LPUART1_UART_Init+0x8c>)
 80011ca:	f003 fbe4 	bl	8004996 <HAL_UARTEx_SetTxFifoThreshold>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_LPUART1_UART_Init+0x64>
        Error_Handler();
 80011d4:	f000 f928 	bl	8001428 <Error_Handler>
    }
    if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK) {
 80011d8:	2100      	movs	r1, #0
 80011da:	4809      	ldr	r0, [pc, #36]	@ (8001200 <MX_LPUART1_UART_Init+0x8c>)
 80011dc:	f003 fc19 	bl	8004a12 <HAL_UARTEx_SetRxFifoThreshold>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_LPUART1_UART_Init+0x76>
        Error_Handler();
 80011e6:	f000 f91f 	bl	8001428 <Error_Handler>
    }
    if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK) {
 80011ea:	4805      	ldr	r0, [pc, #20]	@ (8001200 <MX_LPUART1_UART_Init+0x8c>)
 80011ec:	f003 fb9a 	bl	8004924 <HAL_UARTEx_DisableFifoMode>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_LPUART1_UART_Init+0x86>
        Error_Handler();
 80011f6:	f000 f917 	bl	8001428 <Error_Handler>
    }
}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	200001f0 	.word	0x200001f0
 8001204:	40008000 	.word	0x40008000

08001208 <MX_SPI2_Init>:

static void MX_SPI2_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
    hspi2.Instance = SPI2;
 800120c:	4b1b      	ldr	r3, [pc, #108]	@ (800127c <MX_SPI2_Init+0x74>)
 800120e:	4a1c      	ldr	r2, [pc, #112]	@ (8001280 <MX_SPI2_Init+0x78>)
 8001210:	601a      	str	r2, [r3, #0]
    hspi2.Init.Mode = SPI_MODE_MASTER;
 8001212:	4b1a      	ldr	r3, [pc, #104]	@ (800127c <MX_SPI2_Init+0x74>)
 8001214:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001218:	605a      	str	r2, [r3, #4]
    hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800121a:	4b18      	ldr	r3, [pc, #96]	@ (800127c <MX_SPI2_Init+0x74>)
 800121c:	2200      	movs	r2, #0
 800121e:	609a      	str	r2, [r3, #8]
    hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001220:	4b16      	ldr	r3, [pc, #88]	@ (800127c <MX_SPI2_Init+0x74>)
 8001222:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001226:	60da      	str	r2, [r3, #12]
    hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001228:	4b14      	ldr	r3, [pc, #80]	@ (800127c <MX_SPI2_Init+0x74>)
 800122a:	2200      	movs	r2, #0
 800122c:	611a      	str	r2, [r3, #16]
    hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800122e:	4b13      	ldr	r3, [pc, #76]	@ (800127c <MX_SPI2_Init+0x74>)
 8001230:	2201      	movs	r2, #1
 8001232:	615a      	str	r2, [r3, #20]
    hspi2.Init.NSS = SPI_NSS_SOFT;
 8001234:	4b11      	ldr	r3, [pc, #68]	@ (800127c <MX_SPI2_Init+0x74>)
 8001236:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800123a:	619a      	str	r2, [r3, #24]
    hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800123c:	4b0f      	ldr	r3, [pc, #60]	@ (800127c <MX_SPI2_Init+0x74>)
 800123e:	2238      	movs	r2, #56	@ 0x38
 8001240:	61da      	str	r2, [r3, #28]
    hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001242:	4b0e      	ldr	r3, [pc, #56]	@ (800127c <MX_SPI2_Init+0x74>)
 8001244:	2200      	movs	r2, #0
 8001246:	621a      	str	r2, [r3, #32]
    hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001248:	4b0c      	ldr	r3, [pc, #48]	@ (800127c <MX_SPI2_Init+0x74>)
 800124a:	2200      	movs	r2, #0
 800124c:	625a      	str	r2, [r3, #36]	@ 0x24
    hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800124e:	4b0b      	ldr	r3, [pc, #44]	@ (800127c <MX_SPI2_Init+0x74>)
 8001250:	2200      	movs	r2, #0
 8001252:	629a      	str	r2, [r3, #40]	@ 0x28
    hspi2.Init.CRCPolynomial = 7;
 8001254:	4b09      	ldr	r3, [pc, #36]	@ (800127c <MX_SPI2_Init+0x74>)
 8001256:	2207      	movs	r2, #7
 8001258:	62da      	str	r2, [r3, #44]	@ 0x2c
    hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800125a:	4b08      	ldr	r3, [pc, #32]	@ (800127c <MX_SPI2_Init+0x74>)
 800125c:	2200      	movs	r2, #0
 800125e:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001260:	4b06      	ldr	r3, [pc, #24]	@ (800127c <MX_SPI2_Init+0x74>)
 8001262:	2200      	movs	r2, #0
 8001264:	635a      	str	r2, [r3, #52]	@ 0x34

    if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8001266:	4805      	ldr	r0, [pc, #20]	@ (800127c <MX_SPI2_Init+0x74>)
 8001268:	f001 ffda 	bl	8003220 <HAL_SPI_Init>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_SPI2_Init+0x6e>
        Error_Handler();
 8001272:	f000 f8d9 	bl	8001428 <Error_Handler>
    }
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000284 	.word	0x20000284
 8001280:	40003800 	.word	0x40003800

08001284 <MX_SPI3_Init>:

static void MX_SPI3_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
    hspi3.Instance = SPI3;
 8001288:	4b1b      	ldr	r3, [pc, #108]	@ (80012f8 <MX_SPI3_Init+0x74>)
 800128a:	4a1c      	ldr	r2, [pc, #112]	@ (80012fc <MX_SPI3_Init+0x78>)
 800128c:	601a      	str	r2, [r3, #0]
    hspi3.Init.Mode = SPI_MODE_MASTER;
 800128e:	4b1a      	ldr	r3, [pc, #104]	@ (80012f8 <MX_SPI3_Init+0x74>)
 8001290:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001294:	605a      	str	r2, [r3, #4]
    hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001296:	4b18      	ldr	r3, [pc, #96]	@ (80012f8 <MX_SPI3_Init+0x74>)
 8001298:	2200      	movs	r2, #0
 800129a:	609a      	str	r2, [r3, #8]
    hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800129c:	4b16      	ldr	r3, [pc, #88]	@ (80012f8 <MX_SPI3_Init+0x74>)
 800129e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80012a2:	60da      	str	r2, [r3, #12]
    hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012a4:	4b14      	ldr	r3, [pc, #80]	@ (80012f8 <MX_SPI3_Init+0x74>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	611a      	str	r2, [r3, #16]
    hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80012aa:	4b13      	ldr	r3, [pc, #76]	@ (80012f8 <MX_SPI3_Init+0x74>)
 80012ac:	2201      	movs	r2, #1
 80012ae:	615a      	str	r2, [r3, #20]
    hspi3.Init.NSS = SPI_NSS_SOFT;
 80012b0:	4b11      	ldr	r3, [pc, #68]	@ (80012f8 <MX_SPI3_Init+0x74>)
 80012b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012b6:	619a      	str	r2, [r3, #24]
    hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80012b8:	4b0f      	ldr	r3, [pc, #60]	@ (80012f8 <MX_SPI3_Init+0x74>)
 80012ba:	2238      	movs	r2, #56	@ 0x38
 80012bc:	61da      	str	r2, [r3, #28]
    hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012be:	4b0e      	ldr	r3, [pc, #56]	@ (80012f8 <MX_SPI3_Init+0x74>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	621a      	str	r2, [r3, #32]
    hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80012c4:	4b0c      	ldr	r3, [pc, #48]	@ (80012f8 <MX_SPI3_Init+0x74>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	625a      	str	r2, [r3, #36]	@ 0x24
    hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012ca:	4b0b      	ldr	r3, [pc, #44]	@ (80012f8 <MX_SPI3_Init+0x74>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	629a      	str	r2, [r3, #40]	@ 0x28
    hspi3.Init.CRCPolynomial = 7;
 80012d0:	4b09      	ldr	r3, [pc, #36]	@ (80012f8 <MX_SPI3_Init+0x74>)
 80012d2:	2207      	movs	r2, #7
 80012d4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012d6:	4b08      	ldr	r3, [pc, #32]	@ (80012f8 <MX_SPI3_Init+0x74>)
 80012d8:	2200      	movs	r2, #0
 80012da:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80012dc:	4b06      	ldr	r3, [pc, #24]	@ (80012f8 <MX_SPI3_Init+0x74>)
 80012de:	2200      	movs	r2, #0
 80012e0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 80012e2:	4805      	ldr	r0, [pc, #20]	@ (80012f8 <MX_SPI3_Init+0x74>)
 80012e4:	f001 ff9c 	bl	8003220 <HAL_SPI_Init>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_SPI3_Init+0x6e>
        Error_Handler();
 80012ee:	f000 f89b 	bl	8001428 <Error_Handler>
    }
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	200002e8 	.word	0x200002e8
 80012fc:	40003c00 	.word	0x40003c00

08001300 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08a      	sub	sp, #40	@ 0x28
 8001304:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001306:	f107 0314 	add.w	r3, r7, #20
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	609a      	str	r2, [r3, #8]
 8001312:	60da      	str	r2, [r3, #12]
 8001314:	611a      	str	r2, [r3, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001316:	4b41      	ldr	r3, [pc, #260]	@ (800141c <MX_GPIO_Init+0x11c>)
 8001318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800131a:	4a40      	ldr	r2, [pc, #256]	@ (800141c <MX_GPIO_Init+0x11c>)
 800131c:	f043 0304 	orr.w	r3, r3, #4
 8001320:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001322:	4b3e      	ldr	r3, [pc, #248]	@ (800141c <MX_GPIO_Init+0x11c>)
 8001324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001326:	f003 0304 	and.w	r3, r3, #4
 800132a:	613b      	str	r3, [r7, #16]
 800132c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800132e:	4b3b      	ldr	r3, [pc, #236]	@ (800141c <MX_GPIO_Init+0x11c>)
 8001330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001332:	4a3a      	ldr	r2, [pc, #232]	@ (800141c <MX_GPIO_Init+0x11c>)
 8001334:	f043 0320 	orr.w	r3, r3, #32
 8001338:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800133a:	4b38      	ldr	r3, [pc, #224]	@ (800141c <MX_GPIO_Init+0x11c>)
 800133c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800133e:	f003 0320 	and.w	r3, r3, #32
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001346:	4b35      	ldr	r3, [pc, #212]	@ (800141c <MX_GPIO_Init+0x11c>)
 8001348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800134a:	4a34      	ldr	r2, [pc, #208]	@ (800141c <MX_GPIO_Init+0x11c>)
 800134c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001350:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001352:	4b32      	ldr	r3, [pc, #200]	@ (800141c <MX_GPIO_Init+0x11c>)
 8001354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001356:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800135a:	60bb      	str	r3, [r7, #8]
 800135c:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800135e:	4b2f      	ldr	r3, [pc, #188]	@ (800141c <MX_GPIO_Init+0x11c>)
 8001360:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001362:	4a2e      	ldr	r2, [pc, #184]	@ (800141c <MX_GPIO_Init+0x11c>)
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800136a:	4b2c      	ldr	r3, [pc, #176]	@ (800141c <MX_GPIO_Init+0x11c>)
 800136c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	607b      	str	r3, [r7, #4]
 8001374:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001376:	4b29      	ldr	r3, [pc, #164]	@ (800141c <MX_GPIO_Init+0x11c>)
 8001378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800137a:	4a28      	ldr	r2, [pc, #160]	@ (800141c <MX_GPIO_Init+0x11c>)
 800137c:	f043 0302 	orr.w	r3, r3, #2
 8001380:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001382:	4b26      	ldr	r3, [pc, #152]	@ (800141c <MX_GPIO_Init+0x11c>)
 8001384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	603b      	str	r3, [r7, #0]
 800138c:	683b      	ldr	r3, [r7, #0]

    HAL_GPIO_WritePin(ENCODER_NSS_PORT, ENCODER_NSS_PIN, GPIO_PIN_SET);
 800138e:	2201      	movs	r2, #1
 8001390:	2110      	movs	r1, #16
 8001392:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001396:	f000 fe91 	bl	80020bc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);  // LD2
 800139a:	2200      	movs	r2, #0
 800139c:	2120      	movs	r1, #32
 800139e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013a2:	f000 fe8b 	bl	80020bc <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = GPIO_PIN_13;  // B1
 80013a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013ac:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80013b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013b6:	f107 0314 	add.w	r3, r7, #20
 80013ba:	4619      	mov	r1, r3
 80013bc:	4818      	ldr	r0, [pc, #96]	@ (8001420 <MX_GPIO_Init+0x120>)
 80013be:	f000 fcfb 	bl	8001db8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80013c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c8:	2302      	movs	r3, #2
 80013ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d0:	2300      	movs	r3, #0
 80013d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80013d4:	2300      	movs	r3, #0
 80013d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013d8:	f107 0314 	add.w	r3, r7, #20
 80013dc:	4619      	mov	r1, r3
 80013de:	4811      	ldr	r0, [pc, #68]	@ (8001424 <MX_GPIO_Init+0x124>)
 80013e0:	f000 fcea 	bl	8001db8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENCODER_NSS_PIN | GPIO_PIN_5;  // NSS and LD2
 80013e4:	2330      	movs	r3, #48	@ 0x30
 80013e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e8:	2301      	movs	r3, #1
 80013ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f0:	2300      	movs	r3, #0
 80013f2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f4:	f107 0314 	add.w	r3, r7, #20
 80013f8:	4619      	mov	r1, r3
 80013fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013fe:	f000 fcdb 	bl	8001db8 <HAL_GPIO_Init>

    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001402:	2200      	movs	r2, #0
 8001404:	2100      	movs	r1, #0
 8001406:	2028      	movs	r0, #40	@ 0x28
 8001408:	f000 fbe1 	bl	8001bce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800140c:	2028      	movs	r0, #40	@ 0x28
 800140e:	f000 fbf8 	bl	8001c02 <HAL_NVIC_EnableIRQ>
}
 8001412:	bf00      	nop
 8001414:	3728      	adds	r7, #40	@ 0x28
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40021000 	.word	0x40021000
 8001420:	48000800 	.word	0x48000800
 8001424:	48001800 	.word	0x48001800

08001428 <Error_Handler>:

void Error_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800142c:	b672      	cpsid	i
}
 800142e:	bf00      	nop
    __disable_irq();
    while (1) {
 8001430:	bf00      	nop
 8001432:	e7fd      	b.n	8001430 <Error_Handler+0x8>

08001434 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800143a:	4b0f      	ldr	r3, [pc, #60]	@ (8001478 <HAL_MspInit+0x44>)
 800143c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800143e:	4a0e      	ldr	r2, [pc, #56]	@ (8001478 <HAL_MspInit+0x44>)
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	6613      	str	r3, [r2, #96]	@ 0x60
 8001446:	4b0c      	ldr	r3, [pc, #48]	@ (8001478 <HAL_MspInit+0x44>)
 8001448:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	607b      	str	r3, [r7, #4]
 8001450:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001452:	4b09      	ldr	r3, [pc, #36]	@ (8001478 <HAL_MspInit+0x44>)
 8001454:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001456:	4a08      	ldr	r2, [pc, #32]	@ (8001478 <HAL_MspInit+0x44>)
 8001458:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800145c:	6593      	str	r3, [r2, #88]	@ 0x58
 800145e:	4b06      	ldr	r3, [pc, #24]	@ (8001478 <HAL_MspInit+0x44>)
 8001460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001462:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001466:	603b      	str	r3, [r7, #0]
 8001468:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800146a:	f000 ff07 	bl	800227c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40021000 	.word	0x40021000

0800147c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b09e      	sub	sp, #120	@ 0x78
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001484:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001494:	f107 0310 	add.w	r3, r7, #16
 8001498:	2254      	movs	r2, #84	@ 0x54
 800149a:	2100      	movs	r1, #0
 800149c:	4618      	mov	r0, r3
 800149e:	f004 fad0 	bl	8005a42 <memset>
  if(huart->Instance==LPUART1)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a23      	ldr	r2, [pc, #140]	@ (8001534 <HAL_UART_MspInit+0xb8>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d13e      	bne.n	800152a <HAL_UART_MspInit+0xae>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80014ac:	2320      	movs	r3, #32
 80014ae:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80014b0:	2300      	movs	r3, #0
 80014b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014b4:	f107 0310 	add.w	r3, r7, #16
 80014b8:	4618      	mov	r0, r3
 80014ba:	f001 fc63 	bl	8002d84 <HAL_RCCEx_PeriphCLKConfig>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014c4:	f7ff ffb0 	bl	8001428 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80014c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001538 <HAL_UART_MspInit+0xbc>)
 80014ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014cc:	4a1a      	ldr	r2, [pc, #104]	@ (8001538 <HAL_UART_MspInit+0xbc>)
 80014ce:	f043 0301 	orr.w	r3, r3, #1
 80014d2:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80014d4:	4b18      	ldr	r3, [pc, #96]	@ (8001538 <HAL_UART_MspInit+0xbc>)
 80014d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e0:	4b15      	ldr	r3, [pc, #84]	@ (8001538 <HAL_UART_MspInit+0xbc>)
 80014e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014e4:	4a14      	ldr	r2, [pc, #80]	@ (8001538 <HAL_UART_MspInit+0xbc>)
 80014e6:	f043 0301 	orr.w	r3, r3, #1
 80014ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014ec:	4b12      	ldr	r3, [pc, #72]	@ (8001538 <HAL_UART_MspInit+0xbc>)
 80014ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f0:	f003 0301 	and.w	r3, r3, #1
 80014f4:	60bb      	str	r3, [r7, #8]
 80014f6:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80014f8:	230c      	movs	r3, #12
 80014fa:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fc:	2302      	movs	r3, #2
 80014fe:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001504:	2300      	movs	r3, #0
 8001506:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001508:	230c      	movs	r3, #12
 800150a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001510:	4619      	mov	r1, r3
 8001512:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001516:	f000 fc4f 	bl	8001db8 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800151a:	2200      	movs	r2, #0
 800151c:	2100      	movs	r1, #0
 800151e:	205b      	movs	r0, #91	@ 0x5b
 8001520:	f000 fb55 	bl	8001bce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001524:	205b      	movs	r0, #91	@ 0x5b
 8001526:	f000 fb6c 	bl	8001c02 <HAL_NVIC_EnableIRQ>

    /* USER CODE END LPUART1_MspInit 1 */

  }

}
 800152a:	bf00      	nop
 800152c:	3778      	adds	r7, #120	@ 0x78
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40008000 	.word	0x40008000
 8001538:	40021000 	.word	0x40021000

0800153c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08c      	sub	sp, #48	@ 0x30
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001544:	f107 031c 	add.w	r3, r7, #28
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a36      	ldr	r2, [pc, #216]	@ (8001634 <HAL_SPI_MspInit+0xf8>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d131      	bne.n	80015c2 <HAL_SPI_MspInit+0x86>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800155e:	4b36      	ldr	r3, [pc, #216]	@ (8001638 <HAL_SPI_MspInit+0xfc>)
 8001560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001562:	4a35      	ldr	r2, [pc, #212]	@ (8001638 <HAL_SPI_MspInit+0xfc>)
 8001564:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001568:	6593      	str	r3, [r2, #88]	@ 0x58
 800156a:	4b33      	ldr	r3, [pc, #204]	@ (8001638 <HAL_SPI_MspInit+0xfc>)
 800156c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800156e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001572:	61bb      	str	r3, [r7, #24]
 8001574:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001576:	4b30      	ldr	r3, [pc, #192]	@ (8001638 <HAL_SPI_MspInit+0xfc>)
 8001578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800157a:	4a2f      	ldr	r2, [pc, #188]	@ (8001638 <HAL_SPI_MspInit+0xfc>)
 800157c:	f043 0302 	orr.w	r3, r3, #2
 8001580:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001582:	4b2d      	ldr	r3, [pc, #180]	@ (8001638 <HAL_SPI_MspInit+0xfc>)
 8001584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	617b      	str	r3, [r7, #20]
 800158c:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800158e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001592:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001594:	2302      	movs	r3, #2
 8001596:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159c:	2300      	movs	r3, #0
 800159e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015a0:	2305      	movs	r3, #5
 80015a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a4:	f107 031c 	add.w	r3, r7, #28
 80015a8:	4619      	mov	r1, r3
 80015aa:	4824      	ldr	r0, [pc, #144]	@ (800163c <HAL_SPI_MspInit+0x100>)
 80015ac:	f000 fc04 	bl	8001db8 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80015b0:	2200      	movs	r2, #0
 80015b2:	2100      	movs	r1, #0
 80015b4:	2024      	movs	r0, #36	@ 0x24
 80015b6:	f000 fb0a 	bl	8001bce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80015ba:	2024      	movs	r0, #36	@ 0x24
 80015bc:	f000 fb21 	bl	8001c02 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 80015c0:	e034      	b.n	800162c <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI3)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a1e      	ldr	r2, [pc, #120]	@ (8001640 <HAL_SPI_MspInit+0x104>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d12f      	bne.n	800162c <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80015cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001638 <HAL_SPI_MspInit+0xfc>)
 80015ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015d0:	4a19      	ldr	r2, [pc, #100]	@ (8001638 <HAL_SPI_MspInit+0xfc>)
 80015d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80015d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80015d8:	4b17      	ldr	r3, [pc, #92]	@ (8001638 <HAL_SPI_MspInit+0xfc>)
 80015da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80015e0:	613b      	str	r3, [r7, #16]
 80015e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e4:	4b14      	ldr	r3, [pc, #80]	@ (8001638 <HAL_SPI_MspInit+0xfc>)
 80015e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015e8:	4a13      	ldr	r2, [pc, #76]	@ (8001638 <HAL_SPI_MspInit+0xfc>)
 80015ea:	f043 0302 	orr.w	r3, r3, #2
 80015ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015f0:	4b11      	ldr	r3, [pc, #68]	@ (8001638 <HAL_SPI_MspInit+0xfc>)
 80015f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015f4:	f003 0302 	and.w	r3, r3, #2
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80015fc:	2338      	movs	r3, #56	@ 0x38
 80015fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001600:	2302      	movs	r3, #2
 8001602:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001604:	2300      	movs	r3, #0
 8001606:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001608:	2300      	movs	r3, #0
 800160a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800160c:	2306      	movs	r3, #6
 800160e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001610:	f107 031c 	add.w	r3, r7, #28
 8001614:	4619      	mov	r1, r3
 8001616:	4809      	ldr	r0, [pc, #36]	@ (800163c <HAL_SPI_MspInit+0x100>)
 8001618:	f000 fbce 	bl	8001db8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 800161c:	2200      	movs	r2, #0
 800161e:	2100      	movs	r1, #0
 8001620:	2033      	movs	r0, #51	@ 0x33
 8001622:	f000 fad4 	bl	8001bce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001626:	2033      	movs	r0, #51	@ 0x33
 8001628:	f000 faeb 	bl	8001c02 <HAL_NVIC_EnableIRQ>
}
 800162c:	bf00      	nop
 800162e:	3730      	adds	r7, #48	@ 0x30
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40003800 	.word	0x40003800
 8001638:	40021000 	.word	0x40021000
 800163c:	48000400 	.word	0x48000400
 8001640:	40003c00 	.word	0x40003c00

08001644 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001648:	bf00      	nop
 800164a:	e7fd      	b.n	8001648 <NMI_Handler+0x4>

0800164c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001650:	bf00      	nop
 8001652:	e7fd      	b.n	8001650 <HardFault_Handler+0x4>

08001654 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001658:	bf00      	nop
 800165a:	e7fd      	b.n	8001658 <MemManage_Handler+0x4>

0800165c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001660:	bf00      	nop
 8001662:	e7fd      	b.n	8001660 <BusFault_Handler+0x4>

08001664 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001668:	bf00      	nop
 800166a:	e7fd      	b.n	8001668 <UsageFault_Handler+0x4>

0800166c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800167a:	b480      	push	{r7}
 800167c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr

08001696 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800169a:	f000 f97d 	bl	8001998 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
	...

080016a4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80016a8:	4802      	ldr	r0, [pc, #8]	@ (80016b4 <SPI2_IRQHandler+0x10>)
 80016aa:	f001 fe65 	bl	8003378 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20000284 	.word	0x20000284

080016b8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80016bc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80016c0:	f000 fd14 	bl	80020ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80016c4:	bf00      	nop
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80016cc:	4802      	ldr	r0, [pc, #8]	@ (80016d8 <SPI3_IRQHandler+0x10>)
 80016ce:	f001 fe53 	bl	8003378 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	200002e8 	.word	0x200002e8

080016dc <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80016e0:	4802      	ldr	r0, [pc, #8]	@ (80016ec <LPUART1_IRQHandler+0x10>)
 80016e2:	f002 f847 	bl	8003774 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	200001f0 	.word	0x200001f0

080016f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  return 1;
 80016f4:	2301      	movs	r3, #1
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <_kill>:

int _kill(int pid, int sig)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800170a:	f004 f9ed 	bl	8005ae8 <__errno>
 800170e:	4603      	mov	r3, r0
 8001710:	2216      	movs	r2, #22
 8001712:	601a      	str	r2, [r3, #0]
  return -1;
 8001714:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001718:	4618      	mov	r0, r3
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <_exit>:

void _exit (int status)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001728:	f04f 31ff 	mov.w	r1, #4294967295
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f7ff ffe7 	bl	8001700 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001732:	bf00      	nop
 8001734:	e7fd      	b.n	8001732 <_exit+0x12>

08001736 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b086      	sub	sp, #24
 800173a:	af00      	add	r7, sp, #0
 800173c:	60f8      	str	r0, [r7, #12]
 800173e:	60b9      	str	r1, [r7, #8]
 8001740:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001742:	2300      	movs	r3, #0
 8001744:	617b      	str	r3, [r7, #20]
 8001746:	e00a      	b.n	800175e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001748:	f3af 8000 	nop.w
 800174c:	4601      	mov	r1, r0
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	1c5a      	adds	r2, r3, #1
 8001752:	60ba      	str	r2, [r7, #8]
 8001754:	b2ca      	uxtb	r2, r1
 8001756:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	3301      	adds	r3, #1
 800175c:	617b      	str	r3, [r7, #20]
 800175e:	697a      	ldr	r2, [r7, #20]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	429a      	cmp	r2, r3
 8001764:	dbf0      	blt.n	8001748 <_read+0x12>
  }

  return len;
 8001766:	687b      	ldr	r3, [r7, #4]
}
 8001768:	4618      	mov	r0, r3
 800176a:	3718      	adds	r7, #24
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800177c:	2300      	movs	r3, #0
 800177e:	617b      	str	r3, [r7, #20]
 8001780:	e009      	b.n	8001796 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	1c5a      	adds	r2, r3, #1
 8001786:	60ba      	str	r2, [r7, #8]
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	4618      	mov	r0, r3
 800178c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	3301      	adds	r3, #1
 8001794:	617b      	str	r3, [r7, #20]
 8001796:	697a      	ldr	r2, [r7, #20]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	429a      	cmp	r2, r3
 800179c:	dbf1      	blt.n	8001782 <_write+0x12>
  }
  return len;
 800179e:	687b      	ldr	r3, [r7, #4]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3718      	adds	r7, #24
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <_close>:

int _close(int file)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017d0:	605a      	str	r2, [r3, #4]
  return 0;
 80017d2:	2300      	movs	r3, #0
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <_isatty>:

int _isatty(int file)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017e8:	2301      	movs	r3, #1
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017f6:	b480      	push	{r7}
 80017f8:	b085      	sub	sp, #20
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	60f8      	str	r0, [r7, #12]
 80017fe:	60b9      	str	r1, [r7, #8]
 8001800:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001802:	2300      	movs	r3, #0
}
 8001804:	4618      	mov	r0, r3
 8001806:	3714      	adds	r7, #20
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001818:	4a14      	ldr	r2, [pc, #80]	@ (800186c <_sbrk+0x5c>)
 800181a:	4b15      	ldr	r3, [pc, #84]	@ (8001870 <_sbrk+0x60>)
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001824:	4b13      	ldr	r3, [pc, #76]	@ (8001874 <_sbrk+0x64>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d102      	bne.n	8001832 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800182c:	4b11      	ldr	r3, [pc, #68]	@ (8001874 <_sbrk+0x64>)
 800182e:	4a12      	ldr	r2, [pc, #72]	@ (8001878 <_sbrk+0x68>)
 8001830:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001832:	4b10      	ldr	r3, [pc, #64]	@ (8001874 <_sbrk+0x64>)
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4413      	add	r3, r2
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	429a      	cmp	r2, r3
 800183e:	d207      	bcs.n	8001850 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001840:	f004 f952 	bl	8005ae8 <__errno>
 8001844:	4603      	mov	r3, r0
 8001846:	220c      	movs	r2, #12
 8001848:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800184a:	f04f 33ff 	mov.w	r3, #4294967295
 800184e:	e009      	b.n	8001864 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001850:	4b08      	ldr	r3, [pc, #32]	@ (8001874 <_sbrk+0x64>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001856:	4b07      	ldr	r3, [pc, #28]	@ (8001874 <_sbrk+0x64>)
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4413      	add	r3, r2
 800185e:	4a05      	ldr	r2, [pc, #20]	@ (8001874 <_sbrk+0x64>)
 8001860:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001862:	68fb      	ldr	r3, [r7, #12]
}
 8001864:	4618      	mov	r0, r3
 8001866:	3718      	adds	r7, #24
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20020000 	.word	0x20020000
 8001870:	00000400 	.word	0x00000400
 8001874:	2000034c 	.word	0x2000034c
 8001878:	200004a0 	.word	0x200004a0

0800187c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001880:	4b06      	ldr	r3, [pc, #24]	@ (800189c <SystemInit+0x20>)
 8001882:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001886:	4a05      	ldr	r2, [pc, #20]	@ (800189c <SystemInit+0x20>)
 8001888:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800188c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	e000ed00 	.word	0xe000ed00

080018a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80018a0:	480d      	ldr	r0, [pc, #52]	@ (80018d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80018a2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018a4:	f7ff ffea 	bl	800187c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018a8:	480c      	ldr	r0, [pc, #48]	@ (80018dc <LoopForever+0x6>)
  ldr r1, =_edata
 80018aa:	490d      	ldr	r1, [pc, #52]	@ (80018e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018ac:	4a0d      	ldr	r2, [pc, #52]	@ (80018e4 <LoopForever+0xe>)
  movs r3, #0
 80018ae:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80018b0:	e002      	b.n	80018b8 <LoopCopyDataInit>

080018b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018b6:	3304      	adds	r3, #4

080018b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018bc:	d3f9      	bcc.n	80018b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018be:	4a0a      	ldr	r2, [pc, #40]	@ (80018e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018c0:	4c0a      	ldr	r4, [pc, #40]	@ (80018ec <LoopForever+0x16>)
  movs r3, #0
 80018c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018c4:	e001      	b.n	80018ca <LoopFillZerobss>

080018c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018c8:	3204      	adds	r2, #4

080018ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018cc:	d3fb      	bcc.n	80018c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018ce:	f004 f911 	bl	8005af4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018d2:	f7ff fbcd 	bl	8001070 <main>

080018d6 <LoopForever>:

LoopForever:
    b LoopForever
 80018d6:	e7fe      	b.n	80018d6 <LoopForever>
  ldr   r0, =_estack
 80018d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018e0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80018e4:	08009794 	.word	0x08009794
  ldr r2, =_sbss
 80018e8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80018ec:	200004a0 	.word	0x200004a0

080018f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018f0:	e7fe      	b.n	80018f0 <ADC1_2_IRQHandler>

080018f2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b082      	sub	sp, #8
 80018f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018f8:	2300      	movs	r3, #0
 80018fa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018fc:	2003      	movs	r0, #3
 80018fe:	f000 f95b 	bl	8001bb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001902:	2000      	movs	r0, #0
 8001904:	f000 f80e 	bl	8001924 <HAL_InitTick>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d002      	beq.n	8001914 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	71fb      	strb	r3, [r7, #7]
 8001912:	e001      	b.n	8001918 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001914:	f7ff fd8e 	bl	8001434 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001918:	79fb      	ldrb	r3, [r7, #7]

}
 800191a:	4618      	mov	r0, r3
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
	...

08001924 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800192c:	2300      	movs	r3, #0
 800192e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001930:	4b16      	ldr	r3, [pc, #88]	@ (800198c <HAL_InitTick+0x68>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d022      	beq.n	800197e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001938:	4b15      	ldr	r3, [pc, #84]	@ (8001990 <HAL_InitTick+0x6c>)
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	4b13      	ldr	r3, [pc, #76]	@ (800198c <HAL_InitTick+0x68>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001944:	fbb1 f3f3 	udiv	r3, r1, r3
 8001948:	fbb2 f3f3 	udiv	r3, r2, r3
 800194c:	4618      	mov	r0, r3
 800194e:	f000 f966 	bl	8001c1e <HAL_SYSTICK_Config>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d10f      	bne.n	8001978 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2b0f      	cmp	r3, #15
 800195c:	d809      	bhi.n	8001972 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800195e:	2200      	movs	r2, #0
 8001960:	6879      	ldr	r1, [r7, #4]
 8001962:	f04f 30ff 	mov.w	r0, #4294967295
 8001966:	f000 f932 	bl	8001bce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800196a:	4a0a      	ldr	r2, [pc, #40]	@ (8001994 <HAL_InitTick+0x70>)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6013      	str	r3, [r2, #0]
 8001970:	e007      	b.n	8001982 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	73fb      	strb	r3, [r7, #15]
 8001976:	e004      	b.n	8001982 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	73fb      	strb	r3, [r7, #15]
 800197c:	e001      	b.n	8001982 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001982:	7bfb      	ldrb	r3, [r7, #15]
}
 8001984:	4618      	mov	r0, r3
 8001986:	3710      	adds	r7, #16
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	20000008 	.word	0x20000008
 8001990:	20000000 	.word	0x20000000
 8001994:	20000004 	.word	0x20000004

08001998 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800199c:	4b05      	ldr	r3, [pc, #20]	@ (80019b4 <HAL_IncTick+0x1c>)
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	4b05      	ldr	r3, [pc, #20]	@ (80019b8 <HAL_IncTick+0x20>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4413      	add	r3, r2
 80019a6:	4a03      	ldr	r2, [pc, #12]	@ (80019b4 <HAL_IncTick+0x1c>)
 80019a8:	6013      	str	r3, [r2, #0]
}
 80019aa:	bf00      	nop
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	20000350 	.word	0x20000350
 80019b8:	20000008 	.word	0x20000008

080019bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  return uwTick;
 80019c0:	4b03      	ldr	r3, [pc, #12]	@ (80019d0 <HAL_GetTick+0x14>)
 80019c2:	681b      	ldr	r3, [r3, #0]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	20000350 	.word	0x20000350

080019d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019dc:	f7ff ffee 	bl	80019bc <HAL_GetTick>
 80019e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019ec:	d004      	beq.n	80019f8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80019ee:	4b09      	ldr	r3, [pc, #36]	@ (8001a14 <HAL_Delay+0x40>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	68fa      	ldr	r2, [r7, #12]
 80019f4:	4413      	add	r3, r2
 80019f6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019f8:	bf00      	nop
 80019fa:	f7ff ffdf 	bl	80019bc <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	68fa      	ldr	r2, [r7, #12]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d8f7      	bhi.n	80019fa <HAL_Delay+0x26>
  {
  }
}
 8001a0a:	bf00      	nop
 8001a0c:	bf00      	nop
 8001a0e:	3710      	adds	r7, #16
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	20000008 	.word	0x20000008

08001a18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f003 0307 	and.w	r3, r3, #7
 8001a26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a28:	4b0c      	ldr	r3, [pc, #48]	@ (8001a5c <__NVIC_SetPriorityGrouping+0x44>)
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a2e:	68ba      	ldr	r2, [r7, #8]
 8001a30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a34:	4013      	ands	r3, r2
 8001a36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a4a:	4a04      	ldr	r2, [pc, #16]	@ (8001a5c <__NVIC_SetPriorityGrouping+0x44>)
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	60d3      	str	r3, [r2, #12]
}
 8001a50:	bf00      	nop
 8001a52:	3714      	adds	r7, #20
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	e000ed00 	.word	0xe000ed00

08001a60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a64:	4b04      	ldr	r3, [pc, #16]	@ (8001a78 <__NVIC_GetPriorityGrouping+0x18>)
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	0a1b      	lsrs	r3, r3, #8
 8001a6a:	f003 0307 	and.w	r3, r3, #7
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr
 8001a78:	e000ed00 	.word	0xe000ed00

08001a7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	4603      	mov	r3, r0
 8001a84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	db0b      	blt.n	8001aa6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a8e:	79fb      	ldrb	r3, [r7, #7]
 8001a90:	f003 021f 	and.w	r2, r3, #31
 8001a94:	4907      	ldr	r1, [pc, #28]	@ (8001ab4 <__NVIC_EnableIRQ+0x38>)
 8001a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9a:	095b      	lsrs	r3, r3, #5
 8001a9c:	2001      	movs	r0, #1
 8001a9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001aa6:	bf00      	nop
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	e000e100 	.word	0xe000e100

08001ab8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	6039      	str	r1, [r7, #0]
 8001ac2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	db0a      	blt.n	8001ae2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	b2da      	uxtb	r2, r3
 8001ad0:	490c      	ldr	r1, [pc, #48]	@ (8001b04 <__NVIC_SetPriority+0x4c>)
 8001ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad6:	0112      	lsls	r2, r2, #4
 8001ad8:	b2d2      	uxtb	r2, r2
 8001ada:	440b      	add	r3, r1
 8001adc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ae0:	e00a      	b.n	8001af8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	b2da      	uxtb	r2, r3
 8001ae6:	4908      	ldr	r1, [pc, #32]	@ (8001b08 <__NVIC_SetPriority+0x50>)
 8001ae8:	79fb      	ldrb	r3, [r7, #7]
 8001aea:	f003 030f 	and.w	r3, r3, #15
 8001aee:	3b04      	subs	r3, #4
 8001af0:	0112      	lsls	r2, r2, #4
 8001af2:	b2d2      	uxtb	r2, r2
 8001af4:	440b      	add	r3, r1
 8001af6:	761a      	strb	r2, [r3, #24]
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	e000e100 	.word	0xe000e100
 8001b08:	e000ed00 	.word	0xe000ed00

08001b0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b089      	sub	sp, #36	@ 0x24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f003 0307 	and.w	r3, r3, #7
 8001b1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	f1c3 0307 	rsb	r3, r3, #7
 8001b26:	2b04      	cmp	r3, #4
 8001b28:	bf28      	it	cs
 8001b2a:	2304      	movcs	r3, #4
 8001b2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	3304      	adds	r3, #4
 8001b32:	2b06      	cmp	r3, #6
 8001b34:	d902      	bls.n	8001b3c <NVIC_EncodePriority+0x30>
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	3b03      	subs	r3, #3
 8001b3a:	e000      	b.n	8001b3e <NVIC_EncodePriority+0x32>
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b40:	f04f 32ff 	mov.w	r2, #4294967295
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	43da      	mvns	r2, r3
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	401a      	ands	r2, r3
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b54:	f04f 31ff 	mov.w	r1, #4294967295
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b5e:	43d9      	mvns	r1, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b64:	4313      	orrs	r3, r2
         );
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3724      	adds	r7, #36	@ 0x24
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
	...

08001b74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b84:	d301      	bcc.n	8001b8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b86:	2301      	movs	r3, #1
 8001b88:	e00f      	b.n	8001baa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b8a:	4a0a      	ldr	r2, [pc, #40]	@ (8001bb4 <SysTick_Config+0x40>)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b92:	210f      	movs	r1, #15
 8001b94:	f04f 30ff 	mov.w	r0, #4294967295
 8001b98:	f7ff ff8e 	bl	8001ab8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b9c:	4b05      	ldr	r3, [pc, #20]	@ (8001bb4 <SysTick_Config+0x40>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ba2:	4b04      	ldr	r3, [pc, #16]	@ (8001bb4 <SysTick_Config+0x40>)
 8001ba4:	2207      	movs	r2, #7
 8001ba6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	e000e010 	.word	0xe000e010

08001bb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f7ff ff29 	bl	8001a18 <__NVIC_SetPriorityGrouping>
}
 8001bc6:	bf00      	nop
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b086      	sub	sp, #24
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	60b9      	str	r1, [r7, #8]
 8001bd8:	607a      	str	r2, [r7, #4]
 8001bda:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001bdc:	f7ff ff40 	bl	8001a60 <__NVIC_GetPriorityGrouping>
 8001be0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	68b9      	ldr	r1, [r7, #8]
 8001be6:	6978      	ldr	r0, [r7, #20]
 8001be8:	f7ff ff90 	bl	8001b0c <NVIC_EncodePriority>
 8001bec:	4602      	mov	r2, r0
 8001bee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bf2:	4611      	mov	r1, r2
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff ff5f 	bl	8001ab8 <__NVIC_SetPriority>
}
 8001bfa:	bf00      	nop
 8001bfc:	3718      	adds	r7, #24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b082      	sub	sp, #8
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	4603      	mov	r3, r0
 8001c0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff ff33 	bl	8001a7c <__NVIC_EnableIRQ>
}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b082      	sub	sp, #8
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f7ff ffa4 	bl	8001b74 <SysTick_Config>
 8001c2c:	4603      	mov	r3, r0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b085      	sub	sp, #20
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d005      	beq.n	8001c5a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2204      	movs	r2, #4
 8001c52:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	73fb      	strb	r3, [r7, #15]
 8001c58:	e037      	b.n	8001cca <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f022 020e 	bic.w	r2, r2, #14
 8001c68:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c74:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c78:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f022 0201 	bic.w	r2, r2, #1
 8001c88:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c8e:	f003 021f 	and.w	r2, r3, #31
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c96:	2101      	movs	r1, #1
 8001c98:	fa01 f202 	lsl.w	r2, r1, r2
 8001c9c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001ca6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d00c      	beq.n	8001cca <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001cbe:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001cc8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8001cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3714      	adds	r7, #20
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d00d      	beq.n	8001d1c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2204      	movs	r2, #4
 8001d04:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	73fb      	strb	r3, [r7, #15]
 8001d1a:	e047      	b.n	8001dac <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f022 020e 	bic.w	r2, r2, #14
 8001d2a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f022 0201 	bic.w	r2, r2, #1
 8001d3a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d46:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d4a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d50:	f003 021f 	and.w	r2, r3, #31
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d58:	2101      	movs	r1, #1
 8001d5a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d5e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001d68:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d00c      	beq.n	8001d8c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d7c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d80:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001d8a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d003      	beq.n	8001dac <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	4798      	blx	r3
    }
  }
  return status;
 8001dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3710      	adds	r7, #16
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
	...

08001db8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b087      	sub	sp, #28
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001dc6:	e15a      	b.n	800207e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	2101      	movs	r1, #1
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f000 814c 	beq.w	8002078 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f003 0303 	and.w	r3, r3, #3
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d005      	beq.n	8001df8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d130      	bne.n	8001e5a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	2203      	movs	r2, #3
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	693a      	ldr	r2, [r7, #16]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e2e:	2201      	movs	r2, #1
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	43db      	mvns	r3, r3
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	091b      	lsrs	r3, r3, #4
 8001e44:	f003 0201 	and.w	r2, r3, #1
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f003 0303 	and.w	r3, r3, #3
 8001e62:	2b03      	cmp	r3, #3
 8001e64:	d017      	beq.n	8001e96 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	2203      	movs	r2, #3
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	43db      	mvns	r3, r3
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	689a      	ldr	r2, [r3, #8]
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f003 0303 	and.w	r3, r3, #3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d123      	bne.n	8001eea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	08da      	lsrs	r2, r3, #3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	3208      	adds	r2, #8
 8001eaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	f003 0307 	and.w	r3, r3, #7
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	220f      	movs	r2, #15
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	691a      	ldr	r2, [r3, #16]
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	f003 0307 	and.w	r3, r3, #7
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	08da      	lsrs	r2, r3, #3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3208      	adds	r2, #8
 8001ee4:	6939      	ldr	r1, [r7, #16]
 8001ee6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	2203      	movs	r2, #3
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	43db      	mvns	r3, r3
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	4013      	ands	r3, r2
 8001f00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f003 0203 	and.w	r2, r3, #3
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f000 80a6 	beq.w	8002078 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f2c:	4b5b      	ldr	r3, [pc, #364]	@ (800209c <HAL_GPIO_Init+0x2e4>)
 8001f2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f30:	4a5a      	ldr	r2, [pc, #360]	@ (800209c <HAL_GPIO_Init+0x2e4>)
 8001f32:	f043 0301 	orr.w	r3, r3, #1
 8001f36:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f38:	4b58      	ldr	r3, [pc, #352]	@ (800209c <HAL_GPIO_Init+0x2e4>)
 8001f3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	60bb      	str	r3, [r7, #8]
 8001f42:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f44:	4a56      	ldr	r2, [pc, #344]	@ (80020a0 <HAL_GPIO_Init+0x2e8>)
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	089b      	lsrs	r3, r3, #2
 8001f4a:	3302      	adds	r3, #2
 8001f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	f003 0303 	and.w	r3, r3, #3
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	220f      	movs	r2, #15
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	43db      	mvns	r3, r3
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	4013      	ands	r3, r2
 8001f66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001f6e:	d01f      	beq.n	8001fb0 <HAL_GPIO_Init+0x1f8>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a4c      	ldr	r2, [pc, #304]	@ (80020a4 <HAL_GPIO_Init+0x2ec>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d019      	beq.n	8001fac <HAL_GPIO_Init+0x1f4>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a4b      	ldr	r2, [pc, #300]	@ (80020a8 <HAL_GPIO_Init+0x2f0>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d013      	beq.n	8001fa8 <HAL_GPIO_Init+0x1f0>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4a4a      	ldr	r2, [pc, #296]	@ (80020ac <HAL_GPIO_Init+0x2f4>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d00d      	beq.n	8001fa4 <HAL_GPIO_Init+0x1ec>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4a49      	ldr	r2, [pc, #292]	@ (80020b0 <HAL_GPIO_Init+0x2f8>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d007      	beq.n	8001fa0 <HAL_GPIO_Init+0x1e8>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4a48      	ldr	r2, [pc, #288]	@ (80020b4 <HAL_GPIO_Init+0x2fc>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d101      	bne.n	8001f9c <HAL_GPIO_Init+0x1e4>
 8001f98:	2305      	movs	r3, #5
 8001f9a:	e00a      	b.n	8001fb2 <HAL_GPIO_Init+0x1fa>
 8001f9c:	2306      	movs	r3, #6
 8001f9e:	e008      	b.n	8001fb2 <HAL_GPIO_Init+0x1fa>
 8001fa0:	2304      	movs	r3, #4
 8001fa2:	e006      	b.n	8001fb2 <HAL_GPIO_Init+0x1fa>
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e004      	b.n	8001fb2 <HAL_GPIO_Init+0x1fa>
 8001fa8:	2302      	movs	r3, #2
 8001faa:	e002      	b.n	8001fb2 <HAL_GPIO_Init+0x1fa>
 8001fac:	2301      	movs	r3, #1
 8001fae:	e000      	b.n	8001fb2 <HAL_GPIO_Init+0x1fa>
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	697a      	ldr	r2, [r7, #20]
 8001fb4:	f002 0203 	and.w	r2, r2, #3
 8001fb8:	0092      	lsls	r2, r2, #2
 8001fba:	4093      	lsls	r3, r2
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fc2:	4937      	ldr	r1, [pc, #220]	@ (80020a0 <HAL_GPIO_Init+0x2e8>)
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	089b      	lsrs	r3, r3, #2
 8001fc8:	3302      	adds	r3, #2
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fd0:	4b39      	ldr	r3, [pc, #228]	@ (80020b8 <HAL_GPIO_Init+0x300>)
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d003      	beq.n	8001ff4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001fec:	693a      	ldr	r2, [r7, #16]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ff4:	4a30      	ldr	r2, [pc, #192]	@ (80020b8 <HAL_GPIO_Init+0x300>)
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ffa:	4b2f      	ldr	r3, [pc, #188]	@ (80020b8 <HAL_GPIO_Init+0x300>)
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	43db      	mvns	r3, r3
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	4013      	ands	r3, r2
 8002008:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d003      	beq.n	800201e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	4313      	orrs	r3, r2
 800201c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800201e:	4a26      	ldr	r2, [pc, #152]	@ (80020b8 <HAL_GPIO_Init+0x300>)
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002024:	4b24      	ldr	r3, [pc, #144]	@ (80020b8 <HAL_GPIO_Init+0x300>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	43db      	mvns	r3, r3
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	4013      	ands	r3, r2
 8002032:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d003      	beq.n	8002048 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002040:	693a      	ldr	r2, [r7, #16]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	4313      	orrs	r3, r2
 8002046:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002048:	4a1b      	ldr	r2, [pc, #108]	@ (80020b8 <HAL_GPIO_Init+0x300>)
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800204e:	4b1a      	ldr	r3, [pc, #104]	@ (80020b8 <HAL_GPIO_Init+0x300>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	43db      	mvns	r3, r3
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	4013      	ands	r3, r2
 800205c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d003      	beq.n	8002072 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	4313      	orrs	r3, r2
 8002070:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002072:	4a11      	ldr	r2, [pc, #68]	@ (80020b8 <HAL_GPIO_Init+0x300>)
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	3301      	adds	r3, #1
 800207c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	fa22 f303 	lsr.w	r3, r2, r3
 8002088:	2b00      	cmp	r3, #0
 800208a:	f47f ae9d 	bne.w	8001dc8 <HAL_GPIO_Init+0x10>
  }
}
 800208e:	bf00      	nop
 8002090:	bf00      	nop
 8002092:	371c      	adds	r7, #28
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr
 800209c:	40021000 	.word	0x40021000
 80020a0:	40010000 	.word	0x40010000
 80020a4:	48000400 	.word	0x48000400
 80020a8:	48000800 	.word	0x48000800
 80020ac:	48000c00 	.word	0x48000c00
 80020b0:	48001000 	.word	0x48001000
 80020b4:	48001400 	.word	0x48001400
 80020b8:	40010400 	.word	0x40010400

080020bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	460b      	mov	r3, r1
 80020c6:	807b      	strh	r3, [r7, #2]
 80020c8:	4613      	mov	r3, r2
 80020ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020cc:	787b      	ldrb	r3, [r7, #1]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d003      	beq.n	80020da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020d2:	887a      	ldrh	r2, [r7, #2]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020d8:	e002      	b.n	80020e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020da:	887a      	ldrh	r2, [r7, #2]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	4603      	mov	r3, r0
 80020f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80020f6:	4b08      	ldr	r3, [pc, #32]	@ (8002118 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020f8:	695a      	ldr	r2, [r3, #20]
 80020fa:	88fb      	ldrh	r3, [r7, #6]
 80020fc:	4013      	ands	r3, r2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d006      	beq.n	8002110 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002102:	4a05      	ldr	r2, [pc, #20]	@ (8002118 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002104:	88fb      	ldrh	r3, [r7, #6]
 8002106:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002108:	88fb      	ldrh	r3, [r7, #6]
 800210a:	4618      	mov	r0, r3
 800210c:	f000 f806 	bl	800211c <HAL_GPIO_EXTI_Callback>
  }
}
 8002110:	bf00      	nop
 8002112:	3708      	adds	r7, #8
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	40010400 	.word	0x40010400

0800211c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	4603      	mov	r3, r0
 8002124:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002126:	bf00      	nop
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
	...

08002134 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d141      	bne.n	80021c6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002142:	4b4b      	ldr	r3, [pc, #300]	@ (8002270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800214a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800214e:	d131      	bne.n	80021b4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002150:	4b47      	ldr	r3, [pc, #284]	@ (8002270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002152:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002156:	4a46      	ldr	r2, [pc, #280]	@ (8002270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002158:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800215c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002160:	4b43      	ldr	r3, [pc, #268]	@ (8002270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002168:	4a41      	ldr	r2, [pc, #260]	@ (8002270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800216a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800216e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002170:	4b40      	ldr	r3, [pc, #256]	@ (8002274 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2232      	movs	r2, #50	@ 0x32
 8002176:	fb02 f303 	mul.w	r3, r2, r3
 800217a:	4a3f      	ldr	r2, [pc, #252]	@ (8002278 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800217c:	fba2 2303 	umull	r2, r3, r2, r3
 8002180:	0c9b      	lsrs	r3, r3, #18
 8002182:	3301      	adds	r3, #1
 8002184:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002186:	e002      	b.n	800218e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	3b01      	subs	r3, #1
 800218c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800218e:	4b38      	ldr	r3, [pc, #224]	@ (8002270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002196:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800219a:	d102      	bne.n	80021a2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d1f2      	bne.n	8002188 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021a2:	4b33      	ldr	r3, [pc, #204]	@ (8002270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021ae:	d158      	bne.n	8002262 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e057      	b.n	8002264 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80021b4:	4b2e      	ldr	r3, [pc, #184]	@ (8002270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80021ba:	4a2d      	ldr	r2, [pc, #180]	@ (8002270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80021c0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80021c4:	e04d      	b.n	8002262 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021cc:	d141      	bne.n	8002252 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80021ce:	4b28      	ldr	r3, [pc, #160]	@ (8002270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80021d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021da:	d131      	bne.n	8002240 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80021dc:	4b24      	ldr	r3, [pc, #144]	@ (8002270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80021e2:	4a23      	ldr	r2, [pc, #140]	@ (8002270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021ec:	4b20      	ldr	r3, [pc, #128]	@ (8002270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80021f4:	4a1e      	ldr	r2, [pc, #120]	@ (8002270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002274 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2232      	movs	r2, #50	@ 0x32
 8002202:	fb02 f303 	mul.w	r3, r2, r3
 8002206:	4a1c      	ldr	r2, [pc, #112]	@ (8002278 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002208:	fba2 2303 	umull	r2, r3, r2, r3
 800220c:	0c9b      	lsrs	r3, r3, #18
 800220e:	3301      	adds	r3, #1
 8002210:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002212:	e002      	b.n	800221a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	3b01      	subs	r3, #1
 8002218:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800221a:	4b15      	ldr	r3, [pc, #84]	@ (8002270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800221c:	695b      	ldr	r3, [r3, #20]
 800221e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002222:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002226:	d102      	bne.n	800222e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1f2      	bne.n	8002214 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800222e:	4b10      	ldr	r3, [pc, #64]	@ (8002270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002230:	695b      	ldr	r3, [r3, #20]
 8002232:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002236:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800223a:	d112      	bne.n	8002262 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e011      	b.n	8002264 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002240:	4b0b      	ldr	r3, [pc, #44]	@ (8002270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002242:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002246:	4a0a      	ldr	r2, [pc, #40]	@ (8002270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002248:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800224c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002250:	e007      	b.n	8002262 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002252:	4b07      	ldr	r3, [pc, #28]	@ (8002270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800225a:	4a05      	ldr	r2, [pc, #20]	@ (8002270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800225c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002260:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002262:	2300      	movs	r3, #0
}
 8002264:	4618      	mov	r0, r3
 8002266:	3714      	adds	r7, #20
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	40007000 	.word	0x40007000
 8002274:	20000000 	.word	0x20000000
 8002278:	431bde83 	.word	0x431bde83

0800227c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002280:	4b05      	ldr	r3, [pc, #20]	@ (8002298 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	4a04      	ldr	r2, [pc, #16]	@ (8002298 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002286:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800228a:	6093      	str	r3, [r2, #8]
}
 800228c:	bf00      	nop
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	40007000 	.word	0x40007000

0800229c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b088      	sub	sp, #32
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e2fe      	b.n	80028ac <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d075      	beq.n	80023a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022ba:	4b97      	ldr	r3, [pc, #604]	@ (8002518 <HAL_RCC_OscConfig+0x27c>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f003 030c 	and.w	r3, r3, #12
 80022c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022c4:	4b94      	ldr	r3, [pc, #592]	@ (8002518 <HAL_RCC_OscConfig+0x27c>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	f003 0303 	and.w	r3, r3, #3
 80022cc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	2b0c      	cmp	r3, #12
 80022d2:	d102      	bne.n	80022da <HAL_RCC_OscConfig+0x3e>
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	2b03      	cmp	r3, #3
 80022d8:	d002      	beq.n	80022e0 <HAL_RCC_OscConfig+0x44>
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	2b08      	cmp	r3, #8
 80022de:	d10b      	bne.n	80022f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e0:	4b8d      	ldr	r3, [pc, #564]	@ (8002518 <HAL_RCC_OscConfig+0x27c>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d05b      	beq.n	80023a4 <HAL_RCC_OscConfig+0x108>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d157      	bne.n	80023a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e2d9      	b.n	80028ac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002300:	d106      	bne.n	8002310 <HAL_RCC_OscConfig+0x74>
 8002302:	4b85      	ldr	r3, [pc, #532]	@ (8002518 <HAL_RCC_OscConfig+0x27c>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a84      	ldr	r2, [pc, #528]	@ (8002518 <HAL_RCC_OscConfig+0x27c>)
 8002308:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800230c:	6013      	str	r3, [r2, #0]
 800230e:	e01d      	b.n	800234c <HAL_RCC_OscConfig+0xb0>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002318:	d10c      	bne.n	8002334 <HAL_RCC_OscConfig+0x98>
 800231a:	4b7f      	ldr	r3, [pc, #508]	@ (8002518 <HAL_RCC_OscConfig+0x27c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a7e      	ldr	r2, [pc, #504]	@ (8002518 <HAL_RCC_OscConfig+0x27c>)
 8002320:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002324:	6013      	str	r3, [r2, #0]
 8002326:	4b7c      	ldr	r3, [pc, #496]	@ (8002518 <HAL_RCC_OscConfig+0x27c>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a7b      	ldr	r2, [pc, #492]	@ (8002518 <HAL_RCC_OscConfig+0x27c>)
 800232c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002330:	6013      	str	r3, [r2, #0]
 8002332:	e00b      	b.n	800234c <HAL_RCC_OscConfig+0xb0>
 8002334:	4b78      	ldr	r3, [pc, #480]	@ (8002518 <HAL_RCC_OscConfig+0x27c>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a77      	ldr	r2, [pc, #476]	@ (8002518 <HAL_RCC_OscConfig+0x27c>)
 800233a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800233e:	6013      	str	r3, [r2, #0]
 8002340:	4b75      	ldr	r3, [pc, #468]	@ (8002518 <HAL_RCC_OscConfig+0x27c>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a74      	ldr	r2, [pc, #464]	@ (8002518 <HAL_RCC_OscConfig+0x27c>)
 8002346:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800234a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d013      	beq.n	800237c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002354:	f7ff fb32 	bl	80019bc <HAL_GetTick>
 8002358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800235a:	e008      	b.n	800236e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800235c:	f7ff fb2e 	bl	80019bc <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b64      	cmp	r3, #100	@ 0x64
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e29e      	b.n	80028ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800236e:	4b6a      	ldr	r3, [pc, #424]	@ (8002518 <HAL_RCC_OscConfig+0x27c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d0f0      	beq.n	800235c <HAL_RCC_OscConfig+0xc0>
 800237a:	e014      	b.n	80023a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237c:	f7ff fb1e 	bl	80019bc <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002384:	f7ff fb1a 	bl	80019bc <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b64      	cmp	r3, #100	@ 0x64
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e28a      	b.n	80028ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002396:	4b60      	ldr	r3, [pc, #384]	@ (8002518 <HAL_RCC_OscConfig+0x27c>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1f0      	bne.n	8002384 <HAL_RCC_OscConfig+0xe8>
 80023a2:	e000      	b.n	80023a6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d075      	beq.n	800249e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023b2:	4b59      	ldr	r3, [pc, #356]	@ (8002518 <HAL_RCC_OscConfig+0x27c>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f003 030c 	and.w	r3, r3, #12
 80023ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023bc:	4b56      	ldr	r3, [pc, #344]	@ (8002518 <HAL_RCC_OscConfig+0x27c>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	f003 0303 	and.w	r3, r3, #3
 80023c4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	2b0c      	cmp	r3, #12
 80023ca:	d102      	bne.n	80023d2 <HAL_RCC_OscConfig+0x136>
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d002      	beq.n	80023d8 <HAL_RCC_OscConfig+0x13c>
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	2b04      	cmp	r3, #4
 80023d6:	d11f      	bne.n	8002418 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023d8:	4b4f      	ldr	r3, [pc, #316]	@ (8002518 <HAL_RCC_OscConfig+0x27c>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d005      	beq.n	80023f0 <HAL_RCC_OscConfig+0x154>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d101      	bne.n	80023f0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e25d      	b.n	80028ac <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023f0:	4b49      	ldr	r3, [pc, #292]	@ (8002518 <HAL_RCC_OscConfig+0x27c>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	691b      	ldr	r3, [r3, #16]
 80023fc:	061b      	lsls	r3, r3, #24
 80023fe:	4946      	ldr	r1, [pc, #280]	@ (8002518 <HAL_RCC_OscConfig+0x27c>)
 8002400:	4313      	orrs	r3, r2
 8002402:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002404:	4b45      	ldr	r3, [pc, #276]	@ (800251c <HAL_RCC_OscConfig+0x280>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff fa8b 	bl	8001924 <HAL_InitTick>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d043      	beq.n	800249c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e249      	b.n	80028ac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d023      	beq.n	8002468 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002420:	4b3d      	ldr	r3, [pc, #244]	@ (8002518 <HAL_RCC_OscConfig+0x27c>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a3c      	ldr	r2, [pc, #240]	@ (8002518 <HAL_RCC_OscConfig+0x27c>)
 8002426:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800242a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800242c:	f7ff fac6 	bl	80019bc <HAL_GetTick>
 8002430:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002432:	e008      	b.n	8002446 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002434:	f7ff fac2 	bl	80019bc <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b02      	cmp	r3, #2
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e232      	b.n	80028ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002446:	4b34      	ldr	r3, [pc, #208]	@ (8002518 <HAL_RCC_OscConfig+0x27c>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800244e:	2b00      	cmp	r3, #0
 8002450:	d0f0      	beq.n	8002434 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002452:	4b31      	ldr	r3, [pc, #196]	@ (8002518 <HAL_RCC_OscConfig+0x27c>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	061b      	lsls	r3, r3, #24
 8002460:	492d      	ldr	r1, [pc, #180]	@ (8002518 <HAL_RCC_OscConfig+0x27c>)
 8002462:	4313      	orrs	r3, r2
 8002464:	604b      	str	r3, [r1, #4]
 8002466:	e01a      	b.n	800249e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002468:	4b2b      	ldr	r3, [pc, #172]	@ (8002518 <HAL_RCC_OscConfig+0x27c>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a2a      	ldr	r2, [pc, #168]	@ (8002518 <HAL_RCC_OscConfig+0x27c>)
 800246e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002472:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002474:	f7ff faa2 	bl	80019bc <HAL_GetTick>
 8002478:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800247a:	e008      	b.n	800248e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800247c:	f7ff fa9e 	bl	80019bc <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b02      	cmp	r3, #2
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e20e      	b.n	80028ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800248e:	4b22      	ldr	r3, [pc, #136]	@ (8002518 <HAL_RCC_OscConfig+0x27c>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002496:	2b00      	cmp	r3, #0
 8002498:	d1f0      	bne.n	800247c <HAL_RCC_OscConfig+0x1e0>
 800249a:	e000      	b.n	800249e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800249c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0308 	and.w	r3, r3, #8
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d041      	beq.n	800252e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	695b      	ldr	r3, [r3, #20]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d01c      	beq.n	80024ec <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024b2:	4b19      	ldr	r3, [pc, #100]	@ (8002518 <HAL_RCC_OscConfig+0x27c>)
 80024b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024b8:	4a17      	ldr	r2, [pc, #92]	@ (8002518 <HAL_RCC_OscConfig+0x27c>)
 80024ba:	f043 0301 	orr.w	r3, r3, #1
 80024be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c2:	f7ff fa7b 	bl	80019bc <HAL_GetTick>
 80024c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024c8:	e008      	b.n	80024dc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024ca:	f7ff fa77 	bl	80019bc <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e1e7      	b.n	80028ac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024dc:	4b0e      	ldr	r3, [pc, #56]	@ (8002518 <HAL_RCC_OscConfig+0x27c>)
 80024de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d0ef      	beq.n	80024ca <HAL_RCC_OscConfig+0x22e>
 80024ea:	e020      	b.n	800252e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002518 <HAL_RCC_OscConfig+0x27c>)
 80024ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024f2:	4a09      	ldr	r2, [pc, #36]	@ (8002518 <HAL_RCC_OscConfig+0x27c>)
 80024f4:	f023 0301 	bic.w	r3, r3, #1
 80024f8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024fc:	f7ff fa5e 	bl	80019bc <HAL_GetTick>
 8002500:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002502:	e00d      	b.n	8002520 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002504:	f7ff fa5a 	bl	80019bc <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d906      	bls.n	8002520 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e1ca      	b.n	80028ac <HAL_RCC_OscConfig+0x610>
 8002516:	bf00      	nop
 8002518:	40021000 	.word	0x40021000
 800251c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002520:	4b8c      	ldr	r3, [pc, #560]	@ (8002754 <HAL_RCC_OscConfig+0x4b8>)
 8002522:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1ea      	bne.n	8002504 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0304 	and.w	r3, r3, #4
 8002536:	2b00      	cmp	r3, #0
 8002538:	f000 80a6 	beq.w	8002688 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800253c:	2300      	movs	r3, #0
 800253e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002540:	4b84      	ldr	r3, [pc, #528]	@ (8002754 <HAL_RCC_OscConfig+0x4b8>)
 8002542:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002544:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d101      	bne.n	8002550 <HAL_RCC_OscConfig+0x2b4>
 800254c:	2301      	movs	r3, #1
 800254e:	e000      	b.n	8002552 <HAL_RCC_OscConfig+0x2b6>
 8002550:	2300      	movs	r3, #0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d00d      	beq.n	8002572 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002556:	4b7f      	ldr	r3, [pc, #508]	@ (8002754 <HAL_RCC_OscConfig+0x4b8>)
 8002558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800255a:	4a7e      	ldr	r2, [pc, #504]	@ (8002754 <HAL_RCC_OscConfig+0x4b8>)
 800255c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002560:	6593      	str	r3, [r2, #88]	@ 0x58
 8002562:	4b7c      	ldr	r3, [pc, #496]	@ (8002754 <HAL_RCC_OscConfig+0x4b8>)
 8002564:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002566:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800256e:	2301      	movs	r3, #1
 8002570:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002572:	4b79      	ldr	r3, [pc, #484]	@ (8002758 <HAL_RCC_OscConfig+0x4bc>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800257a:	2b00      	cmp	r3, #0
 800257c:	d118      	bne.n	80025b0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800257e:	4b76      	ldr	r3, [pc, #472]	@ (8002758 <HAL_RCC_OscConfig+0x4bc>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a75      	ldr	r2, [pc, #468]	@ (8002758 <HAL_RCC_OscConfig+0x4bc>)
 8002584:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002588:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800258a:	f7ff fa17 	bl	80019bc <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002590:	e008      	b.n	80025a4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002592:	f7ff fa13 	bl	80019bc <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e183      	b.n	80028ac <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025a4:	4b6c      	ldr	r3, [pc, #432]	@ (8002758 <HAL_RCC_OscConfig+0x4bc>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d0f0      	beq.n	8002592 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d108      	bne.n	80025ca <HAL_RCC_OscConfig+0x32e>
 80025b8:	4b66      	ldr	r3, [pc, #408]	@ (8002754 <HAL_RCC_OscConfig+0x4b8>)
 80025ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025be:	4a65      	ldr	r2, [pc, #404]	@ (8002754 <HAL_RCC_OscConfig+0x4b8>)
 80025c0:	f043 0301 	orr.w	r3, r3, #1
 80025c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025c8:	e024      	b.n	8002614 <HAL_RCC_OscConfig+0x378>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	2b05      	cmp	r3, #5
 80025d0:	d110      	bne.n	80025f4 <HAL_RCC_OscConfig+0x358>
 80025d2:	4b60      	ldr	r3, [pc, #384]	@ (8002754 <HAL_RCC_OscConfig+0x4b8>)
 80025d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025d8:	4a5e      	ldr	r2, [pc, #376]	@ (8002754 <HAL_RCC_OscConfig+0x4b8>)
 80025da:	f043 0304 	orr.w	r3, r3, #4
 80025de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025e2:	4b5c      	ldr	r3, [pc, #368]	@ (8002754 <HAL_RCC_OscConfig+0x4b8>)
 80025e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025e8:	4a5a      	ldr	r2, [pc, #360]	@ (8002754 <HAL_RCC_OscConfig+0x4b8>)
 80025ea:	f043 0301 	orr.w	r3, r3, #1
 80025ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025f2:	e00f      	b.n	8002614 <HAL_RCC_OscConfig+0x378>
 80025f4:	4b57      	ldr	r3, [pc, #348]	@ (8002754 <HAL_RCC_OscConfig+0x4b8>)
 80025f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025fa:	4a56      	ldr	r2, [pc, #344]	@ (8002754 <HAL_RCC_OscConfig+0x4b8>)
 80025fc:	f023 0301 	bic.w	r3, r3, #1
 8002600:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002604:	4b53      	ldr	r3, [pc, #332]	@ (8002754 <HAL_RCC_OscConfig+0x4b8>)
 8002606:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800260a:	4a52      	ldr	r2, [pc, #328]	@ (8002754 <HAL_RCC_OscConfig+0x4b8>)
 800260c:	f023 0304 	bic.w	r3, r3, #4
 8002610:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d016      	beq.n	800264a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800261c:	f7ff f9ce 	bl	80019bc <HAL_GetTick>
 8002620:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002622:	e00a      	b.n	800263a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002624:	f7ff f9ca 	bl	80019bc <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002632:	4293      	cmp	r3, r2
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e138      	b.n	80028ac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800263a:	4b46      	ldr	r3, [pc, #280]	@ (8002754 <HAL_RCC_OscConfig+0x4b8>)
 800263c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d0ed      	beq.n	8002624 <HAL_RCC_OscConfig+0x388>
 8002648:	e015      	b.n	8002676 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800264a:	f7ff f9b7 	bl	80019bc <HAL_GetTick>
 800264e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002650:	e00a      	b.n	8002668 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002652:	f7ff f9b3 	bl	80019bc <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002660:	4293      	cmp	r3, r2
 8002662:	d901      	bls.n	8002668 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e121      	b.n	80028ac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002668:	4b3a      	ldr	r3, [pc, #232]	@ (8002754 <HAL_RCC_OscConfig+0x4b8>)
 800266a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1ed      	bne.n	8002652 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002676:	7ffb      	ldrb	r3, [r7, #31]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d105      	bne.n	8002688 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800267c:	4b35      	ldr	r3, [pc, #212]	@ (8002754 <HAL_RCC_OscConfig+0x4b8>)
 800267e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002680:	4a34      	ldr	r2, [pc, #208]	@ (8002754 <HAL_RCC_OscConfig+0x4b8>)
 8002682:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002686:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0320 	and.w	r3, r3, #32
 8002690:	2b00      	cmp	r3, #0
 8002692:	d03c      	beq.n	800270e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d01c      	beq.n	80026d6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800269c:	4b2d      	ldr	r3, [pc, #180]	@ (8002754 <HAL_RCC_OscConfig+0x4b8>)
 800269e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80026a2:	4a2c      	ldr	r2, [pc, #176]	@ (8002754 <HAL_RCC_OscConfig+0x4b8>)
 80026a4:	f043 0301 	orr.w	r3, r3, #1
 80026a8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ac:	f7ff f986 	bl	80019bc <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026b4:	f7ff f982 	bl	80019bc <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e0f2      	b.n	80028ac <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80026c6:	4b23      	ldr	r3, [pc, #140]	@ (8002754 <HAL_RCC_OscConfig+0x4b8>)
 80026c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d0ef      	beq.n	80026b4 <HAL_RCC_OscConfig+0x418>
 80026d4:	e01b      	b.n	800270e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80026d6:	4b1f      	ldr	r3, [pc, #124]	@ (8002754 <HAL_RCC_OscConfig+0x4b8>)
 80026d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80026dc:	4a1d      	ldr	r2, [pc, #116]	@ (8002754 <HAL_RCC_OscConfig+0x4b8>)
 80026de:	f023 0301 	bic.w	r3, r3, #1
 80026e2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e6:	f7ff f969 	bl	80019bc <HAL_GetTick>
 80026ea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026ec:	e008      	b.n	8002700 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026ee:	f7ff f965 	bl	80019bc <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d901      	bls.n	8002700 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e0d5      	b.n	80028ac <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002700:	4b14      	ldr	r3, [pc, #80]	@ (8002754 <HAL_RCC_OscConfig+0x4b8>)
 8002702:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1ef      	bne.n	80026ee <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	2b00      	cmp	r3, #0
 8002714:	f000 80c9 	beq.w	80028aa <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002718:	4b0e      	ldr	r3, [pc, #56]	@ (8002754 <HAL_RCC_OscConfig+0x4b8>)
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f003 030c 	and.w	r3, r3, #12
 8002720:	2b0c      	cmp	r3, #12
 8002722:	f000 8083 	beq.w	800282c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	69db      	ldr	r3, [r3, #28]
 800272a:	2b02      	cmp	r3, #2
 800272c:	d15e      	bne.n	80027ec <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800272e:	4b09      	ldr	r3, [pc, #36]	@ (8002754 <HAL_RCC_OscConfig+0x4b8>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a08      	ldr	r2, [pc, #32]	@ (8002754 <HAL_RCC_OscConfig+0x4b8>)
 8002734:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002738:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800273a:	f7ff f93f 	bl	80019bc <HAL_GetTick>
 800273e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002740:	e00c      	b.n	800275c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002742:	f7ff f93b 	bl	80019bc <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d905      	bls.n	800275c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e0ab      	b.n	80028ac <HAL_RCC_OscConfig+0x610>
 8002754:	40021000 	.word	0x40021000
 8002758:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800275c:	4b55      	ldr	r3, [pc, #340]	@ (80028b4 <HAL_RCC_OscConfig+0x618>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1ec      	bne.n	8002742 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002768:	4b52      	ldr	r3, [pc, #328]	@ (80028b4 <HAL_RCC_OscConfig+0x618>)
 800276a:	68da      	ldr	r2, [r3, #12]
 800276c:	4b52      	ldr	r3, [pc, #328]	@ (80028b8 <HAL_RCC_OscConfig+0x61c>)
 800276e:	4013      	ands	r3, r2
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	6a11      	ldr	r1, [r2, #32]
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002778:	3a01      	subs	r2, #1
 800277a:	0112      	lsls	r2, r2, #4
 800277c:	4311      	orrs	r1, r2
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002782:	0212      	lsls	r2, r2, #8
 8002784:	4311      	orrs	r1, r2
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800278a:	0852      	lsrs	r2, r2, #1
 800278c:	3a01      	subs	r2, #1
 800278e:	0552      	lsls	r2, r2, #21
 8002790:	4311      	orrs	r1, r2
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002796:	0852      	lsrs	r2, r2, #1
 8002798:	3a01      	subs	r2, #1
 800279a:	0652      	lsls	r2, r2, #25
 800279c:	4311      	orrs	r1, r2
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80027a2:	06d2      	lsls	r2, r2, #27
 80027a4:	430a      	orrs	r2, r1
 80027a6:	4943      	ldr	r1, [pc, #268]	@ (80028b4 <HAL_RCC_OscConfig+0x618>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027ac:	4b41      	ldr	r3, [pc, #260]	@ (80028b4 <HAL_RCC_OscConfig+0x618>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a40      	ldr	r2, [pc, #256]	@ (80028b4 <HAL_RCC_OscConfig+0x618>)
 80027b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027b6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027b8:	4b3e      	ldr	r3, [pc, #248]	@ (80028b4 <HAL_RCC_OscConfig+0x618>)
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	4a3d      	ldr	r2, [pc, #244]	@ (80028b4 <HAL_RCC_OscConfig+0x618>)
 80027be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027c2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c4:	f7ff f8fa 	bl	80019bc <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027ca:	e008      	b.n	80027de <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027cc:	f7ff f8f6 	bl	80019bc <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e066      	b.n	80028ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027de:	4b35      	ldr	r3, [pc, #212]	@ (80028b4 <HAL_RCC_OscConfig+0x618>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d0f0      	beq.n	80027cc <HAL_RCC_OscConfig+0x530>
 80027ea:	e05e      	b.n	80028aa <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ec:	4b31      	ldr	r3, [pc, #196]	@ (80028b4 <HAL_RCC_OscConfig+0x618>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a30      	ldr	r2, [pc, #192]	@ (80028b4 <HAL_RCC_OscConfig+0x618>)
 80027f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f8:	f7ff f8e0 	bl	80019bc <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002800:	f7ff f8dc 	bl	80019bc <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e04c      	b.n	80028ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002812:	4b28      	ldr	r3, [pc, #160]	@ (80028b4 <HAL_RCC_OscConfig+0x618>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1f0      	bne.n	8002800 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800281e:	4b25      	ldr	r3, [pc, #148]	@ (80028b4 <HAL_RCC_OscConfig+0x618>)
 8002820:	68da      	ldr	r2, [r3, #12]
 8002822:	4924      	ldr	r1, [pc, #144]	@ (80028b4 <HAL_RCC_OscConfig+0x618>)
 8002824:	4b25      	ldr	r3, [pc, #148]	@ (80028bc <HAL_RCC_OscConfig+0x620>)
 8002826:	4013      	ands	r3, r2
 8002828:	60cb      	str	r3, [r1, #12]
 800282a:	e03e      	b.n	80028aa <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	69db      	ldr	r3, [r3, #28]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d101      	bne.n	8002838 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e039      	b.n	80028ac <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002838:	4b1e      	ldr	r3, [pc, #120]	@ (80028b4 <HAL_RCC_OscConfig+0x618>)
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	f003 0203 	and.w	r2, r3, #3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a1b      	ldr	r3, [r3, #32]
 8002848:	429a      	cmp	r2, r3
 800284a:	d12c      	bne.n	80028a6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002856:	3b01      	subs	r3, #1
 8002858:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800285a:	429a      	cmp	r2, r3
 800285c:	d123      	bne.n	80028a6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002868:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800286a:	429a      	cmp	r2, r3
 800286c:	d11b      	bne.n	80028a6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002878:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800287a:	429a      	cmp	r2, r3
 800287c:	d113      	bne.n	80028a6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002888:	085b      	lsrs	r3, r3, #1
 800288a:	3b01      	subs	r3, #1
 800288c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800288e:	429a      	cmp	r2, r3
 8002890:	d109      	bne.n	80028a6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800289c:	085b      	lsrs	r3, r3, #1
 800289e:	3b01      	subs	r3, #1
 80028a0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d001      	beq.n	80028aa <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e000      	b.n	80028ac <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3720      	adds	r7, #32
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	40021000 	.word	0x40021000
 80028b8:	019f800c 	.word	0x019f800c
 80028bc:	feeefffc 	.word	0xfeeefffc

080028c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b086      	sub	sp, #24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80028ca:	2300      	movs	r3, #0
 80028cc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d101      	bne.n	80028d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e11e      	b.n	8002b16 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028d8:	4b91      	ldr	r3, [pc, #580]	@ (8002b20 <HAL_RCC_ClockConfig+0x260>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 030f 	and.w	r3, r3, #15
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d910      	bls.n	8002908 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028e6:	4b8e      	ldr	r3, [pc, #568]	@ (8002b20 <HAL_RCC_ClockConfig+0x260>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f023 020f 	bic.w	r2, r3, #15
 80028ee:	498c      	ldr	r1, [pc, #560]	@ (8002b20 <HAL_RCC_ClockConfig+0x260>)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028f6:	4b8a      	ldr	r3, [pc, #552]	@ (8002b20 <HAL_RCC_ClockConfig+0x260>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 030f 	and.w	r3, r3, #15
 80028fe:	683a      	ldr	r2, [r7, #0]
 8002900:	429a      	cmp	r2, r3
 8002902:	d001      	beq.n	8002908 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e106      	b.n	8002b16 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0301 	and.w	r3, r3, #1
 8002910:	2b00      	cmp	r3, #0
 8002912:	d073      	beq.n	80029fc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	2b03      	cmp	r3, #3
 800291a:	d129      	bne.n	8002970 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800291c:	4b81      	ldr	r3, [pc, #516]	@ (8002b24 <HAL_RCC_ClockConfig+0x264>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d101      	bne.n	800292c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e0f4      	b.n	8002b16 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800292c:	f000 f9e4 	bl	8002cf8 <RCC_GetSysClockFreqFromPLLSource>
 8002930:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	4a7c      	ldr	r2, [pc, #496]	@ (8002b28 <HAL_RCC_ClockConfig+0x268>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d93f      	bls.n	80029ba <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800293a:	4b7a      	ldr	r3, [pc, #488]	@ (8002b24 <HAL_RCC_ClockConfig+0x264>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d009      	beq.n	800295a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800294e:	2b00      	cmp	r3, #0
 8002950:	d033      	beq.n	80029ba <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002956:	2b00      	cmp	r3, #0
 8002958:	d12f      	bne.n	80029ba <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800295a:	4b72      	ldr	r3, [pc, #456]	@ (8002b24 <HAL_RCC_ClockConfig+0x264>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002962:	4a70      	ldr	r2, [pc, #448]	@ (8002b24 <HAL_RCC_ClockConfig+0x264>)
 8002964:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002968:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800296a:	2380      	movs	r3, #128	@ 0x80
 800296c:	617b      	str	r3, [r7, #20]
 800296e:	e024      	b.n	80029ba <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	2b02      	cmp	r3, #2
 8002976:	d107      	bne.n	8002988 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002978:	4b6a      	ldr	r3, [pc, #424]	@ (8002b24 <HAL_RCC_ClockConfig+0x264>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d109      	bne.n	8002998 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e0c6      	b.n	8002b16 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002988:	4b66      	ldr	r3, [pc, #408]	@ (8002b24 <HAL_RCC_ClockConfig+0x264>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002990:	2b00      	cmp	r3, #0
 8002992:	d101      	bne.n	8002998 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e0be      	b.n	8002b16 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002998:	f000 f914 	bl	8002bc4 <HAL_RCC_GetSysClockFreq>
 800299c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	4a61      	ldr	r2, [pc, #388]	@ (8002b28 <HAL_RCC_ClockConfig+0x268>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d909      	bls.n	80029ba <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80029a6:	4b5f      	ldr	r3, [pc, #380]	@ (8002b24 <HAL_RCC_ClockConfig+0x264>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80029ae:	4a5d      	ldr	r2, [pc, #372]	@ (8002b24 <HAL_RCC_ClockConfig+0x264>)
 80029b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029b4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80029b6:	2380      	movs	r3, #128	@ 0x80
 80029b8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029ba:	4b5a      	ldr	r3, [pc, #360]	@ (8002b24 <HAL_RCC_ClockConfig+0x264>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f023 0203 	bic.w	r2, r3, #3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	4957      	ldr	r1, [pc, #348]	@ (8002b24 <HAL_RCC_ClockConfig+0x264>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029cc:	f7fe fff6 	bl	80019bc <HAL_GetTick>
 80029d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029d2:	e00a      	b.n	80029ea <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029d4:	f7fe fff2 	bl	80019bc <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e095      	b.n	8002b16 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ea:	4b4e      	ldr	r3, [pc, #312]	@ (8002b24 <HAL_RCC_ClockConfig+0x264>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f003 020c 	and.w	r2, r3, #12
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d1eb      	bne.n	80029d4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d023      	beq.n	8002a50 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0304 	and.w	r3, r3, #4
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d005      	beq.n	8002a20 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a14:	4b43      	ldr	r3, [pc, #268]	@ (8002b24 <HAL_RCC_ClockConfig+0x264>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	4a42      	ldr	r2, [pc, #264]	@ (8002b24 <HAL_RCC_ClockConfig+0x264>)
 8002a1a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002a1e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0308 	and.w	r3, r3, #8
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d007      	beq.n	8002a3c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002a2c:	4b3d      	ldr	r3, [pc, #244]	@ (8002b24 <HAL_RCC_ClockConfig+0x264>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002a34:	4a3b      	ldr	r2, [pc, #236]	@ (8002b24 <HAL_RCC_ClockConfig+0x264>)
 8002a36:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002a3a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a3c:	4b39      	ldr	r3, [pc, #228]	@ (8002b24 <HAL_RCC_ClockConfig+0x264>)
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	4936      	ldr	r1, [pc, #216]	@ (8002b24 <HAL_RCC_ClockConfig+0x264>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	608b      	str	r3, [r1, #8]
 8002a4e:	e008      	b.n	8002a62 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	2b80      	cmp	r3, #128	@ 0x80
 8002a54:	d105      	bne.n	8002a62 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002a56:	4b33      	ldr	r3, [pc, #204]	@ (8002b24 <HAL_RCC_ClockConfig+0x264>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	4a32      	ldr	r2, [pc, #200]	@ (8002b24 <HAL_RCC_ClockConfig+0x264>)
 8002a5c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a60:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a62:	4b2f      	ldr	r3, [pc, #188]	@ (8002b20 <HAL_RCC_ClockConfig+0x260>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 030f 	and.w	r3, r3, #15
 8002a6a:	683a      	ldr	r2, [r7, #0]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d21d      	bcs.n	8002aac <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a70:	4b2b      	ldr	r3, [pc, #172]	@ (8002b20 <HAL_RCC_ClockConfig+0x260>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f023 020f 	bic.w	r2, r3, #15
 8002a78:	4929      	ldr	r1, [pc, #164]	@ (8002b20 <HAL_RCC_ClockConfig+0x260>)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a80:	f7fe ff9c 	bl	80019bc <HAL_GetTick>
 8002a84:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a86:	e00a      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a88:	f7fe ff98 	bl	80019bc <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e03b      	b.n	8002b16 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a9e:	4b20      	ldr	r3, [pc, #128]	@ (8002b20 <HAL_RCC_ClockConfig+0x260>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 030f 	and.w	r3, r3, #15
 8002aa6:	683a      	ldr	r2, [r7, #0]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d1ed      	bne.n	8002a88 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0304 	and.w	r3, r3, #4
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d008      	beq.n	8002aca <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ab8:	4b1a      	ldr	r3, [pc, #104]	@ (8002b24 <HAL_RCC_ClockConfig+0x264>)
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	4917      	ldr	r1, [pc, #92]	@ (8002b24 <HAL_RCC_ClockConfig+0x264>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0308 	and.w	r3, r3, #8
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d009      	beq.n	8002aea <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ad6:	4b13      	ldr	r3, [pc, #76]	@ (8002b24 <HAL_RCC_ClockConfig+0x264>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	490f      	ldr	r1, [pc, #60]	@ (8002b24 <HAL_RCC_ClockConfig+0x264>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002aea:	f000 f86b 	bl	8002bc4 <HAL_RCC_GetSysClockFreq>
 8002aee:	4602      	mov	r2, r0
 8002af0:	4b0c      	ldr	r3, [pc, #48]	@ (8002b24 <HAL_RCC_ClockConfig+0x264>)
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	091b      	lsrs	r3, r3, #4
 8002af6:	f003 030f 	and.w	r3, r3, #15
 8002afa:	490c      	ldr	r1, [pc, #48]	@ (8002b2c <HAL_RCC_ClockConfig+0x26c>)
 8002afc:	5ccb      	ldrb	r3, [r1, r3]
 8002afe:	f003 031f 	and.w	r3, r3, #31
 8002b02:	fa22 f303 	lsr.w	r3, r2, r3
 8002b06:	4a0a      	ldr	r2, [pc, #40]	@ (8002b30 <HAL_RCC_ClockConfig+0x270>)
 8002b08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002b0a:	4b0a      	ldr	r3, [pc, #40]	@ (8002b34 <HAL_RCC_ClockConfig+0x274>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7fe ff08 	bl	8001924 <HAL_InitTick>
 8002b14:	4603      	mov	r3, r0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3718      	adds	r7, #24
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	40022000 	.word	0x40022000
 8002b24:	40021000 	.word	0x40021000
 8002b28:	04c4b400 	.word	0x04c4b400
 8002b2c:	0800931c 	.word	0x0800931c
 8002b30:	20000000 	.word	0x20000000
 8002b34:	20000004 	.word	0x20000004

08002b38 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b08c      	sub	sp, #48	@ 0x30
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 8002b44:	2302      	movs	r3, #2
 8002b46:	617b      	str	r3, [r7, #20]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	61fb      	str	r3, [r7, #28]
  gpio_initstruct.Pull      = GPIO_NOPULL;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	61bb      	str	r3, [r7, #24]

  /* Get MCOx selection */
  mcoindex = RCC_MCOx & RCC_MCO_INDEX_MASK;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b56:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	0c1b      	lsrs	r3, r3, #16
 8002b5c:	f003 030f 	and.w	r3, r3, #15
 8002b60:	f503 1390 	add.w	r3, r3, #1179648	@ 0x120000
 8002b64:	029b      	lsls	r3, r3, #10
 8002b66:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	0c1b      	lsrs	r3, r3, #16
 8002b6c:	f003 030f 	and.w	r3, r3, #15
 8002b70:	627b      	str	r3, [r7, #36]	@ 0x24
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index ));
 8002b72:	4b13      	ldr	r3, [pc, #76]	@ (8002bc0 <HAL_RCC_MCOConfig+0x88>)
 8002b74:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002b76:	2101      	movs	r1, #1
 8002b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b7e:	4910      	ldr	r1, [pc, #64]	@ (8002bc0 <HAL_RCC_MCOConfig+0x88>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	64cb      	str	r3, [r1, #76]	@ 0x4c

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	613b      	str	r3, [r7, #16]
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	0d1b      	lsrs	r3, r3, #20
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 8002b92:	f107 0310 	add.w	r3, r7, #16
 8002b96:	4619      	mov	r1, r3
 8002b98:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002b9a:	f7ff f90d 	bl	8001db8 <HAL_GPIO_Init>

   if (mcoindex == RCC_MCO1_INDEX)
 8002b9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d109      	bne.n	8002bb8 <HAL_RCC_MCOConfig+0x80>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 8002ba4:	4b06      	ldr	r3, [pc, #24]	@ (8002bc0 <HAL_RCC_MCOConfig+0x88>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002bac:	68b9      	ldr	r1, [r7, #8]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	430b      	orrs	r3, r1
 8002bb2:	4903      	ldr	r1, [pc, #12]	@ (8002bc0 <HAL_RCC_MCOConfig+0x88>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	608b      	str	r3, [r1, #8]
  }
}
 8002bb8:	bf00      	nop
 8002bba:	3730      	adds	r7, #48	@ 0x30
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40021000 	.word	0x40021000

08002bc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b087      	sub	sp, #28
 8002bc8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002bca:	4b2c      	ldr	r3, [pc, #176]	@ (8002c7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f003 030c 	and.w	r3, r3, #12
 8002bd2:	2b04      	cmp	r3, #4
 8002bd4:	d102      	bne.n	8002bdc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002bd6:	4b2a      	ldr	r3, [pc, #168]	@ (8002c80 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002bd8:	613b      	str	r3, [r7, #16]
 8002bda:	e047      	b.n	8002c6c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002bdc:	4b27      	ldr	r3, [pc, #156]	@ (8002c7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f003 030c 	and.w	r3, r3, #12
 8002be4:	2b08      	cmp	r3, #8
 8002be6:	d102      	bne.n	8002bee <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002be8:	4b26      	ldr	r3, [pc, #152]	@ (8002c84 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002bea:	613b      	str	r3, [r7, #16]
 8002bec:	e03e      	b.n	8002c6c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002bee:	4b23      	ldr	r3, [pc, #140]	@ (8002c7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f003 030c 	and.w	r3, r3, #12
 8002bf6:	2b0c      	cmp	r3, #12
 8002bf8:	d136      	bne.n	8002c68 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002bfa:	4b20      	ldr	r3, [pc, #128]	@ (8002c7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	f003 0303 	and.w	r3, r3, #3
 8002c02:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c04:	4b1d      	ldr	r3, [pc, #116]	@ (8002c7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	091b      	lsrs	r3, r3, #4
 8002c0a:	f003 030f 	and.w	r3, r3, #15
 8002c0e:	3301      	adds	r3, #1
 8002c10:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2b03      	cmp	r3, #3
 8002c16:	d10c      	bne.n	8002c32 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c18:	4a1a      	ldr	r2, [pc, #104]	@ (8002c84 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c20:	4a16      	ldr	r2, [pc, #88]	@ (8002c7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c22:	68d2      	ldr	r2, [r2, #12]
 8002c24:	0a12      	lsrs	r2, r2, #8
 8002c26:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002c2a:	fb02 f303 	mul.w	r3, r2, r3
 8002c2e:	617b      	str	r3, [r7, #20]
      break;
 8002c30:	e00c      	b.n	8002c4c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c32:	4a13      	ldr	r2, [pc, #76]	@ (8002c80 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c3a:	4a10      	ldr	r2, [pc, #64]	@ (8002c7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c3c:	68d2      	ldr	r2, [r2, #12]
 8002c3e:	0a12      	lsrs	r2, r2, #8
 8002c40:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002c44:	fb02 f303 	mul.w	r3, r2, r3
 8002c48:	617b      	str	r3, [r7, #20]
      break;
 8002c4a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002c7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	0e5b      	lsrs	r3, r3, #25
 8002c52:	f003 0303 	and.w	r3, r3, #3
 8002c56:	3301      	adds	r3, #1
 8002c58:	005b      	lsls	r3, r3, #1
 8002c5a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002c5c:	697a      	ldr	r2, [r7, #20]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c64:	613b      	str	r3, [r7, #16]
 8002c66:	e001      	b.n	8002c6c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002c6c:	693b      	ldr	r3, [r7, #16]
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	371c      	adds	r7, #28
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	40021000 	.word	0x40021000
 8002c80:	00f42400 	.word	0x00f42400
 8002c84:	016e3600 	.word	0x016e3600

08002c88 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c8c:	4b03      	ldr	r3, [pc, #12]	@ (8002c9c <HAL_RCC_GetHCLKFreq+0x14>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	20000000 	.word	0x20000000

08002ca0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002ca4:	f7ff fff0 	bl	8002c88 <HAL_RCC_GetHCLKFreq>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	4b06      	ldr	r3, [pc, #24]	@ (8002cc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	0a1b      	lsrs	r3, r3, #8
 8002cb0:	f003 0307 	and.w	r3, r3, #7
 8002cb4:	4904      	ldr	r1, [pc, #16]	@ (8002cc8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002cb6:	5ccb      	ldrb	r3, [r1, r3]
 8002cb8:	f003 031f 	and.w	r3, r3, #31
 8002cbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	0800932c 	.word	0x0800932c

08002ccc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002cd0:	f7ff ffda 	bl	8002c88 <HAL_RCC_GetHCLKFreq>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	4b06      	ldr	r3, [pc, #24]	@ (8002cf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	0adb      	lsrs	r3, r3, #11
 8002cdc:	f003 0307 	and.w	r3, r3, #7
 8002ce0:	4904      	ldr	r1, [pc, #16]	@ (8002cf4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ce2:	5ccb      	ldrb	r3, [r1, r3]
 8002ce4:	f003 031f 	and.w	r3, r3, #31
 8002ce8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	0800932c 	.word	0x0800932c

08002cf8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b087      	sub	sp, #28
 8002cfc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002cfe:	4b1e      	ldr	r3, [pc, #120]	@ (8002d78 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	f003 0303 	and.w	r3, r3, #3
 8002d06:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d08:	4b1b      	ldr	r3, [pc, #108]	@ (8002d78 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	091b      	lsrs	r3, r3, #4
 8002d0e:	f003 030f 	and.w	r3, r3, #15
 8002d12:	3301      	adds	r3, #1
 8002d14:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	2b03      	cmp	r3, #3
 8002d1a:	d10c      	bne.n	8002d36 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d1c:	4a17      	ldr	r2, [pc, #92]	@ (8002d7c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d24:	4a14      	ldr	r2, [pc, #80]	@ (8002d78 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d26:	68d2      	ldr	r2, [r2, #12]
 8002d28:	0a12      	lsrs	r2, r2, #8
 8002d2a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002d2e:	fb02 f303 	mul.w	r3, r2, r3
 8002d32:	617b      	str	r3, [r7, #20]
    break;
 8002d34:	e00c      	b.n	8002d50 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d36:	4a12      	ldr	r2, [pc, #72]	@ (8002d80 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d3e:	4a0e      	ldr	r2, [pc, #56]	@ (8002d78 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d40:	68d2      	ldr	r2, [r2, #12]
 8002d42:	0a12      	lsrs	r2, r2, #8
 8002d44:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002d48:	fb02 f303 	mul.w	r3, r2, r3
 8002d4c:	617b      	str	r3, [r7, #20]
    break;
 8002d4e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d50:	4b09      	ldr	r3, [pc, #36]	@ (8002d78 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	0e5b      	lsrs	r3, r3, #25
 8002d56:	f003 0303 	and.w	r3, r3, #3
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002d60:	697a      	ldr	r2, [r7, #20]
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d68:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002d6a:	687b      	ldr	r3, [r7, #4]
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	371c      	adds	r7, #28
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	016e3600 	.word	0x016e3600
 8002d80:	00f42400 	.word	0x00f42400

08002d84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b086      	sub	sp, #24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d90:	2300      	movs	r3, #0
 8002d92:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	f000 8098 	beq.w	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002da2:	2300      	movs	r3, #0
 8002da4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002da6:	4b43      	ldr	r3, [pc, #268]	@ (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002da8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002daa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d10d      	bne.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002db2:	4b40      	ldr	r3, [pc, #256]	@ (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002db4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002db6:	4a3f      	ldr	r2, [pc, #252]	@ (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002db8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dbc:	6593      	str	r3, [r2, #88]	@ 0x58
 8002dbe:	4b3d      	ldr	r3, [pc, #244]	@ (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002dc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dc6:	60bb      	str	r3, [r7, #8]
 8002dc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dce:	4b3a      	ldr	r3, [pc, #232]	@ (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a39      	ldr	r2, [pc, #228]	@ (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002dd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dd8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002dda:	f7fe fdef 	bl	80019bc <HAL_GetTick>
 8002dde:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002de0:	e009      	b.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002de2:	f7fe fdeb 	bl	80019bc <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d902      	bls.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	74fb      	strb	r3, [r7, #19]
        break;
 8002df4:	e005      	b.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002df6:	4b30      	ldr	r3, [pc, #192]	@ (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d0ef      	beq.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002e02:	7cfb      	ldrb	r3, [r7, #19]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d159      	bne.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e08:	4b2a      	ldr	r3, [pc, #168]	@ (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e12:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d01e      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e1e:	697a      	ldr	r2, [r7, #20]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d019      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e24:	4b23      	ldr	r3, [pc, #140]	@ (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e2e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e30:	4b20      	ldr	r3, [pc, #128]	@ (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e36:	4a1f      	ldr	r2, [pc, #124]	@ (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e40:	4b1c      	ldr	r3, [pc, #112]	@ (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e46:	4a1b      	ldr	r2, [pc, #108]	@ (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e50:	4a18      	ldr	r2, [pc, #96]	@ (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d016      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e62:	f7fe fdab 	bl	80019bc <HAL_GetTick>
 8002e66:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e68:	e00b      	b.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e6a:	f7fe fda7 	bl	80019bc <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d902      	bls.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	74fb      	strb	r3, [r7, #19]
            break;
 8002e80:	e006      	b.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e82:	4b0c      	ldr	r3, [pc, #48]	@ (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e88:	f003 0302 	and.w	r3, r3, #2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d0ec      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002e90:	7cfb      	ldrb	r3, [r7, #19]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d10b      	bne.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e96:	4b07      	ldr	r3, [pc, #28]	@ (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e9c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ea4:	4903      	ldr	r1, [pc, #12]	@ (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002eac:	e008      	b.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002eae:	7cfb      	ldrb	r3, [r7, #19]
 8002eb0:	74bb      	strb	r3, [r7, #18]
 8002eb2:	e005      	b.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002eb4:	40021000 	.word	0x40021000
 8002eb8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ebc:	7cfb      	ldrb	r3, [r7, #19]
 8002ebe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ec0:	7c7b      	ldrb	r3, [r7, #17]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d105      	bne.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ec6:	4ba7      	ldr	r3, [pc, #668]	@ (8003164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eca:	4aa6      	ldr	r2, [pc, #664]	@ (8003164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ecc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ed0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00a      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ede:	4ba1      	ldr	r3, [pc, #644]	@ (8003164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ee4:	f023 0203 	bic.w	r2, r3, #3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	499d      	ldr	r1, [pc, #628]	@ (8003164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00a      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f00:	4b98      	ldr	r3, [pc, #608]	@ (8003164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f06:	f023 020c 	bic.w	r2, r3, #12
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	4995      	ldr	r1, [pc, #596]	@ (8003164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0304 	and.w	r3, r3, #4
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00a      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f22:	4b90      	ldr	r3, [pc, #576]	@ (8003164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f28:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	498c      	ldr	r1, [pc, #560]	@ (8003164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0308 	and.w	r3, r3, #8
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00a      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f44:	4b87      	ldr	r3, [pc, #540]	@ (8003164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f4a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	4984      	ldr	r1, [pc, #528]	@ (8003164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0310 	and.w	r3, r3, #16
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00a      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f66:	4b7f      	ldr	r3, [pc, #508]	@ (8003164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f6c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	695b      	ldr	r3, [r3, #20]
 8002f74:	497b      	ldr	r1, [pc, #492]	@ (8003164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0320 	and.w	r3, r3, #32
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d00a      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f88:	4b76      	ldr	r3, [pc, #472]	@ (8003164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f8e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	4973      	ldr	r1, [pc, #460]	@ (8003164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00a      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002faa:	4b6e      	ldr	r3, [pc, #440]	@ (8003164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fb0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	69db      	ldr	r3, [r3, #28]
 8002fb8:	496a      	ldr	r1, [pc, #424]	@ (8003164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d00a      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002fcc:	4b65      	ldr	r3, [pc, #404]	@ (8003164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fd2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a1b      	ldr	r3, [r3, #32]
 8002fda:	4962      	ldr	r1, [pc, #392]	@ (8003164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00a      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002fee:	4b5d      	ldr	r3, [pc, #372]	@ (8003164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ff4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ffc:	4959      	ldr	r1, [pc, #356]	@ (8003164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d00a      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003010:	4b54      	ldr	r3, [pc, #336]	@ (8003164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003012:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003016:	f023 0203 	bic.w	r2, r3, #3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800301e:	4951      	ldr	r1, [pc, #324]	@ (8003164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003020:	4313      	orrs	r3, r2
 8003022:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00a      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003032:	4b4c      	ldr	r3, [pc, #304]	@ (8003164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003034:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003038:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003040:	4948      	ldr	r1, [pc, #288]	@ (8003164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003042:	4313      	orrs	r3, r2
 8003044:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003050:	2b00      	cmp	r3, #0
 8003052:	d015      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003054:	4b43      	ldr	r3, [pc, #268]	@ (8003164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003056:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800305a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003062:	4940      	ldr	r1, [pc, #256]	@ (8003164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003064:	4313      	orrs	r3, r2
 8003066:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800306e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003072:	d105      	bne.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003074:	4b3b      	ldr	r3, [pc, #236]	@ (8003164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	4a3a      	ldr	r2, [pc, #232]	@ (8003164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800307a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800307e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003088:	2b00      	cmp	r3, #0
 800308a:	d015      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800308c:	4b35      	ldr	r3, [pc, #212]	@ (8003164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800308e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003092:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800309a:	4932      	ldr	r1, [pc, #200]	@ (8003164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800309c:	4313      	orrs	r3, r2
 800309e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80030aa:	d105      	bne.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030ac:	4b2d      	ldr	r3, [pc, #180]	@ (8003164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	4a2c      	ldr	r2, [pc, #176]	@ (8003164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80030b6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d015      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80030c4:	4b27      	ldr	r3, [pc, #156]	@ (8003164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030ca:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030d2:	4924      	ldr	r1, [pc, #144]	@ (8003164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030e2:	d105      	bne.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030e4:	4b1f      	ldr	r3, [pc, #124]	@ (8003164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	4a1e      	ldr	r2, [pc, #120]	@ (8003164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80030ee:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d015      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030fc:	4b19      	ldr	r3, [pc, #100]	@ (8003164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003102:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800310a:	4916      	ldr	r1, [pc, #88]	@ (8003164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800310c:	4313      	orrs	r3, r2
 800310e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003116:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800311a:	d105      	bne.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800311c:	4b11      	ldr	r3, [pc, #68]	@ (8003164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	4a10      	ldr	r2, [pc, #64]	@ (8003164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003122:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003126:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d019      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003134:	4b0b      	ldr	r3, [pc, #44]	@ (8003164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003136:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800313a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003142:	4908      	ldr	r1, [pc, #32]	@ (8003164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003144:	4313      	orrs	r3, r2
 8003146:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800314e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003152:	d109      	bne.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003154:	4b03      	ldr	r3, [pc, #12]	@ (8003164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	4a02      	ldr	r2, [pc, #8]	@ (8003164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800315a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800315e:	60d3      	str	r3, [r2, #12]
 8003160:	e002      	b.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003162:	bf00      	nop
 8003164:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d015      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003174:	4b29      	ldr	r3, [pc, #164]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003176:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800317a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003182:	4926      	ldr	r1, [pc, #152]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003184:	4313      	orrs	r3, r2
 8003186:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800318e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003192:	d105      	bne.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003194:	4b21      	ldr	r3, [pc, #132]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	4a20      	ldr	r2, [pc, #128]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800319a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800319e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d015      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80031ac:	4b1b      	ldr	r3, [pc, #108]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80031ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031b2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031ba:	4918      	ldr	r1, [pc, #96]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031ca:	d105      	bne.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80031cc:	4b13      	ldr	r3, [pc, #76]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	4a12      	ldr	r2, [pc, #72]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80031d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031d6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d015      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80031e4:	4b0d      	ldr	r3, [pc, #52]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80031e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80031ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031f2:	490a      	ldr	r1, [pc, #40]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003202:	d105      	bne.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003204:	4b05      	ldr	r3, [pc, #20]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	4a04      	ldr	r2, [pc, #16]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800320a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800320e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003210:	7cbb      	ldrb	r3, [r7, #18]
}
 8003212:	4618      	mov	r0, r3
 8003214:	3718      	adds	r7, #24
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	40021000 	.word	0x40021000

08003220 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e09d      	b.n	800336e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003236:	2b00      	cmp	r3, #0
 8003238:	d108      	bne.n	800324c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003242:	d009      	beq.n	8003258 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	61da      	str	r2, [r3, #28]
 800324a:	e005      	b.n	8003258 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003264:	b2db      	uxtb	r3, r3
 8003266:	2b00      	cmp	r3, #0
 8003268:	d106      	bne.n	8003278 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f7fe f962 	bl	800153c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2202      	movs	r2, #2
 800327c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800328e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003298:	d902      	bls.n	80032a0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800329a:	2300      	movs	r3, #0
 800329c:	60fb      	str	r3, [r7, #12]
 800329e:	e002      	b.n	80032a6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80032a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80032a4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80032ae:	d007      	beq.n	80032c0 <HAL_SPI_Init+0xa0>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80032b8:	d002      	beq.n	80032c0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80032d0:	431a      	orrs	r2, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	431a      	orrs	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	695b      	ldr	r3, [r3, #20]
 80032e0:	f003 0301 	and.w	r3, r3, #1
 80032e4:	431a      	orrs	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032ee:	431a      	orrs	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	69db      	ldr	r3, [r3, #28]
 80032f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80032f8:	431a      	orrs	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a1b      	ldr	r3, [r3, #32]
 80032fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003302:	ea42 0103 	orr.w	r1, r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800330a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	430a      	orrs	r2, r1
 8003314:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	0c1b      	lsrs	r3, r3, #16
 800331c:	f003 0204 	and.w	r2, r3, #4
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003324:	f003 0310 	and.w	r3, r3, #16
 8003328:	431a      	orrs	r2, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800332e:	f003 0308 	and.w	r3, r3, #8
 8003332:	431a      	orrs	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800333c:	ea42 0103 	orr.w	r1, r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	430a      	orrs	r2, r1
 800334c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	69da      	ldr	r2, [r3, #28]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800335c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3710      	adds	r7, #16
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
	...

08003378 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b088      	sub	sp, #32
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	099b      	lsrs	r3, r3, #6
 8003394:	f003 0301 	and.w	r3, r3, #1
 8003398:	2b00      	cmp	r3, #0
 800339a:	d10f      	bne.n	80033bc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00a      	beq.n	80033bc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	099b      	lsrs	r3, r3, #6
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d004      	beq.n	80033bc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	4798      	blx	r3
    return;
 80033ba:	e0d7      	b.n	800356c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	085b      	lsrs	r3, r3, #1
 80033c0:	f003 0301 	and.w	r3, r3, #1
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d00a      	beq.n	80033de <HAL_SPI_IRQHandler+0x66>
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	09db      	lsrs	r3, r3, #7
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d004      	beq.n	80033de <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	4798      	blx	r3
    return;
 80033dc:	e0c6      	b.n	800356c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	095b      	lsrs	r3, r3, #5
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d10c      	bne.n	8003404 <HAL_SPI_IRQHandler+0x8c>
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	099b      	lsrs	r3, r3, #6
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d106      	bne.n	8003404 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	0a1b      	lsrs	r3, r3, #8
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	2b00      	cmp	r3, #0
 8003400:	f000 80b4 	beq.w	800356c <HAL_SPI_IRQHandler+0x1f4>
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	095b      	lsrs	r3, r3, #5
 8003408:	f003 0301 	and.w	r3, r3, #1
 800340c:	2b00      	cmp	r3, #0
 800340e:	f000 80ad 	beq.w	800356c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	099b      	lsrs	r3, r3, #6
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	2b00      	cmp	r3, #0
 800341c:	d023      	beq.n	8003466 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b03      	cmp	r3, #3
 8003428:	d011      	beq.n	800344e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800342e:	f043 0204 	orr.w	r2, r3, #4
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003436:	2300      	movs	r3, #0
 8003438:	617b      	str	r3, [r7, #20]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	617b      	str	r3, [r7, #20]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	617b      	str	r3, [r7, #20]
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	e00b      	b.n	8003466 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800344e:	2300      	movs	r3, #0
 8003450:	613b      	str	r3, [r7, #16]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	613b      	str	r3, [r7, #16]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	613b      	str	r3, [r7, #16]
 8003462:	693b      	ldr	r3, [r7, #16]
        return;
 8003464:	e082      	b.n	800356c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	095b      	lsrs	r3, r3, #5
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	2b00      	cmp	r3, #0
 8003470:	d014      	beq.n	800349c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003476:	f043 0201 	orr.w	r2, r3, #1
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800347e:	2300      	movs	r3, #0
 8003480:	60fb      	str	r3, [r7, #12]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	60fb      	str	r3, [r7, #12]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003498:	601a      	str	r2, [r3, #0]
 800349a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	0a1b      	lsrs	r3, r3, #8
 80034a0:	f003 0301 	and.w	r3, r3, #1
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00c      	beq.n	80034c2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034ac:	f043 0208 	orr.w	r2, r3, #8
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80034b4:	2300      	movs	r3, #0
 80034b6:	60bb      	str	r3, [r7, #8]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	60bb      	str	r3, [r7, #8]
 80034c0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d04f      	beq.n	800356a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	685a      	ldr	r2, [r3, #4]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80034d8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2201      	movs	r2, #1
 80034de:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	f003 0302 	and.w	r3, r3, #2
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d104      	bne.n	80034f6 <HAL_SPI_IRQHandler+0x17e>
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d034      	beq.n	8003560 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	685a      	ldr	r2, [r3, #4]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f022 0203 	bic.w	r2, r2, #3
 8003504:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800350a:	2b00      	cmp	r3, #0
 800350c:	d011      	beq.n	8003532 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003512:	4a18      	ldr	r2, [pc, #96]	@ (8003574 <HAL_SPI_IRQHandler+0x1fc>)
 8003514:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800351a:	4618      	mov	r0, r3
 800351c:	f7fe fbe4 	bl	8001ce8 <HAL_DMA_Abort_IT>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d005      	beq.n	8003532 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800352a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003536:	2b00      	cmp	r3, #0
 8003538:	d016      	beq.n	8003568 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800353e:	4a0d      	ldr	r2, [pc, #52]	@ (8003574 <HAL_SPI_IRQHandler+0x1fc>)
 8003540:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003546:	4618      	mov	r0, r3
 8003548:	f7fe fbce 	bl	8001ce8 <HAL_DMA_Abort_IT>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00a      	beq.n	8003568 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003556:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 800355e:	e003      	b.n	8003568 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f000 f809 	bl	8003578 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003566:	e000      	b.n	800356a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003568:	bf00      	nop
    return;
 800356a:	bf00      	nop
  }
}
 800356c:	3720      	adds	r7, #32
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	0800358d 	.word	0x0800358d

08003578 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003580:	bf00      	nop
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003598:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2200      	movs	r2, #0
 800359e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80035a8:	68f8      	ldr	r0, [r7, #12]
 80035aa:	f7ff ffe5 	bl	8003578 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80035ae:	bf00      	nop
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b082      	sub	sp, #8
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d101      	bne.n	80035c8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e042      	b.n	800364e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d106      	bne.n	80035e0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f7fd ff4e 	bl	800147c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2224      	movs	r2, #36	@ 0x24
 80035e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f022 0201 	bic.w	r2, r2, #1
 80035f6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d002      	beq.n	8003606 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 ff15 	bl	8004430 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 fc16 	bl	8003e38 <UART_SetConfig>
 800360c:	4603      	mov	r3, r0
 800360e:	2b01      	cmp	r3, #1
 8003610:	d101      	bne.n	8003616 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e01b      	b.n	800364e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	685a      	ldr	r2, [r3, #4]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003624:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	689a      	ldr	r2, [r3, #8]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003634:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f042 0201 	orr.w	r2, r2, #1
 8003644:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 ff94 	bl	8004574 <UART_CheckIdleState>
 800364c:	4603      	mov	r3, r0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3708      	adds	r7, #8
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003656:	b580      	push	{r7, lr}
 8003658:	b08a      	sub	sp, #40	@ 0x28
 800365a:	af02      	add	r7, sp, #8
 800365c:	60f8      	str	r0, [r7, #12]
 800365e:	60b9      	str	r1, [r7, #8]
 8003660:	603b      	str	r3, [r7, #0]
 8003662:	4613      	mov	r3, r2
 8003664:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800366c:	2b20      	cmp	r3, #32
 800366e:	d17b      	bne.n	8003768 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d002      	beq.n	800367c <HAL_UART_Transmit+0x26>
 8003676:	88fb      	ldrh	r3, [r7, #6]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d101      	bne.n	8003680 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e074      	b.n	800376a <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2221      	movs	r2, #33	@ 0x21
 800368c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003690:	f7fe f994 	bl	80019bc <HAL_GetTick>
 8003694:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	88fa      	ldrh	r2, [r7, #6]
 800369a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	88fa      	ldrh	r2, [r7, #6]
 80036a2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036ae:	d108      	bne.n	80036c2 <HAL_UART_Transmit+0x6c>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	691b      	ldr	r3, [r3, #16]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d104      	bne.n	80036c2 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80036b8:	2300      	movs	r3, #0
 80036ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	61bb      	str	r3, [r7, #24]
 80036c0:	e003      	b.n	80036ca <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036c6:	2300      	movs	r3, #0
 80036c8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80036ca:	e030      	b.n	800372e <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	9300      	str	r3, [sp, #0]
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	2200      	movs	r2, #0
 80036d4:	2180      	movs	r1, #128	@ 0x80
 80036d6:	68f8      	ldr	r0, [r7, #12]
 80036d8:	f000 fff6 	bl	80046c8 <UART_WaitOnFlagUntilTimeout>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d005      	beq.n	80036ee <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2220      	movs	r2, #32
 80036e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e03d      	b.n	800376a <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d10b      	bne.n	800370c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	881b      	ldrh	r3, [r3, #0]
 80036f8:	461a      	mov	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003702:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	3302      	adds	r3, #2
 8003708:	61bb      	str	r3, [r7, #24]
 800370a:	e007      	b.n	800371c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	781a      	ldrb	r2, [r3, #0]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	3301      	adds	r3, #1
 800371a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003722:	b29b      	uxth	r3, r3
 8003724:	3b01      	subs	r3, #1
 8003726:	b29a      	uxth	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003734:	b29b      	uxth	r3, r3
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1c8      	bne.n	80036cc <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	9300      	str	r3, [sp, #0]
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	2200      	movs	r2, #0
 8003742:	2140      	movs	r1, #64	@ 0x40
 8003744:	68f8      	ldr	r0, [r7, #12]
 8003746:	f000 ffbf 	bl	80046c8 <UART_WaitOnFlagUntilTimeout>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d005      	beq.n	800375c <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2220      	movs	r2, #32
 8003754:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e006      	b.n	800376a <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2220      	movs	r2, #32
 8003760:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003764:	2300      	movs	r3, #0
 8003766:	e000      	b.n	800376a <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003768:	2302      	movs	r3, #2
  }
}
 800376a:	4618      	mov	r0, r3
 800376c:	3720      	adds	r7, #32
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
	...

08003774 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b0ba      	sub	sp, #232	@ 0xe8
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	69db      	ldr	r3, [r3, #28]
 8003782:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800379a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800379e:	f640 030f 	movw	r3, #2063	@ 0x80f
 80037a2:	4013      	ands	r3, r2
 80037a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80037a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d11b      	bne.n	80037e8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80037b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037b4:	f003 0320 	and.w	r3, r3, #32
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d015      	beq.n	80037e8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80037bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037c0:	f003 0320 	and.w	r3, r3, #32
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d105      	bne.n	80037d4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80037c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d009      	beq.n	80037e8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037d8:	2b00      	cmp	r3, #0
 80037da:	f000 8300 	beq.w	8003dde <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	4798      	blx	r3
      }
      return;
 80037e6:	e2fa      	b.n	8003dde <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80037e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f000 8123 	beq.w	8003a38 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80037f2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80037f6:	4b8d      	ldr	r3, [pc, #564]	@ (8003a2c <HAL_UART_IRQHandler+0x2b8>)
 80037f8:	4013      	ands	r3, r2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d106      	bne.n	800380c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80037fe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003802:	4b8b      	ldr	r3, [pc, #556]	@ (8003a30 <HAL_UART_IRQHandler+0x2bc>)
 8003804:	4013      	ands	r3, r2
 8003806:	2b00      	cmp	r3, #0
 8003808:	f000 8116 	beq.w	8003a38 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800380c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003810:	f003 0301 	and.w	r3, r3, #1
 8003814:	2b00      	cmp	r3, #0
 8003816:	d011      	beq.n	800383c <HAL_UART_IRQHandler+0xc8>
 8003818:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800381c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00b      	beq.n	800383c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2201      	movs	r2, #1
 800382a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003832:	f043 0201 	orr.w	r2, r3, #1
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800383c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003840:	f003 0302 	and.w	r3, r3, #2
 8003844:	2b00      	cmp	r3, #0
 8003846:	d011      	beq.n	800386c <HAL_UART_IRQHandler+0xf8>
 8003848:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800384c:	f003 0301 	and.w	r3, r3, #1
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00b      	beq.n	800386c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2202      	movs	r2, #2
 800385a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003862:	f043 0204 	orr.w	r2, r3, #4
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800386c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003870:	f003 0304 	and.w	r3, r3, #4
 8003874:	2b00      	cmp	r3, #0
 8003876:	d011      	beq.n	800389c <HAL_UART_IRQHandler+0x128>
 8003878:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800387c:	f003 0301 	and.w	r3, r3, #1
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00b      	beq.n	800389c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2204      	movs	r2, #4
 800388a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003892:	f043 0202 	orr.w	r2, r3, #2
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800389c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038a0:	f003 0308 	and.w	r3, r3, #8
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d017      	beq.n	80038d8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80038a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038ac:	f003 0320 	and.w	r3, r3, #32
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d105      	bne.n	80038c0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80038b4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80038b8:	4b5c      	ldr	r3, [pc, #368]	@ (8003a2c <HAL_UART_IRQHandler+0x2b8>)
 80038ba:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d00b      	beq.n	80038d8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2208      	movs	r2, #8
 80038c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ce:	f043 0208 	orr.w	r2, r3, #8
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80038d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d012      	beq.n	800390a <HAL_UART_IRQHandler+0x196>
 80038e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038e8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00c      	beq.n	800390a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80038f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003900:	f043 0220 	orr.w	r2, r3, #32
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003910:	2b00      	cmp	r3, #0
 8003912:	f000 8266 	beq.w	8003de2 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800391a:	f003 0320 	and.w	r3, r3, #32
 800391e:	2b00      	cmp	r3, #0
 8003920:	d013      	beq.n	800394a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003922:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003926:	f003 0320 	and.w	r3, r3, #32
 800392a:	2b00      	cmp	r3, #0
 800392c:	d105      	bne.n	800393a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800392e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003932:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d007      	beq.n	800394a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800393e:	2b00      	cmp	r3, #0
 8003940:	d003      	beq.n	800394a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003950:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800395e:	2b40      	cmp	r3, #64	@ 0x40
 8003960:	d005      	beq.n	800396e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003962:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003966:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800396a:	2b00      	cmp	r3, #0
 800396c:	d054      	beq.n	8003a18 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 ff17 	bl	80047a2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800397e:	2b40      	cmp	r3, #64	@ 0x40
 8003980:	d146      	bne.n	8003a10 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	3308      	adds	r3, #8
 8003988:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800398c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003990:	e853 3f00 	ldrex	r3, [r3]
 8003994:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003998:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800399c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80039a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	3308      	adds	r3, #8
 80039aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80039ae:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80039b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80039ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80039be:	e841 2300 	strex	r3, r2, [r1]
 80039c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80039c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1d9      	bne.n	8003982 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d017      	beq.n	8003a08 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039de:	4a15      	ldr	r2, [pc, #84]	@ (8003a34 <HAL_UART_IRQHandler+0x2c0>)
 80039e0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039e8:	4618      	mov	r0, r3
 80039ea:	f7fe f97d 	bl	8001ce8 <HAL_DMA_Abort_IT>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d019      	beq.n	8003a28 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8003a02:	4610      	mov	r0, r2
 8003a04:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a06:	e00f      	b.n	8003a28 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f000 f9ff 	bl	8003e0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a0e:	e00b      	b.n	8003a28 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f000 f9fb 	bl	8003e0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a16:	e007      	b.n	8003a28 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f000 f9f7 	bl	8003e0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8003a26:	e1dc      	b.n	8003de2 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a28:	bf00      	nop
    return;
 8003a2a:	e1da      	b.n	8003de2 <HAL_UART_IRQHandler+0x66e>
 8003a2c:	10000001 	.word	0x10000001
 8003a30:	04000120 	.word	0x04000120
 8003a34:	0800486f 	.word	0x0800486f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	f040 8170 	bne.w	8003d22 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a46:	f003 0310 	and.w	r3, r3, #16
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	f000 8169 	beq.w	8003d22 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003a50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a54:	f003 0310 	and.w	r3, r3, #16
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	f000 8162 	beq.w	8003d22 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2210      	movs	r2, #16
 8003a64:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a70:	2b40      	cmp	r3, #64	@ 0x40
 8003a72:	f040 80d8 	bne.w	8003c26 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a84:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	f000 80af 	beq.w	8003bec <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003a94:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	f080 80a7 	bcs.w	8003bec <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003aa4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0320 	and.w	r3, r3, #32
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	f040 8087 	bne.w	8003bca <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ac8:	e853 3f00 	ldrex	r3, [r3]
 8003acc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003ad0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003ad4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ad8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003ae6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003aea:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aee:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003af2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003af6:	e841 2300 	strex	r3, r2, [r1]
 8003afa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003afe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d1da      	bne.n	8003abc <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	3308      	adds	r3, #8
 8003b0c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b10:	e853 3f00 	ldrex	r3, [r3]
 8003b14:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003b16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003b18:	f023 0301 	bic.w	r3, r3, #1
 8003b1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	3308      	adds	r3, #8
 8003b26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003b2a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003b2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b30:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003b32:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003b36:	e841 2300 	strex	r3, r2, [r1]
 8003b3a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003b3c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1e1      	bne.n	8003b06 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	3308      	adds	r3, #8
 8003b48:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b4c:	e853 3f00 	ldrex	r3, [r3]
 8003b50:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003b52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	3308      	adds	r3, #8
 8003b62:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003b66:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003b68:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b6a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003b6c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003b6e:	e841 2300 	strex	r3, r2, [r1]
 8003b72:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003b74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1e3      	bne.n	8003b42 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2220      	movs	r2, #32
 8003b7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b90:	e853 3f00 	ldrex	r3, [r3]
 8003b94:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003b96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b98:	f023 0310 	bic.w	r3, r3, #16
 8003b9c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003baa:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003bac:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003bb0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003bb2:	e841 2300 	strex	r3, r2, [r1]
 8003bb6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003bb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1e4      	bne.n	8003b88 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f7fe f836 	bl	8001c36 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2202      	movs	r2, #2
 8003bce:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	4619      	mov	r1, r3
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f000 f91b 	bl	8003e20 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003bea:	e0fc      	b.n	8003de6 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003bf2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	f040 80f5 	bne.w	8003de6 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0320 	and.w	r3, r3, #32
 8003c0a:	2b20      	cmp	r3, #32
 8003c0c:	f040 80eb 	bne.w	8003de6 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2202      	movs	r2, #2
 8003c14:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 f8fe 	bl	8003e20 <HAL_UARTEx_RxEventCallback>
      return;
 8003c24:	e0df      	b.n	8003de6 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	f000 80d1 	beq.w	8003dea <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8003c48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	f000 80cc 	beq.w	8003dea <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c5a:	e853 3f00 	ldrex	r3, [r3]
 8003c5e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003c60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c62:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c66:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	461a      	mov	r2, r3
 8003c70:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003c74:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c76:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c78:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003c7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c7c:	e841 2300 	strex	r3, r2, [r1]
 8003c80:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003c82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d1e4      	bne.n	8003c52 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	3308      	adds	r3, #8
 8003c8e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c92:	e853 3f00 	ldrex	r3, [r3]
 8003c96:	623b      	str	r3, [r7, #32]
   return(result);
 8003c98:	6a3b      	ldr	r3, [r7, #32]
 8003c9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c9e:	f023 0301 	bic.w	r3, r3, #1
 8003ca2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	3308      	adds	r3, #8
 8003cac:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003cb0:	633a      	str	r2, [r7, #48]	@ 0x30
 8003cb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003cb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cb8:	e841 2300 	strex	r3, r2, [r1]
 8003cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d1e1      	bne.n	8003c88 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2220      	movs	r2, #32
 8003cc8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	e853 3f00 	ldrex	r3, [r3]
 8003ce4:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f023 0310 	bic.w	r3, r3, #16
 8003cec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003cfa:	61fb      	str	r3, [r7, #28]
 8003cfc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cfe:	69b9      	ldr	r1, [r7, #24]
 8003d00:	69fa      	ldr	r2, [r7, #28]
 8003d02:	e841 2300 	strex	r3, r2, [r1]
 8003d06:	617b      	str	r3, [r7, #20]
   return(result);
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d1e4      	bne.n	8003cd8 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2202      	movs	r2, #2
 8003d12:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003d18:	4619      	mov	r1, r3
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 f880 	bl	8003e20 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003d20:	e063      	b.n	8003dea <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00e      	beq.n	8003d4c <HAL_UART_IRQHandler+0x5d8>
 8003d2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d008      	beq.n	8003d4c <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003d42:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f000 fdcf 	bl	80048e8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003d4a:	e051      	b.n	8003df0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003d4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d014      	beq.n	8003d82 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003d58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d105      	bne.n	8003d70 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003d64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d68:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d008      	beq.n	8003d82 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d03a      	beq.n	8003dee <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	4798      	blx	r3
    }
    return;
 8003d80:	e035      	b.n	8003dee <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d009      	beq.n	8003da2 <HAL_UART_IRQHandler+0x62e>
 8003d8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d003      	beq.n	8003da2 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f000 fd79 	bl	8004892 <UART_EndTransmit_IT>
    return;
 8003da0:	e026      	b.n	8003df0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003da6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d009      	beq.n	8003dc2 <HAL_UART_IRQHandler+0x64e>
 8003dae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003db2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d003      	beq.n	8003dc2 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 fda8 	bl	8004910 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003dc0:	e016      	b.n	8003df0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dc6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d010      	beq.n	8003df0 <HAL_UART_IRQHandler+0x67c>
 8003dce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	da0c      	bge.n	8003df0 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 fd90 	bl	80048fc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003ddc:	e008      	b.n	8003df0 <HAL_UART_IRQHandler+0x67c>
      return;
 8003dde:	bf00      	nop
 8003de0:	e006      	b.n	8003df0 <HAL_UART_IRQHandler+0x67c>
    return;
 8003de2:	bf00      	nop
 8003de4:	e004      	b.n	8003df0 <HAL_UART_IRQHandler+0x67c>
      return;
 8003de6:	bf00      	nop
 8003de8:	e002      	b.n	8003df0 <HAL_UART_IRQHandler+0x67c>
      return;
 8003dea:	bf00      	nop
 8003dec:	e000      	b.n	8003df0 <HAL_UART_IRQHandler+0x67c>
    return;
 8003dee:	bf00      	nop
  }
}
 8003df0:	37e8      	adds	r7, #232	@ 0xe8
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop

08003df8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003e00:	bf00      	nop
 8003e02:	370c      	adds	r7, #12
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003e14:	bf00      	nop
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	460b      	mov	r3, r1
 8003e2a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e2c:	bf00      	nop
 8003e2e:	370c      	adds	r7, #12
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e3c:	b08c      	sub	sp, #48	@ 0x30
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e42:	2300      	movs	r3, #0
 8003e44:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	689a      	ldr	r2, [r3, #8]
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	431a      	orrs	r2, r3
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	695b      	ldr	r3, [r3, #20]
 8003e56:	431a      	orrs	r2, r3
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	69db      	ldr	r3, [r3, #28]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	4baa      	ldr	r3, [pc, #680]	@ (8004110 <UART_SetConfig+0x2d8>)
 8003e68:	4013      	ands	r3, r2
 8003e6a:	697a      	ldr	r2, [r7, #20]
 8003e6c:	6812      	ldr	r2, [r2, #0]
 8003e6e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e70:	430b      	orrs	r3, r1
 8003e72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	68da      	ldr	r2, [r3, #12]
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	430a      	orrs	r2, r1
 8003e88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a9f      	ldr	r2, [pc, #636]	@ (8004114 <UART_SetConfig+0x2dc>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d004      	beq.n	8003ea4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003eae:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003eb2:	697a      	ldr	r2, [r7, #20]
 8003eb4:	6812      	ldr	r2, [r2, #0]
 8003eb6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003eb8:	430b      	orrs	r3, r1
 8003eba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ec2:	f023 010f 	bic.w	r1, r3, #15
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	430a      	orrs	r2, r1
 8003ed0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a90      	ldr	r2, [pc, #576]	@ (8004118 <UART_SetConfig+0x2e0>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d125      	bne.n	8003f28 <UART_SetConfig+0xf0>
 8003edc:	4b8f      	ldr	r3, [pc, #572]	@ (800411c <UART_SetConfig+0x2e4>)
 8003ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ee2:	f003 0303 	and.w	r3, r3, #3
 8003ee6:	2b03      	cmp	r3, #3
 8003ee8:	d81a      	bhi.n	8003f20 <UART_SetConfig+0xe8>
 8003eea:	a201      	add	r2, pc, #4	@ (adr r2, 8003ef0 <UART_SetConfig+0xb8>)
 8003eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef0:	08003f01 	.word	0x08003f01
 8003ef4:	08003f11 	.word	0x08003f11
 8003ef8:	08003f09 	.word	0x08003f09
 8003efc:	08003f19 	.word	0x08003f19
 8003f00:	2301      	movs	r3, #1
 8003f02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f06:	e116      	b.n	8004136 <UART_SetConfig+0x2fe>
 8003f08:	2302      	movs	r3, #2
 8003f0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f0e:	e112      	b.n	8004136 <UART_SetConfig+0x2fe>
 8003f10:	2304      	movs	r3, #4
 8003f12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f16:	e10e      	b.n	8004136 <UART_SetConfig+0x2fe>
 8003f18:	2308      	movs	r3, #8
 8003f1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f1e:	e10a      	b.n	8004136 <UART_SetConfig+0x2fe>
 8003f20:	2310      	movs	r3, #16
 8003f22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f26:	e106      	b.n	8004136 <UART_SetConfig+0x2fe>
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a7c      	ldr	r2, [pc, #496]	@ (8004120 <UART_SetConfig+0x2e8>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d138      	bne.n	8003fa4 <UART_SetConfig+0x16c>
 8003f32:	4b7a      	ldr	r3, [pc, #488]	@ (800411c <UART_SetConfig+0x2e4>)
 8003f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f38:	f003 030c 	and.w	r3, r3, #12
 8003f3c:	2b0c      	cmp	r3, #12
 8003f3e:	d82d      	bhi.n	8003f9c <UART_SetConfig+0x164>
 8003f40:	a201      	add	r2, pc, #4	@ (adr r2, 8003f48 <UART_SetConfig+0x110>)
 8003f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f46:	bf00      	nop
 8003f48:	08003f7d 	.word	0x08003f7d
 8003f4c:	08003f9d 	.word	0x08003f9d
 8003f50:	08003f9d 	.word	0x08003f9d
 8003f54:	08003f9d 	.word	0x08003f9d
 8003f58:	08003f8d 	.word	0x08003f8d
 8003f5c:	08003f9d 	.word	0x08003f9d
 8003f60:	08003f9d 	.word	0x08003f9d
 8003f64:	08003f9d 	.word	0x08003f9d
 8003f68:	08003f85 	.word	0x08003f85
 8003f6c:	08003f9d 	.word	0x08003f9d
 8003f70:	08003f9d 	.word	0x08003f9d
 8003f74:	08003f9d 	.word	0x08003f9d
 8003f78:	08003f95 	.word	0x08003f95
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f82:	e0d8      	b.n	8004136 <UART_SetConfig+0x2fe>
 8003f84:	2302      	movs	r3, #2
 8003f86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f8a:	e0d4      	b.n	8004136 <UART_SetConfig+0x2fe>
 8003f8c:	2304      	movs	r3, #4
 8003f8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f92:	e0d0      	b.n	8004136 <UART_SetConfig+0x2fe>
 8003f94:	2308      	movs	r3, #8
 8003f96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f9a:	e0cc      	b.n	8004136 <UART_SetConfig+0x2fe>
 8003f9c:	2310      	movs	r3, #16
 8003f9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fa2:	e0c8      	b.n	8004136 <UART_SetConfig+0x2fe>
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a5e      	ldr	r2, [pc, #376]	@ (8004124 <UART_SetConfig+0x2ec>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d125      	bne.n	8003ffa <UART_SetConfig+0x1c2>
 8003fae:	4b5b      	ldr	r3, [pc, #364]	@ (800411c <UART_SetConfig+0x2e4>)
 8003fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fb4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003fb8:	2b30      	cmp	r3, #48	@ 0x30
 8003fba:	d016      	beq.n	8003fea <UART_SetConfig+0x1b2>
 8003fbc:	2b30      	cmp	r3, #48	@ 0x30
 8003fbe:	d818      	bhi.n	8003ff2 <UART_SetConfig+0x1ba>
 8003fc0:	2b20      	cmp	r3, #32
 8003fc2:	d00a      	beq.n	8003fda <UART_SetConfig+0x1a2>
 8003fc4:	2b20      	cmp	r3, #32
 8003fc6:	d814      	bhi.n	8003ff2 <UART_SetConfig+0x1ba>
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d002      	beq.n	8003fd2 <UART_SetConfig+0x19a>
 8003fcc:	2b10      	cmp	r3, #16
 8003fce:	d008      	beq.n	8003fe2 <UART_SetConfig+0x1aa>
 8003fd0:	e00f      	b.n	8003ff2 <UART_SetConfig+0x1ba>
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fd8:	e0ad      	b.n	8004136 <UART_SetConfig+0x2fe>
 8003fda:	2302      	movs	r3, #2
 8003fdc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fe0:	e0a9      	b.n	8004136 <UART_SetConfig+0x2fe>
 8003fe2:	2304      	movs	r3, #4
 8003fe4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fe8:	e0a5      	b.n	8004136 <UART_SetConfig+0x2fe>
 8003fea:	2308      	movs	r3, #8
 8003fec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ff0:	e0a1      	b.n	8004136 <UART_SetConfig+0x2fe>
 8003ff2:	2310      	movs	r3, #16
 8003ff4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ff8:	e09d      	b.n	8004136 <UART_SetConfig+0x2fe>
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a4a      	ldr	r2, [pc, #296]	@ (8004128 <UART_SetConfig+0x2f0>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d125      	bne.n	8004050 <UART_SetConfig+0x218>
 8004004:	4b45      	ldr	r3, [pc, #276]	@ (800411c <UART_SetConfig+0x2e4>)
 8004006:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800400a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800400e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004010:	d016      	beq.n	8004040 <UART_SetConfig+0x208>
 8004012:	2bc0      	cmp	r3, #192	@ 0xc0
 8004014:	d818      	bhi.n	8004048 <UART_SetConfig+0x210>
 8004016:	2b80      	cmp	r3, #128	@ 0x80
 8004018:	d00a      	beq.n	8004030 <UART_SetConfig+0x1f8>
 800401a:	2b80      	cmp	r3, #128	@ 0x80
 800401c:	d814      	bhi.n	8004048 <UART_SetConfig+0x210>
 800401e:	2b00      	cmp	r3, #0
 8004020:	d002      	beq.n	8004028 <UART_SetConfig+0x1f0>
 8004022:	2b40      	cmp	r3, #64	@ 0x40
 8004024:	d008      	beq.n	8004038 <UART_SetConfig+0x200>
 8004026:	e00f      	b.n	8004048 <UART_SetConfig+0x210>
 8004028:	2300      	movs	r3, #0
 800402a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800402e:	e082      	b.n	8004136 <UART_SetConfig+0x2fe>
 8004030:	2302      	movs	r3, #2
 8004032:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004036:	e07e      	b.n	8004136 <UART_SetConfig+0x2fe>
 8004038:	2304      	movs	r3, #4
 800403a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800403e:	e07a      	b.n	8004136 <UART_SetConfig+0x2fe>
 8004040:	2308      	movs	r3, #8
 8004042:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004046:	e076      	b.n	8004136 <UART_SetConfig+0x2fe>
 8004048:	2310      	movs	r3, #16
 800404a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800404e:	e072      	b.n	8004136 <UART_SetConfig+0x2fe>
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a35      	ldr	r2, [pc, #212]	@ (800412c <UART_SetConfig+0x2f4>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d12a      	bne.n	80040b0 <UART_SetConfig+0x278>
 800405a:	4b30      	ldr	r3, [pc, #192]	@ (800411c <UART_SetConfig+0x2e4>)
 800405c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004060:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004064:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004068:	d01a      	beq.n	80040a0 <UART_SetConfig+0x268>
 800406a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800406e:	d81b      	bhi.n	80040a8 <UART_SetConfig+0x270>
 8004070:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004074:	d00c      	beq.n	8004090 <UART_SetConfig+0x258>
 8004076:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800407a:	d815      	bhi.n	80040a8 <UART_SetConfig+0x270>
 800407c:	2b00      	cmp	r3, #0
 800407e:	d003      	beq.n	8004088 <UART_SetConfig+0x250>
 8004080:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004084:	d008      	beq.n	8004098 <UART_SetConfig+0x260>
 8004086:	e00f      	b.n	80040a8 <UART_SetConfig+0x270>
 8004088:	2300      	movs	r3, #0
 800408a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800408e:	e052      	b.n	8004136 <UART_SetConfig+0x2fe>
 8004090:	2302      	movs	r3, #2
 8004092:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004096:	e04e      	b.n	8004136 <UART_SetConfig+0x2fe>
 8004098:	2304      	movs	r3, #4
 800409a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800409e:	e04a      	b.n	8004136 <UART_SetConfig+0x2fe>
 80040a0:	2308      	movs	r3, #8
 80040a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040a6:	e046      	b.n	8004136 <UART_SetConfig+0x2fe>
 80040a8:	2310      	movs	r3, #16
 80040aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040ae:	e042      	b.n	8004136 <UART_SetConfig+0x2fe>
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a17      	ldr	r2, [pc, #92]	@ (8004114 <UART_SetConfig+0x2dc>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d13a      	bne.n	8004130 <UART_SetConfig+0x2f8>
 80040ba:	4b18      	ldr	r3, [pc, #96]	@ (800411c <UART_SetConfig+0x2e4>)
 80040bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040c0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80040c4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80040c8:	d01a      	beq.n	8004100 <UART_SetConfig+0x2c8>
 80040ca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80040ce:	d81b      	bhi.n	8004108 <UART_SetConfig+0x2d0>
 80040d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040d4:	d00c      	beq.n	80040f0 <UART_SetConfig+0x2b8>
 80040d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040da:	d815      	bhi.n	8004108 <UART_SetConfig+0x2d0>
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d003      	beq.n	80040e8 <UART_SetConfig+0x2b0>
 80040e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040e4:	d008      	beq.n	80040f8 <UART_SetConfig+0x2c0>
 80040e6:	e00f      	b.n	8004108 <UART_SetConfig+0x2d0>
 80040e8:	2300      	movs	r3, #0
 80040ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040ee:	e022      	b.n	8004136 <UART_SetConfig+0x2fe>
 80040f0:	2302      	movs	r3, #2
 80040f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040f6:	e01e      	b.n	8004136 <UART_SetConfig+0x2fe>
 80040f8:	2304      	movs	r3, #4
 80040fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040fe:	e01a      	b.n	8004136 <UART_SetConfig+0x2fe>
 8004100:	2308      	movs	r3, #8
 8004102:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004106:	e016      	b.n	8004136 <UART_SetConfig+0x2fe>
 8004108:	2310      	movs	r3, #16
 800410a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800410e:	e012      	b.n	8004136 <UART_SetConfig+0x2fe>
 8004110:	cfff69f3 	.word	0xcfff69f3
 8004114:	40008000 	.word	0x40008000
 8004118:	40013800 	.word	0x40013800
 800411c:	40021000 	.word	0x40021000
 8004120:	40004400 	.word	0x40004400
 8004124:	40004800 	.word	0x40004800
 8004128:	40004c00 	.word	0x40004c00
 800412c:	40005000 	.word	0x40005000
 8004130:	2310      	movs	r3, #16
 8004132:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4aae      	ldr	r2, [pc, #696]	@ (80043f4 <UART_SetConfig+0x5bc>)
 800413c:	4293      	cmp	r3, r2
 800413e:	f040 8097 	bne.w	8004270 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004142:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004146:	2b08      	cmp	r3, #8
 8004148:	d823      	bhi.n	8004192 <UART_SetConfig+0x35a>
 800414a:	a201      	add	r2, pc, #4	@ (adr r2, 8004150 <UART_SetConfig+0x318>)
 800414c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004150:	08004175 	.word	0x08004175
 8004154:	08004193 	.word	0x08004193
 8004158:	0800417d 	.word	0x0800417d
 800415c:	08004193 	.word	0x08004193
 8004160:	08004183 	.word	0x08004183
 8004164:	08004193 	.word	0x08004193
 8004168:	08004193 	.word	0x08004193
 800416c:	08004193 	.word	0x08004193
 8004170:	0800418b 	.word	0x0800418b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004174:	f7fe fd94 	bl	8002ca0 <HAL_RCC_GetPCLK1Freq>
 8004178:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800417a:	e010      	b.n	800419e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800417c:	4b9e      	ldr	r3, [pc, #632]	@ (80043f8 <UART_SetConfig+0x5c0>)
 800417e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004180:	e00d      	b.n	800419e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004182:	f7fe fd1f 	bl	8002bc4 <HAL_RCC_GetSysClockFreq>
 8004186:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004188:	e009      	b.n	800419e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800418a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800418e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004190:	e005      	b.n	800419e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004192:	2300      	movs	r3, #0
 8004194:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800419c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800419e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	f000 8130 	beq.w	8004406 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041aa:	4a94      	ldr	r2, [pc, #592]	@ (80043fc <UART_SetConfig+0x5c4>)
 80041ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80041b0:	461a      	mov	r2, r3
 80041b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80041b8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	685a      	ldr	r2, [r3, #4]
 80041be:	4613      	mov	r3, r2
 80041c0:	005b      	lsls	r3, r3, #1
 80041c2:	4413      	add	r3, r2
 80041c4:	69ba      	ldr	r2, [r7, #24]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d305      	bcc.n	80041d6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80041d0:	69ba      	ldr	r2, [r7, #24]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d903      	bls.n	80041de <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80041dc:	e113      	b.n	8004406 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80041de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e0:	2200      	movs	r2, #0
 80041e2:	60bb      	str	r3, [r7, #8]
 80041e4:	60fa      	str	r2, [r7, #12]
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ea:	4a84      	ldr	r2, [pc, #528]	@ (80043fc <UART_SetConfig+0x5c4>)
 80041ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	2200      	movs	r2, #0
 80041f4:	603b      	str	r3, [r7, #0]
 80041f6:	607a      	str	r2, [r7, #4]
 80041f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041fc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004200:	f7fc fd6a 	bl	8000cd8 <__aeabi_uldivmod>
 8004204:	4602      	mov	r2, r0
 8004206:	460b      	mov	r3, r1
 8004208:	4610      	mov	r0, r2
 800420a:	4619      	mov	r1, r3
 800420c:	f04f 0200 	mov.w	r2, #0
 8004210:	f04f 0300 	mov.w	r3, #0
 8004214:	020b      	lsls	r3, r1, #8
 8004216:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800421a:	0202      	lsls	r2, r0, #8
 800421c:	6979      	ldr	r1, [r7, #20]
 800421e:	6849      	ldr	r1, [r1, #4]
 8004220:	0849      	lsrs	r1, r1, #1
 8004222:	2000      	movs	r0, #0
 8004224:	460c      	mov	r4, r1
 8004226:	4605      	mov	r5, r0
 8004228:	eb12 0804 	adds.w	r8, r2, r4
 800422c:	eb43 0905 	adc.w	r9, r3, r5
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	469a      	mov	sl, r3
 8004238:	4693      	mov	fp, r2
 800423a:	4652      	mov	r2, sl
 800423c:	465b      	mov	r3, fp
 800423e:	4640      	mov	r0, r8
 8004240:	4649      	mov	r1, r9
 8004242:	f7fc fd49 	bl	8000cd8 <__aeabi_uldivmod>
 8004246:	4602      	mov	r2, r0
 8004248:	460b      	mov	r3, r1
 800424a:	4613      	mov	r3, r2
 800424c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800424e:	6a3b      	ldr	r3, [r7, #32]
 8004250:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004254:	d308      	bcc.n	8004268 <UART_SetConfig+0x430>
 8004256:	6a3b      	ldr	r3, [r7, #32]
 8004258:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800425c:	d204      	bcs.n	8004268 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	6a3a      	ldr	r2, [r7, #32]
 8004264:	60da      	str	r2, [r3, #12]
 8004266:	e0ce      	b.n	8004406 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800426e:	e0ca      	b.n	8004406 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	69db      	ldr	r3, [r3, #28]
 8004274:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004278:	d166      	bne.n	8004348 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800427a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800427e:	2b08      	cmp	r3, #8
 8004280:	d827      	bhi.n	80042d2 <UART_SetConfig+0x49a>
 8004282:	a201      	add	r2, pc, #4	@ (adr r2, 8004288 <UART_SetConfig+0x450>)
 8004284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004288:	080042ad 	.word	0x080042ad
 800428c:	080042b5 	.word	0x080042b5
 8004290:	080042bd 	.word	0x080042bd
 8004294:	080042d3 	.word	0x080042d3
 8004298:	080042c3 	.word	0x080042c3
 800429c:	080042d3 	.word	0x080042d3
 80042a0:	080042d3 	.word	0x080042d3
 80042a4:	080042d3 	.word	0x080042d3
 80042a8:	080042cb 	.word	0x080042cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042ac:	f7fe fcf8 	bl	8002ca0 <HAL_RCC_GetPCLK1Freq>
 80042b0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80042b2:	e014      	b.n	80042de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042b4:	f7fe fd0a 	bl	8002ccc <HAL_RCC_GetPCLK2Freq>
 80042b8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80042ba:	e010      	b.n	80042de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042bc:	4b4e      	ldr	r3, [pc, #312]	@ (80043f8 <UART_SetConfig+0x5c0>)
 80042be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80042c0:	e00d      	b.n	80042de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042c2:	f7fe fc7f 	bl	8002bc4 <HAL_RCC_GetSysClockFreq>
 80042c6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80042c8:	e009      	b.n	80042de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042ce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80042d0:	e005      	b.n	80042de <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80042d2:	2300      	movs	r3, #0
 80042d4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80042dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80042de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f000 8090 	beq.w	8004406 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ea:	4a44      	ldr	r2, [pc, #272]	@ (80043fc <UART_SetConfig+0x5c4>)
 80042ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80042f0:	461a      	mov	r2, r3
 80042f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80042f8:	005a      	lsls	r2, r3, #1
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	085b      	lsrs	r3, r3, #1
 8004300:	441a      	add	r2, r3
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	fbb2 f3f3 	udiv	r3, r2, r3
 800430a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800430c:	6a3b      	ldr	r3, [r7, #32]
 800430e:	2b0f      	cmp	r3, #15
 8004310:	d916      	bls.n	8004340 <UART_SetConfig+0x508>
 8004312:	6a3b      	ldr	r3, [r7, #32]
 8004314:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004318:	d212      	bcs.n	8004340 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800431a:	6a3b      	ldr	r3, [r7, #32]
 800431c:	b29b      	uxth	r3, r3
 800431e:	f023 030f 	bic.w	r3, r3, #15
 8004322:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004324:	6a3b      	ldr	r3, [r7, #32]
 8004326:	085b      	lsrs	r3, r3, #1
 8004328:	b29b      	uxth	r3, r3
 800432a:	f003 0307 	and.w	r3, r3, #7
 800432e:	b29a      	uxth	r2, r3
 8004330:	8bfb      	ldrh	r3, [r7, #30]
 8004332:	4313      	orrs	r3, r2
 8004334:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	8bfa      	ldrh	r2, [r7, #30]
 800433c:	60da      	str	r2, [r3, #12]
 800433e:	e062      	b.n	8004406 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004346:	e05e      	b.n	8004406 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004348:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800434c:	2b08      	cmp	r3, #8
 800434e:	d828      	bhi.n	80043a2 <UART_SetConfig+0x56a>
 8004350:	a201      	add	r2, pc, #4	@ (adr r2, 8004358 <UART_SetConfig+0x520>)
 8004352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004356:	bf00      	nop
 8004358:	0800437d 	.word	0x0800437d
 800435c:	08004385 	.word	0x08004385
 8004360:	0800438d 	.word	0x0800438d
 8004364:	080043a3 	.word	0x080043a3
 8004368:	08004393 	.word	0x08004393
 800436c:	080043a3 	.word	0x080043a3
 8004370:	080043a3 	.word	0x080043a3
 8004374:	080043a3 	.word	0x080043a3
 8004378:	0800439b 	.word	0x0800439b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800437c:	f7fe fc90 	bl	8002ca0 <HAL_RCC_GetPCLK1Freq>
 8004380:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004382:	e014      	b.n	80043ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004384:	f7fe fca2 	bl	8002ccc <HAL_RCC_GetPCLK2Freq>
 8004388:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800438a:	e010      	b.n	80043ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800438c:	4b1a      	ldr	r3, [pc, #104]	@ (80043f8 <UART_SetConfig+0x5c0>)
 800438e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004390:	e00d      	b.n	80043ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004392:	f7fe fc17 	bl	8002bc4 <HAL_RCC_GetSysClockFreq>
 8004396:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004398:	e009      	b.n	80043ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800439a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800439e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80043a0:	e005      	b.n	80043ae <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80043a2:	2300      	movs	r3, #0
 80043a4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80043ac:	bf00      	nop
    }

    if (pclk != 0U)
 80043ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d028      	beq.n	8004406 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b8:	4a10      	ldr	r2, [pc, #64]	@ (80043fc <UART_SetConfig+0x5c4>)
 80043ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80043be:	461a      	mov	r2, r3
 80043c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c2:	fbb3 f2f2 	udiv	r2, r3, r2
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	085b      	lsrs	r3, r3, #1
 80043cc:	441a      	add	r2, r3
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043d8:	6a3b      	ldr	r3, [r7, #32]
 80043da:	2b0f      	cmp	r3, #15
 80043dc:	d910      	bls.n	8004400 <UART_SetConfig+0x5c8>
 80043de:	6a3b      	ldr	r3, [r7, #32]
 80043e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043e4:	d20c      	bcs.n	8004400 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80043e6:	6a3b      	ldr	r3, [r7, #32]
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	60da      	str	r2, [r3, #12]
 80043f0:	e009      	b.n	8004406 <UART_SetConfig+0x5ce>
 80043f2:	bf00      	nop
 80043f4:	40008000 	.word	0x40008000
 80043f8:	00f42400 	.word	0x00f42400
 80043fc:	08009334 	.word	0x08009334
      }
      else
      {
        ret = HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	2201      	movs	r2, #1
 800440a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	2201      	movs	r2, #1
 8004412:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	2200      	movs	r2, #0
 800441a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	2200      	movs	r2, #0
 8004420:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004422:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004426:	4618      	mov	r0, r3
 8004428:	3730      	adds	r7, #48	@ 0x30
 800442a:	46bd      	mov	sp, r7
 800442c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004430 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800443c:	f003 0308 	and.w	r3, r3, #8
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00a      	beq.n	800445a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	430a      	orrs	r2, r1
 8004458:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800445e:	f003 0301 	and.w	r3, r3, #1
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00a      	beq.n	800447c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	430a      	orrs	r2, r1
 800447a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004480:	f003 0302 	and.w	r3, r3, #2
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00a      	beq.n	800449e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	430a      	orrs	r2, r1
 800449c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044a2:	f003 0304 	and.w	r3, r3, #4
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00a      	beq.n	80044c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	430a      	orrs	r2, r1
 80044be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044c4:	f003 0310 	and.w	r3, r3, #16
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d00a      	beq.n	80044e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	430a      	orrs	r2, r1
 80044e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044e6:	f003 0320 	and.w	r3, r3, #32
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00a      	beq.n	8004504 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	430a      	orrs	r2, r1
 8004502:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004508:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800450c:	2b00      	cmp	r3, #0
 800450e:	d01a      	beq.n	8004546 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	430a      	orrs	r2, r1
 8004524:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800452a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800452e:	d10a      	bne.n	8004546 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	430a      	orrs	r2, r1
 8004544:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800454a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00a      	beq.n	8004568 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	430a      	orrs	r2, r1
 8004566:	605a      	str	r2, [r3, #4]
  }
}
 8004568:	bf00      	nop
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b098      	sub	sp, #96	@ 0x60
 8004578:	af02      	add	r7, sp, #8
 800457a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004584:	f7fd fa1a 	bl	80019bc <HAL_GetTick>
 8004588:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0308 	and.w	r3, r3, #8
 8004594:	2b08      	cmp	r3, #8
 8004596:	d12f      	bne.n	80045f8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004598:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800459c:	9300      	str	r3, [sp, #0]
 800459e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045a0:	2200      	movs	r2, #0
 80045a2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 f88e 	bl	80046c8 <UART_WaitOnFlagUntilTimeout>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d022      	beq.n	80045f8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045ba:	e853 3f00 	ldrex	r3, [r3]
 80045be:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80045c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	461a      	mov	r2, r3
 80045ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80045d2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80045d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045d8:	e841 2300 	strex	r3, r2, [r1]
 80045dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80045de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d1e6      	bne.n	80045b2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2220      	movs	r2, #32
 80045e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e063      	b.n	80046c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0304 	and.w	r3, r3, #4
 8004602:	2b04      	cmp	r3, #4
 8004604:	d149      	bne.n	800469a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004606:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800460a:	9300      	str	r3, [sp, #0]
 800460c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800460e:	2200      	movs	r2, #0
 8004610:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 f857 	bl	80046c8 <UART_WaitOnFlagUntilTimeout>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d03c      	beq.n	800469a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004628:	e853 3f00 	ldrex	r3, [r3]
 800462c:	623b      	str	r3, [r7, #32]
   return(result);
 800462e:	6a3b      	ldr	r3, [r7, #32]
 8004630:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004634:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	461a      	mov	r2, r3
 800463c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800463e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004640:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004642:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004644:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004646:	e841 2300 	strex	r3, r2, [r1]
 800464a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800464c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800464e:	2b00      	cmp	r3, #0
 8004650:	d1e6      	bne.n	8004620 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	3308      	adds	r3, #8
 8004658:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	e853 3f00 	ldrex	r3, [r3]
 8004660:	60fb      	str	r3, [r7, #12]
   return(result);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f023 0301 	bic.w	r3, r3, #1
 8004668:	64bb      	str	r3, [r7, #72]	@ 0x48
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	3308      	adds	r3, #8
 8004670:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004672:	61fa      	str	r2, [r7, #28]
 8004674:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004676:	69b9      	ldr	r1, [r7, #24]
 8004678:	69fa      	ldr	r2, [r7, #28]
 800467a:	e841 2300 	strex	r3, r2, [r1]
 800467e:	617b      	str	r3, [r7, #20]
   return(result);
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d1e5      	bne.n	8004652 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2220      	movs	r2, #32
 800468a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e012      	b.n	80046c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2220      	movs	r2, #32
 800469e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2220      	movs	r2, #32
 80046a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80046be:	2300      	movs	r3, #0
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3758      	adds	r7, #88	@ 0x58
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	60b9      	str	r1, [r7, #8]
 80046d2:	603b      	str	r3, [r7, #0]
 80046d4:	4613      	mov	r3, r2
 80046d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046d8:	e04f      	b.n	800477a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e0:	d04b      	beq.n	800477a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046e2:	f7fd f96b 	bl	80019bc <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	69ba      	ldr	r2, [r7, #24]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d302      	bcc.n	80046f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d101      	bne.n	80046fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	e04e      	b.n	800479a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0304 	and.w	r3, r3, #4
 8004706:	2b00      	cmp	r3, #0
 8004708:	d037      	beq.n	800477a <UART_WaitOnFlagUntilTimeout+0xb2>
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	2b80      	cmp	r3, #128	@ 0x80
 800470e:	d034      	beq.n	800477a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	2b40      	cmp	r3, #64	@ 0x40
 8004714:	d031      	beq.n	800477a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	69db      	ldr	r3, [r3, #28]
 800471c:	f003 0308 	and.w	r3, r3, #8
 8004720:	2b08      	cmp	r3, #8
 8004722:	d110      	bne.n	8004746 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2208      	movs	r2, #8
 800472a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800472c:	68f8      	ldr	r0, [r7, #12]
 800472e:	f000 f838 	bl	80047a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2208      	movs	r2, #8
 8004736:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e029      	b.n	800479a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	69db      	ldr	r3, [r3, #28]
 800474c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004750:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004754:	d111      	bne.n	800477a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800475e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004760:	68f8      	ldr	r0, [r7, #12]
 8004762:	f000 f81e 	bl	80047a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2220      	movs	r2, #32
 800476a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	e00f      	b.n	800479a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	69da      	ldr	r2, [r3, #28]
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	4013      	ands	r3, r2
 8004784:	68ba      	ldr	r2, [r7, #8]
 8004786:	429a      	cmp	r2, r3
 8004788:	bf0c      	ite	eq
 800478a:	2301      	moveq	r3, #1
 800478c:	2300      	movne	r3, #0
 800478e:	b2db      	uxtb	r3, r3
 8004790:	461a      	mov	r2, r3
 8004792:	79fb      	ldrb	r3, [r7, #7]
 8004794:	429a      	cmp	r2, r3
 8004796:	d0a0      	beq.n	80046da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3710      	adds	r7, #16
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}

080047a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047a2:	b480      	push	{r7}
 80047a4:	b095      	sub	sp, #84	@ 0x54
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047b2:	e853 3f00 	ldrex	r3, [r3]
 80047b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80047b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80047be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	461a      	mov	r2, r3
 80047c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80047ca:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80047ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80047d0:	e841 2300 	strex	r3, r2, [r1]
 80047d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80047d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d1e6      	bne.n	80047aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	3308      	adds	r3, #8
 80047e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e4:	6a3b      	ldr	r3, [r7, #32]
 80047e6:	e853 3f00 	ldrex	r3, [r3]
 80047ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047f2:	f023 0301 	bic.w	r3, r3, #1
 80047f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	3308      	adds	r3, #8
 80047fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004800:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004802:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004804:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004806:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004808:	e841 2300 	strex	r3, r2, [r1]
 800480c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800480e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004810:	2b00      	cmp	r3, #0
 8004812:	d1e3      	bne.n	80047dc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004818:	2b01      	cmp	r3, #1
 800481a:	d118      	bne.n	800484e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	e853 3f00 	ldrex	r3, [r3]
 8004828:	60bb      	str	r3, [r7, #8]
   return(result);
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	f023 0310 	bic.w	r3, r3, #16
 8004830:	647b      	str	r3, [r7, #68]	@ 0x44
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	461a      	mov	r2, r3
 8004838:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800483a:	61bb      	str	r3, [r7, #24]
 800483c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800483e:	6979      	ldr	r1, [r7, #20]
 8004840:	69ba      	ldr	r2, [r7, #24]
 8004842:	e841 2300 	strex	r3, r2, [r1]
 8004846:	613b      	str	r3, [r7, #16]
   return(result);
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d1e6      	bne.n	800481c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2220      	movs	r2, #32
 8004852:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004862:	bf00      	nop
 8004864:	3754      	adds	r7, #84	@ 0x54
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr

0800486e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800486e:	b580      	push	{r7, lr}
 8004870:	b084      	sub	sp, #16
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800487a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2200      	movs	r2, #0
 8004880:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004884:	68f8      	ldr	r0, [r7, #12]
 8004886:	f7ff fac1 	bl	8003e0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800488a:	bf00      	nop
 800488c:	3710      	adds	r7, #16
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}

08004892 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004892:	b580      	push	{r7, lr}
 8004894:	b088      	sub	sp, #32
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	e853 3f00 	ldrex	r3, [r3]
 80048a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048ae:	61fb      	str	r3, [r7, #28]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	461a      	mov	r2, r3
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	61bb      	str	r3, [r7, #24]
 80048ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048bc:	6979      	ldr	r1, [r7, #20]
 80048be:	69ba      	ldr	r2, [r7, #24]
 80048c0:	e841 2300 	strex	r3, r2, [r1]
 80048c4:	613b      	str	r3, [r7, #16]
   return(result);
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d1e6      	bne.n	800489a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2220      	movs	r2, #32
 80048d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f7ff fa8c 	bl	8003df8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048e0:	bf00      	nop
 80048e2:	3720      	adds	r7, #32
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80048f0:	bf00      	nop
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004904:	bf00      	nop
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004918:	bf00      	nop
 800491a:	370c      	adds	r7, #12
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004924:	b480      	push	{r7}
 8004926:	b085      	sub	sp, #20
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004932:	2b01      	cmp	r3, #1
 8004934:	d101      	bne.n	800493a <HAL_UARTEx_DisableFifoMode+0x16>
 8004936:	2302      	movs	r3, #2
 8004938:	e027      	b.n	800498a <HAL_UARTEx_DisableFifoMode+0x66>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2201      	movs	r2, #1
 800493e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2224      	movs	r2, #36	@ 0x24
 8004946:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f022 0201 	bic.w	r2, r2, #1
 8004960:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004968:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2220      	movs	r2, #32
 800497c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	3714      	adds	r7, #20
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr

08004996 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004996:	b580      	push	{r7, lr}
 8004998:	b084      	sub	sp, #16
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
 800499e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d101      	bne.n	80049ae <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80049aa:	2302      	movs	r3, #2
 80049ac:	e02d      	b.n	8004a0a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2201      	movs	r2, #1
 80049b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2224      	movs	r2, #36	@ 0x24
 80049ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f022 0201 	bic.w	r2, r2, #1
 80049d4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	683a      	ldr	r2, [r7, #0]
 80049e6:	430a      	orrs	r2, r1
 80049e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 f850 	bl	8004a90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68fa      	ldr	r2, [r7, #12]
 80049f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2220      	movs	r2, #32
 80049fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}

08004a12 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004a12:	b580      	push	{r7, lr}
 8004a14:	b084      	sub	sp, #16
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
 8004a1a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d101      	bne.n	8004a2a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004a26:	2302      	movs	r3, #2
 8004a28:	e02d      	b.n	8004a86 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2224      	movs	r2, #36	@ 0x24
 8004a36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f022 0201 	bic.w	r2, r2, #1
 8004a50:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	683a      	ldr	r2, [r7, #0]
 8004a62:	430a      	orrs	r2, r1
 8004a64:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 f812 	bl	8004a90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68fa      	ldr	r2, [r7, #12]
 8004a72:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2220      	movs	r2, #32
 8004a78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3710      	adds	r7, #16
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
	...

08004a90 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b085      	sub	sp, #20
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d108      	bne.n	8004ab2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004ab0:	e031      	b.n	8004b16 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004ab2:	2308      	movs	r3, #8
 8004ab4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004ab6:	2308      	movs	r3, #8
 8004ab8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	0e5b      	lsrs	r3, r3, #25
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	f003 0307 	and.w	r3, r3, #7
 8004ac8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	0f5b      	lsrs	r3, r3, #29
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	f003 0307 	and.w	r3, r3, #7
 8004ad8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004ada:	7bbb      	ldrb	r3, [r7, #14]
 8004adc:	7b3a      	ldrb	r2, [r7, #12]
 8004ade:	4911      	ldr	r1, [pc, #68]	@ (8004b24 <UARTEx_SetNbDataToProcess+0x94>)
 8004ae0:	5c8a      	ldrb	r2, [r1, r2]
 8004ae2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004ae6:	7b3a      	ldrb	r2, [r7, #12]
 8004ae8:	490f      	ldr	r1, [pc, #60]	@ (8004b28 <UARTEx_SetNbDataToProcess+0x98>)
 8004aea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004aec:	fb93 f3f2 	sdiv	r3, r3, r2
 8004af0:	b29a      	uxth	r2, r3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004af8:	7bfb      	ldrb	r3, [r7, #15]
 8004afa:	7b7a      	ldrb	r2, [r7, #13]
 8004afc:	4909      	ldr	r1, [pc, #36]	@ (8004b24 <UARTEx_SetNbDataToProcess+0x94>)
 8004afe:	5c8a      	ldrb	r2, [r1, r2]
 8004b00:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004b04:	7b7a      	ldrb	r2, [r7, #13]
 8004b06:	4908      	ldr	r1, [pc, #32]	@ (8004b28 <UARTEx_SetNbDataToProcess+0x98>)
 8004b08:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004b0a:	fb93 f3f2 	sdiv	r3, r3, r2
 8004b0e:	b29a      	uxth	r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004b16:	bf00      	nop
 8004b18:	3714      	adds	r7, #20
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr
 8004b22:	bf00      	nop
 8004b24:	0800934c 	.word	0x0800934c
 8004b28:	08009354 	.word	0x08009354

08004b2c <__cvt>:
 8004b2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b30:	ec57 6b10 	vmov	r6, r7, d0
 8004b34:	2f00      	cmp	r7, #0
 8004b36:	460c      	mov	r4, r1
 8004b38:	4619      	mov	r1, r3
 8004b3a:	463b      	mov	r3, r7
 8004b3c:	bfbb      	ittet	lt
 8004b3e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004b42:	461f      	movlt	r7, r3
 8004b44:	2300      	movge	r3, #0
 8004b46:	232d      	movlt	r3, #45	@ 0x2d
 8004b48:	700b      	strb	r3, [r1, #0]
 8004b4a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004b4c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004b50:	4691      	mov	r9, r2
 8004b52:	f023 0820 	bic.w	r8, r3, #32
 8004b56:	bfbc      	itt	lt
 8004b58:	4632      	movlt	r2, r6
 8004b5a:	4616      	movlt	r6, r2
 8004b5c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004b60:	d005      	beq.n	8004b6e <__cvt+0x42>
 8004b62:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004b66:	d100      	bne.n	8004b6a <__cvt+0x3e>
 8004b68:	3401      	adds	r4, #1
 8004b6a:	2102      	movs	r1, #2
 8004b6c:	e000      	b.n	8004b70 <__cvt+0x44>
 8004b6e:	2103      	movs	r1, #3
 8004b70:	ab03      	add	r3, sp, #12
 8004b72:	9301      	str	r3, [sp, #4]
 8004b74:	ab02      	add	r3, sp, #8
 8004b76:	9300      	str	r3, [sp, #0]
 8004b78:	ec47 6b10 	vmov	d0, r6, r7
 8004b7c:	4653      	mov	r3, sl
 8004b7e:	4622      	mov	r2, r4
 8004b80:	f001 f86e 	bl	8005c60 <_dtoa_r>
 8004b84:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004b88:	4605      	mov	r5, r0
 8004b8a:	d119      	bne.n	8004bc0 <__cvt+0x94>
 8004b8c:	f019 0f01 	tst.w	r9, #1
 8004b90:	d00e      	beq.n	8004bb0 <__cvt+0x84>
 8004b92:	eb00 0904 	add.w	r9, r0, r4
 8004b96:	2200      	movs	r2, #0
 8004b98:	2300      	movs	r3, #0
 8004b9a:	4630      	mov	r0, r6
 8004b9c:	4639      	mov	r1, r7
 8004b9e:	f7fb ffbb 	bl	8000b18 <__aeabi_dcmpeq>
 8004ba2:	b108      	cbz	r0, 8004ba8 <__cvt+0x7c>
 8004ba4:	f8cd 900c 	str.w	r9, [sp, #12]
 8004ba8:	2230      	movs	r2, #48	@ 0x30
 8004baa:	9b03      	ldr	r3, [sp, #12]
 8004bac:	454b      	cmp	r3, r9
 8004bae:	d31e      	bcc.n	8004bee <__cvt+0xc2>
 8004bb0:	9b03      	ldr	r3, [sp, #12]
 8004bb2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004bb4:	1b5b      	subs	r3, r3, r5
 8004bb6:	4628      	mov	r0, r5
 8004bb8:	6013      	str	r3, [r2, #0]
 8004bba:	b004      	add	sp, #16
 8004bbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bc0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004bc4:	eb00 0904 	add.w	r9, r0, r4
 8004bc8:	d1e5      	bne.n	8004b96 <__cvt+0x6a>
 8004bca:	7803      	ldrb	r3, [r0, #0]
 8004bcc:	2b30      	cmp	r3, #48	@ 0x30
 8004bce:	d10a      	bne.n	8004be6 <__cvt+0xba>
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	4630      	mov	r0, r6
 8004bd6:	4639      	mov	r1, r7
 8004bd8:	f7fb ff9e 	bl	8000b18 <__aeabi_dcmpeq>
 8004bdc:	b918      	cbnz	r0, 8004be6 <__cvt+0xba>
 8004bde:	f1c4 0401 	rsb	r4, r4, #1
 8004be2:	f8ca 4000 	str.w	r4, [sl]
 8004be6:	f8da 3000 	ldr.w	r3, [sl]
 8004bea:	4499      	add	r9, r3
 8004bec:	e7d3      	b.n	8004b96 <__cvt+0x6a>
 8004bee:	1c59      	adds	r1, r3, #1
 8004bf0:	9103      	str	r1, [sp, #12]
 8004bf2:	701a      	strb	r2, [r3, #0]
 8004bf4:	e7d9      	b.n	8004baa <__cvt+0x7e>

08004bf6 <__exponent>:
 8004bf6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004bf8:	2900      	cmp	r1, #0
 8004bfa:	bfba      	itte	lt
 8004bfc:	4249      	neglt	r1, r1
 8004bfe:	232d      	movlt	r3, #45	@ 0x2d
 8004c00:	232b      	movge	r3, #43	@ 0x2b
 8004c02:	2909      	cmp	r1, #9
 8004c04:	7002      	strb	r2, [r0, #0]
 8004c06:	7043      	strb	r3, [r0, #1]
 8004c08:	dd29      	ble.n	8004c5e <__exponent+0x68>
 8004c0a:	f10d 0307 	add.w	r3, sp, #7
 8004c0e:	461d      	mov	r5, r3
 8004c10:	270a      	movs	r7, #10
 8004c12:	461a      	mov	r2, r3
 8004c14:	fbb1 f6f7 	udiv	r6, r1, r7
 8004c18:	fb07 1416 	mls	r4, r7, r6, r1
 8004c1c:	3430      	adds	r4, #48	@ 0x30
 8004c1e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004c22:	460c      	mov	r4, r1
 8004c24:	2c63      	cmp	r4, #99	@ 0x63
 8004c26:	f103 33ff 	add.w	r3, r3, #4294967295
 8004c2a:	4631      	mov	r1, r6
 8004c2c:	dcf1      	bgt.n	8004c12 <__exponent+0x1c>
 8004c2e:	3130      	adds	r1, #48	@ 0x30
 8004c30:	1e94      	subs	r4, r2, #2
 8004c32:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004c36:	1c41      	adds	r1, r0, #1
 8004c38:	4623      	mov	r3, r4
 8004c3a:	42ab      	cmp	r3, r5
 8004c3c:	d30a      	bcc.n	8004c54 <__exponent+0x5e>
 8004c3e:	f10d 0309 	add.w	r3, sp, #9
 8004c42:	1a9b      	subs	r3, r3, r2
 8004c44:	42ac      	cmp	r4, r5
 8004c46:	bf88      	it	hi
 8004c48:	2300      	movhi	r3, #0
 8004c4a:	3302      	adds	r3, #2
 8004c4c:	4403      	add	r3, r0
 8004c4e:	1a18      	subs	r0, r3, r0
 8004c50:	b003      	add	sp, #12
 8004c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c54:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004c58:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004c5c:	e7ed      	b.n	8004c3a <__exponent+0x44>
 8004c5e:	2330      	movs	r3, #48	@ 0x30
 8004c60:	3130      	adds	r1, #48	@ 0x30
 8004c62:	7083      	strb	r3, [r0, #2]
 8004c64:	70c1      	strb	r1, [r0, #3]
 8004c66:	1d03      	adds	r3, r0, #4
 8004c68:	e7f1      	b.n	8004c4e <__exponent+0x58>
	...

08004c6c <_printf_float>:
 8004c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c70:	b08d      	sub	sp, #52	@ 0x34
 8004c72:	460c      	mov	r4, r1
 8004c74:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004c78:	4616      	mov	r6, r2
 8004c7a:	461f      	mov	r7, r3
 8004c7c:	4605      	mov	r5, r0
 8004c7e:	f000 fee9 	bl	8005a54 <_localeconv_r>
 8004c82:	6803      	ldr	r3, [r0, #0]
 8004c84:	9304      	str	r3, [sp, #16]
 8004c86:	4618      	mov	r0, r3
 8004c88:	f7fb fb1a 	bl	80002c0 <strlen>
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004c90:	f8d8 3000 	ldr.w	r3, [r8]
 8004c94:	9005      	str	r0, [sp, #20]
 8004c96:	3307      	adds	r3, #7
 8004c98:	f023 0307 	bic.w	r3, r3, #7
 8004c9c:	f103 0208 	add.w	r2, r3, #8
 8004ca0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004ca4:	f8d4 b000 	ldr.w	fp, [r4]
 8004ca8:	f8c8 2000 	str.w	r2, [r8]
 8004cac:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004cb0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004cb4:	9307      	str	r3, [sp, #28]
 8004cb6:	f8cd 8018 	str.w	r8, [sp, #24]
 8004cba:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004cbe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004cc2:	4b9c      	ldr	r3, [pc, #624]	@ (8004f34 <_printf_float+0x2c8>)
 8004cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8004cc8:	f7fb ff58 	bl	8000b7c <__aeabi_dcmpun>
 8004ccc:	bb70      	cbnz	r0, 8004d2c <_printf_float+0xc0>
 8004cce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004cd2:	4b98      	ldr	r3, [pc, #608]	@ (8004f34 <_printf_float+0x2c8>)
 8004cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8004cd8:	f7fb ff32 	bl	8000b40 <__aeabi_dcmple>
 8004cdc:	bb30      	cbnz	r0, 8004d2c <_printf_float+0xc0>
 8004cde:	2200      	movs	r2, #0
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	4640      	mov	r0, r8
 8004ce4:	4649      	mov	r1, r9
 8004ce6:	f7fb ff21 	bl	8000b2c <__aeabi_dcmplt>
 8004cea:	b110      	cbz	r0, 8004cf2 <_printf_float+0x86>
 8004cec:	232d      	movs	r3, #45	@ 0x2d
 8004cee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004cf2:	4a91      	ldr	r2, [pc, #580]	@ (8004f38 <_printf_float+0x2cc>)
 8004cf4:	4b91      	ldr	r3, [pc, #580]	@ (8004f3c <_printf_float+0x2d0>)
 8004cf6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004cfa:	bf8c      	ite	hi
 8004cfc:	4690      	movhi	r8, r2
 8004cfe:	4698      	movls	r8, r3
 8004d00:	2303      	movs	r3, #3
 8004d02:	6123      	str	r3, [r4, #16]
 8004d04:	f02b 0304 	bic.w	r3, fp, #4
 8004d08:	6023      	str	r3, [r4, #0]
 8004d0a:	f04f 0900 	mov.w	r9, #0
 8004d0e:	9700      	str	r7, [sp, #0]
 8004d10:	4633      	mov	r3, r6
 8004d12:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004d14:	4621      	mov	r1, r4
 8004d16:	4628      	mov	r0, r5
 8004d18:	f000 f9d2 	bl	80050c0 <_printf_common>
 8004d1c:	3001      	adds	r0, #1
 8004d1e:	f040 808d 	bne.w	8004e3c <_printf_float+0x1d0>
 8004d22:	f04f 30ff 	mov.w	r0, #4294967295
 8004d26:	b00d      	add	sp, #52	@ 0x34
 8004d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d2c:	4642      	mov	r2, r8
 8004d2e:	464b      	mov	r3, r9
 8004d30:	4640      	mov	r0, r8
 8004d32:	4649      	mov	r1, r9
 8004d34:	f7fb ff22 	bl	8000b7c <__aeabi_dcmpun>
 8004d38:	b140      	cbz	r0, 8004d4c <_printf_float+0xe0>
 8004d3a:	464b      	mov	r3, r9
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	bfbc      	itt	lt
 8004d40:	232d      	movlt	r3, #45	@ 0x2d
 8004d42:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004d46:	4a7e      	ldr	r2, [pc, #504]	@ (8004f40 <_printf_float+0x2d4>)
 8004d48:	4b7e      	ldr	r3, [pc, #504]	@ (8004f44 <_printf_float+0x2d8>)
 8004d4a:	e7d4      	b.n	8004cf6 <_printf_float+0x8a>
 8004d4c:	6863      	ldr	r3, [r4, #4]
 8004d4e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004d52:	9206      	str	r2, [sp, #24]
 8004d54:	1c5a      	adds	r2, r3, #1
 8004d56:	d13b      	bne.n	8004dd0 <_printf_float+0x164>
 8004d58:	2306      	movs	r3, #6
 8004d5a:	6063      	str	r3, [r4, #4]
 8004d5c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004d60:	2300      	movs	r3, #0
 8004d62:	6022      	str	r2, [r4, #0]
 8004d64:	9303      	str	r3, [sp, #12]
 8004d66:	ab0a      	add	r3, sp, #40	@ 0x28
 8004d68:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004d6c:	ab09      	add	r3, sp, #36	@ 0x24
 8004d6e:	9300      	str	r3, [sp, #0]
 8004d70:	6861      	ldr	r1, [r4, #4]
 8004d72:	ec49 8b10 	vmov	d0, r8, r9
 8004d76:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004d7a:	4628      	mov	r0, r5
 8004d7c:	f7ff fed6 	bl	8004b2c <__cvt>
 8004d80:	9b06      	ldr	r3, [sp, #24]
 8004d82:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004d84:	2b47      	cmp	r3, #71	@ 0x47
 8004d86:	4680      	mov	r8, r0
 8004d88:	d129      	bne.n	8004dde <_printf_float+0x172>
 8004d8a:	1cc8      	adds	r0, r1, #3
 8004d8c:	db02      	blt.n	8004d94 <_printf_float+0x128>
 8004d8e:	6863      	ldr	r3, [r4, #4]
 8004d90:	4299      	cmp	r1, r3
 8004d92:	dd41      	ble.n	8004e18 <_printf_float+0x1ac>
 8004d94:	f1aa 0a02 	sub.w	sl, sl, #2
 8004d98:	fa5f fa8a 	uxtb.w	sl, sl
 8004d9c:	3901      	subs	r1, #1
 8004d9e:	4652      	mov	r2, sl
 8004da0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004da4:	9109      	str	r1, [sp, #36]	@ 0x24
 8004da6:	f7ff ff26 	bl	8004bf6 <__exponent>
 8004daa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004dac:	1813      	adds	r3, r2, r0
 8004dae:	2a01      	cmp	r2, #1
 8004db0:	4681      	mov	r9, r0
 8004db2:	6123      	str	r3, [r4, #16]
 8004db4:	dc02      	bgt.n	8004dbc <_printf_float+0x150>
 8004db6:	6822      	ldr	r2, [r4, #0]
 8004db8:	07d2      	lsls	r2, r2, #31
 8004dba:	d501      	bpl.n	8004dc0 <_printf_float+0x154>
 8004dbc:	3301      	adds	r3, #1
 8004dbe:	6123      	str	r3, [r4, #16]
 8004dc0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d0a2      	beq.n	8004d0e <_printf_float+0xa2>
 8004dc8:	232d      	movs	r3, #45	@ 0x2d
 8004dca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004dce:	e79e      	b.n	8004d0e <_printf_float+0xa2>
 8004dd0:	9a06      	ldr	r2, [sp, #24]
 8004dd2:	2a47      	cmp	r2, #71	@ 0x47
 8004dd4:	d1c2      	bne.n	8004d5c <_printf_float+0xf0>
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d1c0      	bne.n	8004d5c <_printf_float+0xf0>
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e7bd      	b.n	8004d5a <_printf_float+0xee>
 8004dde:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004de2:	d9db      	bls.n	8004d9c <_printf_float+0x130>
 8004de4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004de8:	d118      	bne.n	8004e1c <_printf_float+0x1b0>
 8004dea:	2900      	cmp	r1, #0
 8004dec:	6863      	ldr	r3, [r4, #4]
 8004dee:	dd0b      	ble.n	8004e08 <_printf_float+0x19c>
 8004df0:	6121      	str	r1, [r4, #16]
 8004df2:	b913      	cbnz	r3, 8004dfa <_printf_float+0x18e>
 8004df4:	6822      	ldr	r2, [r4, #0]
 8004df6:	07d0      	lsls	r0, r2, #31
 8004df8:	d502      	bpl.n	8004e00 <_printf_float+0x194>
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	440b      	add	r3, r1
 8004dfe:	6123      	str	r3, [r4, #16]
 8004e00:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004e02:	f04f 0900 	mov.w	r9, #0
 8004e06:	e7db      	b.n	8004dc0 <_printf_float+0x154>
 8004e08:	b913      	cbnz	r3, 8004e10 <_printf_float+0x1a4>
 8004e0a:	6822      	ldr	r2, [r4, #0]
 8004e0c:	07d2      	lsls	r2, r2, #31
 8004e0e:	d501      	bpl.n	8004e14 <_printf_float+0x1a8>
 8004e10:	3302      	adds	r3, #2
 8004e12:	e7f4      	b.n	8004dfe <_printf_float+0x192>
 8004e14:	2301      	movs	r3, #1
 8004e16:	e7f2      	b.n	8004dfe <_printf_float+0x192>
 8004e18:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004e1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004e1e:	4299      	cmp	r1, r3
 8004e20:	db05      	blt.n	8004e2e <_printf_float+0x1c2>
 8004e22:	6823      	ldr	r3, [r4, #0]
 8004e24:	6121      	str	r1, [r4, #16]
 8004e26:	07d8      	lsls	r0, r3, #31
 8004e28:	d5ea      	bpl.n	8004e00 <_printf_float+0x194>
 8004e2a:	1c4b      	adds	r3, r1, #1
 8004e2c:	e7e7      	b.n	8004dfe <_printf_float+0x192>
 8004e2e:	2900      	cmp	r1, #0
 8004e30:	bfd4      	ite	le
 8004e32:	f1c1 0202 	rsble	r2, r1, #2
 8004e36:	2201      	movgt	r2, #1
 8004e38:	4413      	add	r3, r2
 8004e3a:	e7e0      	b.n	8004dfe <_printf_float+0x192>
 8004e3c:	6823      	ldr	r3, [r4, #0]
 8004e3e:	055a      	lsls	r2, r3, #21
 8004e40:	d407      	bmi.n	8004e52 <_printf_float+0x1e6>
 8004e42:	6923      	ldr	r3, [r4, #16]
 8004e44:	4642      	mov	r2, r8
 8004e46:	4631      	mov	r1, r6
 8004e48:	4628      	mov	r0, r5
 8004e4a:	47b8      	blx	r7
 8004e4c:	3001      	adds	r0, #1
 8004e4e:	d12b      	bne.n	8004ea8 <_printf_float+0x23c>
 8004e50:	e767      	b.n	8004d22 <_printf_float+0xb6>
 8004e52:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004e56:	f240 80dd 	bls.w	8005014 <_printf_float+0x3a8>
 8004e5a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004e5e:	2200      	movs	r2, #0
 8004e60:	2300      	movs	r3, #0
 8004e62:	f7fb fe59 	bl	8000b18 <__aeabi_dcmpeq>
 8004e66:	2800      	cmp	r0, #0
 8004e68:	d033      	beq.n	8004ed2 <_printf_float+0x266>
 8004e6a:	4a37      	ldr	r2, [pc, #220]	@ (8004f48 <_printf_float+0x2dc>)
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	4631      	mov	r1, r6
 8004e70:	4628      	mov	r0, r5
 8004e72:	47b8      	blx	r7
 8004e74:	3001      	adds	r0, #1
 8004e76:	f43f af54 	beq.w	8004d22 <_printf_float+0xb6>
 8004e7a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004e7e:	4543      	cmp	r3, r8
 8004e80:	db02      	blt.n	8004e88 <_printf_float+0x21c>
 8004e82:	6823      	ldr	r3, [r4, #0]
 8004e84:	07d8      	lsls	r0, r3, #31
 8004e86:	d50f      	bpl.n	8004ea8 <_printf_float+0x23c>
 8004e88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e8c:	4631      	mov	r1, r6
 8004e8e:	4628      	mov	r0, r5
 8004e90:	47b8      	blx	r7
 8004e92:	3001      	adds	r0, #1
 8004e94:	f43f af45 	beq.w	8004d22 <_printf_float+0xb6>
 8004e98:	f04f 0900 	mov.w	r9, #0
 8004e9c:	f108 38ff 	add.w	r8, r8, #4294967295
 8004ea0:	f104 0a1a 	add.w	sl, r4, #26
 8004ea4:	45c8      	cmp	r8, r9
 8004ea6:	dc09      	bgt.n	8004ebc <_printf_float+0x250>
 8004ea8:	6823      	ldr	r3, [r4, #0]
 8004eaa:	079b      	lsls	r3, r3, #30
 8004eac:	f100 8103 	bmi.w	80050b6 <_printf_float+0x44a>
 8004eb0:	68e0      	ldr	r0, [r4, #12]
 8004eb2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004eb4:	4298      	cmp	r0, r3
 8004eb6:	bfb8      	it	lt
 8004eb8:	4618      	movlt	r0, r3
 8004eba:	e734      	b.n	8004d26 <_printf_float+0xba>
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	4652      	mov	r2, sl
 8004ec0:	4631      	mov	r1, r6
 8004ec2:	4628      	mov	r0, r5
 8004ec4:	47b8      	blx	r7
 8004ec6:	3001      	adds	r0, #1
 8004ec8:	f43f af2b 	beq.w	8004d22 <_printf_float+0xb6>
 8004ecc:	f109 0901 	add.w	r9, r9, #1
 8004ed0:	e7e8      	b.n	8004ea4 <_printf_float+0x238>
 8004ed2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	dc39      	bgt.n	8004f4c <_printf_float+0x2e0>
 8004ed8:	4a1b      	ldr	r2, [pc, #108]	@ (8004f48 <_printf_float+0x2dc>)
 8004eda:	2301      	movs	r3, #1
 8004edc:	4631      	mov	r1, r6
 8004ede:	4628      	mov	r0, r5
 8004ee0:	47b8      	blx	r7
 8004ee2:	3001      	adds	r0, #1
 8004ee4:	f43f af1d 	beq.w	8004d22 <_printf_float+0xb6>
 8004ee8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004eec:	ea59 0303 	orrs.w	r3, r9, r3
 8004ef0:	d102      	bne.n	8004ef8 <_printf_float+0x28c>
 8004ef2:	6823      	ldr	r3, [r4, #0]
 8004ef4:	07d9      	lsls	r1, r3, #31
 8004ef6:	d5d7      	bpl.n	8004ea8 <_printf_float+0x23c>
 8004ef8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004efc:	4631      	mov	r1, r6
 8004efe:	4628      	mov	r0, r5
 8004f00:	47b8      	blx	r7
 8004f02:	3001      	adds	r0, #1
 8004f04:	f43f af0d 	beq.w	8004d22 <_printf_float+0xb6>
 8004f08:	f04f 0a00 	mov.w	sl, #0
 8004f0c:	f104 0b1a 	add.w	fp, r4, #26
 8004f10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f12:	425b      	negs	r3, r3
 8004f14:	4553      	cmp	r3, sl
 8004f16:	dc01      	bgt.n	8004f1c <_printf_float+0x2b0>
 8004f18:	464b      	mov	r3, r9
 8004f1a:	e793      	b.n	8004e44 <_printf_float+0x1d8>
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	465a      	mov	r2, fp
 8004f20:	4631      	mov	r1, r6
 8004f22:	4628      	mov	r0, r5
 8004f24:	47b8      	blx	r7
 8004f26:	3001      	adds	r0, #1
 8004f28:	f43f aefb 	beq.w	8004d22 <_printf_float+0xb6>
 8004f2c:	f10a 0a01 	add.w	sl, sl, #1
 8004f30:	e7ee      	b.n	8004f10 <_printf_float+0x2a4>
 8004f32:	bf00      	nop
 8004f34:	7fefffff 	.word	0x7fefffff
 8004f38:	08009360 	.word	0x08009360
 8004f3c:	0800935c 	.word	0x0800935c
 8004f40:	08009368 	.word	0x08009368
 8004f44:	08009364 	.word	0x08009364
 8004f48:	0800936c 	.word	0x0800936c
 8004f4c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004f4e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004f52:	4553      	cmp	r3, sl
 8004f54:	bfa8      	it	ge
 8004f56:	4653      	movge	r3, sl
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	4699      	mov	r9, r3
 8004f5c:	dc36      	bgt.n	8004fcc <_printf_float+0x360>
 8004f5e:	f04f 0b00 	mov.w	fp, #0
 8004f62:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004f66:	f104 021a 	add.w	r2, r4, #26
 8004f6a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004f6c:	9306      	str	r3, [sp, #24]
 8004f6e:	eba3 0309 	sub.w	r3, r3, r9
 8004f72:	455b      	cmp	r3, fp
 8004f74:	dc31      	bgt.n	8004fda <_printf_float+0x36e>
 8004f76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f78:	459a      	cmp	sl, r3
 8004f7a:	dc3a      	bgt.n	8004ff2 <_printf_float+0x386>
 8004f7c:	6823      	ldr	r3, [r4, #0]
 8004f7e:	07da      	lsls	r2, r3, #31
 8004f80:	d437      	bmi.n	8004ff2 <_printf_float+0x386>
 8004f82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f84:	ebaa 0903 	sub.w	r9, sl, r3
 8004f88:	9b06      	ldr	r3, [sp, #24]
 8004f8a:	ebaa 0303 	sub.w	r3, sl, r3
 8004f8e:	4599      	cmp	r9, r3
 8004f90:	bfa8      	it	ge
 8004f92:	4699      	movge	r9, r3
 8004f94:	f1b9 0f00 	cmp.w	r9, #0
 8004f98:	dc33      	bgt.n	8005002 <_printf_float+0x396>
 8004f9a:	f04f 0800 	mov.w	r8, #0
 8004f9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004fa2:	f104 0b1a 	add.w	fp, r4, #26
 8004fa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fa8:	ebaa 0303 	sub.w	r3, sl, r3
 8004fac:	eba3 0309 	sub.w	r3, r3, r9
 8004fb0:	4543      	cmp	r3, r8
 8004fb2:	f77f af79 	ble.w	8004ea8 <_printf_float+0x23c>
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	465a      	mov	r2, fp
 8004fba:	4631      	mov	r1, r6
 8004fbc:	4628      	mov	r0, r5
 8004fbe:	47b8      	blx	r7
 8004fc0:	3001      	adds	r0, #1
 8004fc2:	f43f aeae 	beq.w	8004d22 <_printf_float+0xb6>
 8004fc6:	f108 0801 	add.w	r8, r8, #1
 8004fca:	e7ec      	b.n	8004fa6 <_printf_float+0x33a>
 8004fcc:	4642      	mov	r2, r8
 8004fce:	4631      	mov	r1, r6
 8004fd0:	4628      	mov	r0, r5
 8004fd2:	47b8      	blx	r7
 8004fd4:	3001      	adds	r0, #1
 8004fd6:	d1c2      	bne.n	8004f5e <_printf_float+0x2f2>
 8004fd8:	e6a3      	b.n	8004d22 <_printf_float+0xb6>
 8004fda:	2301      	movs	r3, #1
 8004fdc:	4631      	mov	r1, r6
 8004fde:	4628      	mov	r0, r5
 8004fe0:	9206      	str	r2, [sp, #24]
 8004fe2:	47b8      	blx	r7
 8004fe4:	3001      	adds	r0, #1
 8004fe6:	f43f ae9c 	beq.w	8004d22 <_printf_float+0xb6>
 8004fea:	9a06      	ldr	r2, [sp, #24]
 8004fec:	f10b 0b01 	add.w	fp, fp, #1
 8004ff0:	e7bb      	b.n	8004f6a <_printf_float+0x2fe>
 8004ff2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ff6:	4631      	mov	r1, r6
 8004ff8:	4628      	mov	r0, r5
 8004ffa:	47b8      	blx	r7
 8004ffc:	3001      	adds	r0, #1
 8004ffe:	d1c0      	bne.n	8004f82 <_printf_float+0x316>
 8005000:	e68f      	b.n	8004d22 <_printf_float+0xb6>
 8005002:	9a06      	ldr	r2, [sp, #24]
 8005004:	464b      	mov	r3, r9
 8005006:	4442      	add	r2, r8
 8005008:	4631      	mov	r1, r6
 800500a:	4628      	mov	r0, r5
 800500c:	47b8      	blx	r7
 800500e:	3001      	adds	r0, #1
 8005010:	d1c3      	bne.n	8004f9a <_printf_float+0x32e>
 8005012:	e686      	b.n	8004d22 <_printf_float+0xb6>
 8005014:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005018:	f1ba 0f01 	cmp.w	sl, #1
 800501c:	dc01      	bgt.n	8005022 <_printf_float+0x3b6>
 800501e:	07db      	lsls	r3, r3, #31
 8005020:	d536      	bpl.n	8005090 <_printf_float+0x424>
 8005022:	2301      	movs	r3, #1
 8005024:	4642      	mov	r2, r8
 8005026:	4631      	mov	r1, r6
 8005028:	4628      	mov	r0, r5
 800502a:	47b8      	blx	r7
 800502c:	3001      	adds	r0, #1
 800502e:	f43f ae78 	beq.w	8004d22 <_printf_float+0xb6>
 8005032:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005036:	4631      	mov	r1, r6
 8005038:	4628      	mov	r0, r5
 800503a:	47b8      	blx	r7
 800503c:	3001      	adds	r0, #1
 800503e:	f43f ae70 	beq.w	8004d22 <_printf_float+0xb6>
 8005042:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005046:	2200      	movs	r2, #0
 8005048:	2300      	movs	r3, #0
 800504a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800504e:	f7fb fd63 	bl	8000b18 <__aeabi_dcmpeq>
 8005052:	b9c0      	cbnz	r0, 8005086 <_printf_float+0x41a>
 8005054:	4653      	mov	r3, sl
 8005056:	f108 0201 	add.w	r2, r8, #1
 800505a:	4631      	mov	r1, r6
 800505c:	4628      	mov	r0, r5
 800505e:	47b8      	blx	r7
 8005060:	3001      	adds	r0, #1
 8005062:	d10c      	bne.n	800507e <_printf_float+0x412>
 8005064:	e65d      	b.n	8004d22 <_printf_float+0xb6>
 8005066:	2301      	movs	r3, #1
 8005068:	465a      	mov	r2, fp
 800506a:	4631      	mov	r1, r6
 800506c:	4628      	mov	r0, r5
 800506e:	47b8      	blx	r7
 8005070:	3001      	adds	r0, #1
 8005072:	f43f ae56 	beq.w	8004d22 <_printf_float+0xb6>
 8005076:	f108 0801 	add.w	r8, r8, #1
 800507a:	45d0      	cmp	r8, sl
 800507c:	dbf3      	blt.n	8005066 <_printf_float+0x3fa>
 800507e:	464b      	mov	r3, r9
 8005080:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005084:	e6df      	b.n	8004e46 <_printf_float+0x1da>
 8005086:	f04f 0800 	mov.w	r8, #0
 800508a:	f104 0b1a 	add.w	fp, r4, #26
 800508e:	e7f4      	b.n	800507a <_printf_float+0x40e>
 8005090:	2301      	movs	r3, #1
 8005092:	4642      	mov	r2, r8
 8005094:	e7e1      	b.n	800505a <_printf_float+0x3ee>
 8005096:	2301      	movs	r3, #1
 8005098:	464a      	mov	r2, r9
 800509a:	4631      	mov	r1, r6
 800509c:	4628      	mov	r0, r5
 800509e:	47b8      	blx	r7
 80050a0:	3001      	adds	r0, #1
 80050a2:	f43f ae3e 	beq.w	8004d22 <_printf_float+0xb6>
 80050a6:	f108 0801 	add.w	r8, r8, #1
 80050aa:	68e3      	ldr	r3, [r4, #12]
 80050ac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80050ae:	1a5b      	subs	r3, r3, r1
 80050b0:	4543      	cmp	r3, r8
 80050b2:	dcf0      	bgt.n	8005096 <_printf_float+0x42a>
 80050b4:	e6fc      	b.n	8004eb0 <_printf_float+0x244>
 80050b6:	f04f 0800 	mov.w	r8, #0
 80050ba:	f104 0919 	add.w	r9, r4, #25
 80050be:	e7f4      	b.n	80050aa <_printf_float+0x43e>

080050c0 <_printf_common>:
 80050c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050c4:	4616      	mov	r6, r2
 80050c6:	4698      	mov	r8, r3
 80050c8:	688a      	ldr	r2, [r1, #8]
 80050ca:	690b      	ldr	r3, [r1, #16]
 80050cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80050d0:	4293      	cmp	r3, r2
 80050d2:	bfb8      	it	lt
 80050d4:	4613      	movlt	r3, r2
 80050d6:	6033      	str	r3, [r6, #0]
 80050d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80050dc:	4607      	mov	r7, r0
 80050de:	460c      	mov	r4, r1
 80050e0:	b10a      	cbz	r2, 80050e6 <_printf_common+0x26>
 80050e2:	3301      	adds	r3, #1
 80050e4:	6033      	str	r3, [r6, #0]
 80050e6:	6823      	ldr	r3, [r4, #0]
 80050e8:	0699      	lsls	r1, r3, #26
 80050ea:	bf42      	ittt	mi
 80050ec:	6833      	ldrmi	r3, [r6, #0]
 80050ee:	3302      	addmi	r3, #2
 80050f0:	6033      	strmi	r3, [r6, #0]
 80050f2:	6825      	ldr	r5, [r4, #0]
 80050f4:	f015 0506 	ands.w	r5, r5, #6
 80050f8:	d106      	bne.n	8005108 <_printf_common+0x48>
 80050fa:	f104 0a19 	add.w	sl, r4, #25
 80050fe:	68e3      	ldr	r3, [r4, #12]
 8005100:	6832      	ldr	r2, [r6, #0]
 8005102:	1a9b      	subs	r3, r3, r2
 8005104:	42ab      	cmp	r3, r5
 8005106:	dc26      	bgt.n	8005156 <_printf_common+0x96>
 8005108:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800510c:	6822      	ldr	r2, [r4, #0]
 800510e:	3b00      	subs	r3, #0
 8005110:	bf18      	it	ne
 8005112:	2301      	movne	r3, #1
 8005114:	0692      	lsls	r2, r2, #26
 8005116:	d42b      	bmi.n	8005170 <_printf_common+0xb0>
 8005118:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800511c:	4641      	mov	r1, r8
 800511e:	4638      	mov	r0, r7
 8005120:	47c8      	blx	r9
 8005122:	3001      	adds	r0, #1
 8005124:	d01e      	beq.n	8005164 <_printf_common+0xa4>
 8005126:	6823      	ldr	r3, [r4, #0]
 8005128:	6922      	ldr	r2, [r4, #16]
 800512a:	f003 0306 	and.w	r3, r3, #6
 800512e:	2b04      	cmp	r3, #4
 8005130:	bf02      	ittt	eq
 8005132:	68e5      	ldreq	r5, [r4, #12]
 8005134:	6833      	ldreq	r3, [r6, #0]
 8005136:	1aed      	subeq	r5, r5, r3
 8005138:	68a3      	ldr	r3, [r4, #8]
 800513a:	bf0c      	ite	eq
 800513c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005140:	2500      	movne	r5, #0
 8005142:	4293      	cmp	r3, r2
 8005144:	bfc4      	itt	gt
 8005146:	1a9b      	subgt	r3, r3, r2
 8005148:	18ed      	addgt	r5, r5, r3
 800514a:	2600      	movs	r6, #0
 800514c:	341a      	adds	r4, #26
 800514e:	42b5      	cmp	r5, r6
 8005150:	d11a      	bne.n	8005188 <_printf_common+0xc8>
 8005152:	2000      	movs	r0, #0
 8005154:	e008      	b.n	8005168 <_printf_common+0xa8>
 8005156:	2301      	movs	r3, #1
 8005158:	4652      	mov	r2, sl
 800515a:	4641      	mov	r1, r8
 800515c:	4638      	mov	r0, r7
 800515e:	47c8      	blx	r9
 8005160:	3001      	adds	r0, #1
 8005162:	d103      	bne.n	800516c <_printf_common+0xac>
 8005164:	f04f 30ff 	mov.w	r0, #4294967295
 8005168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800516c:	3501      	adds	r5, #1
 800516e:	e7c6      	b.n	80050fe <_printf_common+0x3e>
 8005170:	18e1      	adds	r1, r4, r3
 8005172:	1c5a      	adds	r2, r3, #1
 8005174:	2030      	movs	r0, #48	@ 0x30
 8005176:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800517a:	4422      	add	r2, r4
 800517c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005180:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005184:	3302      	adds	r3, #2
 8005186:	e7c7      	b.n	8005118 <_printf_common+0x58>
 8005188:	2301      	movs	r3, #1
 800518a:	4622      	mov	r2, r4
 800518c:	4641      	mov	r1, r8
 800518e:	4638      	mov	r0, r7
 8005190:	47c8      	blx	r9
 8005192:	3001      	adds	r0, #1
 8005194:	d0e6      	beq.n	8005164 <_printf_common+0xa4>
 8005196:	3601      	adds	r6, #1
 8005198:	e7d9      	b.n	800514e <_printf_common+0x8e>
	...

0800519c <_printf_i>:
 800519c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051a0:	7e0f      	ldrb	r7, [r1, #24]
 80051a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80051a4:	2f78      	cmp	r7, #120	@ 0x78
 80051a6:	4691      	mov	r9, r2
 80051a8:	4680      	mov	r8, r0
 80051aa:	460c      	mov	r4, r1
 80051ac:	469a      	mov	sl, r3
 80051ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80051b2:	d807      	bhi.n	80051c4 <_printf_i+0x28>
 80051b4:	2f62      	cmp	r7, #98	@ 0x62
 80051b6:	d80a      	bhi.n	80051ce <_printf_i+0x32>
 80051b8:	2f00      	cmp	r7, #0
 80051ba:	f000 80d1 	beq.w	8005360 <_printf_i+0x1c4>
 80051be:	2f58      	cmp	r7, #88	@ 0x58
 80051c0:	f000 80b8 	beq.w	8005334 <_printf_i+0x198>
 80051c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80051c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80051cc:	e03a      	b.n	8005244 <_printf_i+0xa8>
 80051ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80051d2:	2b15      	cmp	r3, #21
 80051d4:	d8f6      	bhi.n	80051c4 <_printf_i+0x28>
 80051d6:	a101      	add	r1, pc, #4	@ (adr r1, 80051dc <_printf_i+0x40>)
 80051d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80051dc:	08005235 	.word	0x08005235
 80051e0:	08005249 	.word	0x08005249
 80051e4:	080051c5 	.word	0x080051c5
 80051e8:	080051c5 	.word	0x080051c5
 80051ec:	080051c5 	.word	0x080051c5
 80051f0:	080051c5 	.word	0x080051c5
 80051f4:	08005249 	.word	0x08005249
 80051f8:	080051c5 	.word	0x080051c5
 80051fc:	080051c5 	.word	0x080051c5
 8005200:	080051c5 	.word	0x080051c5
 8005204:	080051c5 	.word	0x080051c5
 8005208:	08005347 	.word	0x08005347
 800520c:	08005273 	.word	0x08005273
 8005210:	08005301 	.word	0x08005301
 8005214:	080051c5 	.word	0x080051c5
 8005218:	080051c5 	.word	0x080051c5
 800521c:	08005369 	.word	0x08005369
 8005220:	080051c5 	.word	0x080051c5
 8005224:	08005273 	.word	0x08005273
 8005228:	080051c5 	.word	0x080051c5
 800522c:	080051c5 	.word	0x080051c5
 8005230:	08005309 	.word	0x08005309
 8005234:	6833      	ldr	r3, [r6, #0]
 8005236:	1d1a      	adds	r2, r3, #4
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	6032      	str	r2, [r6, #0]
 800523c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005240:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005244:	2301      	movs	r3, #1
 8005246:	e09c      	b.n	8005382 <_printf_i+0x1e6>
 8005248:	6833      	ldr	r3, [r6, #0]
 800524a:	6820      	ldr	r0, [r4, #0]
 800524c:	1d19      	adds	r1, r3, #4
 800524e:	6031      	str	r1, [r6, #0]
 8005250:	0606      	lsls	r6, r0, #24
 8005252:	d501      	bpl.n	8005258 <_printf_i+0xbc>
 8005254:	681d      	ldr	r5, [r3, #0]
 8005256:	e003      	b.n	8005260 <_printf_i+0xc4>
 8005258:	0645      	lsls	r5, r0, #25
 800525a:	d5fb      	bpl.n	8005254 <_printf_i+0xb8>
 800525c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005260:	2d00      	cmp	r5, #0
 8005262:	da03      	bge.n	800526c <_printf_i+0xd0>
 8005264:	232d      	movs	r3, #45	@ 0x2d
 8005266:	426d      	negs	r5, r5
 8005268:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800526c:	4858      	ldr	r0, [pc, #352]	@ (80053d0 <_printf_i+0x234>)
 800526e:	230a      	movs	r3, #10
 8005270:	e011      	b.n	8005296 <_printf_i+0xfa>
 8005272:	6821      	ldr	r1, [r4, #0]
 8005274:	6833      	ldr	r3, [r6, #0]
 8005276:	0608      	lsls	r0, r1, #24
 8005278:	f853 5b04 	ldr.w	r5, [r3], #4
 800527c:	d402      	bmi.n	8005284 <_printf_i+0xe8>
 800527e:	0649      	lsls	r1, r1, #25
 8005280:	bf48      	it	mi
 8005282:	b2ad      	uxthmi	r5, r5
 8005284:	2f6f      	cmp	r7, #111	@ 0x6f
 8005286:	4852      	ldr	r0, [pc, #328]	@ (80053d0 <_printf_i+0x234>)
 8005288:	6033      	str	r3, [r6, #0]
 800528a:	bf14      	ite	ne
 800528c:	230a      	movne	r3, #10
 800528e:	2308      	moveq	r3, #8
 8005290:	2100      	movs	r1, #0
 8005292:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005296:	6866      	ldr	r6, [r4, #4]
 8005298:	60a6      	str	r6, [r4, #8]
 800529a:	2e00      	cmp	r6, #0
 800529c:	db05      	blt.n	80052aa <_printf_i+0x10e>
 800529e:	6821      	ldr	r1, [r4, #0]
 80052a0:	432e      	orrs	r6, r5
 80052a2:	f021 0104 	bic.w	r1, r1, #4
 80052a6:	6021      	str	r1, [r4, #0]
 80052a8:	d04b      	beq.n	8005342 <_printf_i+0x1a6>
 80052aa:	4616      	mov	r6, r2
 80052ac:	fbb5 f1f3 	udiv	r1, r5, r3
 80052b0:	fb03 5711 	mls	r7, r3, r1, r5
 80052b4:	5dc7      	ldrb	r7, [r0, r7]
 80052b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80052ba:	462f      	mov	r7, r5
 80052bc:	42bb      	cmp	r3, r7
 80052be:	460d      	mov	r5, r1
 80052c0:	d9f4      	bls.n	80052ac <_printf_i+0x110>
 80052c2:	2b08      	cmp	r3, #8
 80052c4:	d10b      	bne.n	80052de <_printf_i+0x142>
 80052c6:	6823      	ldr	r3, [r4, #0]
 80052c8:	07df      	lsls	r7, r3, #31
 80052ca:	d508      	bpl.n	80052de <_printf_i+0x142>
 80052cc:	6923      	ldr	r3, [r4, #16]
 80052ce:	6861      	ldr	r1, [r4, #4]
 80052d0:	4299      	cmp	r1, r3
 80052d2:	bfde      	ittt	le
 80052d4:	2330      	movle	r3, #48	@ 0x30
 80052d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80052da:	f106 36ff 	addle.w	r6, r6, #4294967295
 80052de:	1b92      	subs	r2, r2, r6
 80052e0:	6122      	str	r2, [r4, #16]
 80052e2:	f8cd a000 	str.w	sl, [sp]
 80052e6:	464b      	mov	r3, r9
 80052e8:	aa03      	add	r2, sp, #12
 80052ea:	4621      	mov	r1, r4
 80052ec:	4640      	mov	r0, r8
 80052ee:	f7ff fee7 	bl	80050c0 <_printf_common>
 80052f2:	3001      	adds	r0, #1
 80052f4:	d14a      	bne.n	800538c <_printf_i+0x1f0>
 80052f6:	f04f 30ff 	mov.w	r0, #4294967295
 80052fa:	b004      	add	sp, #16
 80052fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005300:	6823      	ldr	r3, [r4, #0]
 8005302:	f043 0320 	orr.w	r3, r3, #32
 8005306:	6023      	str	r3, [r4, #0]
 8005308:	4832      	ldr	r0, [pc, #200]	@ (80053d4 <_printf_i+0x238>)
 800530a:	2778      	movs	r7, #120	@ 0x78
 800530c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005310:	6823      	ldr	r3, [r4, #0]
 8005312:	6831      	ldr	r1, [r6, #0]
 8005314:	061f      	lsls	r7, r3, #24
 8005316:	f851 5b04 	ldr.w	r5, [r1], #4
 800531a:	d402      	bmi.n	8005322 <_printf_i+0x186>
 800531c:	065f      	lsls	r7, r3, #25
 800531e:	bf48      	it	mi
 8005320:	b2ad      	uxthmi	r5, r5
 8005322:	6031      	str	r1, [r6, #0]
 8005324:	07d9      	lsls	r1, r3, #31
 8005326:	bf44      	itt	mi
 8005328:	f043 0320 	orrmi.w	r3, r3, #32
 800532c:	6023      	strmi	r3, [r4, #0]
 800532e:	b11d      	cbz	r5, 8005338 <_printf_i+0x19c>
 8005330:	2310      	movs	r3, #16
 8005332:	e7ad      	b.n	8005290 <_printf_i+0xf4>
 8005334:	4826      	ldr	r0, [pc, #152]	@ (80053d0 <_printf_i+0x234>)
 8005336:	e7e9      	b.n	800530c <_printf_i+0x170>
 8005338:	6823      	ldr	r3, [r4, #0]
 800533a:	f023 0320 	bic.w	r3, r3, #32
 800533e:	6023      	str	r3, [r4, #0]
 8005340:	e7f6      	b.n	8005330 <_printf_i+0x194>
 8005342:	4616      	mov	r6, r2
 8005344:	e7bd      	b.n	80052c2 <_printf_i+0x126>
 8005346:	6833      	ldr	r3, [r6, #0]
 8005348:	6825      	ldr	r5, [r4, #0]
 800534a:	6961      	ldr	r1, [r4, #20]
 800534c:	1d18      	adds	r0, r3, #4
 800534e:	6030      	str	r0, [r6, #0]
 8005350:	062e      	lsls	r6, r5, #24
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	d501      	bpl.n	800535a <_printf_i+0x1be>
 8005356:	6019      	str	r1, [r3, #0]
 8005358:	e002      	b.n	8005360 <_printf_i+0x1c4>
 800535a:	0668      	lsls	r0, r5, #25
 800535c:	d5fb      	bpl.n	8005356 <_printf_i+0x1ba>
 800535e:	8019      	strh	r1, [r3, #0]
 8005360:	2300      	movs	r3, #0
 8005362:	6123      	str	r3, [r4, #16]
 8005364:	4616      	mov	r6, r2
 8005366:	e7bc      	b.n	80052e2 <_printf_i+0x146>
 8005368:	6833      	ldr	r3, [r6, #0]
 800536a:	1d1a      	adds	r2, r3, #4
 800536c:	6032      	str	r2, [r6, #0]
 800536e:	681e      	ldr	r6, [r3, #0]
 8005370:	6862      	ldr	r2, [r4, #4]
 8005372:	2100      	movs	r1, #0
 8005374:	4630      	mov	r0, r6
 8005376:	f7fa ff53 	bl	8000220 <memchr>
 800537a:	b108      	cbz	r0, 8005380 <_printf_i+0x1e4>
 800537c:	1b80      	subs	r0, r0, r6
 800537e:	6060      	str	r0, [r4, #4]
 8005380:	6863      	ldr	r3, [r4, #4]
 8005382:	6123      	str	r3, [r4, #16]
 8005384:	2300      	movs	r3, #0
 8005386:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800538a:	e7aa      	b.n	80052e2 <_printf_i+0x146>
 800538c:	6923      	ldr	r3, [r4, #16]
 800538e:	4632      	mov	r2, r6
 8005390:	4649      	mov	r1, r9
 8005392:	4640      	mov	r0, r8
 8005394:	47d0      	blx	sl
 8005396:	3001      	adds	r0, #1
 8005398:	d0ad      	beq.n	80052f6 <_printf_i+0x15a>
 800539a:	6823      	ldr	r3, [r4, #0]
 800539c:	079b      	lsls	r3, r3, #30
 800539e:	d413      	bmi.n	80053c8 <_printf_i+0x22c>
 80053a0:	68e0      	ldr	r0, [r4, #12]
 80053a2:	9b03      	ldr	r3, [sp, #12]
 80053a4:	4298      	cmp	r0, r3
 80053a6:	bfb8      	it	lt
 80053a8:	4618      	movlt	r0, r3
 80053aa:	e7a6      	b.n	80052fa <_printf_i+0x15e>
 80053ac:	2301      	movs	r3, #1
 80053ae:	4632      	mov	r2, r6
 80053b0:	4649      	mov	r1, r9
 80053b2:	4640      	mov	r0, r8
 80053b4:	47d0      	blx	sl
 80053b6:	3001      	adds	r0, #1
 80053b8:	d09d      	beq.n	80052f6 <_printf_i+0x15a>
 80053ba:	3501      	adds	r5, #1
 80053bc:	68e3      	ldr	r3, [r4, #12]
 80053be:	9903      	ldr	r1, [sp, #12]
 80053c0:	1a5b      	subs	r3, r3, r1
 80053c2:	42ab      	cmp	r3, r5
 80053c4:	dcf2      	bgt.n	80053ac <_printf_i+0x210>
 80053c6:	e7eb      	b.n	80053a0 <_printf_i+0x204>
 80053c8:	2500      	movs	r5, #0
 80053ca:	f104 0619 	add.w	r6, r4, #25
 80053ce:	e7f5      	b.n	80053bc <_printf_i+0x220>
 80053d0:	0800936e 	.word	0x0800936e
 80053d4:	0800937f 	.word	0x0800937f

080053d8 <_scanf_float>:
 80053d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053dc:	b087      	sub	sp, #28
 80053de:	4691      	mov	r9, r2
 80053e0:	9303      	str	r3, [sp, #12]
 80053e2:	688b      	ldr	r3, [r1, #8]
 80053e4:	1e5a      	subs	r2, r3, #1
 80053e6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80053ea:	bf81      	itttt	hi
 80053ec:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80053f0:	eb03 0b05 	addhi.w	fp, r3, r5
 80053f4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80053f8:	608b      	strhi	r3, [r1, #8]
 80053fa:	680b      	ldr	r3, [r1, #0]
 80053fc:	460a      	mov	r2, r1
 80053fe:	f04f 0500 	mov.w	r5, #0
 8005402:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8005406:	f842 3b1c 	str.w	r3, [r2], #28
 800540a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800540e:	4680      	mov	r8, r0
 8005410:	460c      	mov	r4, r1
 8005412:	bf98      	it	ls
 8005414:	f04f 0b00 	movls.w	fp, #0
 8005418:	9201      	str	r2, [sp, #4]
 800541a:	4616      	mov	r6, r2
 800541c:	46aa      	mov	sl, r5
 800541e:	462f      	mov	r7, r5
 8005420:	9502      	str	r5, [sp, #8]
 8005422:	68a2      	ldr	r2, [r4, #8]
 8005424:	b15a      	cbz	r2, 800543e <_scanf_float+0x66>
 8005426:	f8d9 3000 	ldr.w	r3, [r9]
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	2b4e      	cmp	r3, #78	@ 0x4e
 800542e:	d863      	bhi.n	80054f8 <_scanf_float+0x120>
 8005430:	2b40      	cmp	r3, #64	@ 0x40
 8005432:	d83b      	bhi.n	80054ac <_scanf_float+0xd4>
 8005434:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8005438:	b2c8      	uxtb	r0, r1
 800543a:	280e      	cmp	r0, #14
 800543c:	d939      	bls.n	80054b2 <_scanf_float+0xda>
 800543e:	b11f      	cbz	r7, 8005448 <_scanf_float+0x70>
 8005440:	6823      	ldr	r3, [r4, #0]
 8005442:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005446:	6023      	str	r3, [r4, #0]
 8005448:	f10a 3aff 	add.w	sl, sl, #4294967295
 800544c:	f1ba 0f01 	cmp.w	sl, #1
 8005450:	f200 8114 	bhi.w	800567c <_scanf_float+0x2a4>
 8005454:	9b01      	ldr	r3, [sp, #4]
 8005456:	429e      	cmp	r6, r3
 8005458:	f200 8105 	bhi.w	8005666 <_scanf_float+0x28e>
 800545c:	2001      	movs	r0, #1
 800545e:	b007      	add	sp, #28
 8005460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005464:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8005468:	2a0d      	cmp	r2, #13
 800546a:	d8e8      	bhi.n	800543e <_scanf_float+0x66>
 800546c:	a101      	add	r1, pc, #4	@ (adr r1, 8005474 <_scanf_float+0x9c>)
 800546e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005472:	bf00      	nop
 8005474:	080055bd 	.word	0x080055bd
 8005478:	0800543f 	.word	0x0800543f
 800547c:	0800543f 	.word	0x0800543f
 8005480:	0800543f 	.word	0x0800543f
 8005484:	08005619 	.word	0x08005619
 8005488:	080055f3 	.word	0x080055f3
 800548c:	0800543f 	.word	0x0800543f
 8005490:	0800543f 	.word	0x0800543f
 8005494:	080055cb 	.word	0x080055cb
 8005498:	0800543f 	.word	0x0800543f
 800549c:	0800543f 	.word	0x0800543f
 80054a0:	0800543f 	.word	0x0800543f
 80054a4:	0800543f 	.word	0x0800543f
 80054a8:	08005587 	.word	0x08005587
 80054ac:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80054b0:	e7da      	b.n	8005468 <_scanf_float+0x90>
 80054b2:	290e      	cmp	r1, #14
 80054b4:	d8c3      	bhi.n	800543e <_scanf_float+0x66>
 80054b6:	a001      	add	r0, pc, #4	@ (adr r0, 80054bc <_scanf_float+0xe4>)
 80054b8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80054bc:	08005577 	.word	0x08005577
 80054c0:	0800543f 	.word	0x0800543f
 80054c4:	08005577 	.word	0x08005577
 80054c8:	08005607 	.word	0x08005607
 80054cc:	0800543f 	.word	0x0800543f
 80054d0:	08005519 	.word	0x08005519
 80054d4:	0800555d 	.word	0x0800555d
 80054d8:	0800555d 	.word	0x0800555d
 80054dc:	0800555d 	.word	0x0800555d
 80054e0:	0800555d 	.word	0x0800555d
 80054e4:	0800555d 	.word	0x0800555d
 80054e8:	0800555d 	.word	0x0800555d
 80054ec:	0800555d 	.word	0x0800555d
 80054f0:	0800555d 	.word	0x0800555d
 80054f4:	0800555d 	.word	0x0800555d
 80054f8:	2b6e      	cmp	r3, #110	@ 0x6e
 80054fa:	d809      	bhi.n	8005510 <_scanf_float+0x138>
 80054fc:	2b60      	cmp	r3, #96	@ 0x60
 80054fe:	d8b1      	bhi.n	8005464 <_scanf_float+0x8c>
 8005500:	2b54      	cmp	r3, #84	@ 0x54
 8005502:	d07b      	beq.n	80055fc <_scanf_float+0x224>
 8005504:	2b59      	cmp	r3, #89	@ 0x59
 8005506:	d19a      	bne.n	800543e <_scanf_float+0x66>
 8005508:	2d07      	cmp	r5, #7
 800550a:	d198      	bne.n	800543e <_scanf_float+0x66>
 800550c:	2508      	movs	r5, #8
 800550e:	e02f      	b.n	8005570 <_scanf_float+0x198>
 8005510:	2b74      	cmp	r3, #116	@ 0x74
 8005512:	d073      	beq.n	80055fc <_scanf_float+0x224>
 8005514:	2b79      	cmp	r3, #121	@ 0x79
 8005516:	e7f6      	b.n	8005506 <_scanf_float+0x12e>
 8005518:	6821      	ldr	r1, [r4, #0]
 800551a:	05c8      	lsls	r0, r1, #23
 800551c:	d51e      	bpl.n	800555c <_scanf_float+0x184>
 800551e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8005522:	6021      	str	r1, [r4, #0]
 8005524:	3701      	adds	r7, #1
 8005526:	f1bb 0f00 	cmp.w	fp, #0
 800552a:	d003      	beq.n	8005534 <_scanf_float+0x15c>
 800552c:	3201      	adds	r2, #1
 800552e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005532:	60a2      	str	r2, [r4, #8]
 8005534:	68a3      	ldr	r3, [r4, #8]
 8005536:	3b01      	subs	r3, #1
 8005538:	60a3      	str	r3, [r4, #8]
 800553a:	6923      	ldr	r3, [r4, #16]
 800553c:	3301      	adds	r3, #1
 800553e:	6123      	str	r3, [r4, #16]
 8005540:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8005544:	3b01      	subs	r3, #1
 8005546:	2b00      	cmp	r3, #0
 8005548:	f8c9 3004 	str.w	r3, [r9, #4]
 800554c:	f340 8082 	ble.w	8005654 <_scanf_float+0x27c>
 8005550:	f8d9 3000 	ldr.w	r3, [r9]
 8005554:	3301      	adds	r3, #1
 8005556:	f8c9 3000 	str.w	r3, [r9]
 800555a:	e762      	b.n	8005422 <_scanf_float+0x4a>
 800555c:	eb1a 0105 	adds.w	r1, sl, r5
 8005560:	f47f af6d 	bne.w	800543e <_scanf_float+0x66>
 8005564:	6822      	ldr	r2, [r4, #0]
 8005566:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800556a:	6022      	str	r2, [r4, #0]
 800556c:	460d      	mov	r5, r1
 800556e:	468a      	mov	sl, r1
 8005570:	f806 3b01 	strb.w	r3, [r6], #1
 8005574:	e7de      	b.n	8005534 <_scanf_float+0x15c>
 8005576:	6822      	ldr	r2, [r4, #0]
 8005578:	0610      	lsls	r0, r2, #24
 800557a:	f57f af60 	bpl.w	800543e <_scanf_float+0x66>
 800557e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005582:	6022      	str	r2, [r4, #0]
 8005584:	e7f4      	b.n	8005570 <_scanf_float+0x198>
 8005586:	f1ba 0f00 	cmp.w	sl, #0
 800558a:	d10c      	bne.n	80055a6 <_scanf_float+0x1ce>
 800558c:	b977      	cbnz	r7, 80055ac <_scanf_float+0x1d4>
 800558e:	6822      	ldr	r2, [r4, #0]
 8005590:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005594:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005598:	d108      	bne.n	80055ac <_scanf_float+0x1d4>
 800559a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800559e:	6022      	str	r2, [r4, #0]
 80055a0:	f04f 0a01 	mov.w	sl, #1
 80055a4:	e7e4      	b.n	8005570 <_scanf_float+0x198>
 80055a6:	f1ba 0f02 	cmp.w	sl, #2
 80055aa:	d050      	beq.n	800564e <_scanf_float+0x276>
 80055ac:	2d01      	cmp	r5, #1
 80055ae:	d002      	beq.n	80055b6 <_scanf_float+0x1de>
 80055b0:	2d04      	cmp	r5, #4
 80055b2:	f47f af44 	bne.w	800543e <_scanf_float+0x66>
 80055b6:	3501      	adds	r5, #1
 80055b8:	b2ed      	uxtb	r5, r5
 80055ba:	e7d9      	b.n	8005570 <_scanf_float+0x198>
 80055bc:	f1ba 0f01 	cmp.w	sl, #1
 80055c0:	f47f af3d 	bne.w	800543e <_scanf_float+0x66>
 80055c4:	f04f 0a02 	mov.w	sl, #2
 80055c8:	e7d2      	b.n	8005570 <_scanf_float+0x198>
 80055ca:	b975      	cbnz	r5, 80055ea <_scanf_float+0x212>
 80055cc:	2f00      	cmp	r7, #0
 80055ce:	f47f af37 	bne.w	8005440 <_scanf_float+0x68>
 80055d2:	6822      	ldr	r2, [r4, #0]
 80055d4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80055d8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80055dc:	f040 8103 	bne.w	80057e6 <_scanf_float+0x40e>
 80055e0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80055e4:	6022      	str	r2, [r4, #0]
 80055e6:	2501      	movs	r5, #1
 80055e8:	e7c2      	b.n	8005570 <_scanf_float+0x198>
 80055ea:	2d03      	cmp	r5, #3
 80055ec:	d0e3      	beq.n	80055b6 <_scanf_float+0x1de>
 80055ee:	2d05      	cmp	r5, #5
 80055f0:	e7df      	b.n	80055b2 <_scanf_float+0x1da>
 80055f2:	2d02      	cmp	r5, #2
 80055f4:	f47f af23 	bne.w	800543e <_scanf_float+0x66>
 80055f8:	2503      	movs	r5, #3
 80055fa:	e7b9      	b.n	8005570 <_scanf_float+0x198>
 80055fc:	2d06      	cmp	r5, #6
 80055fe:	f47f af1e 	bne.w	800543e <_scanf_float+0x66>
 8005602:	2507      	movs	r5, #7
 8005604:	e7b4      	b.n	8005570 <_scanf_float+0x198>
 8005606:	6822      	ldr	r2, [r4, #0]
 8005608:	0591      	lsls	r1, r2, #22
 800560a:	f57f af18 	bpl.w	800543e <_scanf_float+0x66>
 800560e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8005612:	6022      	str	r2, [r4, #0]
 8005614:	9702      	str	r7, [sp, #8]
 8005616:	e7ab      	b.n	8005570 <_scanf_float+0x198>
 8005618:	6822      	ldr	r2, [r4, #0]
 800561a:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800561e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005622:	d005      	beq.n	8005630 <_scanf_float+0x258>
 8005624:	0550      	lsls	r0, r2, #21
 8005626:	f57f af0a 	bpl.w	800543e <_scanf_float+0x66>
 800562a:	2f00      	cmp	r7, #0
 800562c:	f000 80db 	beq.w	80057e6 <_scanf_float+0x40e>
 8005630:	0591      	lsls	r1, r2, #22
 8005632:	bf58      	it	pl
 8005634:	9902      	ldrpl	r1, [sp, #8]
 8005636:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800563a:	bf58      	it	pl
 800563c:	1a79      	subpl	r1, r7, r1
 800563e:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8005642:	bf58      	it	pl
 8005644:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005648:	6022      	str	r2, [r4, #0]
 800564a:	2700      	movs	r7, #0
 800564c:	e790      	b.n	8005570 <_scanf_float+0x198>
 800564e:	f04f 0a03 	mov.w	sl, #3
 8005652:	e78d      	b.n	8005570 <_scanf_float+0x198>
 8005654:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005658:	4649      	mov	r1, r9
 800565a:	4640      	mov	r0, r8
 800565c:	4798      	blx	r3
 800565e:	2800      	cmp	r0, #0
 8005660:	f43f aedf 	beq.w	8005422 <_scanf_float+0x4a>
 8005664:	e6eb      	b.n	800543e <_scanf_float+0x66>
 8005666:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800566a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800566e:	464a      	mov	r2, r9
 8005670:	4640      	mov	r0, r8
 8005672:	4798      	blx	r3
 8005674:	6923      	ldr	r3, [r4, #16]
 8005676:	3b01      	subs	r3, #1
 8005678:	6123      	str	r3, [r4, #16]
 800567a:	e6eb      	b.n	8005454 <_scanf_float+0x7c>
 800567c:	1e6b      	subs	r3, r5, #1
 800567e:	2b06      	cmp	r3, #6
 8005680:	d824      	bhi.n	80056cc <_scanf_float+0x2f4>
 8005682:	2d02      	cmp	r5, #2
 8005684:	d836      	bhi.n	80056f4 <_scanf_float+0x31c>
 8005686:	9b01      	ldr	r3, [sp, #4]
 8005688:	429e      	cmp	r6, r3
 800568a:	f67f aee7 	bls.w	800545c <_scanf_float+0x84>
 800568e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005692:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005696:	464a      	mov	r2, r9
 8005698:	4640      	mov	r0, r8
 800569a:	4798      	blx	r3
 800569c:	6923      	ldr	r3, [r4, #16]
 800569e:	3b01      	subs	r3, #1
 80056a0:	6123      	str	r3, [r4, #16]
 80056a2:	e7f0      	b.n	8005686 <_scanf_float+0x2ae>
 80056a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80056a8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80056ac:	464a      	mov	r2, r9
 80056ae:	4640      	mov	r0, r8
 80056b0:	4798      	blx	r3
 80056b2:	6923      	ldr	r3, [r4, #16]
 80056b4:	3b01      	subs	r3, #1
 80056b6:	6123      	str	r3, [r4, #16]
 80056b8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80056bc:	fa5f fa8a 	uxtb.w	sl, sl
 80056c0:	f1ba 0f02 	cmp.w	sl, #2
 80056c4:	d1ee      	bne.n	80056a4 <_scanf_float+0x2cc>
 80056c6:	3d03      	subs	r5, #3
 80056c8:	b2ed      	uxtb	r5, r5
 80056ca:	1b76      	subs	r6, r6, r5
 80056cc:	6823      	ldr	r3, [r4, #0]
 80056ce:	05da      	lsls	r2, r3, #23
 80056d0:	d530      	bpl.n	8005734 <_scanf_float+0x35c>
 80056d2:	055b      	lsls	r3, r3, #21
 80056d4:	d511      	bpl.n	80056fa <_scanf_float+0x322>
 80056d6:	9b01      	ldr	r3, [sp, #4]
 80056d8:	429e      	cmp	r6, r3
 80056da:	f67f aebf 	bls.w	800545c <_scanf_float+0x84>
 80056de:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80056e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80056e6:	464a      	mov	r2, r9
 80056e8:	4640      	mov	r0, r8
 80056ea:	4798      	blx	r3
 80056ec:	6923      	ldr	r3, [r4, #16]
 80056ee:	3b01      	subs	r3, #1
 80056f0:	6123      	str	r3, [r4, #16]
 80056f2:	e7f0      	b.n	80056d6 <_scanf_float+0x2fe>
 80056f4:	46aa      	mov	sl, r5
 80056f6:	46b3      	mov	fp, r6
 80056f8:	e7de      	b.n	80056b8 <_scanf_float+0x2e0>
 80056fa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80056fe:	6923      	ldr	r3, [r4, #16]
 8005700:	2965      	cmp	r1, #101	@ 0x65
 8005702:	f103 33ff 	add.w	r3, r3, #4294967295
 8005706:	f106 35ff 	add.w	r5, r6, #4294967295
 800570a:	6123      	str	r3, [r4, #16]
 800570c:	d00c      	beq.n	8005728 <_scanf_float+0x350>
 800570e:	2945      	cmp	r1, #69	@ 0x45
 8005710:	d00a      	beq.n	8005728 <_scanf_float+0x350>
 8005712:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005716:	464a      	mov	r2, r9
 8005718:	4640      	mov	r0, r8
 800571a:	4798      	blx	r3
 800571c:	6923      	ldr	r3, [r4, #16]
 800571e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005722:	3b01      	subs	r3, #1
 8005724:	1eb5      	subs	r5, r6, #2
 8005726:	6123      	str	r3, [r4, #16]
 8005728:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800572c:	464a      	mov	r2, r9
 800572e:	4640      	mov	r0, r8
 8005730:	4798      	blx	r3
 8005732:	462e      	mov	r6, r5
 8005734:	6822      	ldr	r2, [r4, #0]
 8005736:	f012 0210 	ands.w	r2, r2, #16
 800573a:	d001      	beq.n	8005740 <_scanf_float+0x368>
 800573c:	2000      	movs	r0, #0
 800573e:	e68e      	b.n	800545e <_scanf_float+0x86>
 8005740:	7032      	strb	r2, [r6, #0]
 8005742:	6823      	ldr	r3, [r4, #0]
 8005744:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005748:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800574c:	d125      	bne.n	800579a <_scanf_float+0x3c2>
 800574e:	9b02      	ldr	r3, [sp, #8]
 8005750:	429f      	cmp	r7, r3
 8005752:	d00a      	beq.n	800576a <_scanf_float+0x392>
 8005754:	1bda      	subs	r2, r3, r7
 8005756:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800575a:	429e      	cmp	r6, r3
 800575c:	bf28      	it	cs
 800575e:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8005762:	4922      	ldr	r1, [pc, #136]	@ (80057ec <_scanf_float+0x414>)
 8005764:	4630      	mov	r0, r6
 8005766:	f000 f907 	bl	8005978 <siprintf>
 800576a:	9901      	ldr	r1, [sp, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	4640      	mov	r0, r8
 8005770:	f002 fbf2 	bl	8007f58 <_strtod_r>
 8005774:	9b03      	ldr	r3, [sp, #12]
 8005776:	6821      	ldr	r1, [r4, #0]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f011 0f02 	tst.w	r1, #2
 800577e:	ec57 6b10 	vmov	r6, r7, d0
 8005782:	f103 0204 	add.w	r2, r3, #4
 8005786:	d015      	beq.n	80057b4 <_scanf_float+0x3dc>
 8005788:	9903      	ldr	r1, [sp, #12]
 800578a:	600a      	str	r2, [r1, #0]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	e9c3 6700 	strd	r6, r7, [r3]
 8005792:	68e3      	ldr	r3, [r4, #12]
 8005794:	3301      	adds	r3, #1
 8005796:	60e3      	str	r3, [r4, #12]
 8005798:	e7d0      	b.n	800573c <_scanf_float+0x364>
 800579a:	9b04      	ldr	r3, [sp, #16]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d0e4      	beq.n	800576a <_scanf_float+0x392>
 80057a0:	9905      	ldr	r1, [sp, #20]
 80057a2:	230a      	movs	r3, #10
 80057a4:	3101      	adds	r1, #1
 80057a6:	4640      	mov	r0, r8
 80057a8:	f002 fc56 	bl	8008058 <_strtol_r>
 80057ac:	9b04      	ldr	r3, [sp, #16]
 80057ae:	9e05      	ldr	r6, [sp, #20]
 80057b0:	1ac2      	subs	r2, r0, r3
 80057b2:	e7d0      	b.n	8005756 <_scanf_float+0x37e>
 80057b4:	f011 0f04 	tst.w	r1, #4
 80057b8:	9903      	ldr	r1, [sp, #12]
 80057ba:	600a      	str	r2, [r1, #0]
 80057bc:	d1e6      	bne.n	800578c <_scanf_float+0x3b4>
 80057be:	681d      	ldr	r5, [r3, #0]
 80057c0:	4632      	mov	r2, r6
 80057c2:	463b      	mov	r3, r7
 80057c4:	4630      	mov	r0, r6
 80057c6:	4639      	mov	r1, r7
 80057c8:	f7fb f9d8 	bl	8000b7c <__aeabi_dcmpun>
 80057cc:	b128      	cbz	r0, 80057da <_scanf_float+0x402>
 80057ce:	4808      	ldr	r0, [pc, #32]	@ (80057f0 <_scanf_float+0x418>)
 80057d0:	f000 f9b8 	bl	8005b44 <nanf>
 80057d4:	ed85 0a00 	vstr	s0, [r5]
 80057d8:	e7db      	b.n	8005792 <_scanf_float+0x3ba>
 80057da:	4630      	mov	r0, r6
 80057dc:	4639      	mov	r1, r7
 80057de:	f7fb fa2b 	bl	8000c38 <__aeabi_d2f>
 80057e2:	6028      	str	r0, [r5, #0]
 80057e4:	e7d5      	b.n	8005792 <_scanf_float+0x3ba>
 80057e6:	2700      	movs	r7, #0
 80057e8:	e62e      	b.n	8005448 <_scanf_float+0x70>
 80057ea:	bf00      	nop
 80057ec:	08009390 	.word	0x08009390
 80057f0:	080094d1 	.word	0x080094d1

080057f4 <std>:
 80057f4:	2300      	movs	r3, #0
 80057f6:	b510      	push	{r4, lr}
 80057f8:	4604      	mov	r4, r0
 80057fa:	e9c0 3300 	strd	r3, r3, [r0]
 80057fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005802:	6083      	str	r3, [r0, #8]
 8005804:	8181      	strh	r1, [r0, #12]
 8005806:	6643      	str	r3, [r0, #100]	@ 0x64
 8005808:	81c2      	strh	r2, [r0, #14]
 800580a:	6183      	str	r3, [r0, #24]
 800580c:	4619      	mov	r1, r3
 800580e:	2208      	movs	r2, #8
 8005810:	305c      	adds	r0, #92	@ 0x5c
 8005812:	f000 f916 	bl	8005a42 <memset>
 8005816:	4b0d      	ldr	r3, [pc, #52]	@ (800584c <std+0x58>)
 8005818:	6263      	str	r3, [r4, #36]	@ 0x24
 800581a:	4b0d      	ldr	r3, [pc, #52]	@ (8005850 <std+0x5c>)
 800581c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800581e:	4b0d      	ldr	r3, [pc, #52]	@ (8005854 <std+0x60>)
 8005820:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005822:	4b0d      	ldr	r3, [pc, #52]	@ (8005858 <std+0x64>)
 8005824:	6323      	str	r3, [r4, #48]	@ 0x30
 8005826:	4b0d      	ldr	r3, [pc, #52]	@ (800585c <std+0x68>)
 8005828:	6224      	str	r4, [r4, #32]
 800582a:	429c      	cmp	r4, r3
 800582c:	d006      	beq.n	800583c <std+0x48>
 800582e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005832:	4294      	cmp	r4, r2
 8005834:	d002      	beq.n	800583c <std+0x48>
 8005836:	33d0      	adds	r3, #208	@ 0xd0
 8005838:	429c      	cmp	r4, r3
 800583a:	d105      	bne.n	8005848 <std+0x54>
 800583c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005844:	f000 b97a 	b.w	8005b3c <__retarget_lock_init_recursive>
 8005848:	bd10      	pop	{r4, pc}
 800584a:	bf00      	nop
 800584c:	080059bd 	.word	0x080059bd
 8005850:	080059df 	.word	0x080059df
 8005854:	08005a17 	.word	0x08005a17
 8005858:	08005a3b 	.word	0x08005a3b
 800585c:	20000354 	.word	0x20000354

08005860 <stdio_exit_handler>:
 8005860:	4a02      	ldr	r2, [pc, #8]	@ (800586c <stdio_exit_handler+0xc>)
 8005862:	4903      	ldr	r1, [pc, #12]	@ (8005870 <stdio_exit_handler+0x10>)
 8005864:	4803      	ldr	r0, [pc, #12]	@ (8005874 <stdio_exit_handler+0x14>)
 8005866:	f000 b869 	b.w	800593c <_fwalk_sglue>
 800586a:	bf00      	nop
 800586c:	2000000c 	.word	0x2000000c
 8005870:	08008415 	.word	0x08008415
 8005874:	2000001c 	.word	0x2000001c

08005878 <cleanup_stdio>:
 8005878:	6841      	ldr	r1, [r0, #4]
 800587a:	4b0c      	ldr	r3, [pc, #48]	@ (80058ac <cleanup_stdio+0x34>)
 800587c:	4299      	cmp	r1, r3
 800587e:	b510      	push	{r4, lr}
 8005880:	4604      	mov	r4, r0
 8005882:	d001      	beq.n	8005888 <cleanup_stdio+0x10>
 8005884:	f002 fdc6 	bl	8008414 <_fflush_r>
 8005888:	68a1      	ldr	r1, [r4, #8]
 800588a:	4b09      	ldr	r3, [pc, #36]	@ (80058b0 <cleanup_stdio+0x38>)
 800588c:	4299      	cmp	r1, r3
 800588e:	d002      	beq.n	8005896 <cleanup_stdio+0x1e>
 8005890:	4620      	mov	r0, r4
 8005892:	f002 fdbf 	bl	8008414 <_fflush_r>
 8005896:	68e1      	ldr	r1, [r4, #12]
 8005898:	4b06      	ldr	r3, [pc, #24]	@ (80058b4 <cleanup_stdio+0x3c>)
 800589a:	4299      	cmp	r1, r3
 800589c:	d004      	beq.n	80058a8 <cleanup_stdio+0x30>
 800589e:	4620      	mov	r0, r4
 80058a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058a4:	f002 bdb6 	b.w	8008414 <_fflush_r>
 80058a8:	bd10      	pop	{r4, pc}
 80058aa:	bf00      	nop
 80058ac:	20000354 	.word	0x20000354
 80058b0:	200003bc 	.word	0x200003bc
 80058b4:	20000424 	.word	0x20000424

080058b8 <global_stdio_init.part.0>:
 80058b8:	b510      	push	{r4, lr}
 80058ba:	4b0b      	ldr	r3, [pc, #44]	@ (80058e8 <global_stdio_init.part.0+0x30>)
 80058bc:	4c0b      	ldr	r4, [pc, #44]	@ (80058ec <global_stdio_init.part.0+0x34>)
 80058be:	4a0c      	ldr	r2, [pc, #48]	@ (80058f0 <global_stdio_init.part.0+0x38>)
 80058c0:	601a      	str	r2, [r3, #0]
 80058c2:	4620      	mov	r0, r4
 80058c4:	2200      	movs	r2, #0
 80058c6:	2104      	movs	r1, #4
 80058c8:	f7ff ff94 	bl	80057f4 <std>
 80058cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80058d0:	2201      	movs	r2, #1
 80058d2:	2109      	movs	r1, #9
 80058d4:	f7ff ff8e 	bl	80057f4 <std>
 80058d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80058dc:	2202      	movs	r2, #2
 80058de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058e2:	2112      	movs	r1, #18
 80058e4:	f7ff bf86 	b.w	80057f4 <std>
 80058e8:	2000048c 	.word	0x2000048c
 80058ec:	20000354 	.word	0x20000354
 80058f0:	08005861 	.word	0x08005861

080058f4 <__sfp_lock_acquire>:
 80058f4:	4801      	ldr	r0, [pc, #4]	@ (80058fc <__sfp_lock_acquire+0x8>)
 80058f6:	f000 b922 	b.w	8005b3e <__retarget_lock_acquire_recursive>
 80058fa:	bf00      	nop
 80058fc:	20000495 	.word	0x20000495

08005900 <__sfp_lock_release>:
 8005900:	4801      	ldr	r0, [pc, #4]	@ (8005908 <__sfp_lock_release+0x8>)
 8005902:	f000 b91d 	b.w	8005b40 <__retarget_lock_release_recursive>
 8005906:	bf00      	nop
 8005908:	20000495 	.word	0x20000495

0800590c <__sinit>:
 800590c:	b510      	push	{r4, lr}
 800590e:	4604      	mov	r4, r0
 8005910:	f7ff fff0 	bl	80058f4 <__sfp_lock_acquire>
 8005914:	6a23      	ldr	r3, [r4, #32]
 8005916:	b11b      	cbz	r3, 8005920 <__sinit+0x14>
 8005918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800591c:	f7ff bff0 	b.w	8005900 <__sfp_lock_release>
 8005920:	4b04      	ldr	r3, [pc, #16]	@ (8005934 <__sinit+0x28>)
 8005922:	6223      	str	r3, [r4, #32]
 8005924:	4b04      	ldr	r3, [pc, #16]	@ (8005938 <__sinit+0x2c>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d1f5      	bne.n	8005918 <__sinit+0xc>
 800592c:	f7ff ffc4 	bl	80058b8 <global_stdio_init.part.0>
 8005930:	e7f2      	b.n	8005918 <__sinit+0xc>
 8005932:	bf00      	nop
 8005934:	08005879 	.word	0x08005879
 8005938:	2000048c 	.word	0x2000048c

0800593c <_fwalk_sglue>:
 800593c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005940:	4607      	mov	r7, r0
 8005942:	4688      	mov	r8, r1
 8005944:	4614      	mov	r4, r2
 8005946:	2600      	movs	r6, #0
 8005948:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800594c:	f1b9 0901 	subs.w	r9, r9, #1
 8005950:	d505      	bpl.n	800595e <_fwalk_sglue+0x22>
 8005952:	6824      	ldr	r4, [r4, #0]
 8005954:	2c00      	cmp	r4, #0
 8005956:	d1f7      	bne.n	8005948 <_fwalk_sglue+0xc>
 8005958:	4630      	mov	r0, r6
 800595a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800595e:	89ab      	ldrh	r3, [r5, #12]
 8005960:	2b01      	cmp	r3, #1
 8005962:	d907      	bls.n	8005974 <_fwalk_sglue+0x38>
 8005964:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005968:	3301      	adds	r3, #1
 800596a:	d003      	beq.n	8005974 <_fwalk_sglue+0x38>
 800596c:	4629      	mov	r1, r5
 800596e:	4638      	mov	r0, r7
 8005970:	47c0      	blx	r8
 8005972:	4306      	orrs	r6, r0
 8005974:	3568      	adds	r5, #104	@ 0x68
 8005976:	e7e9      	b.n	800594c <_fwalk_sglue+0x10>

08005978 <siprintf>:
 8005978:	b40e      	push	{r1, r2, r3}
 800597a:	b510      	push	{r4, lr}
 800597c:	b09d      	sub	sp, #116	@ 0x74
 800597e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005980:	9002      	str	r0, [sp, #8]
 8005982:	9006      	str	r0, [sp, #24]
 8005984:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005988:	480a      	ldr	r0, [pc, #40]	@ (80059b4 <siprintf+0x3c>)
 800598a:	9107      	str	r1, [sp, #28]
 800598c:	9104      	str	r1, [sp, #16]
 800598e:	490a      	ldr	r1, [pc, #40]	@ (80059b8 <siprintf+0x40>)
 8005990:	f853 2b04 	ldr.w	r2, [r3], #4
 8005994:	9105      	str	r1, [sp, #20]
 8005996:	2400      	movs	r4, #0
 8005998:	a902      	add	r1, sp, #8
 800599a:	6800      	ldr	r0, [r0, #0]
 800599c:	9301      	str	r3, [sp, #4]
 800599e:	941b      	str	r4, [sp, #108]	@ 0x6c
 80059a0:	f002 fbb8 	bl	8008114 <_svfiprintf_r>
 80059a4:	9b02      	ldr	r3, [sp, #8]
 80059a6:	701c      	strb	r4, [r3, #0]
 80059a8:	b01d      	add	sp, #116	@ 0x74
 80059aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059ae:	b003      	add	sp, #12
 80059b0:	4770      	bx	lr
 80059b2:	bf00      	nop
 80059b4:	20000018 	.word	0x20000018
 80059b8:	ffff0208 	.word	0xffff0208

080059bc <__sread>:
 80059bc:	b510      	push	{r4, lr}
 80059be:	460c      	mov	r4, r1
 80059c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059c4:	f000 f86c 	bl	8005aa0 <_read_r>
 80059c8:	2800      	cmp	r0, #0
 80059ca:	bfab      	itete	ge
 80059cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80059ce:	89a3      	ldrhlt	r3, [r4, #12]
 80059d0:	181b      	addge	r3, r3, r0
 80059d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80059d6:	bfac      	ite	ge
 80059d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80059da:	81a3      	strhlt	r3, [r4, #12]
 80059dc:	bd10      	pop	{r4, pc}

080059de <__swrite>:
 80059de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059e2:	461f      	mov	r7, r3
 80059e4:	898b      	ldrh	r3, [r1, #12]
 80059e6:	05db      	lsls	r3, r3, #23
 80059e8:	4605      	mov	r5, r0
 80059ea:	460c      	mov	r4, r1
 80059ec:	4616      	mov	r6, r2
 80059ee:	d505      	bpl.n	80059fc <__swrite+0x1e>
 80059f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059f4:	2302      	movs	r3, #2
 80059f6:	2200      	movs	r2, #0
 80059f8:	f000 f840 	bl	8005a7c <_lseek_r>
 80059fc:	89a3      	ldrh	r3, [r4, #12]
 80059fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a02:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a06:	81a3      	strh	r3, [r4, #12]
 8005a08:	4632      	mov	r2, r6
 8005a0a:	463b      	mov	r3, r7
 8005a0c:	4628      	mov	r0, r5
 8005a0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a12:	f000 b857 	b.w	8005ac4 <_write_r>

08005a16 <__sseek>:
 8005a16:	b510      	push	{r4, lr}
 8005a18:	460c      	mov	r4, r1
 8005a1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a1e:	f000 f82d 	bl	8005a7c <_lseek_r>
 8005a22:	1c43      	adds	r3, r0, #1
 8005a24:	89a3      	ldrh	r3, [r4, #12]
 8005a26:	bf15      	itete	ne
 8005a28:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005a2a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005a2e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005a32:	81a3      	strheq	r3, [r4, #12]
 8005a34:	bf18      	it	ne
 8005a36:	81a3      	strhne	r3, [r4, #12]
 8005a38:	bd10      	pop	{r4, pc}

08005a3a <__sclose>:
 8005a3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a3e:	f000 b80d 	b.w	8005a5c <_close_r>

08005a42 <memset>:
 8005a42:	4402      	add	r2, r0
 8005a44:	4603      	mov	r3, r0
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d100      	bne.n	8005a4c <memset+0xa>
 8005a4a:	4770      	bx	lr
 8005a4c:	f803 1b01 	strb.w	r1, [r3], #1
 8005a50:	e7f9      	b.n	8005a46 <memset+0x4>
	...

08005a54 <_localeconv_r>:
 8005a54:	4800      	ldr	r0, [pc, #0]	@ (8005a58 <_localeconv_r+0x4>)
 8005a56:	4770      	bx	lr
 8005a58:	20000158 	.word	0x20000158

08005a5c <_close_r>:
 8005a5c:	b538      	push	{r3, r4, r5, lr}
 8005a5e:	4d06      	ldr	r5, [pc, #24]	@ (8005a78 <_close_r+0x1c>)
 8005a60:	2300      	movs	r3, #0
 8005a62:	4604      	mov	r4, r0
 8005a64:	4608      	mov	r0, r1
 8005a66:	602b      	str	r3, [r5, #0]
 8005a68:	f7fb fe9e 	bl	80017a8 <_close>
 8005a6c:	1c43      	adds	r3, r0, #1
 8005a6e:	d102      	bne.n	8005a76 <_close_r+0x1a>
 8005a70:	682b      	ldr	r3, [r5, #0]
 8005a72:	b103      	cbz	r3, 8005a76 <_close_r+0x1a>
 8005a74:	6023      	str	r3, [r4, #0]
 8005a76:	bd38      	pop	{r3, r4, r5, pc}
 8005a78:	20000490 	.word	0x20000490

08005a7c <_lseek_r>:
 8005a7c:	b538      	push	{r3, r4, r5, lr}
 8005a7e:	4d07      	ldr	r5, [pc, #28]	@ (8005a9c <_lseek_r+0x20>)
 8005a80:	4604      	mov	r4, r0
 8005a82:	4608      	mov	r0, r1
 8005a84:	4611      	mov	r1, r2
 8005a86:	2200      	movs	r2, #0
 8005a88:	602a      	str	r2, [r5, #0]
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	f7fb feb3 	bl	80017f6 <_lseek>
 8005a90:	1c43      	adds	r3, r0, #1
 8005a92:	d102      	bne.n	8005a9a <_lseek_r+0x1e>
 8005a94:	682b      	ldr	r3, [r5, #0]
 8005a96:	b103      	cbz	r3, 8005a9a <_lseek_r+0x1e>
 8005a98:	6023      	str	r3, [r4, #0]
 8005a9a:	bd38      	pop	{r3, r4, r5, pc}
 8005a9c:	20000490 	.word	0x20000490

08005aa0 <_read_r>:
 8005aa0:	b538      	push	{r3, r4, r5, lr}
 8005aa2:	4d07      	ldr	r5, [pc, #28]	@ (8005ac0 <_read_r+0x20>)
 8005aa4:	4604      	mov	r4, r0
 8005aa6:	4608      	mov	r0, r1
 8005aa8:	4611      	mov	r1, r2
 8005aaa:	2200      	movs	r2, #0
 8005aac:	602a      	str	r2, [r5, #0]
 8005aae:	461a      	mov	r2, r3
 8005ab0:	f7fb fe41 	bl	8001736 <_read>
 8005ab4:	1c43      	adds	r3, r0, #1
 8005ab6:	d102      	bne.n	8005abe <_read_r+0x1e>
 8005ab8:	682b      	ldr	r3, [r5, #0]
 8005aba:	b103      	cbz	r3, 8005abe <_read_r+0x1e>
 8005abc:	6023      	str	r3, [r4, #0]
 8005abe:	bd38      	pop	{r3, r4, r5, pc}
 8005ac0:	20000490 	.word	0x20000490

08005ac4 <_write_r>:
 8005ac4:	b538      	push	{r3, r4, r5, lr}
 8005ac6:	4d07      	ldr	r5, [pc, #28]	@ (8005ae4 <_write_r+0x20>)
 8005ac8:	4604      	mov	r4, r0
 8005aca:	4608      	mov	r0, r1
 8005acc:	4611      	mov	r1, r2
 8005ace:	2200      	movs	r2, #0
 8005ad0:	602a      	str	r2, [r5, #0]
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	f7fb fe4c 	bl	8001770 <_write>
 8005ad8:	1c43      	adds	r3, r0, #1
 8005ada:	d102      	bne.n	8005ae2 <_write_r+0x1e>
 8005adc:	682b      	ldr	r3, [r5, #0]
 8005ade:	b103      	cbz	r3, 8005ae2 <_write_r+0x1e>
 8005ae0:	6023      	str	r3, [r4, #0]
 8005ae2:	bd38      	pop	{r3, r4, r5, pc}
 8005ae4:	20000490 	.word	0x20000490

08005ae8 <__errno>:
 8005ae8:	4b01      	ldr	r3, [pc, #4]	@ (8005af0 <__errno+0x8>)
 8005aea:	6818      	ldr	r0, [r3, #0]
 8005aec:	4770      	bx	lr
 8005aee:	bf00      	nop
 8005af0:	20000018 	.word	0x20000018

08005af4 <__libc_init_array>:
 8005af4:	b570      	push	{r4, r5, r6, lr}
 8005af6:	4d0d      	ldr	r5, [pc, #52]	@ (8005b2c <__libc_init_array+0x38>)
 8005af8:	4c0d      	ldr	r4, [pc, #52]	@ (8005b30 <__libc_init_array+0x3c>)
 8005afa:	1b64      	subs	r4, r4, r5
 8005afc:	10a4      	asrs	r4, r4, #2
 8005afe:	2600      	movs	r6, #0
 8005b00:	42a6      	cmp	r6, r4
 8005b02:	d109      	bne.n	8005b18 <__libc_init_array+0x24>
 8005b04:	4d0b      	ldr	r5, [pc, #44]	@ (8005b34 <__libc_init_array+0x40>)
 8005b06:	4c0c      	ldr	r4, [pc, #48]	@ (8005b38 <__libc_init_array+0x44>)
 8005b08:	f003 fb74 	bl	80091f4 <_init>
 8005b0c:	1b64      	subs	r4, r4, r5
 8005b0e:	10a4      	asrs	r4, r4, #2
 8005b10:	2600      	movs	r6, #0
 8005b12:	42a6      	cmp	r6, r4
 8005b14:	d105      	bne.n	8005b22 <__libc_init_array+0x2e>
 8005b16:	bd70      	pop	{r4, r5, r6, pc}
 8005b18:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b1c:	4798      	blx	r3
 8005b1e:	3601      	adds	r6, #1
 8005b20:	e7ee      	b.n	8005b00 <__libc_init_array+0xc>
 8005b22:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b26:	4798      	blx	r3
 8005b28:	3601      	adds	r6, #1
 8005b2a:	e7f2      	b.n	8005b12 <__libc_init_array+0x1e>
 8005b2c:	0800978c 	.word	0x0800978c
 8005b30:	0800978c 	.word	0x0800978c
 8005b34:	0800978c 	.word	0x0800978c
 8005b38:	08009790 	.word	0x08009790

08005b3c <__retarget_lock_init_recursive>:
 8005b3c:	4770      	bx	lr

08005b3e <__retarget_lock_acquire_recursive>:
 8005b3e:	4770      	bx	lr

08005b40 <__retarget_lock_release_recursive>:
 8005b40:	4770      	bx	lr
	...

08005b44 <nanf>:
 8005b44:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8005b4c <nanf+0x8>
 8005b48:	4770      	bx	lr
 8005b4a:	bf00      	nop
 8005b4c:	7fc00000 	.word	0x7fc00000

08005b50 <quorem>:
 8005b50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b54:	6903      	ldr	r3, [r0, #16]
 8005b56:	690c      	ldr	r4, [r1, #16]
 8005b58:	42a3      	cmp	r3, r4
 8005b5a:	4607      	mov	r7, r0
 8005b5c:	db7e      	blt.n	8005c5c <quorem+0x10c>
 8005b5e:	3c01      	subs	r4, #1
 8005b60:	f101 0814 	add.w	r8, r1, #20
 8005b64:	00a3      	lsls	r3, r4, #2
 8005b66:	f100 0514 	add.w	r5, r0, #20
 8005b6a:	9300      	str	r3, [sp, #0]
 8005b6c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b70:	9301      	str	r3, [sp, #4]
 8005b72:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005b76:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005b82:	fbb2 f6f3 	udiv	r6, r2, r3
 8005b86:	d32e      	bcc.n	8005be6 <quorem+0x96>
 8005b88:	f04f 0a00 	mov.w	sl, #0
 8005b8c:	46c4      	mov	ip, r8
 8005b8e:	46ae      	mov	lr, r5
 8005b90:	46d3      	mov	fp, sl
 8005b92:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005b96:	b298      	uxth	r0, r3
 8005b98:	fb06 a000 	mla	r0, r6, r0, sl
 8005b9c:	0c02      	lsrs	r2, r0, #16
 8005b9e:	0c1b      	lsrs	r3, r3, #16
 8005ba0:	fb06 2303 	mla	r3, r6, r3, r2
 8005ba4:	f8de 2000 	ldr.w	r2, [lr]
 8005ba8:	b280      	uxth	r0, r0
 8005baa:	b292      	uxth	r2, r2
 8005bac:	1a12      	subs	r2, r2, r0
 8005bae:	445a      	add	r2, fp
 8005bb0:	f8de 0000 	ldr.w	r0, [lr]
 8005bb4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005bbe:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005bc2:	b292      	uxth	r2, r2
 8005bc4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005bc8:	45e1      	cmp	r9, ip
 8005bca:	f84e 2b04 	str.w	r2, [lr], #4
 8005bce:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005bd2:	d2de      	bcs.n	8005b92 <quorem+0x42>
 8005bd4:	9b00      	ldr	r3, [sp, #0]
 8005bd6:	58eb      	ldr	r3, [r5, r3]
 8005bd8:	b92b      	cbnz	r3, 8005be6 <quorem+0x96>
 8005bda:	9b01      	ldr	r3, [sp, #4]
 8005bdc:	3b04      	subs	r3, #4
 8005bde:	429d      	cmp	r5, r3
 8005be0:	461a      	mov	r2, r3
 8005be2:	d32f      	bcc.n	8005c44 <quorem+0xf4>
 8005be4:	613c      	str	r4, [r7, #16]
 8005be6:	4638      	mov	r0, r7
 8005be8:	f001 f9c6 	bl	8006f78 <__mcmp>
 8005bec:	2800      	cmp	r0, #0
 8005bee:	db25      	blt.n	8005c3c <quorem+0xec>
 8005bf0:	4629      	mov	r1, r5
 8005bf2:	2000      	movs	r0, #0
 8005bf4:	f858 2b04 	ldr.w	r2, [r8], #4
 8005bf8:	f8d1 c000 	ldr.w	ip, [r1]
 8005bfc:	fa1f fe82 	uxth.w	lr, r2
 8005c00:	fa1f f38c 	uxth.w	r3, ip
 8005c04:	eba3 030e 	sub.w	r3, r3, lr
 8005c08:	4403      	add	r3, r0
 8005c0a:	0c12      	lsrs	r2, r2, #16
 8005c0c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005c10:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c1a:	45c1      	cmp	r9, r8
 8005c1c:	f841 3b04 	str.w	r3, [r1], #4
 8005c20:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005c24:	d2e6      	bcs.n	8005bf4 <quorem+0xa4>
 8005c26:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c2e:	b922      	cbnz	r2, 8005c3a <quorem+0xea>
 8005c30:	3b04      	subs	r3, #4
 8005c32:	429d      	cmp	r5, r3
 8005c34:	461a      	mov	r2, r3
 8005c36:	d30b      	bcc.n	8005c50 <quorem+0x100>
 8005c38:	613c      	str	r4, [r7, #16]
 8005c3a:	3601      	adds	r6, #1
 8005c3c:	4630      	mov	r0, r6
 8005c3e:	b003      	add	sp, #12
 8005c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c44:	6812      	ldr	r2, [r2, #0]
 8005c46:	3b04      	subs	r3, #4
 8005c48:	2a00      	cmp	r2, #0
 8005c4a:	d1cb      	bne.n	8005be4 <quorem+0x94>
 8005c4c:	3c01      	subs	r4, #1
 8005c4e:	e7c6      	b.n	8005bde <quorem+0x8e>
 8005c50:	6812      	ldr	r2, [r2, #0]
 8005c52:	3b04      	subs	r3, #4
 8005c54:	2a00      	cmp	r2, #0
 8005c56:	d1ef      	bne.n	8005c38 <quorem+0xe8>
 8005c58:	3c01      	subs	r4, #1
 8005c5a:	e7ea      	b.n	8005c32 <quorem+0xe2>
 8005c5c:	2000      	movs	r0, #0
 8005c5e:	e7ee      	b.n	8005c3e <quorem+0xee>

08005c60 <_dtoa_r>:
 8005c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c64:	69c7      	ldr	r7, [r0, #28]
 8005c66:	b097      	sub	sp, #92	@ 0x5c
 8005c68:	ed8d 0b04 	vstr	d0, [sp, #16]
 8005c6c:	ec55 4b10 	vmov	r4, r5, d0
 8005c70:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8005c72:	9107      	str	r1, [sp, #28]
 8005c74:	4681      	mov	r9, r0
 8005c76:	920c      	str	r2, [sp, #48]	@ 0x30
 8005c78:	9311      	str	r3, [sp, #68]	@ 0x44
 8005c7a:	b97f      	cbnz	r7, 8005c9c <_dtoa_r+0x3c>
 8005c7c:	2010      	movs	r0, #16
 8005c7e:	f000 fe09 	bl	8006894 <malloc>
 8005c82:	4602      	mov	r2, r0
 8005c84:	f8c9 001c 	str.w	r0, [r9, #28]
 8005c88:	b920      	cbnz	r0, 8005c94 <_dtoa_r+0x34>
 8005c8a:	4ba9      	ldr	r3, [pc, #676]	@ (8005f30 <_dtoa_r+0x2d0>)
 8005c8c:	21ef      	movs	r1, #239	@ 0xef
 8005c8e:	48a9      	ldr	r0, [pc, #676]	@ (8005f34 <_dtoa_r+0x2d4>)
 8005c90:	f002 fc3a 	bl	8008508 <__assert_func>
 8005c94:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005c98:	6007      	str	r7, [r0, #0]
 8005c9a:	60c7      	str	r7, [r0, #12]
 8005c9c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005ca0:	6819      	ldr	r1, [r3, #0]
 8005ca2:	b159      	cbz	r1, 8005cbc <_dtoa_r+0x5c>
 8005ca4:	685a      	ldr	r2, [r3, #4]
 8005ca6:	604a      	str	r2, [r1, #4]
 8005ca8:	2301      	movs	r3, #1
 8005caa:	4093      	lsls	r3, r2
 8005cac:	608b      	str	r3, [r1, #8]
 8005cae:	4648      	mov	r0, r9
 8005cb0:	f000 fee6 	bl	8006a80 <_Bfree>
 8005cb4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	601a      	str	r2, [r3, #0]
 8005cbc:	1e2b      	subs	r3, r5, #0
 8005cbe:	bfb9      	ittee	lt
 8005cc0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005cc4:	9305      	strlt	r3, [sp, #20]
 8005cc6:	2300      	movge	r3, #0
 8005cc8:	6033      	strge	r3, [r6, #0]
 8005cca:	9f05      	ldr	r7, [sp, #20]
 8005ccc:	4b9a      	ldr	r3, [pc, #616]	@ (8005f38 <_dtoa_r+0x2d8>)
 8005cce:	bfbc      	itt	lt
 8005cd0:	2201      	movlt	r2, #1
 8005cd2:	6032      	strlt	r2, [r6, #0]
 8005cd4:	43bb      	bics	r3, r7
 8005cd6:	d112      	bne.n	8005cfe <_dtoa_r+0x9e>
 8005cd8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005cda:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005cde:	6013      	str	r3, [r2, #0]
 8005ce0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005ce4:	4323      	orrs	r3, r4
 8005ce6:	f000 855a 	beq.w	800679e <_dtoa_r+0xb3e>
 8005cea:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005cec:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8005f4c <_dtoa_r+0x2ec>
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	f000 855c 	beq.w	80067ae <_dtoa_r+0xb4e>
 8005cf6:	f10a 0303 	add.w	r3, sl, #3
 8005cfa:	f000 bd56 	b.w	80067aa <_dtoa_r+0xb4a>
 8005cfe:	ed9d 7b04 	vldr	d7, [sp, #16]
 8005d02:	2200      	movs	r2, #0
 8005d04:	ec51 0b17 	vmov	r0, r1, d7
 8005d08:	2300      	movs	r3, #0
 8005d0a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8005d0e:	f7fa ff03 	bl	8000b18 <__aeabi_dcmpeq>
 8005d12:	4680      	mov	r8, r0
 8005d14:	b158      	cbz	r0, 8005d2e <_dtoa_r+0xce>
 8005d16:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005d18:	2301      	movs	r3, #1
 8005d1a:	6013      	str	r3, [r2, #0]
 8005d1c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005d1e:	b113      	cbz	r3, 8005d26 <_dtoa_r+0xc6>
 8005d20:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8005d22:	4b86      	ldr	r3, [pc, #536]	@ (8005f3c <_dtoa_r+0x2dc>)
 8005d24:	6013      	str	r3, [r2, #0]
 8005d26:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8005f50 <_dtoa_r+0x2f0>
 8005d2a:	f000 bd40 	b.w	80067ae <_dtoa_r+0xb4e>
 8005d2e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8005d32:	aa14      	add	r2, sp, #80	@ 0x50
 8005d34:	a915      	add	r1, sp, #84	@ 0x54
 8005d36:	4648      	mov	r0, r9
 8005d38:	f001 fa3e 	bl	80071b8 <__d2b>
 8005d3c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005d40:	9002      	str	r0, [sp, #8]
 8005d42:	2e00      	cmp	r6, #0
 8005d44:	d078      	beq.n	8005e38 <_dtoa_r+0x1d8>
 8005d46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005d48:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8005d4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005d54:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005d58:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005d5c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005d60:	4619      	mov	r1, r3
 8005d62:	2200      	movs	r2, #0
 8005d64:	4b76      	ldr	r3, [pc, #472]	@ (8005f40 <_dtoa_r+0x2e0>)
 8005d66:	f7fa fab7 	bl	80002d8 <__aeabi_dsub>
 8005d6a:	a36b      	add	r3, pc, #428	@ (adr r3, 8005f18 <_dtoa_r+0x2b8>)
 8005d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d70:	f7fa fc6a 	bl	8000648 <__aeabi_dmul>
 8005d74:	a36a      	add	r3, pc, #424	@ (adr r3, 8005f20 <_dtoa_r+0x2c0>)
 8005d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d7a:	f7fa faaf 	bl	80002dc <__adddf3>
 8005d7e:	4604      	mov	r4, r0
 8005d80:	4630      	mov	r0, r6
 8005d82:	460d      	mov	r5, r1
 8005d84:	f7fa fbf6 	bl	8000574 <__aeabi_i2d>
 8005d88:	a367      	add	r3, pc, #412	@ (adr r3, 8005f28 <_dtoa_r+0x2c8>)
 8005d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d8e:	f7fa fc5b 	bl	8000648 <__aeabi_dmul>
 8005d92:	4602      	mov	r2, r0
 8005d94:	460b      	mov	r3, r1
 8005d96:	4620      	mov	r0, r4
 8005d98:	4629      	mov	r1, r5
 8005d9a:	f7fa fa9f 	bl	80002dc <__adddf3>
 8005d9e:	4604      	mov	r4, r0
 8005da0:	460d      	mov	r5, r1
 8005da2:	f7fa ff01 	bl	8000ba8 <__aeabi_d2iz>
 8005da6:	2200      	movs	r2, #0
 8005da8:	4607      	mov	r7, r0
 8005daa:	2300      	movs	r3, #0
 8005dac:	4620      	mov	r0, r4
 8005dae:	4629      	mov	r1, r5
 8005db0:	f7fa febc 	bl	8000b2c <__aeabi_dcmplt>
 8005db4:	b140      	cbz	r0, 8005dc8 <_dtoa_r+0x168>
 8005db6:	4638      	mov	r0, r7
 8005db8:	f7fa fbdc 	bl	8000574 <__aeabi_i2d>
 8005dbc:	4622      	mov	r2, r4
 8005dbe:	462b      	mov	r3, r5
 8005dc0:	f7fa feaa 	bl	8000b18 <__aeabi_dcmpeq>
 8005dc4:	b900      	cbnz	r0, 8005dc8 <_dtoa_r+0x168>
 8005dc6:	3f01      	subs	r7, #1
 8005dc8:	2f16      	cmp	r7, #22
 8005dca:	d852      	bhi.n	8005e72 <_dtoa_r+0x212>
 8005dcc:	4b5d      	ldr	r3, [pc, #372]	@ (8005f44 <_dtoa_r+0x2e4>)
 8005dce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005dda:	f7fa fea7 	bl	8000b2c <__aeabi_dcmplt>
 8005dde:	2800      	cmp	r0, #0
 8005de0:	d049      	beq.n	8005e76 <_dtoa_r+0x216>
 8005de2:	3f01      	subs	r7, #1
 8005de4:	2300      	movs	r3, #0
 8005de6:	9310      	str	r3, [sp, #64]	@ 0x40
 8005de8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005dea:	1b9b      	subs	r3, r3, r6
 8005dec:	1e5a      	subs	r2, r3, #1
 8005dee:	bf45      	ittet	mi
 8005df0:	f1c3 0301 	rsbmi	r3, r3, #1
 8005df4:	9300      	strmi	r3, [sp, #0]
 8005df6:	2300      	movpl	r3, #0
 8005df8:	2300      	movmi	r3, #0
 8005dfa:	9206      	str	r2, [sp, #24]
 8005dfc:	bf54      	ite	pl
 8005dfe:	9300      	strpl	r3, [sp, #0]
 8005e00:	9306      	strmi	r3, [sp, #24]
 8005e02:	2f00      	cmp	r7, #0
 8005e04:	db39      	blt.n	8005e7a <_dtoa_r+0x21a>
 8005e06:	9b06      	ldr	r3, [sp, #24]
 8005e08:	970d      	str	r7, [sp, #52]	@ 0x34
 8005e0a:	443b      	add	r3, r7
 8005e0c:	9306      	str	r3, [sp, #24]
 8005e0e:	2300      	movs	r3, #0
 8005e10:	9308      	str	r3, [sp, #32]
 8005e12:	9b07      	ldr	r3, [sp, #28]
 8005e14:	2b09      	cmp	r3, #9
 8005e16:	d863      	bhi.n	8005ee0 <_dtoa_r+0x280>
 8005e18:	2b05      	cmp	r3, #5
 8005e1a:	bfc4      	itt	gt
 8005e1c:	3b04      	subgt	r3, #4
 8005e1e:	9307      	strgt	r3, [sp, #28]
 8005e20:	9b07      	ldr	r3, [sp, #28]
 8005e22:	f1a3 0302 	sub.w	r3, r3, #2
 8005e26:	bfcc      	ite	gt
 8005e28:	2400      	movgt	r4, #0
 8005e2a:	2401      	movle	r4, #1
 8005e2c:	2b03      	cmp	r3, #3
 8005e2e:	d863      	bhi.n	8005ef8 <_dtoa_r+0x298>
 8005e30:	e8df f003 	tbb	[pc, r3]
 8005e34:	2b375452 	.word	0x2b375452
 8005e38:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005e3c:	441e      	add	r6, r3
 8005e3e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005e42:	2b20      	cmp	r3, #32
 8005e44:	bfc1      	itttt	gt
 8005e46:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005e4a:	409f      	lslgt	r7, r3
 8005e4c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005e50:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005e54:	bfd6      	itet	le
 8005e56:	f1c3 0320 	rsble	r3, r3, #32
 8005e5a:	ea47 0003 	orrgt.w	r0, r7, r3
 8005e5e:	fa04 f003 	lslle.w	r0, r4, r3
 8005e62:	f7fa fb77 	bl	8000554 <__aeabi_ui2d>
 8005e66:	2201      	movs	r2, #1
 8005e68:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005e6c:	3e01      	subs	r6, #1
 8005e6e:	9212      	str	r2, [sp, #72]	@ 0x48
 8005e70:	e776      	b.n	8005d60 <_dtoa_r+0x100>
 8005e72:	2301      	movs	r3, #1
 8005e74:	e7b7      	b.n	8005de6 <_dtoa_r+0x186>
 8005e76:	9010      	str	r0, [sp, #64]	@ 0x40
 8005e78:	e7b6      	b.n	8005de8 <_dtoa_r+0x188>
 8005e7a:	9b00      	ldr	r3, [sp, #0]
 8005e7c:	1bdb      	subs	r3, r3, r7
 8005e7e:	9300      	str	r3, [sp, #0]
 8005e80:	427b      	negs	r3, r7
 8005e82:	9308      	str	r3, [sp, #32]
 8005e84:	2300      	movs	r3, #0
 8005e86:	930d      	str	r3, [sp, #52]	@ 0x34
 8005e88:	e7c3      	b.n	8005e12 <_dtoa_r+0x1b2>
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e8e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005e90:	eb07 0b03 	add.w	fp, r7, r3
 8005e94:	f10b 0301 	add.w	r3, fp, #1
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	9303      	str	r3, [sp, #12]
 8005e9c:	bfb8      	it	lt
 8005e9e:	2301      	movlt	r3, #1
 8005ea0:	e006      	b.n	8005eb0 <_dtoa_r+0x250>
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ea6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	dd28      	ble.n	8005efe <_dtoa_r+0x29e>
 8005eac:	469b      	mov	fp, r3
 8005eae:	9303      	str	r3, [sp, #12]
 8005eb0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8005eb4:	2100      	movs	r1, #0
 8005eb6:	2204      	movs	r2, #4
 8005eb8:	f102 0514 	add.w	r5, r2, #20
 8005ebc:	429d      	cmp	r5, r3
 8005ebe:	d926      	bls.n	8005f0e <_dtoa_r+0x2ae>
 8005ec0:	6041      	str	r1, [r0, #4]
 8005ec2:	4648      	mov	r0, r9
 8005ec4:	f000 fd9c 	bl	8006a00 <_Balloc>
 8005ec8:	4682      	mov	sl, r0
 8005eca:	2800      	cmp	r0, #0
 8005ecc:	d142      	bne.n	8005f54 <_dtoa_r+0x2f4>
 8005ece:	4b1e      	ldr	r3, [pc, #120]	@ (8005f48 <_dtoa_r+0x2e8>)
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	f240 11af 	movw	r1, #431	@ 0x1af
 8005ed6:	e6da      	b.n	8005c8e <_dtoa_r+0x2e>
 8005ed8:	2300      	movs	r3, #0
 8005eda:	e7e3      	b.n	8005ea4 <_dtoa_r+0x244>
 8005edc:	2300      	movs	r3, #0
 8005ede:	e7d5      	b.n	8005e8c <_dtoa_r+0x22c>
 8005ee0:	2401      	movs	r4, #1
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	9307      	str	r3, [sp, #28]
 8005ee6:	9409      	str	r4, [sp, #36]	@ 0x24
 8005ee8:	f04f 3bff 	mov.w	fp, #4294967295
 8005eec:	2200      	movs	r2, #0
 8005eee:	f8cd b00c 	str.w	fp, [sp, #12]
 8005ef2:	2312      	movs	r3, #18
 8005ef4:	920c      	str	r2, [sp, #48]	@ 0x30
 8005ef6:	e7db      	b.n	8005eb0 <_dtoa_r+0x250>
 8005ef8:	2301      	movs	r3, #1
 8005efa:	9309      	str	r3, [sp, #36]	@ 0x24
 8005efc:	e7f4      	b.n	8005ee8 <_dtoa_r+0x288>
 8005efe:	f04f 0b01 	mov.w	fp, #1
 8005f02:	f8cd b00c 	str.w	fp, [sp, #12]
 8005f06:	465b      	mov	r3, fp
 8005f08:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8005f0c:	e7d0      	b.n	8005eb0 <_dtoa_r+0x250>
 8005f0e:	3101      	adds	r1, #1
 8005f10:	0052      	lsls	r2, r2, #1
 8005f12:	e7d1      	b.n	8005eb8 <_dtoa_r+0x258>
 8005f14:	f3af 8000 	nop.w
 8005f18:	636f4361 	.word	0x636f4361
 8005f1c:	3fd287a7 	.word	0x3fd287a7
 8005f20:	8b60c8b3 	.word	0x8b60c8b3
 8005f24:	3fc68a28 	.word	0x3fc68a28
 8005f28:	509f79fb 	.word	0x509f79fb
 8005f2c:	3fd34413 	.word	0x3fd34413
 8005f30:	080093a2 	.word	0x080093a2
 8005f34:	080093b9 	.word	0x080093b9
 8005f38:	7ff00000 	.word	0x7ff00000
 8005f3c:	0800936d 	.word	0x0800936d
 8005f40:	3ff80000 	.word	0x3ff80000
 8005f44:	08009568 	.word	0x08009568
 8005f48:	08009411 	.word	0x08009411
 8005f4c:	0800939e 	.word	0x0800939e
 8005f50:	0800936c 	.word	0x0800936c
 8005f54:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005f58:	6018      	str	r0, [r3, #0]
 8005f5a:	9b03      	ldr	r3, [sp, #12]
 8005f5c:	2b0e      	cmp	r3, #14
 8005f5e:	f200 80a1 	bhi.w	80060a4 <_dtoa_r+0x444>
 8005f62:	2c00      	cmp	r4, #0
 8005f64:	f000 809e 	beq.w	80060a4 <_dtoa_r+0x444>
 8005f68:	2f00      	cmp	r7, #0
 8005f6a:	dd33      	ble.n	8005fd4 <_dtoa_r+0x374>
 8005f6c:	4b9c      	ldr	r3, [pc, #624]	@ (80061e0 <_dtoa_r+0x580>)
 8005f6e:	f007 020f 	and.w	r2, r7, #15
 8005f72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f76:	ed93 7b00 	vldr	d7, [r3]
 8005f7a:	05f8      	lsls	r0, r7, #23
 8005f7c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8005f80:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005f84:	d516      	bpl.n	8005fb4 <_dtoa_r+0x354>
 8005f86:	4b97      	ldr	r3, [pc, #604]	@ (80061e4 <_dtoa_r+0x584>)
 8005f88:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005f8c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005f90:	f7fa fc84 	bl	800089c <__aeabi_ddiv>
 8005f94:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f98:	f004 040f 	and.w	r4, r4, #15
 8005f9c:	2603      	movs	r6, #3
 8005f9e:	4d91      	ldr	r5, [pc, #580]	@ (80061e4 <_dtoa_r+0x584>)
 8005fa0:	b954      	cbnz	r4, 8005fb8 <_dtoa_r+0x358>
 8005fa2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005fa6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005faa:	f7fa fc77 	bl	800089c <__aeabi_ddiv>
 8005fae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005fb2:	e028      	b.n	8006006 <_dtoa_r+0x3a6>
 8005fb4:	2602      	movs	r6, #2
 8005fb6:	e7f2      	b.n	8005f9e <_dtoa_r+0x33e>
 8005fb8:	07e1      	lsls	r1, r4, #31
 8005fba:	d508      	bpl.n	8005fce <_dtoa_r+0x36e>
 8005fbc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005fc0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005fc4:	f7fa fb40 	bl	8000648 <__aeabi_dmul>
 8005fc8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005fcc:	3601      	adds	r6, #1
 8005fce:	1064      	asrs	r4, r4, #1
 8005fd0:	3508      	adds	r5, #8
 8005fd2:	e7e5      	b.n	8005fa0 <_dtoa_r+0x340>
 8005fd4:	f000 80af 	beq.w	8006136 <_dtoa_r+0x4d6>
 8005fd8:	427c      	negs	r4, r7
 8005fda:	4b81      	ldr	r3, [pc, #516]	@ (80061e0 <_dtoa_r+0x580>)
 8005fdc:	4d81      	ldr	r5, [pc, #516]	@ (80061e4 <_dtoa_r+0x584>)
 8005fde:	f004 020f 	and.w	r2, r4, #15
 8005fe2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005fee:	f7fa fb2b 	bl	8000648 <__aeabi_dmul>
 8005ff2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005ff6:	1124      	asrs	r4, r4, #4
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	2602      	movs	r6, #2
 8005ffc:	2c00      	cmp	r4, #0
 8005ffe:	f040 808f 	bne.w	8006120 <_dtoa_r+0x4c0>
 8006002:	2b00      	cmp	r3, #0
 8006004:	d1d3      	bne.n	8005fae <_dtoa_r+0x34e>
 8006006:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006008:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800600c:	2b00      	cmp	r3, #0
 800600e:	f000 8094 	beq.w	800613a <_dtoa_r+0x4da>
 8006012:	4b75      	ldr	r3, [pc, #468]	@ (80061e8 <_dtoa_r+0x588>)
 8006014:	2200      	movs	r2, #0
 8006016:	4620      	mov	r0, r4
 8006018:	4629      	mov	r1, r5
 800601a:	f7fa fd87 	bl	8000b2c <__aeabi_dcmplt>
 800601e:	2800      	cmp	r0, #0
 8006020:	f000 808b 	beq.w	800613a <_dtoa_r+0x4da>
 8006024:	9b03      	ldr	r3, [sp, #12]
 8006026:	2b00      	cmp	r3, #0
 8006028:	f000 8087 	beq.w	800613a <_dtoa_r+0x4da>
 800602c:	f1bb 0f00 	cmp.w	fp, #0
 8006030:	dd34      	ble.n	800609c <_dtoa_r+0x43c>
 8006032:	4620      	mov	r0, r4
 8006034:	4b6d      	ldr	r3, [pc, #436]	@ (80061ec <_dtoa_r+0x58c>)
 8006036:	2200      	movs	r2, #0
 8006038:	4629      	mov	r1, r5
 800603a:	f7fa fb05 	bl	8000648 <__aeabi_dmul>
 800603e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006042:	f107 38ff 	add.w	r8, r7, #4294967295
 8006046:	3601      	adds	r6, #1
 8006048:	465c      	mov	r4, fp
 800604a:	4630      	mov	r0, r6
 800604c:	f7fa fa92 	bl	8000574 <__aeabi_i2d>
 8006050:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006054:	f7fa faf8 	bl	8000648 <__aeabi_dmul>
 8006058:	4b65      	ldr	r3, [pc, #404]	@ (80061f0 <_dtoa_r+0x590>)
 800605a:	2200      	movs	r2, #0
 800605c:	f7fa f93e 	bl	80002dc <__adddf3>
 8006060:	4605      	mov	r5, r0
 8006062:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006066:	2c00      	cmp	r4, #0
 8006068:	d16a      	bne.n	8006140 <_dtoa_r+0x4e0>
 800606a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800606e:	4b61      	ldr	r3, [pc, #388]	@ (80061f4 <_dtoa_r+0x594>)
 8006070:	2200      	movs	r2, #0
 8006072:	f7fa f931 	bl	80002d8 <__aeabi_dsub>
 8006076:	4602      	mov	r2, r0
 8006078:	460b      	mov	r3, r1
 800607a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800607e:	462a      	mov	r2, r5
 8006080:	4633      	mov	r3, r6
 8006082:	f7fa fd71 	bl	8000b68 <__aeabi_dcmpgt>
 8006086:	2800      	cmp	r0, #0
 8006088:	f040 8298 	bne.w	80065bc <_dtoa_r+0x95c>
 800608c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006090:	462a      	mov	r2, r5
 8006092:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006096:	f7fa fd49 	bl	8000b2c <__aeabi_dcmplt>
 800609a:	bb38      	cbnz	r0, 80060ec <_dtoa_r+0x48c>
 800609c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80060a0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80060a4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	f2c0 8157 	blt.w	800635a <_dtoa_r+0x6fa>
 80060ac:	2f0e      	cmp	r7, #14
 80060ae:	f300 8154 	bgt.w	800635a <_dtoa_r+0x6fa>
 80060b2:	4b4b      	ldr	r3, [pc, #300]	@ (80061e0 <_dtoa_r+0x580>)
 80060b4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80060b8:	ed93 7b00 	vldr	d7, [r3]
 80060bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80060be:	2b00      	cmp	r3, #0
 80060c0:	ed8d 7b00 	vstr	d7, [sp]
 80060c4:	f280 80e5 	bge.w	8006292 <_dtoa_r+0x632>
 80060c8:	9b03      	ldr	r3, [sp, #12]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	f300 80e1 	bgt.w	8006292 <_dtoa_r+0x632>
 80060d0:	d10c      	bne.n	80060ec <_dtoa_r+0x48c>
 80060d2:	4b48      	ldr	r3, [pc, #288]	@ (80061f4 <_dtoa_r+0x594>)
 80060d4:	2200      	movs	r2, #0
 80060d6:	ec51 0b17 	vmov	r0, r1, d7
 80060da:	f7fa fab5 	bl	8000648 <__aeabi_dmul>
 80060de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060e2:	f7fa fd37 	bl	8000b54 <__aeabi_dcmpge>
 80060e6:	2800      	cmp	r0, #0
 80060e8:	f000 8266 	beq.w	80065b8 <_dtoa_r+0x958>
 80060ec:	2400      	movs	r4, #0
 80060ee:	4625      	mov	r5, r4
 80060f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80060f2:	4656      	mov	r6, sl
 80060f4:	ea6f 0803 	mvn.w	r8, r3
 80060f8:	2700      	movs	r7, #0
 80060fa:	4621      	mov	r1, r4
 80060fc:	4648      	mov	r0, r9
 80060fe:	f000 fcbf 	bl	8006a80 <_Bfree>
 8006102:	2d00      	cmp	r5, #0
 8006104:	f000 80bd 	beq.w	8006282 <_dtoa_r+0x622>
 8006108:	b12f      	cbz	r7, 8006116 <_dtoa_r+0x4b6>
 800610a:	42af      	cmp	r7, r5
 800610c:	d003      	beq.n	8006116 <_dtoa_r+0x4b6>
 800610e:	4639      	mov	r1, r7
 8006110:	4648      	mov	r0, r9
 8006112:	f000 fcb5 	bl	8006a80 <_Bfree>
 8006116:	4629      	mov	r1, r5
 8006118:	4648      	mov	r0, r9
 800611a:	f000 fcb1 	bl	8006a80 <_Bfree>
 800611e:	e0b0      	b.n	8006282 <_dtoa_r+0x622>
 8006120:	07e2      	lsls	r2, r4, #31
 8006122:	d505      	bpl.n	8006130 <_dtoa_r+0x4d0>
 8006124:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006128:	f7fa fa8e 	bl	8000648 <__aeabi_dmul>
 800612c:	3601      	adds	r6, #1
 800612e:	2301      	movs	r3, #1
 8006130:	1064      	asrs	r4, r4, #1
 8006132:	3508      	adds	r5, #8
 8006134:	e762      	b.n	8005ffc <_dtoa_r+0x39c>
 8006136:	2602      	movs	r6, #2
 8006138:	e765      	b.n	8006006 <_dtoa_r+0x3a6>
 800613a:	9c03      	ldr	r4, [sp, #12]
 800613c:	46b8      	mov	r8, r7
 800613e:	e784      	b.n	800604a <_dtoa_r+0x3ea>
 8006140:	4b27      	ldr	r3, [pc, #156]	@ (80061e0 <_dtoa_r+0x580>)
 8006142:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006144:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006148:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800614c:	4454      	add	r4, sl
 800614e:	2900      	cmp	r1, #0
 8006150:	d054      	beq.n	80061fc <_dtoa_r+0x59c>
 8006152:	4929      	ldr	r1, [pc, #164]	@ (80061f8 <_dtoa_r+0x598>)
 8006154:	2000      	movs	r0, #0
 8006156:	f7fa fba1 	bl	800089c <__aeabi_ddiv>
 800615a:	4633      	mov	r3, r6
 800615c:	462a      	mov	r2, r5
 800615e:	f7fa f8bb 	bl	80002d8 <__aeabi_dsub>
 8006162:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006166:	4656      	mov	r6, sl
 8006168:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800616c:	f7fa fd1c 	bl	8000ba8 <__aeabi_d2iz>
 8006170:	4605      	mov	r5, r0
 8006172:	f7fa f9ff 	bl	8000574 <__aeabi_i2d>
 8006176:	4602      	mov	r2, r0
 8006178:	460b      	mov	r3, r1
 800617a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800617e:	f7fa f8ab 	bl	80002d8 <__aeabi_dsub>
 8006182:	3530      	adds	r5, #48	@ 0x30
 8006184:	4602      	mov	r2, r0
 8006186:	460b      	mov	r3, r1
 8006188:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800618c:	f806 5b01 	strb.w	r5, [r6], #1
 8006190:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006194:	f7fa fcca 	bl	8000b2c <__aeabi_dcmplt>
 8006198:	2800      	cmp	r0, #0
 800619a:	d172      	bne.n	8006282 <_dtoa_r+0x622>
 800619c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061a0:	4911      	ldr	r1, [pc, #68]	@ (80061e8 <_dtoa_r+0x588>)
 80061a2:	2000      	movs	r0, #0
 80061a4:	f7fa f898 	bl	80002d8 <__aeabi_dsub>
 80061a8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80061ac:	f7fa fcbe 	bl	8000b2c <__aeabi_dcmplt>
 80061b0:	2800      	cmp	r0, #0
 80061b2:	f040 80b4 	bne.w	800631e <_dtoa_r+0x6be>
 80061b6:	42a6      	cmp	r6, r4
 80061b8:	f43f af70 	beq.w	800609c <_dtoa_r+0x43c>
 80061bc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80061c0:	4b0a      	ldr	r3, [pc, #40]	@ (80061ec <_dtoa_r+0x58c>)
 80061c2:	2200      	movs	r2, #0
 80061c4:	f7fa fa40 	bl	8000648 <__aeabi_dmul>
 80061c8:	4b08      	ldr	r3, [pc, #32]	@ (80061ec <_dtoa_r+0x58c>)
 80061ca:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80061ce:	2200      	movs	r2, #0
 80061d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80061d4:	f7fa fa38 	bl	8000648 <__aeabi_dmul>
 80061d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80061dc:	e7c4      	b.n	8006168 <_dtoa_r+0x508>
 80061de:	bf00      	nop
 80061e0:	08009568 	.word	0x08009568
 80061e4:	08009540 	.word	0x08009540
 80061e8:	3ff00000 	.word	0x3ff00000
 80061ec:	40240000 	.word	0x40240000
 80061f0:	401c0000 	.word	0x401c0000
 80061f4:	40140000 	.word	0x40140000
 80061f8:	3fe00000 	.word	0x3fe00000
 80061fc:	4631      	mov	r1, r6
 80061fe:	4628      	mov	r0, r5
 8006200:	f7fa fa22 	bl	8000648 <__aeabi_dmul>
 8006204:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006208:	9413      	str	r4, [sp, #76]	@ 0x4c
 800620a:	4656      	mov	r6, sl
 800620c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006210:	f7fa fcca 	bl	8000ba8 <__aeabi_d2iz>
 8006214:	4605      	mov	r5, r0
 8006216:	f7fa f9ad 	bl	8000574 <__aeabi_i2d>
 800621a:	4602      	mov	r2, r0
 800621c:	460b      	mov	r3, r1
 800621e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006222:	f7fa f859 	bl	80002d8 <__aeabi_dsub>
 8006226:	3530      	adds	r5, #48	@ 0x30
 8006228:	f806 5b01 	strb.w	r5, [r6], #1
 800622c:	4602      	mov	r2, r0
 800622e:	460b      	mov	r3, r1
 8006230:	42a6      	cmp	r6, r4
 8006232:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006236:	f04f 0200 	mov.w	r2, #0
 800623a:	d124      	bne.n	8006286 <_dtoa_r+0x626>
 800623c:	4baf      	ldr	r3, [pc, #700]	@ (80064fc <_dtoa_r+0x89c>)
 800623e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006242:	f7fa f84b 	bl	80002dc <__adddf3>
 8006246:	4602      	mov	r2, r0
 8006248:	460b      	mov	r3, r1
 800624a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800624e:	f7fa fc8b 	bl	8000b68 <__aeabi_dcmpgt>
 8006252:	2800      	cmp	r0, #0
 8006254:	d163      	bne.n	800631e <_dtoa_r+0x6be>
 8006256:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800625a:	49a8      	ldr	r1, [pc, #672]	@ (80064fc <_dtoa_r+0x89c>)
 800625c:	2000      	movs	r0, #0
 800625e:	f7fa f83b 	bl	80002d8 <__aeabi_dsub>
 8006262:	4602      	mov	r2, r0
 8006264:	460b      	mov	r3, r1
 8006266:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800626a:	f7fa fc5f 	bl	8000b2c <__aeabi_dcmplt>
 800626e:	2800      	cmp	r0, #0
 8006270:	f43f af14 	beq.w	800609c <_dtoa_r+0x43c>
 8006274:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006276:	1e73      	subs	r3, r6, #1
 8006278:	9313      	str	r3, [sp, #76]	@ 0x4c
 800627a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800627e:	2b30      	cmp	r3, #48	@ 0x30
 8006280:	d0f8      	beq.n	8006274 <_dtoa_r+0x614>
 8006282:	4647      	mov	r7, r8
 8006284:	e03b      	b.n	80062fe <_dtoa_r+0x69e>
 8006286:	4b9e      	ldr	r3, [pc, #632]	@ (8006500 <_dtoa_r+0x8a0>)
 8006288:	f7fa f9de 	bl	8000648 <__aeabi_dmul>
 800628c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006290:	e7bc      	b.n	800620c <_dtoa_r+0x5ac>
 8006292:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006296:	4656      	mov	r6, sl
 8006298:	e9dd 2300 	ldrd	r2, r3, [sp]
 800629c:	4620      	mov	r0, r4
 800629e:	4629      	mov	r1, r5
 80062a0:	f7fa fafc 	bl	800089c <__aeabi_ddiv>
 80062a4:	f7fa fc80 	bl	8000ba8 <__aeabi_d2iz>
 80062a8:	4680      	mov	r8, r0
 80062aa:	f7fa f963 	bl	8000574 <__aeabi_i2d>
 80062ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80062b2:	f7fa f9c9 	bl	8000648 <__aeabi_dmul>
 80062b6:	4602      	mov	r2, r0
 80062b8:	460b      	mov	r3, r1
 80062ba:	4620      	mov	r0, r4
 80062bc:	4629      	mov	r1, r5
 80062be:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80062c2:	f7fa f809 	bl	80002d8 <__aeabi_dsub>
 80062c6:	f806 4b01 	strb.w	r4, [r6], #1
 80062ca:	9d03      	ldr	r5, [sp, #12]
 80062cc:	eba6 040a 	sub.w	r4, r6, sl
 80062d0:	42a5      	cmp	r5, r4
 80062d2:	4602      	mov	r2, r0
 80062d4:	460b      	mov	r3, r1
 80062d6:	d133      	bne.n	8006340 <_dtoa_r+0x6e0>
 80062d8:	f7fa f800 	bl	80002dc <__adddf3>
 80062dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80062e0:	4604      	mov	r4, r0
 80062e2:	460d      	mov	r5, r1
 80062e4:	f7fa fc40 	bl	8000b68 <__aeabi_dcmpgt>
 80062e8:	b9c0      	cbnz	r0, 800631c <_dtoa_r+0x6bc>
 80062ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80062ee:	4620      	mov	r0, r4
 80062f0:	4629      	mov	r1, r5
 80062f2:	f7fa fc11 	bl	8000b18 <__aeabi_dcmpeq>
 80062f6:	b110      	cbz	r0, 80062fe <_dtoa_r+0x69e>
 80062f8:	f018 0f01 	tst.w	r8, #1
 80062fc:	d10e      	bne.n	800631c <_dtoa_r+0x6bc>
 80062fe:	9902      	ldr	r1, [sp, #8]
 8006300:	4648      	mov	r0, r9
 8006302:	f000 fbbd 	bl	8006a80 <_Bfree>
 8006306:	2300      	movs	r3, #0
 8006308:	7033      	strb	r3, [r6, #0]
 800630a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800630c:	3701      	adds	r7, #1
 800630e:	601f      	str	r7, [r3, #0]
 8006310:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006312:	2b00      	cmp	r3, #0
 8006314:	f000 824b 	beq.w	80067ae <_dtoa_r+0xb4e>
 8006318:	601e      	str	r6, [r3, #0]
 800631a:	e248      	b.n	80067ae <_dtoa_r+0xb4e>
 800631c:	46b8      	mov	r8, r7
 800631e:	4633      	mov	r3, r6
 8006320:	461e      	mov	r6, r3
 8006322:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006326:	2a39      	cmp	r2, #57	@ 0x39
 8006328:	d106      	bne.n	8006338 <_dtoa_r+0x6d8>
 800632a:	459a      	cmp	sl, r3
 800632c:	d1f8      	bne.n	8006320 <_dtoa_r+0x6c0>
 800632e:	2230      	movs	r2, #48	@ 0x30
 8006330:	f108 0801 	add.w	r8, r8, #1
 8006334:	f88a 2000 	strb.w	r2, [sl]
 8006338:	781a      	ldrb	r2, [r3, #0]
 800633a:	3201      	adds	r2, #1
 800633c:	701a      	strb	r2, [r3, #0]
 800633e:	e7a0      	b.n	8006282 <_dtoa_r+0x622>
 8006340:	4b6f      	ldr	r3, [pc, #444]	@ (8006500 <_dtoa_r+0x8a0>)
 8006342:	2200      	movs	r2, #0
 8006344:	f7fa f980 	bl	8000648 <__aeabi_dmul>
 8006348:	2200      	movs	r2, #0
 800634a:	2300      	movs	r3, #0
 800634c:	4604      	mov	r4, r0
 800634e:	460d      	mov	r5, r1
 8006350:	f7fa fbe2 	bl	8000b18 <__aeabi_dcmpeq>
 8006354:	2800      	cmp	r0, #0
 8006356:	d09f      	beq.n	8006298 <_dtoa_r+0x638>
 8006358:	e7d1      	b.n	80062fe <_dtoa_r+0x69e>
 800635a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800635c:	2a00      	cmp	r2, #0
 800635e:	f000 80ea 	beq.w	8006536 <_dtoa_r+0x8d6>
 8006362:	9a07      	ldr	r2, [sp, #28]
 8006364:	2a01      	cmp	r2, #1
 8006366:	f300 80cd 	bgt.w	8006504 <_dtoa_r+0x8a4>
 800636a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800636c:	2a00      	cmp	r2, #0
 800636e:	f000 80c1 	beq.w	80064f4 <_dtoa_r+0x894>
 8006372:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006376:	9c08      	ldr	r4, [sp, #32]
 8006378:	9e00      	ldr	r6, [sp, #0]
 800637a:	9a00      	ldr	r2, [sp, #0]
 800637c:	441a      	add	r2, r3
 800637e:	9200      	str	r2, [sp, #0]
 8006380:	9a06      	ldr	r2, [sp, #24]
 8006382:	2101      	movs	r1, #1
 8006384:	441a      	add	r2, r3
 8006386:	4648      	mov	r0, r9
 8006388:	9206      	str	r2, [sp, #24]
 800638a:	f000 fc77 	bl	8006c7c <__i2b>
 800638e:	4605      	mov	r5, r0
 8006390:	b166      	cbz	r6, 80063ac <_dtoa_r+0x74c>
 8006392:	9b06      	ldr	r3, [sp, #24]
 8006394:	2b00      	cmp	r3, #0
 8006396:	dd09      	ble.n	80063ac <_dtoa_r+0x74c>
 8006398:	42b3      	cmp	r3, r6
 800639a:	9a00      	ldr	r2, [sp, #0]
 800639c:	bfa8      	it	ge
 800639e:	4633      	movge	r3, r6
 80063a0:	1ad2      	subs	r2, r2, r3
 80063a2:	9200      	str	r2, [sp, #0]
 80063a4:	9a06      	ldr	r2, [sp, #24]
 80063a6:	1af6      	subs	r6, r6, r3
 80063a8:	1ad3      	subs	r3, r2, r3
 80063aa:	9306      	str	r3, [sp, #24]
 80063ac:	9b08      	ldr	r3, [sp, #32]
 80063ae:	b30b      	cbz	r3, 80063f4 <_dtoa_r+0x794>
 80063b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	f000 80c6 	beq.w	8006544 <_dtoa_r+0x8e4>
 80063b8:	2c00      	cmp	r4, #0
 80063ba:	f000 80c0 	beq.w	800653e <_dtoa_r+0x8de>
 80063be:	4629      	mov	r1, r5
 80063c0:	4622      	mov	r2, r4
 80063c2:	4648      	mov	r0, r9
 80063c4:	f000 fd12 	bl	8006dec <__pow5mult>
 80063c8:	9a02      	ldr	r2, [sp, #8]
 80063ca:	4601      	mov	r1, r0
 80063cc:	4605      	mov	r5, r0
 80063ce:	4648      	mov	r0, r9
 80063d0:	f000 fc6a 	bl	8006ca8 <__multiply>
 80063d4:	9902      	ldr	r1, [sp, #8]
 80063d6:	4680      	mov	r8, r0
 80063d8:	4648      	mov	r0, r9
 80063da:	f000 fb51 	bl	8006a80 <_Bfree>
 80063de:	9b08      	ldr	r3, [sp, #32]
 80063e0:	1b1b      	subs	r3, r3, r4
 80063e2:	9308      	str	r3, [sp, #32]
 80063e4:	f000 80b1 	beq.w	800654a <_dtoa_r+0x8ea>
 80063e8:	9a08      	ldr	r2, [sp, #32]
 80063ea:	4641      	mov	r1, r8
 80063ec:	4648      	mov	r0, r9
 80063ee:	f000 fcfd 	bl	8006dec <__pow5mult>
 80063f2:	9002      	str	r0, [sp, #8]
 80063f4:	2101      	movs	r1, #1
 80063f6:	4648      	mov	r0, r9
 80063f8:	f000 fc40 	bl	8006c7c <__i2b>
 80063fc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80063fe:	4604      	mov	r4, r0
 8006400:	2b00      	cmp	r3, #0
 8006402:	f000 81d8 	beq.w	80067b6 <_dtoa_r+0xb56>
 8006406:	461a      	mov	r2, r3
 8006408:	4601      	mov	r1, r0
 800640a:	4648      	mov	r0, r9
 800640c:	f000 fcee 	bl	8006dec <__pow5mult>
 8006410:	9b07      	ldr	r3, [sp, #28]
 8006412:	2b01      	cmp	r3, #1
 8006414:	4604      	mov	r4, r0
 8006416:	f300 809f 	bgt.w	8006558 <_dtoa_r+0x8f8>
 800641a:	9b04      	ldr	r3, [sp, #16]
 800641c:	2b00      	cmp	r3, #0
 800641e:	f040 8097 	bne.w	8006550 <_dtoa_r+0x8f0>
 8006422:	9b05      	ldr	r3, [sp, #20]
 8006424:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006428:	2b00      	cmp	r3, #0
 800642a:	f040 8093 	bne.w	8006554 <_dtoa_r+0x8f4>
 800642e:	9b05      	ldr	r3, [sp, #20]
 8006430:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006434:	0d1b      	lsrs	r3, r3, #20
 8006436:	051b      	lsls	r3, r3, #20
 8006438:	b133      	cbz	r3, 8006448 <_dtoa_r+0x7e8>
 800643a:	9b00      	ldr	r3, [sp, #0]
 800643c:	3301      	adds	r3, #1
 800643e:	9300      	str	r3, [sp, #0]
 8006440:	9b06      	ldr	r3, [sp, #24]
 8006442:	3301      	adds	r3, #1
 8006444:	9306      	str	r3, [sp, #24]
 8006446:	2301      	movs	r3, #1
 8006448:	9308      	str	r3, [sp, #32]
 800644a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800644c:	2b00      	cmp	r3, #0
 800644e:	f000 81b8 	beq.w	80067c2 <_dtoa_r+0xb62>
 8006452:	6923      	ldr	r3, [r4, #16]
 8006454:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006458:	6918      	ldr	r0, [r3, #16]
 800645a:	f000 fbc3 	bl	8006be4 <__hi0bits>
 800645e:	f1c0 0020 	rsb	r0, r0, #32
 8006462:	9b06      	ldr	r3, [sp, #24]
 8006464:	4418      	add	r0, r3
 8006466:	f010 001f 	ands.w	r0, r0, #31
 800646a:	f000 8082 	beq.w	8006572 <_dtoa_r+0x912>
 800646e:	f1c0 0320 	rsb	r3, r0, #32
 8006472:	2b04      	cmp	r3, #4
 8006474:	dd73      	ble.n	800655e <_dtoa_r+0x8fe>
 8006476:	9b00      	ldr	r3, [sp, #0]
 8006478:	f1c0 001c 	rsb	r0, r0, #28
 800647c:	4403      	add	r3, r0
 800647e:	9300      	str	r3, [sp, #0]
 8006480:	9b06      	ldr	r3, [sp, #24]
 8006482:	4403      	add	r3, r0
 8006484:	4406      	add	r6, r0
 8006486:	9306      	str	r3, [sp, #24]
 8006488:	9b00      	ldr	r3, [sp, #0]
 800648a:	2b00      	cmp	r3, #0
 800648c:	dd05      	ble.n	800649a <_dtoa_r+0x83a>
 800648e:	9902      	ldr	r1, [sp, #8]
 8006490:	461a      	mov	r2, r3
 8006492:	4648      	mov	r0, r9
 8006494:	f000 fd04 	bl	8006ea0 <__lshift>
 8006498:	9002      	str	r0, [sp, #8]
 800649a:	9b06      	ldr	r3, [sp, #24]
 800649c:	2b00      	cmp	r3, #0
 800649e:	dd05      	ble.n	80064ac <_dtoa_r+0x84c>
 80064a0:	4621      	mov	r1, r4
 80064a2:	461a      	mov	r2, r3
 80064a4:	4648      	mov	r0, r9
 80064a6:	f000 fcfb 	bl	8006ea0 <__lshift>
 80064aa:	4604      	mov	r4, r0
 80064ac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d061      	beq.n	8006576 <_dtoa_r+0x916>
 80064b2:	9802      	ldr	r0, [sp, #8]
 80064b4:	4621      	mov	r1, r4
 80064b6:	f000 fd5f 	bl	8006f78 <__mcmp>
 80064ba:	2800      	cmp	r0, #0
 80064bc:	da5b      	bge.n	8006576 <_dtoa_r+0x916>
 80064be:	2300      	movs	r3, #0
 80064c0:	9902      	ldr	r1, [sp, #8]
 80064c2:	220a      	movs	r2, #10
 80064c4:	4648      	mov	r0, r9
 80064c6:	f000 fafd 	bl	8006ac4 <__multadd>
 80064ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064cc:	9002      	str	r0, [sp, #8]
 80064ce:	f107 38ff 	add.w	r8, r7, #4294967295
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	f000 8177 	beq.w	80067c6 <_dtoa_r+0xb66>
 80064d8:	4629      	mov	r1, r5
 80064da:	2300      	movs	r3, #0
 80064dc:	220a      	movs	r2, #10
 80064de:	4648      	mov	r0, r9
 80064e0:	f000 faf0 	bl	8006ac4 <__multadd>
 80064e4:	f1bb 0f00 	cmp.w	fp, #0
 80064e8:	4605      	mov	r5, r0
 80064ea:	dc6f      	bgt.n	80065cc <_dtoa_r+0x96c>
 80064ec:	9b07      	ldr	r3, [sp, #28]
 80064ee:	2b02      	cmp	r3, #2
 80064f0:	dc49      	bgt.n	8006586 <_dtoa_r+0x926>
 80064f2:	e06b      	b.n	80065cc <_dtoa_r+0x96c>
 80064f4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80064f6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80064fa:	e73c      	b.n	8006376 <_dtoa_r+0x716>
 80064fc:	3fe00000 	.word	0x3fe00000
 8006500:	40240000 	.word	0x40240000
 8006504:	9b03      	ldr	r3, [sp, #12]
 8006506:	1e5c      	subs	r4, r3, #1
 8006508:	9b08      	ldr	r3, [sp, #32]
 800650a:	42a3      	cmp	r3, r4
 800650c:	db09      	blt.n	8006522 <_dtoa_r+0x8c2>
 800650e:	1b1c      	subs	r4, r3, r4
 8006510:	9b03      	ldr	r3, [sp, #12]
 8006512:	2b00      	cmp	r3, #0
 8006514:	f6bf af30 	bge.w	8006378 <_dtoa_r+0x718>
 8006518:	9b00      	ldr	r3, [sp, #0]
 800651a:	9a03      	ldr	r2, [sp, #12]
 800651c:	1a9e      	subs	r6, r3, r2
 800651e:	2300      	movs	r3, #0
 8006520:	e72b      	b.n	800637a <_dtoa_r+0x71a>
 8006522:	9b08      	ldr	r3, [sp, #32]
 8006524:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006526:	9408      	str	r4, [sp, #32]
 8006528:	1ae3      	subs	r3, r4, r3
 800652a:	441a      	add	r2, r3
 800652c:	9e00      	ldr	r6, [sp, #0]
 800652e:	9b03      	ldr	r3, [sp, #12]
 8006530:	920d      	str	r2, [sp, #52]	@ 0x34
 8006532:	2400      	movs	r4, #0
 8006534:	e721      	b.n	800637a <_dtoa_r+0x71a>
 8006536:	9c08      	ldr	r4, [sp, #32]
 8006538:	9e00      	ldr	r6, [sp, #0]
 800653a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800653c:	e728      	b.n	8006390 <_dtoa_r+0x730>
 800653e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006542:	e751      	b.n	80063e8 <_dtoa_r+0x788>
 8006544:	9a08      	ldr	r2, [sp, #32]
 8006546:	9902      	ldr	r1, [sp, #8]
 8006548:	e750      	b.n	80063ec <_dtoa_r+0x78c>
 800654a:	f8cd 8008 	str.w	r8, [sp, #8]
 800654e:	e751      	b.n	80063f4 <_dtoa_r+0x794>
 8006550:	2300      	movs	r3, #0
 8006552:	e779      	b.n	8006448 <_dtoa_r+0x7e8>
 8006554:	9b04      	ldr	r3, [sp, #16]
 8006556:	e777      	b.n	8006448 <_dtoa_r+0x7e8>
 8006558:	2300      	movs	r3, #0
 800655a:	9308      	str	r3, [sp, #32]
 800655c:	e779      	b.n	8006452 <_dtoa_r+0x7f2>
 800655e:	d093      	beq.n	8006488 <_dtoa_r+0x828>
 8006560:	9a00      	ldr	r2, [sp, #0]
 8006562:	331c      	adds	r3, #28
 8006564:	441a      	add	r2, r3
 8006566:	9200      	str	r2, [sp, #0]
 8006568:	9a06      	ldr	r2, [sp, #24]
 800656a:	441a      	add	r2, r3
 800656c:	441e      	add	r6, r3
 800656e:	9206      	str	r2, [sp, #24]
 8006570:	e78a      	b.n	8006488 <_dtoa_r+0x828>
 8006572:	4603      	mov	r3, r0
 8006574:	e7f4      	b.n	8006560 <_dtoa_r+0x900>
 8006576:	9b03      	ldr	r3, [sp, #12]
 8006578:	2b00      	cmp	r3, #0
 800657a:	46b8      	mov	r8, r7
 800657c:	dc20      	bgt.n	80065c0 <_dtoa_r+0x960>
 800657e:	469b      	mov	fp, r3
 8006580:	9b07      	ldr	r3, [sp, #28]
 8006582:	2b02      	cmp	r3, #2
 8006584:	dd1e      	ble.n	80065c4 <_dtoa_r+0x964>
 8006586:	f1bb 0f00 	cmp.w	fp, #0
 800658a:	f47f adb1 	bne.w	80060f0 <_dtoa_r+0x490>
 800658e:	4621      	mov	r1, r4
 8006590:	465b      	mov	r3, fp
 8006592:	2205      	movs	r2, #5
 8006594:	4648      	mov	r0, r9
 8006596:	f000 fa95 	bl	8006ac4 <__multadd>
 800659a:	4601      	mov	r1, r0
 800659c:	4604      	mov	r4, r0
 800659e:	9802      	ldr	r0, [sp, #8]
 80065a0:	f000 fcea 	bl	8006f78 <__mcmp>
 80065a4:	2800      	cmp	r0, #0
 80065a6:	f77f ada3 	ble.w	80060f0 <_dtoa_r+0x490>
 80065aa:	4656      	mov	r6, sl
 80065ac:	2331      	movs	r3, #49	@ 0x31
 80065ae:	f806 3b01 	strb.w	r3, [r6], #1
 80065b2:	f108 0801 	add.w	r8, r8, #1
 80065b6:	e59f      	b.n	80060f8 <_dtoa_r+0x498>
 80065b8:	9c03      	ldr	r4, [sp, #12]
 80065ba:	46b8      	mov	r8, r7
 80065bc:	4625      	mov	r5, r4
 80065be:	e7f4      	b.n	80065aa <_dtoa_r+0x94a>
 80065c0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80065c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	f000 8101 	beq.w	80067ce <_dtoa_r+0xb6e>
 80065cc:	2e00      	cmp	r6, #0
 80065ce:	dd05      	ble.n	80065dc <_dtoa_r+0x97c>
 80065d0:	4629      	mov	r1, r5
 80065d2:	4632      	mov	r2, r6
 80065d4:	4648      	mov	r0, r9
 80065d6:	f000 fc63 	bl	8006ea0 <__lshift>
 80065da:	4605      	mov	r5, r0
 80065dc:	9b08      	ldr	r3, [sp, #32]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d05c      	beq.n	800669c <_dtoa_r+0xa3c>
 80065e2:	6869      	ldr	r1, [r5, #4]
 80065e4:	4648      	mov	r0, r9
 80065e6:	f000 fa0b 	bl	8006a00 <_Balloc>
 80065ea:	4606      	mov	r6, r0
 80065ec:	b928      	cbnz	r0, 80065fa <_dtoa_r+0x99a>
 80065ee:	4b82      	ldr	r3, [pc, #520]	@ (80067f8 <_dtoa_r+0xb98>)
 80065f0:	4602      	mov	r2, r0
 80065f2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80065f6:	f7ff bb4a 	b.w	8005c8e <_dtoa_r+0x2e>
 80065fa:	692a      	ldr	r2, [r5, #16]
 80065fc:	3202      	adds	r2, #2
 80065fe:	0092      	lsls	r2, r2, #2
 8006600:	f105 010c 	add.w	r1, r5, #12
 8006604:	300c      	adds	r0, #12
 8006606:	f001 ff69 	bl	80084dc <memcpy>
 800660a:	2201      	movs	r2, #1
 800660c:	4631      	mov	r1, r6
 800660e:	4648      	mov	r0, r9
 8006610:	f000 fc46 	bl	8006ea0 <__lshift>
 8006614:	f10a 0301 	add.w	r3, sl, #1
 8006618:	9300      	str	r3, [sp, #0]
 800661a:	eb0a 030b 	add.w	r3, sl, fp
 800661e:	9308      	str	r3, [sp, #32]
 8006620:	9b04      	ldr	r3, [sp, #16]
 8006622:	f003 0301 	and.w	r3, r3, #1
 8006626:	462f      	mov	r7, r5
 8006628:	9306      	str	r3, [sp, #24]
 800662a:	4605      	mov	r5, r0
 800662c:	9b00      	ldr	r3, [sp, #0]
 800662e:	9802      	ldr	r0, [sp, #8]
 8006630:	4621      	mov	r1, r4
 8006632:	f103 3bff 	add.w	fp, r3, #4294967295
 8006636:	f7ff fa8b 	bl	8005b50 <quorem>
 800663a:	4603      	mov	r3, r0
 800663c:	3330      	adds	r3, #48	@ 0x30
 800663e:	9003      	str	r0, [sp, #12]
 8006640:	4639      	mov	r1, r7
 8006642:	9802      	ldr	r0, [sp, #8]
 8006644:	9309      	str	r3, [sp, #36]	@ 0x24
 8006646:	f000 fc97 	bl	8006f78 <__mcmp>
 800664a:	462a      	mov	r2, r5
 800664c:	9004      	str	r0, [sp, #16]
 800664e:	4621      	mov	r1, r4
 8006650:	4648      	mov	r0, r9
 8006652:	f000 fcad 	bl	8006fb0 <__mdiff>
 8006656:	68c2      	ldr	r2, [r0, #12]
 8006658:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800665a:	4606      	mov	r6, r0
 800665c:	bb02      	cbnz	r2, 80066a0 <_dtoa_r+0xa40>
 800665e:	4601      	mov	r1, r0
 8006660:	9802      	ldr	r0, [sp, #8]
 8006662:	f000 fc89 	bl	8006f78 <__mcmp>
 8006666:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006668:	4602      	mov	r2, r0
 800666a:	4631      	mov	r1, r6
 800666c:	4648      	mov	r0, r9
 800666e:	920c      	str	r2, [sp, #48]	@ 0x30
 8006670:	9309      	str	r3, [sp, #36]	@ 0x24
 8006672:	f000 fa05 	bl	8006a80 <_Bfree>
 8006676:	9b07      	ldr	r3, [sp, #28]
 8006678:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800667a:	9e00      	ldr	r6, [sp, #0]
 800667c:	ea42 0103 	orr.w	r1, r2, r3
 8006680:	9b06      	ldr	r3, [sp, #24]
 8006682:	4319      	orrs	r1, r3
 8006684:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006686:	d10d      	bne.n	80066a4 <_dtoa_r+0xa44>
 8006688:	2b39      	cmp	r3, #57	@ 0x39
 800668a:	d027      	beq.n	80066dc <_dtoa_r+0xa7c>
 800668c:	9a04      	ldr	r2, [sp, #16]
 800668e:	2a00      	cmp	r2, #0
 8006690:	dd01      	ble.n	8006696 <_dtoa_r+0xa36>
 8006692:	9b03      	ldr	r3, [sp, #12]
 8006694:	3331      	adds	r3, #49	@ 0x31
 8006696:	f88b 3000 	strb.w	r3, [fp]
 800669a:	e52e      	b.n	80060fa <_dtoa_r+0x49a>
 800669c:	4628      	mov	r0, r5
 800669e:	e7b9      	b.n	8006614 <_dtoa_r+0x9b4>
 80066a0:	2201      	movs	r2, #1
 80066a2:	e7e2      	b.n	800666a <_dtoa_r+0xa0a>
 80066a4:	9904      	ldr	r1, [sp, #16]
 80066a6:	2900      	cmp	r1, #0
 80066a8:	db04      	blt.n	80066b4 <_dtoa_r+0xa54>
 80066aa:	9807      	ldr	r0, [sp, #28]
 80066ac:	4301      	orrs	r1, r0
 80066ae:	9806      	ldr	r0, [sp, #24]
 80066b0:	4301      	orrs	r1, r0
 80066b2:	d120      	bne.n	80066f6 <_dtoa_r+0xa96>
 80066b4:	2a00      	cmp	r2, #0
 80066b6:	ddee      	ble.n	8006696 <_dtoa_r+0xa36>
 80066b8:	9902      	ldr	r1, [sp, #8]
 80066ba:	9300      	str	r3, [sp, #0]
 80066bc:	2201      	movs	r2, #1
 80066be:	4648      	mov	r0, r9
 80066c0:	f000 fbee 	bl	8006ea0 <__lshift>
 80066c4:	4621      	mov	r1, r4
 80066c6:	9002      	str	r0, [sp, #8]
 80066c8:	f000 fc56 	bl	8006f78 <__mcmp>
 80066cc:	2800      	cmp	r0, #0
 80066ce:	9b00      	ldr	r3, [sp, #0]
 80066d0:	dc02      	bgt.n	80066d8 <_dtoa_r+0xa78>
 80066d2:	d1e0      	bne.n	8006696 <_dtoa_r+0xa36>
 80066d4:	07da      	lsls	r2, r3, #31
 80066d6:	d5de      	bpl.n	8006696 <_dtoa_r+0xa36>
 80066d8:	2b39      	cmp	r3, #57	@ 0x39
 80066da:	d1da      	bne.n	8006692 <_dtoa_r+0xa32>
 80066dc:	2339      	movs	r3, #57	@ 0x39
 80066de:	f88b 3000 	strb.w	r3, [fp]
 80066e2:	4633      	mov	r3, r6
 80066e4:	461e      	mov	r6, r3
 80066e6:	3b01      	subs	r3, #1
 80066e8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80066ec:	2a39      	cmp	r2, #57	@ 0x39
 80066ee:	d04e      	beq.n	800678e <_dtoa_r+0xb2e>
 80066f0:	3201      	adds	r2, #1
 80066f2:	701a      	strb	r2, [r3, #0]
 80066f4:	e501      	b.n	80060fa <_dtoa_r+0x49a>
 80066f6:	2a00      	cmp	r2, #0
 80066f8:	dd03      	ble.n	8006702 <_dtoa_r+0xaa2>
 80066fa:	2b39      	cmp	r3, #57	@ 0x39
 80066fc:	d0ee      	beq.n	80066dc <_dtoa_r+0xa7c>
 80066fe:	3301      	adds	r3, #1
 8006700:	e7c9      	b.n	8006696 <_dtoa_r+0xa36>
 8006702:	9a00      	ldr	r2, [sp, #0]
 8006704:	9908      	ldr	r1, [sp, #32]
 8006706:	f802 3c01 	strb.w	r3, [r2, #-1]
 800670a:	428a      	cmp	r2, r1
 800670c:	d028      	beq.n	8006760 <_dtoa_r+0xb00>
 800670e:	9902      	ldr	r1, [sp, #8]
 8006710:	2300      	movs	r3, #0
 8006712:	220a      	movs	r2, #10
 8006714:	4648      	mov	r0, r9
 8006716:	f000 f9d5 	bl	8006ac4 <__multadd>
 800671a:	42af      	cmp	r7, r5
 800671c:	9002      	str	r0, [sp, #8]
 800671e:	f04f 0300 	mov.w	r3, #0
 8006722:	f04f 020a 	mov.w	r2, #10
 8006726:	4639      	mov	r1, r7
 8006728:	4648      	mov	r0, r9
 800672a:	d107      	bne.n	800673c <_dtoa_r+0xadc>
 800672c:	f000 f9ca 	bl	8006ac4 <__multadd>
 8006730:	4607      	mov	r7, r0
 8006732:	4605      	mov	r5, r0
 8006734:	9b00      	ldr	r3, [sp, #0]
 8006736:	3301      	adds	r3, #1
 8006738:	9300      	str	r3, [sp, #0]
 800673a:	e777      	b.n	800662c <_dtoa_r+0x9cc>
 800673c:	f000 f9c2 	bl	8006ac4 <__multadd>
 8006740:	4629      	mov	r1, r5
 8006742:	4607      	mov	r7, r0
 8006744:	2300      	movs	r3, #0
 8006746:	220a      	movs	r2, #10
 8006748:	4648      	mov	r0, r9
 800674a:	f000 f9bb 	bl	8006ac4 <__multadd>
 800674e:	4605      	mov	r5, r0
 8006750:	e7f0      	b.n	8006734 <_dtoa_r+0xad4>
 8006752:	f1bb 0f00 	cmp.w	fp, #0
 8006756:	bfcc      	ite	gt
 8006758:	465e      	movgt	r6, fp
 800675a:	2601      	movle	r6, #1
 800675c:	4456      	add	r6, sl
 800675e:	2700      	movs	r7, #0
 8006760:	9902      	ldr	r1, [sp, #8]
 8006762:	9300      	str	r3, [sp, #0]
 8006764:	2201      	movs	r2, #1
 8006766:	4648      	mov	r0, r9
 8006768:	f000 fb9a 	bl	8006ea0 <__lshift>
 800676c:	4621      	mov	r1, r4
 800676e:	9002      	str	r0, [sp, #8]
 8006770:	f000 fc02 	bl	8006f78 <__mcmp>
 8006774:	2800      	cmp	r0, #0
 8006776:	dcb4      	bgt.n	80066e2 <_dtoa_r+0xa82>
 8006778:	d102      	bne.n	8006780 <_dtoa_r+0xb20>
 800677a:	9b00      	ldr	r3, [sp, #0]
 800677c:	07db      	lsls	r3, r3, #31
 800677e:	d4b0      	bmi.n	80066e2 <_dtoa_r+0xa82>
 8006780:	4633      	mov	r3, r6
 8006782:	461e      	mov	r6, r3
 8006784:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006788:	2a30      	cmp	r2, #48	@ 0x30
 800678a:	d0fa      	beq.n	8006782 <_dtoa_r+0xb22>
 800678c:	e4b5      	b.n	80060fa <_dtoa_r+0x49a>
 800678e:	459a      	cmp	sl, r3
 8006790:	d1a8      	bne.n	80066e4 <_dtoa_r+0xa84>
 8006792:	2331      	movs	r3, #49	@ 0x31
 8006794:	f108 0801 	add.w	r8, r8, #1
 8006798:	f88a 3000 	strb.w	r3, [sl]
 800679c:	e4ad      	b.n	80060fa <_dtoa_r+0x49a>
 800679e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80067a0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80067fc <_dtoa_r+0xb9c>
 80067a4:	b11b      	cbz	r3, 80067ae <_dtoa_r+0xb4e>
 80067a6:	f10a 0308 	add.w	r3, sl, #8
 80067aa:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80067ac:	6013      	str	r3, [r2, #0]
 80067ae:	4650      	mov	r0, sl
 80067b0:	b017      	add	sp, #92	@ 0x5c
 80067b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067b6:	9b07      	ldr	r3, [sp, #28]
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	f77f ae2e 	ble.w	800641a <_dtoa_r+0x7ba>
 80067be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80067c0:	9308      	str	r3, [sp, #32]
 80067c2:	2001      	movs	r0, #1
 80067c4:	e64d      	b.n	8006462 <_dtoa_r+0x802>
 80067c6:	f1bb 0f00 	cmp.w	fp, #0
 80067ca:	f77f aed9 	ble.w	8006580 <_dtoa_r+0x920>
 80067ce:	4656      	mov	r6, sl
 80067d0:	9802      	ldr	r0, [sp, #8]
 80067d2:	4621      	mov	r1, r4
 80067d4:	f7ff f9bc 	bl	8005b50 <quorem>
 80067d8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80067dc:	f806 3b01 	strb.w	r3, [r6], #1
 80067e0:	eba6 020a 	sub.w	r2, r6, sl
 80067e4:	4593      	cmp	fp, r2
 80067e6:	ddb4      	ble.n	8006752 <_dtoa_r+0xaf2>
 80067e8:	9902      	ldr	r1, [sp, #8]
 80067ea:	2300      	movs	r3, #0
 80067ec:	220a      	movs	r2, #10
 80067ee:	4648      	mov	r0, r9
 80067f0:	f000 f968 	bl	8006ac4 <__multadd>
 80067f4:	9002      	str	r0, [sp, #8]
 80067f6:	e7eb      	b.n	80067d0 <_dtoa_r+0xb70>
 80067f8:	08009411 	.word	0x08009411
 80067fc:	08009395 	.word	0x08009395

08006800 <_free_r>:
 8006800:	b538      	push	{r3, r4, r5, lr}
 8006802:	4605      	mov	r5, r0
 8006804:	2900      	cmp	r1, #0
 8006806:	d041      	beq.n	800688c <_free_r+0x8c>
 8006808:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800680c:	1f0c      	subs	r4, r1, #4
 800680e:	2b00      	cmp	r3, #0
 8006810:	bfb8      	it	lt
 8006812:	18e4      	addlt	r4, r4, r3
 8006814:	f000 f8e8 	bl	80069e8 <__malloc_lock>
 8006818:	4a1d      	ldr	r2, [pc, #116]	@ (8006890 <_free_r+0x90>)
 800681a:	6813      	ldr	r3, [r2, #0]
 800681c:	b933      	cbnz	r3, 800682c <_free_r+0x2c>
 800681e:	6063      	str	r3, [r4, #4]
 8006820:	6014      	str	r4, [r2, #0]
 8006822:	4628      	mov	r0, r5
 8006824:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006828:	f000 b8e4 	b.w	80069f4 <__malloc_unlock>
 800682c:	42a3      	cmp	r3, r4
 800682e:	d908      	bls.n	8006842 <_free_r+0x42>
 8006830:	6820      	ldr	r0, [r4, #0]
 8006832:	1821      	adds	r1, r4, r0
 8006834:	428b      	cmp	r3, r1
 8006836:	bf01      	itttt	eq
 8006838:	6819      	ldreq	r1, [r3, #0]
 800683a:	685b      	ldreq	r3, [r3, #4]
 800683c:	1809      	addeq	r1, r1, r0
 800683e:	6021      	streq	r1, [r4, #0]
 8006840:	e7ed      	b.n	800681e <_free_r+0x1e>
 8006842:	461a      	mov	r2, r3
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	b10b      	cbz	r3, 800684c <_free_r+0x4c>
 8006848:	42a3      	cmp	r3, r4
 800684a:	d9fa      	bls.n	8006842 <_free_r+0x42>
 800684c:	6811      	ldr	r1, [r2, #0]
 800684e:	1850      	adds	r0, r2, r1
 8006850:	42a0      	cmp	r0, r4
 8006852:	d10b      	bne.n	800686c <_free_r+0x6c>
 8006854:	6820      	ldr	r0, [r4, #0]
 8006856:	4401      	add	r1, r0
 8006858:	1850      	adds	r0, r2, r1
 800685a:	4283      	cmp	r3, r0
 800685c:	6011      	str	r1, [r2, #0]
 800685e:	d1e0      	bne.n	8006822 <_free_r+0x22>
 8006860:	6818      	ldr	r0, [r3, #0]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	6053      	str	r3, [r2, #4]
 8006866:	4408      	add	r0, r1
 8006868:	6010      	str	r0, [r2, #0]
 800686a:	e7da      	b.n	8006822 <_free_r+0x22>
 800686c:	d902      	bls.n	8006874 <_free_r+0x74>
 800686e:	230c      	movs	r3, #12
 8006870:	602b      	str	r3, [r5, #0]
 8006872:	e7d6      	b.n	8006822 <_free_r+0x22>
 8006874:	6820      	ldr	r0, [r4, #0]
 8006876:	1821      	adds	r1, r4, r0
 8006878:	428b      	cmp	r3, r1
 800687a:	bf04      	itt	eq
 800687c:	6819      	ldreq	r1, [r3, #0]
 800687e:	685b      	ldreq	r3, [r3, #4]
 8006880:	6063      	str	r3, [r4, #4]
 8006882:	bf04      	itt	eq
 8006884:	1809      	addeq	r1, r1, r0
 8006886:	6021      	streq	r1, [r4, #0]
 8006888:	6054      	str	r4, [r2, #4]
 800688a:	e7ca      	b.n	8006822 <_free_r+0x22>
 800688c:	bd38      	pop	{r3, r4, r5, pc}
 800688e:	bf00      	nop
 8006890:	2000049c 	.word	0x2000049c

08006894 <malloc>:
 8006894:	4b02      	ldr	r3, [pc, #8]	@ (80068a0 <malloc+0xc>)
 8006896:	4601      	mov	r1, r0
 8006898:	6818      	ldr	r0, [r3, #0]
 800689a:	f000 b825 	b.w	80068e8 <_malloc_r>
 800689e:	bf00      	nop
 80068a0:	20000018 	.word	0x20000018

080068a4 <sbrk_aligned>:
 80068a4:	b570      	push	{r4, r5, r6, lr}
 80068a6:	4e0f      	ldr	r6, [pc, #60]	@ (80068e4 <sbrk_aligned+0x40>)
 80068a8:	460c      	mov	r4, r1
 80068aa:	6831      	ldr	r1, [r6, #0]
 80068ac:	4605      	mov	r5, r0
 80068ae:	b911      	cbnz	r1, 80068b6 <sbrk_aligned+0x12>
 80068b0:	f001 fe04 	bl	80084bc <_sbrk_r>
 80068b4:	6030      	str	r0, [r6, #0]
 80068b6:	4621      	mov	r1, r4
 80068b8:	4628      	mov	r0, r5
 80068ba:	f001 fdff 	bl	80084bc <_sbrk_r>
 80068be:	1c43      	adds	r3, r0, #1
 80068c0:	d103      	bne.n	80068ca <sbrk_aligned+0x26>
 80068c2:	f04f 34ff 	mov.w	r4, #4294967295
 80068c6:	4620      	mov	r0, r4
 80068c8:	bd70      	pop	{r4, r5, r6, pc}
 80068ca:	1cc4      	adds	r4, r0, #3
 80068cc:	f024 0403 	bic.w	r4, r4, #3
 80068d0:	42a0      	cmp	r0, r4
 80068d2:	d0f8      	beq.n	80068c6 <sbrk_aligned+0x22>
 80068d4:	1a21      	subs	r1, r4, r0
 80068d6:	4628      	mov	r0, r5
 80068d8:	f001 fdf0 	bl	80084bc <_sbrk_r>
 80068dc:	3001      	adds	r0, #1
 80068de:	d1f2      	bne.n	80068c6 <sbrk_aligned+0x22>
 80068e0:	e7ef      	b.n	80068c2 <sbrk_aligned+0x1e>
 80068e2:	bf00      	nop
 80068e4:	20000498 	.word	0x20000498

080068e8 <_malloc_r>:
 80068e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068ec:	1ccd      	adds	r5, r1, #3
 80068ee:	f025 0503 	bic.w	r5, r5, #3
 80068f2:	3508      	adds	r5, #8
 80068f4:	2d0c      	cmp	r5, #12
 80068f6:	bf38      	it	cc
 80068f8:	250c      	movcc	r5, #12
 80068fa:	2d00      	cmp	r5, #0
 80068fc:	4606      	mov	r6, r0
 80068fe:	db01      	blt.n	8006904 <_malloc_r+0x1c>
 8006900:	42a9      	cmp	r1, r5
 8006902:	d904      	bls.n	800690e <_malloc_r+0x26>
 8006904:	230c      	movs	r3, #12
 8006906:	6033      	str	r3, [r6, #0]
 8006908:	2000      	movs	r0, #0
 800690a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800690e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80069e4 <_malloc_r+0xfc>
 8006912:	f000 f869 	bl	80069e8 <__malloc_lock>
 8006916:	f8d8 3000 	ldr.w	r3, [r8]
 800691a:	461c      	mov	r4, r3
 800691c:	bb44      	cbnz	r4, 8006970 <_malloc_r+0x88>
 800691e:	4629      	mov	r1, r5
 8006920:	4630      	mov	r0, r6
 8006922:	f7ff ffbf 	bl	80068a4 <sbrk_aligned>
 8006926:	1c43      	adds	r3, r0, #1
 8006928:	4604      	mov	r4, r0
 800692a:	d158      	bne.n	80069de <_malloc_r+0xf6>
 800692c:	f8d8 4000 	ldr.w	r4, [r8]
 8006930:	4627      	mov	r7, r4
 8006932:	2f00      	cmp	r7, #0
 8006934:	d143      	bne.n	80069be <_malloc_r+0xd6>
 8006936:	2c00      	cmp	r4, #0
 8006938:	d04b      	beq.n	80069d2 <_malloc_r+0xea>
 800693a:	6823      	ldr	r3, [r4, #0]
 800693c:	4639      	mov	r1, r7
 800693e:	4630      	mov	r0, r6
 8006940:	eb04 0903 	add.w	r9, r4, r3
 8006944:	f001 fdba 	bl	80084bc <_sbrk_r>
 8006948:	4581      	cmp	r9, r0
 800694a:	d142      	bne.n	80069d2 <_malloc_r+0xea>
 800694c:	6821      	ldr	r1, [r4, #0]
 800694e:	1a6d      	subs	r5, r5, r1
 8006950:	4629      	mov	r1, r5
 8006952:	4630      	mov	r0, r6
 8006954:	f7ff ffa6 	bl	80068a4 <sbrk_aligned>
 8006958:	3001      	adds	r0, #1
 800695a:	d03a      	beq.n	80069d2 <_malloc_r+0xea>
 800695c:	6823      	ldr	r3, [r4, #0]
 800695e:	442b      	add	r3, r5
 8006960:	6023      	str	r3, [r4, #0]
 8006962:	f8d8 3000 	ldr.w	r3, [r8]
 8006966:	685a      	ldr	r2, [r3, #4]
 8006968:	bb62      	cbnz	r2, 80069c4 <_malloc_r+0xdc>
 800696a:	f8c8 7000 	str.w	r7, [r8]
 800696e:	e00f      	b.n	8006990 <_malloc_r+0xa8>
 8006970:	6822      	ldr	r2, [r4, #0]
 8006972:	1b52      	subs	r2, r2, r5
 8006974:	d420      	bmi.n	80069b8 <_malloc_r+0xd0>
 8006976:	2a0b      	cmp	r2, #11
 8006978:	d917      	bls.n	80069aa <_malloc_r+0xc2>
 800697a:	1961      	adds	r1, r4, r5
 800697c:	42a3      	cmp	r3, r4
 800697e:	6025      	str	r5, [r4, #0]
 8006980:	bf18      	it	ne
 8006982:	6059      	strne	r1, [r3, #4]
 8006984:	6863      	ldr	r3, [r4, #4]
 8006986:	bf08      	it	eq
 8006988:	f8c8 1000 	streq.w	r1, [r8]
 800698c:	5162      	str	r2, [r4, r5]
 800698e:	604b      	str	r3, [r1, #4]
 8006990:	4630      	mov	r0, r6
 8006992:	f000 f82f 	bl	80069f4 <__malloc_unlock>
 8006996:	f104 000b 	add.w	r0, r4, #11
 800699a:	1d23      	adds	r3, r4, #4
 800699c:	f020 0007 	bic.w	r0, r0, #7
 80069a0:	1ac2      	subs	r2, r0, r3
 80069a2:	bf1c      	itt	ne
 80069a4:	1a1b      	subne	r3, r3, r0
 80069a6:	50a3      	strne	r3, [r4, r2]
 80069a8:	e7af      	b.n	800690a <_malloc_r+0x22>
 80069aa:	6862      	ldr	r2, [r4, #4]
 80069ac:	42a3      	cmp	r3, r4
 80069ae:	bf0c      	ite	eq
 80069b0:	f8c8 2000 	streq.w	r2, [r8]
 80069b4:	605a      	strne	r2, [r3, #4]
 80069b6:	e7eb      	b.n	8006990 <_malloc_r+0xa8>
 80069b8:	4623      	mov	r3, r4
 80069ba:	6864      	ldr	r4, [r4, #4]
 80069bc:	e7ae      	b.n	800691c <_malloc_r+0x34>
 80069be:	463c      	mov	r4, r7
 80069c0:	687f      	ldr	r7, [r7, #4]
 80069c2:	e7b6      	b.n	8006932 <_malloc_r+0x4a>
 80069c4:	461a      	mov	r2, r3
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	42a3      	cmp	r3, r4
 80069ca:	d1fb      	bne.n	80069c4 <_malloc_r+0xdc>
 80069cc:	2300      	movs	r3, #0
 80069ce:	6053      	str	r3, [r2, #4]
 80069d0:	e7de      	b.n	8006990 <_malloc_r+0xa8>
 80069d2:	230c      	movs	r3, #12
 80069d4:	6033      	str	r3, [r6, #0]
 80069d6:	4630      	mov	r0, r6
 80069d8:	f000 f80c 	bl	80069f4 <__malloc_unlock>
 80069dc:	e794      	b.n	8006908 <_malloc_r+0x20>
 80069de:	6005      	str	r5, [r0, #0]
 80069e0:	e7d6      	b.n	8006990 <_malloc_r+0xa8>
 80069e2:	bf00      	nop
 80069e4:	2000049c 	.word	0x2000049c

080069e8 <__malloc_lock>:
 80069e8:	4801      	ldr	r0, [pc, #4]	@ (80069f0 <__malloc_lock+0x8>)
 80069ea:	f7ff b8a8 	b.w	8005b3e <__retarget_lock_acquire_recursive>
 80069ee:	bf00      	nop
 80069f0:	20000494 	.word	0x20000494

080069f4 <__malloc_unlock>:
 80069f4:	4801      	ldr	r0, [pc, #4]	@ (80069fc <__malloc_unlock+0x8>)
 80069f6:	f7ff b8a3 	b.w	8005b40 <__retarget_lock_release_recursive>
 80069fa:	bf00      	nop
 80069fc:	20000494 	.word	0x20000494

08006a00 <_Balloc>:
 8006a00:	b570      	push	{r4, r5, r6, lr}
 8006a02:	69c6      	ldr	r6, [r0, #28]
 8006a04:	4604      	mov	r4, r0
 8006a06:	460d      	mov	r5, r1
 8006a08:	b976      	cbnz	r6, 8006a28 <_Balloc+0x28>
 8006a0a:	2010      	movs	r0, #16
 8006a0c:	f7ff ff42 	bl	8006894 <malloc>
 8006a10:	4602      	mov	r2, r0
 8006a12:	61e0      	str	r0, [r4, #28]
 8006a14:	b920      	cbnz	r0, 8006a20 <_Balloc+0x20>
 8006a16:	4b18      	ldr	r3, [pc, #96]	@ (8006a78 <_Balloc+0x78>)
 8006a18:	4818      	ldr	r0, [pc, #96]	@ (8006a7c <_Balloc+0x7c>)
 8006a1a:	216b      	movs	r1, #107	@ 0x6b
 8006a1c:	f001 fd74 	bl	8008508 <__assert_func>
 8006a20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a24:	6006      	str	r6, [r0, #0]
 8006a26:	60c6      	str	r6, [r0, #12]
 8006a28:	69e6      	ldr	r6, [r4, #28]
 8006a2a:	68f3      	ldr	r3, [r6, #12]
 8006a2c:	b183      	cbz	r3, 8006a50 <_Balloc+0x50>
 8006a2e:	69e3      	ldr	r3, [r4, #28]
 8006a30:	68db      	ldr	r3, [r3, #12]
 8006a32:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006a36:	b9b8      	cbnz	r0, 8006a68 <_Balloc+0x68>
 8006a38:	2101      	movs	r1, #1
 8006a3a:	fa01 f605 	lsl.w	r6, r1, r5
 8006a3e:	1d72      	adds	r2, r6, #5
 8006a40:	0092      	lsls	r2, r2, #2
 8006a42:	4620      	mov	r0, r4
 8006a44:	f001 fd7e 	bl	8008544 <_calloc_r>
 8006a48:	b160      	cbz	r0, 8006a64 <_Balloc+0x64>
 8006a4a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006a4e:	e00e      	b.n	8006a6e <_Balloc+0x6e>
 8006a50:	2221      	movs	r2, #33	@ 0x21
 8006a52:	2104      	movs	r1, #4
 8006a54:	4620      	mov	r0, r4
 8006a56:	f001 fd75 	bl	8008544 <_calloc_r>
 8006a5a:	69e3      	ldr	r3, [r4, #28]
 8006a5c:	60f0      	str	r0, [r6, #12]
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d1e4      	bne.n	8006a2e <_Balloc+0x2e>
 8006a64:	2000      	movs	r0, #0
 8006a66:	bd70      	pop	{r4, r5, r6, pc}
 8006a68:	6802      	ldr	r2, [r0, #0]
 8006a6a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006a6e:	2300      	movs	r3, #0
 8006a70:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006a74:	e7f7      	b.n	8006a66 <_Balloc+0x66>
 8006a76:	bf00      	nop
 8006a78:	080093a2 	.word	0x080093a2
 8006a7c:	08009422 	.word	0x08009422

08006a80 <_Bfree>:
 8006a80:	b570      	push	{r4, r5, r6, lr}
 8006a82:	69c6      	ldr	r6, [r0, #28]
 8006a84:	4605      	mov	r5, r0
 8006a86:	460c      	mov	r4, r1
 8006a88:	b976      	cbnz	r6, 8006aa8 <_Bfree+0x28>
 8006a8a:	2010      	movs	r0, #16
 8006a8c:	f7ff ff02 	bl	8006894 <malloc>
 8006a90:	4602      	mov	r2, r0
 8006a92:	61e8      	str	r0, [r5, #28]
 8006a94:	b920      	cbnz	r0, 8006aa0 <_Bfree+0x20>
 8006a96:	4b09      	ldr	r3, [pc, #36]	@ (8006abc <_Bfree+0x3c>)
 8006a98:	4809      	ldr	r0, [pc, #36]	@ (8006ac0 <_Bfree+0x40>)
 8006a9a:	218f      	movs	r1, #143	@ 0x8f
 8006a9c:	f001 fd34 	bl	8008508 <__assert_func>
 8006aa0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006aa4:	6006      	str	r6, [r0, #0]
 8006aa6:	60c6      	str	r6, [r0, #12]
 8006aa8:	b13c      	cbz	r4, 8006aba <_Bfree+0x3a>
 8006aaa:	69eb      	ldr	r3, [r5, #28]
 8006aac:	6862      	ldr	r2, [r4, #4]
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006ab4:	6021      	str	r1, [r4, #0]
 8006ab6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006aba:	bd70      	pop	{r4, r5, r6, pc}
 8006abc:	080093a2 	.word	0x080093a2
 8006ac0:	08009422 	.word	0x08009422

08006ac4 <__multadd>:
 8006ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ac8:	690d      	ldr	r5, [r1, #16]
 8006aca:	4607      	mov	r7, r0
 8006acc:	460c      	mov	r4, r1
 8006ace:	461e      	mov	r6, r3
 8006ad0:	f101 0c14 	add.w	ip, r1, #20
 8006ad4:	2000      	movs	r0, #0
 8006ad6:	f8dc 3000 	ldr.w	r3, [ip]
 8006ada:	b299      	uxth	r1, r3
 8006adc:	fb02 6101 	mla	r1, r2, r1, r6
 8006ae0:	0c1e      	lsrs	r6, r3, #16
 8006ae2:	0c0b      	lsrs	r3, r1, #16
 8006ae4:	fb02 3306 	mla	r3, r2, r6, r3
 8006ae8:	b289      	uxth	r1, r1
 8006aea:	3001      	adds	r0, #1
 8006aec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006af0:	4285      	cmp	r5, r0
 8006af2:	f84c 1b04 	str.w	r1, [ip], #4
 8006af6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006afa:	dcec      	bgt.n	8006ad6 <__multadd+0x12>
 8006afc:	b30e      	cbz	r6, 8006b42 <__multadd+0x7e>
 8006afe:	68a3      	ldr	r3, [r4, #8]
 8006b00:	42ab      	cmp	r3, r5
 8006b02:	dc19      	bgt.n	8006b38 <__multadd+0x74>
 8006b04:	6861      	ldr	r1, [r4, #4]
 8006b06:	4638      	mov	r0, r7
 8006b08:	3101      	adds	r1, #1
 8006b0a:	f7ff ff79 	bl	8006a00 <_Balloc>
 8006b0e:	4680      	mov	r8, r0
 8006b10:	b928      	cbnz	r0, 8006b1e <__multadd+0x5a>
 8006b12:	4602      	mov	r2, r0
 8006b14:	4b0c      	ldr	r3, [pc, #48]	@ (8006b48 <__multadd+0x84>)
 8006b16:	480d      	ldr	r0, [pc, #52]	@ (8006b4c <__multadd+0x88>)
 8006b18:	21ba      	movs	r1, #186	@ 0xba
 8006b1a:	f001 fcf5 	bl	8008508 <__assert_func>
 8006b1e:	6922      	ldr	r2, [r4, #16]
 8006b20:	3202      	adds	r2, #2
 8006b22:	f104 010c 	add.w	r1, r4, #12
 8006b26:	0092      	lsls	r2, r2, #2
 8006b28:	300c      	adds	r0, #12
 8006b2a:	f001 fcd7 	bl	80084dc <memcpy>
 8006b2e:	4621      	mov	r1, r4
 8006b30:	4638      	mov	r0, r7
 8006b32:	f7ff ffa5 	bl	8006a80 <_Bfree>
 8006b36:	4644      	mov	r4, r8
 8006b38:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006b3c:	3501      	adds	r5, #1
 8006b3e:	615e      	str	r6, [r3, #20]
 8006b40:	6125      	str	r5, [r4, #16]
 8006b42:	4620      	mov	r0, r4
 8006b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b48:	08009411 	.word	0x08009411
 8006b4c:	08009422 	.word	0x08009422

08006b50 <__s2b>:
 8006b50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b54:	460c      	mov	r4, r1
 8006b56:	4615      	mov	r5, r2
 8006b58:	461f      	mov	r7, r3
 8006b5a:	2209      	movs	r2, #9
 8006b5c:	3308      	adds	r3, #8
 8006b5e:	4606      	mov	r6, r0
 8006b60:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b64:	2100      	movs	r1, #0
 8006b66:	2201      	movs	r2, #1
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	db09      	blt.n	8006b80 <__s2b+0x30>
 8006b6c:	4630      	mov	r0, r6
 8006b6e:	f7ff ff47 	bl	8006a00 <_Balloc>
 8006b72:	b940      	cbnz	r0, 8006b86 <__s2b+0x36>
 8006b74:	4602      	mov	r2, r0
 8006b76:	4b19      	ldr	r3, [pc, #100]	@ (8006bdc <__s2b+0x8c>)
 8006b78:	4819      	ldr	r0, [pc, #100]	@ (8006be0 <__s2b+0x90>)
 8006b7a:	21d3      	movs	r1, #211	@ 0xd3
 8006b7c:	f001 fcc4 	bl	8008508 <__assert_func>
 8006b80:	0052      	lsls	r2, r2, #1
 8006b82:	3101      	adds	r1, #1
 8006b84:	e7f0      	b.n	8006b68 <__s2b+0x18>
 8006b86:	9b08      	ldr	r3, [sp, #32]
 8006b88:	6143      	str	r3, [r0, #20]
 8006b8a:	2d09      	cmp	r5, #9
 8006b8c:	f04f 0301 	mov.w	r3, #1
 8006b90:	6103      	str	r3, [r0, #16]
 8006b92:	dd16      	ble.n	8006bc2 <__s2b+0x72>
 8006b94:	f104 0909 	add.w	r9, r4, #9
 8006b98:	46c8      	mov	r8, r9
 8006b9a:	442c      	add	r4, r5
 8006b9c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006ba0:	4601      	mov	r1, r0
 8006ba2:	3b30      	subs	r3, #48	@ 0x30
 8006ba4:	220a      	movs	r2, #10
 8006ba6:	4630      	mov	r0, r6
 8006ba8:	f7ff ff8c 	bl	8006ac4 <__multadd>
 8006bac:	45a0      	cmp	r8, r4
 8006bae:	d1f5      	bne.n	8006b9c <__s2b+0x4c>
 8006bb0:	f1a5 0408 	sub.w	r4, r5, #8
 8006bb4:	444c      	add	r4, r9
 8006bb6:	1b2d      	subs	r5, r5, r4
 8006bb8:	1963      	adds	r3, r4, r5
 8006bba:	42bb      	cmp	r3, r7
 8006bbc:	db04      	blt.n	8006bc8 <__s2b+0x78>
 8006bbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bc2:	340a      	adds	r4, #10
 8006bc4:	2509      	movs	r5, #9
 8006bc6:	e7f6      	b.n	8006bb6 <__s2b+0x66>
 8006bc8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006bcc:	4601      	mov	r1, r0
 8006bce:	3b30      	subs	r3, #48	@ 0x30
 8006bd0:	220a      	movs	r2, #10
 8006bd2:	4630      	mov	r0, r6
 8006bd4:	f7ff ff76 	bl	8006ac4 <__multadd>
 8006bd8:	e7ee      	b.n	8006bb8 <__s2b+0x68>
 8006bda:	bf00      	nop
 8006bdc:	08009411 	.word	0x08009411
 8006be0:	08009422 	.word	0x08009422

08006be4 <__hi0bits>:
 8006be4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006be8:	4603      	mov	r3, r0
 8006bea:	bf36      	itet	cc
 8006bec:	0403      	lslcc	r3, r0, #16
 8006bee:	2000      	movcs	r0, #0
 8006bf0:	2010      	movcc	r0, #16
 8006bf2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006bf6:	bf3c      	itt	cc
 8006bf8:	021b      	lslcc	r3, r3, #8
 8006bfa:	3008      	addcc	r0, #8
 8006bfc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c00:	bf3c      	itt	cc
 8006c02:	011b      	lslcc	r3, r3, #4
 8006c04:	3004      	addcc	r0, #4
 8006c06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c0a:	bf3c      	itt	cc
 8006c0c:	009b      	lslcc	r3, r3, #2
 8006c0e:	3002      	addcc	r0, #2
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	db05      	blt.n	8006c20 <__hi0bits+0x3c>
 8006c14:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006c18:	f100 0001 	add.w	r0, r0, #1
 8006c1c:	bf08      	it	eq
 8006c1e:	2020      	moveq	r0, #32
 8006c20:	4770      	bx	lr

08006c22 <__lo0bits>:
 8006c22:	6803      	ldr	r3, [r0, #0]
 8006c24:	4602      	mov	r2, r0
 8006c26:	f013 0007 	ands.w	r0, r3, #7
 8006c2a:	d00b      	beq.n	8006c44 <__lo0bits+0x22>
 8006c2c:	07d9      	lsls	r1, r3, #31
 8006c2e:	d421      	bmi.n	8006c74 <__lo0bits+0x52>
 8006c30:	0798      	lsls	r0, r3, #30
 8006c32:	bf49      	itett	mi
 8006c34:	085b      	lsrmi	r3, r3, #1
 8006c36:	089b      	lsrpl	r3, r3, #2
 8006c38:	2001      	movmi	r0, #1
 8006c3a:	6013      	strmi	r3, [r2, #0]
 8006c3c:	bf5c      	itt	pl
 8006c3e:	6013      	strpl	r3, [r2, #0]
 8006c40:	2002      	movpl	r0, #2
 8006c42:	4770      	bx	lr
 8006c44:	b299      	uxth	r1, r3
 8006c46:	b909      	cbnz	r1, 8006c4c <__lo0bits+0x2a>
 8006c48:	0c1b      	lsrs	r3, r3, #16
 8006c4a:	2010      	movs	r0, #16
 8006c4c:	b2d9      	uxtb	r1, r3
 8006c4e:	b909      	cbnz	r1, 8006c54 <__lo0bits+0x32>
 8006c50:	3008      	adds	r0, #8
 8006c52:	0a1b      	lsrs	r3, r3, #8
 8006c54:	0719      	lsls	r1, r3, #28
 8006c56:	bf04      	itt	eq
 8006c58:	091b      	lsreq	r3, r3, #4
 8006c5a:	3004      	addeq	r0, #4
 8006c5c:	0799      	lsls	r1, r3, #30
 8006c5e:	bf04      	itt	eq
 8006c60:	089b      	lsreq	r3, r3, #2
 8006c62:	3002      	addeq	r0, #2
 8006c64:	07d9      	lsls	r1, r3, #31
 8006c66:	d403      	bmi.n	8006c70 <__lo0bits+0x4e>
 8006c68:	085b      	lsrs	r3, r3, #1
 8006c6a:	f100 0001 	add.w	r0, r0, #1
 8006c6e:	d003      	beq.n	8006c78 <__lo0bits+0x56>
 8006c70:	6013      	str	r3, [r2, #0]
 8006c72:	4770      	bx	lr
 8006c74:	2000      	movs	r0, #0
 8006c76:	4770      	bx	lr
 8006c78:	2020      	movs	r0, #32
 8006c7a:	4770      	bx	lr

08006c7c <__i2b>:
 8006c7c:	b510      	push	{r4, lr}
 8006c7e:	460c      	mov	r4, r1
 8006c80:	2101      	movs	r1, #1
 8006c82:	f7ff febd 	bl	8006a00 <_Balloc>
 8006c86:	4602      	mov	r2, r0
 8006c88:	b928      	cbnz	r0, 8006c96 <__i2b+0x1a>
 8006c8a:	4b05      	ldr	r3, [pc, #20]	@ (8006ca0 <__i2b+0x24>)
 8006c8c:	4805      	ldr	r0, [pc, #20]	@ (8006ca4 <__i2b+0x28>)
 8006c8e:	f240 1145 	movw	r1, #325	@ 0x145
 8006c92:	f001 fc39 	bl	8008508 <__assert_func>
 8006c96:	2301      	movs	r3, #1
 8006c98:	6144      	str	r4, [r0, #20]
 8006c9a:	6103      	str	r3, [r0, #16]
 8006c9c:	bd10      	pop	{r4, pc}
 8006c9e:	bf00      	nop
 8006ca0:	08009411 	.word	0x08009411
 8006ca4:	08009422 	.word	0x08009422

08006ca8 <__multiply>:
 8006ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cac:	4617      	mov	r7, r2
 8006cae:	690a      	ldr	r2, [r1, #16]
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	bfa8      	it	ge
 8006cb6:	463b      	movge	r3, r7
 8006cb8:	4689      	mov	r9, r1
 8006cba:	bfa4      	itt	ge
 8006cbc:	460f      	movge	r7, r1
 8006cbe:	4699      	movge	r9, r3
 8006cc0:	693d      	ldr	r5, [r7, #16]
 8006cc2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	6879      	ldr	r1, [r7, #4]
 8006cca:	eb05 060a 	add.w	r6, r5, sl
 8006cce:	42b3      	cmp	r3, r6
 8006cd0:	b085      	sub	sp, #20
 8006cd2:	bfb8      	it	lt
 8006cd4:	3101      	addlt	r1, #1
 8006cd6:	f7ff fe93 	bl	8006a00 <_Balloc>
 8006cda:	b930      	cbnz	r0, 8006cea <__multiply+0x42>
 8006cdc:	4602      	mov	r2, r0
 8006cde:	4b41      	ldr	r3, [pc, #260]	@ (8006de4 <__multiply+0x13c>)
 8006ce0:	4841      	ldr	r0, [pc, #260]	@ (8006de8 <__multiply+0x140>)
 8006ce2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006ce6:	f001 fc0f 	bl	8008508 <__assert_func>
 8006cea:	f100 0414 	add.w	r4, r0, #20
 8006cee:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8006cf2:	4623      	mov	r3, r4
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	4573      	cmp	r3, lr
 8006cf8:	d320      	bcc.n	8006d3c <__multiply+0x94>
 8006cfa:	f107 0814 	add.w	r8, r7, #20
 8006cfe:	f109 0114 	add.w	r1, r9, #20
 8006d02:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8006d06:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8006d0a:	9302      	str	r3, [sp, #8]
 8006d0c:	1beb      	subs	r3, r5, r7
 8006d0e:	3b15      	subs	r3, #21
 8006d10:	f023 0303 	bic.w	r3, r3, #3
 8006d14:	3304      	adds	r3, #4
 8006d16:	3715      	adds	r7, #21
 8006d18:	42bd      	cmp	r5, r7
 8006d1a:	bf38      	it	cc
 8006d1c:	2304      	movcc	r3, #4
 8006d1e:	9301      	str	r3, [sp, #4]
 8006d20:	9b02      	ldr	r3, [sp, #8]
 8006d22:	9103      	str	r1, [sp, #12]
 8006d24:	428b      	cmp	r3, r1
 8006d26:	d80c      	bhi.n	8006d42 <__multiply+0x9a>
 8006d28:	2e00      	cmp	r6, #0
 8006d2a:	dd03      	ble.n	8006d34 <__multiply+0x8c>
 8006d2c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d055      	beq.n	8006de0 <__multiply+0x138>
 8006d34:	6106      	str	r6, [r0, #16]
 8006d36:	b005      	add	sp, #20
 8006d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d3c:	f843 2b04 	str.w	r2, [r3], #4
 8006d40:	e7d9      	b.n	8006cf6 <__multiply+0x4e>
 8006d42:	f8b1 a000 	ldrh.w	sl, [r1]
 8006d46:	f1ba 0f00 	cmp.w	sl, #0
 8006d4a:	d01f      	beq.n	8006d8c <__multiply+0xe4>
 8006d4c:	46c4      	mov	ip, r8
 8006d4e:	46a1      	mov	r9, r4
 8006d50:	2700      	movs	r7, #0
 8006d52:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006d56:	f8d9 3000 	ldr.w	r3, [r9]
 8006d5a:	fa1f fb82 	uxth.w	fp, r2
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	fb0a 330b 	mla	r3, sl, fp, r3
 8006d64:	443b      	add	r3, r7
 8006d66:	f8d9 7000 	ldr.w	r7, [r9]
 8006d6a:	0c12      	lsrs	r2, r2, #16
 8006d6c:	0c3f      	lsrs	r7, r7, #16
 8006d6e:	fb0a 7202 	mla	r2, sl, r2, r7
 8006d72:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d7c:	4565      	cmp	r5, ip
 8006d7e:	f849 3b04 	str.w	r3, [r9], #4
 8006d82:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8006d86:	d8e4      	bhi.n	8006d52 <__multiply+0xaa>
 8006d88:	9b01      	ldr	r3, [sp, #4]
 8006d8a:	50e7      	str	r7, [r4, r3]
 8006d8c:	9b03      	ldr	r3, [sp, #12]
 8006d8e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006d92:	3104      	adds	r1, #4
 8006d94:	f1b9 0f00 	cmp.w	r9, #0
 8006d98:	d020      	beq.n	8006ddc <__multiply+0x134>
 8006d9a:	6823      	ldr	r3, [r4, #0]
 8006d9c:	4647      	mov	r7, r8
 8006d9e:	46a4      	mov	ip, r4
 8006da0:	f04f 0a00 	mov.w	sl, #0
 8006da4:	f8b7 b000 	ldrh.w	fp, [r7]
 8006da8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006dac:	fb09 220b 	mla	r2, r9, fp, r2
 8006db0:	4452      	add	r2, sl
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006db8:	f84c 3b04 	str.w	r3, [ip], #4
 8006dbc:	f857 3b04 	ldr.w	r3, [r7], #4
 8006dc0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006dc4:	f8bc 3000 	ldrh.w	r3, [ip]
 8006dc8:	fb09 330a 	mla	r3, r9, sl, r3
 8006dcc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006dd0:	42bd      	cmp	r5, r7
 8006dd2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006dd6:	d8e5      	bhi.n	8006da4 <__multiply+0xfc>
 8006dd8:	9a01      	ldr	r2, [sp, #4]
 8006dda:	50a3      	str	r3, [r4, r2]
 8006ddc:	3404      	adds	r4, #4
 8006dde:	e79f      	b.n	8006d20 <__multiply+0x78>
 8006de0:	3e01      	subs	r6, #1
 8006de2:	e7a1      	b.n	8006d28 <__multiply+0x80>
 8006de4:	08009411 	.word	0x08009411
 8006de8:	08009422 	.word	0x08009422

08006dec <__pow5mult>:
 8006dec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006df0:	4615      	mov	r5, r2
 8006df2:	f012 0203 	ands.w	r2, r2, #3
 8006df6:	4607      	mov	r7, r0
 8006df8:	460e      	mov	r6, r1
 8006dfa:	d007      	beq.n	8006e0c <__pow5mult+0x20>
 8006dfc:	4c25      	ldr	r4, [pc, #148]	@ (8006e94 <__pow5mult+0xa8>)
 8006dfe:	3a01      	subs	r2, #1
 8006e00:	2300      	movs	r3, #0
 8006e02:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006e06:	f7ff fe5d 	bl	8006ac4 <__multadd>
 8006e0a:	4606      	mov	r6, r0
 8006e0c:	10ad      	asrs	r5, r5, #2
 8006e0e:	d03d      	beq.n	8006e8c <__pow5mult+0xa0>
 8006e10:	69fc      	ldr	r4, [r7, #28]
 8006e12:	b97c      	cbnz	r4, 8006e34 <__pow5mult+0x48>
 8006e14:	2010      	movs	r0, #16
 8006e16:	f7ff fd3d 	bl	8006894 <malloc>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	61f8      	str	r0, [r7, #28]
 8006e1e:	b928      	cbnz	r0, 8006e2c <__pow5mult+0x40>
 8006e20:	4b1d      	ldr	r3, [pc, #116]	@ (8006e98 <__pow5mult+0xac>)
 8006e22:	481e      	ldr	r0, [pc, #120]	@ (8006e9c <__pow5mult+0xb0>)
 8006e24:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006e28:	f001 fb6e 	bl	8008508 <__assert_func>
 8006e2c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006e30:	6004      	str	r4, [r0, #0]
 8006e32:	60c4      	str	r4, [r0, #12]
 8006e34:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006e38:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006e3c:	b94c      	cbnz	r4, 8006e52 <__pow5mult+0x66>
 8006e3e:	f240 2171 	movw	r1, #625	@ 0x271
 8006e42:	4638      	mov	r0, r7
 8006e44:	f7ff ff1a 	bl	8006c7c <__i2b>
 8006e48:	2300      	movs	r3, #0
 8006e4a:	f8c8 0008 	str.w	r0, [r8, #8]
 8006e4e:	4604      	mov	r4, r0
 8006e50:	6003      	str	r3, [r0, #0]
 8006e52:	f04f 0900 	mov.w	r9, #0
 8006e56:	07eb      	lsls	r3, r5, #31
 8006e58:	d50a      	bpl.n	8006e70 <__pow5mult+0x84>
 8006e5a:	4631      	mov	r1, r6
 8006e5c:	4622      	mov	r2, r4
 8006e5e:	4638      	mov	r0, r7
 8006e60:	f7ff ff22 	bl	8006ca8 <__multiply>
 8006e64:	4631      	mov	r1, r6
 8006e66:	4680      	mov	r8, r0
 8006e68:	4638      	mov	r0, r7
 8006e6a:	f7ff fe09 	bl	8006a80 <_Bfree>
 8006e6e:	4646      	mov	r6, r8
 8006e70:	106d      	asrs	r5, r5, #1
 8006e72:	d00b      	beq.n	8006e8c <__pow5mult+0xa0>
 8006e74:	6820      	ldr	r0, [r4, #0]
 8006e76:	b938      	cbnz	r0, 8006e88 <__pow5mult+0x9c>
 8006e78:	4622      	mov	r2, r4
 8006e7a:	4621      	mov	r1, r4
 8006e7c:	4638      	mov	r0, r7
 8006e7e:	f7ff ff13 	bl	8006ca8 <__multiply>
 8006e82:	6020      	str	r0, [r4, #0]
 8006e84:	f8c0 9000 	str.w	r9, [r0]
 8006e88:	4604      	mov	r4, r0
 8006e8a:	e7e4      	b.n	8006e56 <__pow5mult+0x6a>
 8006e8c:	4630      	mov	r0, r6
 8006e8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e92:	bf00      	nop
 8006e94:	08009534 	.word	0x08009534
 8006e98:	080093a2 	.word	0x080093a2
 8006e9c:	08009422 	.word	0x08009422

08006ea0 <__lshift>:
 8006ea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ea4:	460c      	mov	r4, r1
 8006ea6:	6849      	ldr	r1, [r1, #4]
 8006ea8:	6923      	ldr	r3, [r4, #16]
 8006eaa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006eae:	68a3      	ldr	r3, [r4, #8]
 8006eb0:	4607      	mov	r7, r0
 8006eb2:	4691      	mov	r9, r2
 8006eb4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006eb8:	f108 0601 	add.w	r6, r8, #1
 8006ebc:	42b3      	cmp	r3, r6
 8006ebe:	db0b      	blt.n	8006ed8 <__lshift+0x38>
 8006ec0:	4638      	mov	r0, r7
 8006ec2:	f7ff fd9d 	bl	8006a00 <_Balloc>
 8006ec6:	4605      	mov	r5, r0
 8006ec8:	b948      	cbnz	r0, 8006ede <__lshift+0x3e>
 8006eca:	4602      	mov	r2, r0
 8006ecc:	4b28      	ldr	r3, [pc, #160]	@ (8006f70 <__lshift+0xd0>)
 8006ece:	4829      	ldr	r0, [pc, #164]	@ (8006f74 <__lshift+0xd4>)
 8006ed0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006ed4:	f001 fb18 	bl	8008508 <__assert_func>
 8006ed8:	3101      	adds	r1, #1
 8006eda:	005b      	lsls	r3, r3, #1
 8006edc:	e7ee      	b.n	8006ebc <__lshift+0x1c>
 8006ede:	2300      	movs	r3, #0
 8006ee0:	f100 0114 	add.w	r1, r0, #20
 8006ee4:	f100 0210 	add.w	r2, r0, #16
 8006ee8:	4618      	mov	r0, r3
 8006eea:	4553      	cmp	r3, sl
 8006eec:	db33      	blt.n	8006f56 <__lshift+0xb6>
 8006eee:	6920      	ldr	r0, [r4, #16]
 8006ef0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006ef4:	f104 0314 	add.w	r3, r4, #20
 8006ef8:	f019 091f 	ands.w	r9, r9, #31
 8006efc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006f00:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006f04:	d02b      	beq.n	8006f5e <__lshift+0xbe>
 8006f06:	f1c9 0e20 	rsb	lr, r9, #32
 8006f0a:	468a      	mov	sl, r1
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	6818      	ldr	r0, [r3, #0]
 8006f10:	fa00 f009 	lsl.w	r0, r0, r9
 8006f14:	4310      	orrs	r0, r2
 8006f16:	f84a 0b04 	str.w	r0, [sl], #4
 8006f1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f1e:	459c      	cmp	ip, r3
 8006f20:	fa22 f20e 	lsr.w	r2, r2, lr
 8006f24:	d8f3      	bhi.n	8006f0e <__lshift+0x6e>
 8006f26:	ebac 0304 	sub.w	r3, ip, r4
 8006f2a:	3b15      	subs	r3, #21
 8006f2c:	f023 0303 	bic.w	r3, r3, #3
 8006f30:	3304      	adds	r3, #4
 8006f32:	f104 0015 	add.w	r0, r4, #21
 8006f36:	4560      	cmp	r0, ip
 8006f38:	bf88      	it	hi
 8006f3a:	2304      	movhi	r3, #4
 8006f3c:	50ca      	str	r2, [r1, r3]
 8006f3e:	b10a      	cbz	r2, 8006f44 <__lshift+0xa4>
 8006f40:	f108 0602 	add.w	r6, r8, #2
 8006f44:	3e01      	subs	r6, #1
 8006f46:	4638      	mov	r0, r7
 8006f48:	612e      	str	r6, [r5, #16]
 8006f4a:	4621      	mov	r1, r4
 8006f4c:	f7ff fd98 	bl	8006a80 <_Bfree>
 8006f50:	4628      	mov	r0, r5
 8006f52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f56:	f842 0f04 	str.w	r0, [r2, #4]!
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	e7c5      	b.n	8006eea <__lshift+0x4a>
 8006f5e:	3904      	subs	r1, #4
 8006f60:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f64:	f841 2f04 	str.w	r2, [r1, #4]!
 8006f68:	459c      	cmp	ip, r3
 8006f6a:	d8f9      	bhi.n	8006f60 <__lshift+0xc0>
 8006f6c:	e7ea      	b.n	8006f44 <__lshift+0xa4>
 8006f6e:	bf00      	nop
 8006f70:	08009411 	.word	0x08009411
 8006f74:	08009422 	.word	0x08009422

08006f78 <__mcmp>:
 8006f78:	690a      	ldr	r2, [r1, #16]
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	6900      	ldr	r0, [r0, #16]
 8006f7e:	1a80      	subs	r0, r0, r2
 8006f80:	b530      	push	{r4, r5, lr}
 8006f82:	d10e      	bne.n	8006fa2 <__mcmp+0x2a>
 8006f84:	3314      	adds	r3, #20
 8006f86:	3114      	adds	r1, #20
 8006f88:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006f8c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006f90:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006f94:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006f98:	4295      	cmp	r5, r2
 8006f9a:	d003      	beq.n	8006fa4 <__mcmp+0x2c>
 8006f9c:	d205      	bcs.n	8006faa <__mcmp+0x32>
 8006f9e:	f04f 30ff 	mov.w	r0, #4294967295
 8006fa2:	bd30      	pop	{r4, r5, pc}
 8006fa4:	42a3      	cmp	r3, r4
 8006fa6:	d3f3      	bcc.n	8006f90 <__mcmp+0x18>
 8006fa8:	e7fb      	b.n	8006fa2 <__mcmp+0x2a>
 8006faa:	2001      	movs	r0, #1
 8006fac:	e7f9      	b.n	8006fa2 <__mcmp+0x2a>
	...

08006fb0 <__mdiff>:
 8006fb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fb4:	4689      	mov	r9, r1
 8006fb6:	4606      	mov	r6, r0
 8006fb8:	4611      	mov	r1, r2
 8006fba:	4648      	mov	r0, r9
 8006fbc:	4614      	mov	r4, r2
 8006fbe:	f7ff ffdb 	bl	8006f78 <__mcmp>
 8006fc2:	1e05      	subs	r5, r0, #0
 8006fc4:	d112      	bne.n	8006fec <__mdiff+0x3c>
 8006fc6:	4629      	mov	r1, r5
 8006fc8:	4630      	mov	r0, r6
 8006fca:	f7ff fd19 	bl	8006a00 <_Balloc>
 8006fce:	4602      	mov	r2, r0
 8006fd0:	b928      	cbnz	r0, 8006fde <__mdiff+0x2e>
 8006fd2:	4b3f      	ldr	r3, [pc, #252]	@ (80070d0 <__mdiff+0x120>)
 8006fd4:	f240 2137 	movw	r1, #567	@ 0x237
 8006fd8:	483e      	ldr	r0, [pc, #248]	@ (80070d4 <__mdiff+0x124>)
 8006fda:	f001 fa95 	bl	8008508 <__assert_func>
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006fe4:	4610      	mov	r0, r2
 8006fe6:	b003      	add	sp, #12
 8006fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fec:	bfbc      	itt	lt
 8006fee:	464b      	movlt	r3, r9
 8006ff0:	46a1      	movlt	r9, r4
 8006ff2:	4630      	mov	r0, r6
 8006ff4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006ff8:	bfba      	itte	lt
 8006ffa:	461c      	movlt	r4, r3
 8006ffc:	2501      	movlt	r5, #1
 8006ffe:	2500      	movge	r5, #0
 8007000:	f7ff fcfe 	bl	8006a00 <_Balloc>
 8007004:	4602      	mov	r2, r0
 8007006:	b918      	cbnz	r0, 8007010 <__mdiff+0x60>
 8007008:	4b31      	ldr	r3, [pc, #196]	@ (80070d0 <__mdiff+0x120>)
 800700a:	f240 2145 	movw	r1, #581	@ 0x245
 800700e:	e7e3      	b.n	8006fd8 <__mdiff+0x28>
 8007010:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007014:	6926      	ldr	r6, [r4, #16]
 8007016:	60c5      	str	r5, [r0, #12]
 8007018:	f109 0310 	add.w	r3, r9, #16
 800701c:	f109 0514 	add.w	r5, r9, #20
 8007020:	f104 0e14 	add.w	lr, r4, #20
 8007024:	f100 0b14 	add.w	fp, r0, #20
 8007028:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800702c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007030:	9301      	str	r3, [sp, #4]
 8007032:	46d9      	mov	r9, fp
 8007034:	f04f 0c00 	mov.w	ip, #0
 8007038:	9b01      	ldr	r3, [sp, #4]
 800703a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800703e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007042:	9301      	str	r3, [sp, #4]
 8007044:	fa1f f38a 	uxth.w	r3, sl
 8007048:	4619      	mov	r1, r3
 800704a:	b283      	uxth	r3, r0
 800704c:	1acb      	subs	r3, r1, r3
 800704e:	0c00      	lsrs	r0, r0, #16
 8007050:	4463      	add	r3, ip
 8007052:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007056:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800705a:	b29b      	uxth	r3, r3
 800705c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007060:	4576      	cmp	r6, lr
 8007062:	f849 3b04 	str.w	r3, [r9], #4
 8007066:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800706a:	d8e5      	bhi.n	8007038 <__mdiff+0x88>
 800706c:	1b33      	subs	r3, r6, r4
 800706e:	3b15      	subs	r3, #21
 8007070:	f023 0303 	bic.w	r3, r3, #3
 8007074:	3415      	adds	r4, #21
 8007076:	3304      	adds	r3, #4
 8007078:	42a6      	cmp	r6, r4
 800707a:	bf38      	it	cc
 800707c:	2304      	movcc	r3, #4
 800707e:	441d      	add	r5, r3
 8007080:	445b      	add	r3, fp
 8007082:	461e      	mov	r6, r3
 8007084:	462c      	mov	r4, r5
 8007086:	4544      	cmp	r4, r8
 8007088:	d30e      	bcc.n	80070a8 <__mdiff+0xf8>
 800708a:	f108 0103 	add.w	r1, r8, #3
 800708e:	1b49      	subs	r1, r1, r5
 8007090:	f021 0103 	bic.w	r1, r1, #3
 8007094:	3d03      	subs	r5, #3
 8007096:	45a8      	cmp	r8, r5
 8007098:	bf38      	it	cc
 800709a:	2100      	movcc	r1, #0
 800709c:	440b      	add	r3, r1
 800709e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80070a2:	b191      	cbz	r1, 80070ca <__mdiff+0x11a>
 80070a4:	6117      	str	r7, [r2, #16]
 80070a6:	e79d      	b.n	8006fe4 <__mdiff+0x34>
 80070a8:	f854 1b04 	ldr.w	r1, [r4], #4
 80070ac:	46e6      	mov	lr, ip
 80070ae:	0c08      	lsrs	r0, r1, #16
 80070b0:	fa1c fc81 	uxtah	ip, ip, r1
 80070b4:	4471      	add	r1, lr
 80070b6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80070ba:	b289      	uxth	r1, r1
 80070bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80070c0:	f846 1b04 	str.w	r1, [r6], #4
 80070c4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80070c8:	e7dd      	b.n	8007086 <__mdiff+0xd6>
 80070ca:	3f01      	subs	r7, #1
 80070cc:	e7e7      	b.n	800709e <__mdiff+0xee>
 80070ce:	bf00      	nop
 80070d0:	08009411 	.word	0x08009411
 80070d4:	08009422 	.word	0x08009422

080070d8 <__ulp>:
 80070d8:	b082      	sub	sp, #8
 80070da:	ed8d 0b00 	vstr	d0, [sp]
 80070de:	9a01      	ldr	r2, [sp, #4]
 80070e0:	4b0f      	ldr	r3, [pc, #60]	@ (8007120 <__ulp+0x48>)
 80070e2:	4013      	ands	r3, r2
 80070e4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	dc08      	bgt.n	80070fe <__ulp+0x26>
 80070ec:	425b      	negs	r3, r3
 80070ee:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80070f2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80070f6:	da04      	bge.n	8007102 <__ulp+0x2a>
 80070f8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80070fc:	4113      	asrs	r3, r2
 80070fe:	2200      	movs	r2, #0
 8007100:	e008      	b.n	8007114 <__ulp+0x3c>
 8007102:	f1a2 0314 	sub.w	r3, r2, #20
 8007106:	2b1e      	cmp	r3, #30
 8007108:	bfda      	itte	le
 800710a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800710e:	40da      	lsrle	r2, r3
 8007110:	2201      	movgt	r2, #1
 8007112:	2300      	movs	r3, #0
 8007114:	4619      	mov	r1, r3
 8007116:	4610      	mov	r0, r2
 8007118:	ec41 0b10 	vmov	d0, r0, r1
 800711c:	b002      	add	sp, #8
 800711e:	4770      	bx	lr
 8007120:	7ff00000 	.word	0x7ff00000

08007124 <__b2d>:
 8007124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007128:	6906      	ldr	r6, [r0, #16]
 800712a:	f100 0814 	add.w	r8, r0, #20
 800712e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8007132:	1f37      	subs	r7, r6, #4
 8007134:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007138:	4610      	mov	r0, r2
 800713a:	f7ff fd53 	bl	8006be4 <__hi0bits>
 800713e:	f1c0 0320 	rsb	r3, r0, #32
 8007142:	280a      	cmp	r0, #10
 8007144:	600b      	str	r3, [r1, #0]
 8007146:	491b      	ldr	r1, [pc, #108]	@ (80071b4 <__b2d+0x90>)
 8007148:	dc15      	bgt.n	8007176 <__b2d+0x52>
 800714a:	f1c0 0c0b 	rsb	ip, r0, #11
 800714e:	fa22 f30c 	lsr.w	r3, r2, ip
 8007152:	45b8      	cmp	r8, r7
 8007154:	ea43 0501 	orr.w	r5, r3, r1
 8007158:	bf34      	ite	cc
 800715a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800715e:	2300      	movcs	r3, #0
 8007160:	3015      	adds	r0, #21
 8007162:	fa02 f000 	lsl.w	r0, r2, r0
 8007166:	fa23 f30c 	lsr.w	r3, r3, ip
 800716a:	4303      	orrs	r3, r0
 800716c:	461c      	mov	r4, r3
 800716e:	ec45 4b10 	vmov	d0, r4, r5
 8007172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007176:	45b8      	cmp	r8, r7
 8007178:	bf3a      	itte	cc
 800717a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800717e:	f1a6 0708 	subcc.w	r7, r6, #8
 8007182:	2300      	movcs	r3, #0
 8007184:	380b      	subs	r0, #11
 8007186:	d012      	beq.n	80071ae <__b2d+0x8a>
 8007188:	f1c0 0120 	rsb	r1, r0, #32
 800718c:	fa23 f401 	lsr.w	r4, r3, r1
 8007190:	4082      	lsls	r2, r0
 8007192:	4322      	orrs	r2, r4
 8007194:	4547      	cmp	r7, r8
 8007196:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800719a:	bf8c      	ite	hi
 800719c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80071a0:	2200      	movls	r2, #0
 80071a2:	4083      	lsls	r3, r0
 80071a4:	40ca      	lsrs	r2, r1
 80071a6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80071aa:	4313      	orrs	r3, r2
 80071ac:	e7de      	b.n	800716c <__b2d+0x48>
 80071ae:	ea42 0501 	orr.w	r5, r2, r1
 80071b2:	e7db      	b.n	800716c <__b2d+0x48>
 80071b4:	3ff00000 	.word	0x3ff00000

080071b8 <__d2b>:
 80071b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80071bc:	460f      	mov	r7, r1
 80071be:	2101      	movs	r1, #1
 80071c0:	ec59 8b10 	vmov	r8, r9, d0
 80071c4:	4616      	mov	r6, r2
 80071c6:	f7ff fc1b 	bl	8006a00 <_Balloc>
 80071ca:	4604      	mov	r4, r0
 80071cc:	b930      	cbnz	r0, 80071dc <__d2b+0x24>
 80071ce:	4602      	mov	r2, r0
 80071d0:	4b23      	ldr	r3, [pc, #140]	@ (8007260 <__d2b+0xa8>)
 80071d2:	4824      	ldr	r0, [pc, #144]	@ (8007264 <__d2b+0xac>)
 80071d4:	f240 310f 	movw	r1, #783	@ 0x30f
 80071d8:	f001 f996 	bl	8008508 <__assert_func>
 80071dc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80071e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80071e4:	b10d      	cbz	r5, 80071ea <__d2b+0x32>
 80071e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80071ea:	9301      	str	r3, [sp, #4]
 80071ec:	f1b8 0300 	subs.w	r3, r8, #0
 80071f0:	d023      	beq.n	800723a <__d2b+0x82>
 80071f2:	4668      	mov	r0, sp
 80071f4:	9300      	str	r3, [sp, #0]
 80071f6:	f7ff fd14 	bl	8006c22 <__lo0bits>
 80071fa:	e9dd 1200 	ldrd	r1, r2, [sp]
 80071fe:	b1d0      	cbz	r0, 8007236 <__d2b+0x7e>
 8007200:	f1c0 0320 	rsb	r3, r0, #32
 8007204:	fa02 f303 	lsl.w	r3, r2, r3
 8007208:	430b      	orrs	r3, r1
 800720a:	40c2      	lsrs	r2, r0
 800720c:	6163      	str	r3, [r4, #20]
 800720e:	9201      	str	r2, [sp, #4]
 8007210:	9b01      	ldr	r3, [sp, #4]
 8007212:	61a3      	str	r3, [r4, #24]
 8007214:	2b00      	cmp	r3, #0
 8007216:	bf0c      	ite	eq
 8007218:	2201      	moveq	r2, #1
 800721a:	2202      	movne	r2, #2
 800721c:	6122      	str	r2, [r4, #16]
 800721e:	b1a5      	cbz	r5, 800724a <__d2b+0x92>
 8007220:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007224:	4405      	add	r5, r0
 8007226:	603d      	str	r5, [r7, #0]
 8007228:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800722c:	6030      	str	r0, [r6, #0]
 800722e:	4620      	mov	r0, r4
 8007230:	b003      	add	sp, #12
 8007232:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007236:	6161      	str	r1, [r4, #20]
 8007238:	e7ea      	b.n	8007210 <__d2b+0x58>
 800723a:	a801      	add	r0, sp, #4
 800723c:	f7ff fcf1 	bl	8006c22 <__lo0bits>
 8007240:	9b01      	ldr	r3, [sp, #4]
 8007242:	6163      	str	r3, [r4, #20]
 8007244:	3020      	adds	r0, #32
 8007246:	2201      	movs	r2, #1
 8007248:	e7e8      	b.n	800721c <__d2b+0x64>
 800724a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800724e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007252:	6038      	str	r0, [r7, #0]
 8007254:	6918      	ldr	r0, [r3, #16]
 8007256:	f7ff fcc5 	bl	8006be4 <__hi0bits>
 800725a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800725e:	e7e5      	b.n	800722c <__d2b+0x74>
 8007260:	08009411 	.word	0x08009411
 8007264:	08009422 	.word	0x08009422

08007268 <__ratio>:
 8007268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800726c:	b085      	sub	sp, #20
 800726e:	e9cd 1000 	strd	r1, r0, [sp]
 8007272:	a902      	add	r1, sp, #8
 8007274:	f7ff ff56 	bl	8007124 <__b2d>
 8007278:	9800      	ldr	r0, [sp, #0]
 800727a:	a903      	add	r1, sp, #12
 800727c:	ec55 4b10 	vmov	r4, r5, d0
 8007280:	f7ff ff50 	bl	8007124 <__b2d>
 8007284:	9b01      	ldr	r3, [sp, #4]
 8007286:	6919      	ldr	r1, [r3, #16]
 8007288:	9b00      	ldr	r3, [sp, #0]
 800728a:	691b      	ldr	r3, [r3, #16]
 800728c:	1ac9      	subs	r1, r1, r3
 800728e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007292:	1a9b      	subs	r3, r3, r2
 8007294:	ec5b ab10 	vmov	sl, fp, d0
 8007298:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800729c:	2b00      	cmp	r3, #0
 800729e:	bfce      	itee	gt
 80072a0:	462a      	movgt	r2, r5
 80072a2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80072a6:	465a      	movle	r2, fp
 80072a8:	462f      	mov	r7, r5
 80072aa:	46d9      	mov	r9, fp
 80072ac:	bfcc      	ite	gt
 80072ae:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80072b2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80072b6:	464b      	mov	r3, r9
 80072b8:	4652      	mov	r2, sl
 80072ba:	4620      	mov	r0, r4
 80072bc:	4639      	mov	r1, r7
 80072be:	f7f9 faed 	bl	800089c <__aeabi_ddiv>
 80072c2:	ec41 0b10 	vmov	d0, r0, r1
 80072c6:	b005      	add	sp, #20
 80072c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080072cc <__copybits>:
 80072cc:	3901      	subs	r1, #1
 80072ce:	b570      	push	{r4, r5, r6, lr}
 80072d0:	1149      	asrs	r1, r1, #5
 80072d2:	6914      	ldr	r4, [r2, #16]
 80072d4:	3101      	adds	r1, #1
 80072d6:	f102 0314 	add.w	r3, r2, #20
 80072da:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80072de:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80072e2:	1f05      	subs	r5, r0, #4
 80072e4:	42a3      	cmp	r3, r4
 80072e6:	d30c      	bcc.n	8007302 <__copybits+0x36>
 80072e8:	1aa3      	subs	r3, r4, r2
 80072ea:	3b11      	subs	r3, #17
 80072ec:	f023 0303 	bic.w	r3, r3, #3
 80072f0:	3211      	adds	r2, #17
 80072f2:	42a2      	cmp	r2, r4
 80072f4:	bf88      	it	hi
 80072f6:	2300      	movhi	r3, #0
 80072f8:	4418      	add	r0, r3
 80072fa:	2300      	movs	r3, #0
 80072fc:	4288      	cmp	r0, r1
 80072fe:	d305      	bcc.n	800730c <__copybits+0x40>
 8007300:	bd70      	pop	{r4, r5, r6, pc}
 8007302:	f853 6b04 	ldr.w	r6, [r3], #4
 8007306:	f845 6f04 	str.w	r6, [r5, #4]!
 800730a:	e7eb      	b.n	80072e4 <__copybits+0x18>
 800730c:	f840 3b04 	str.w	r3, [r0], #4
 8007310:	e7f4      	b.n	80072fc <__copybits+0x30>

08007312 <__any_on>:
 8007312:	f100 0214 	add.w	r2, r0, #20
 8007316:	6900      	ldr	r0, [r0, #16]
 8007318:	114b      	asrs	r3, r1, #5
 800731a:	4298      	cmp	r0, r3
 800731c:	b510      	push	{r4, lr}
 800731e:	db11      	blt.n	8007344 <__any_on+0x32>
 8007320:	dd0a      	ble.n	8007338 <__any_on+0x26>
 8007322:	f011 011f 	ands.w	r1, r1, #31
 8007326:	d007      	beq.n	8007338 <__any_on+0x26>
 8007328:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800732c:	fa24 f001 	lsr.w	r0, r4, r1
 8007330:	fa00 f101 	lsl.w	r1, r0, r1
 8007334:	428c      	cmp	r4, r1
 8007336:	d10b      	bne.n	8007350 <__any_on+0x3e>
 8007338:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800733c:	4293      	cmp	r3, r2
 800733e:	d803      	bhi.n	8007348 <__any_on+0x36>
 8007340:	2000      	movs	r0, #0
 8007342:	bd10      	pop	{r4, pc}
 8007344:	4603      	mov	r3, r0
 8007346:	e7f7      	b.n	8007338 <__any_on+0x26>
 8007348:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800734c:	2900      	cmp	r1, #0
 800734e:	d0f5      	beq.n	800733c <__any_on+0x2a>
 8007350:	2001      	movs	r0, #1
 8007352:	e7f6      	b.n	8007342 <__any_on+0x30>

08007354 <sulp>:
 8007354:	b570      	push	{r4, r5, r6, lr}
 8007356:	4604      	mov	r4, r0
 8007358:	460d      	mov	r5, r1
 800735a:	ec45 4b10 	vmov	d0, r4, r5
 800735e:	4616      	mov	r6, r2
 8007360:	f7ff feba 	bl	80070d8 <__ulp>
 8007364:	ec51 0b10 	vmov	r0, r1, d0
 8007368:	b17e      	cbz	r6, 800738a <sulp+0x36>
 800736a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800736e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007372:	2b00      	cmp	r3, #0
 8007374:	dd09      	ble.n	800738a <sulp+0x36>
 8007376:	051b      	lsls	r3, r3, #20
 8007378:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800737c:	2400      	movs	r4, #0
 800737e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007382:	4622      	mov	r2, r4
 8007384:	462b      	mov	r3, r5
 8007386:	f7f9 f95f 	bl	8000648 <__aeabi_dmul>
 800738a:	ec41 0b10 	vmov	d0, r0, r1
 800738e:	bd70      	pop	{r4, r5, r6, pc}

08007390 <_strtod_l>:
 8007390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007394:	b09f      	sub	sp, #124	@ 0x7c
 8007396:	460c      	mov	r4, r1
 8007398:	9217      	str	r2, [sp, #92]	@ 0x5c
 800739a:	2200      	movs	r2, #0
 800739c:	921a      	str	r2, [sp, #104]	@ 0x68
 800739e:	9005      	str	r0, [sp, #20]
 80073a0:	f04f 0a00 	mov.w	sl, #0
 80073a4:	f04f 0b00 	mov.w	fp, #0
 80073a8:	460a      	mov	r2, r1
 80073aa:	9219      	str	r2, [sp, #100]	@ 0x64
 80073ac:	7811      	ldrb	r1, [r2, #0]
 80073ae:	292b      	cmp	r1, #43	@ 0x2b
 80073b0:	d04a      	beq.n	8007448 <_strtod_l+0xb8>
 80073b2:	d838      	bhi.n	8007426 <_strtod_l+0x96>
 80073b4:	290d      	cmp	r1, #13
 80073b6:	d832      	bhi.n	800741e <_strtod_l+0x8e>
 80073b8:	2908      	cmp	r1, #8
 80073ba:	d832      	bhi.n	8007422 <_strtod_l+0x92>
 80073bc:	2900      	cmp	r1, #0
 80073be:	d03b      	beq.n	8007438 <_strtod_l+0xa8>
 80073c0:	2200      	movs	r2, #0
 80073c2:	920e      	str	r2, [sp, #56]	@ 0x38
 80073c4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80073c6:	782a      	ldrb	r2, [r5, #0]
 80073c8:	2a30      	cmp	r2, #48	@ 0x30
 80073ca:	f040 80b2 	bne.w	8007532 <_strtod_l+0x1a2>
 80073ce:	786a      	ldrb	r2, [r5, #1]
 80073d0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80073d4:	2a58      	cmp	r2, #88	@ 0x58
 80073d6:	d16e      	bne.n	80074b6 <_strtod_l+0x126>
 80073d8:	9302      	str	r3, [sp, #8]
 80073da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80073dc:	9301      	str	r3, [sp, #4]
 80073de:	ab1a      	add	r3, sp, #104	@ 0x68
 80073e0:	9300      	str	r3, [sp, #0]
 80073e2:	4a8f      	ldr	r2, [pc, #572]	@ (8007620 <_strtod_l+0x290>)
 80073e4:	9805      	ldr	r0, [sp, #20]
 80073e6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80073e8:	a919      	add	r1, sp, #100	@ 0x64
 80073ea:	f001 f927 	bl	800863c <__gethex>
 80073ee:	f010 060f 	ands.w	r6, r0, #15
 80073f2:	4604      	mov	r4, r0
 80073f4:	d005      	beq.n	8007402 <_strtod_l+0x72>
 80073f6:	2e06      	cmp	r6, #6
 80073f8:	d128      	bne.n	800744c <_strtod_l+0xbc>
 80073fa:	3501      	adds	r5, #1
 80073fc:	2300      	movs	r3, #0
 80073fe:	9519      	str	r5, [sp, #100]	@ 0x64
 8007400:	930e      	str	r3, [sp, #56]	@ 0x38
 8007402:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007404:	2b00      	cmp	r3, #0
 8007406:	f040 858e 	bne.w	8007f26 <_strtod_l+0xb96>
 800740a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800740c:	b1cb      	cbz	r3, 8007442 <_strtod_l+0xb2>
 800740e:	4652      	mov	r2, sl
 8007410:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8007414:	ec43 2b10 	vmov	d0, r2, r3
 8007418:	b01f      	add	sp, #124	@ 0x7c
 800741a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800741e:	2920      	cmp	r1, #32
 8007420:	d1ce      	bne.n	80073c0 <_strtod_l+0x30>
 8007422:	3201      	adds	r2, #1
 8007424:	e7c1      	b.n	80073aa <_strtod_l+0x1a>
 8007426:	292d      	cmp	r1, #45	@ 0x2d
 8007428:	d1ca      	bne.n	80073c0 <_strtod_l+0x30>
 800742a:	2101      	movs	r1, #1
 800742c:	910e      	str	r1, [sp, #56]	@ 0x38
 800742e:	1c51      	adds	r1, r2, #1
 8007430:	9119      	str	r1, [sp, #100]	@ 0x64
 8007432:	7852      	ldrb	r2, [r2, #1]
 8007434:	2a00      	cmp	r2, #0
 8007436:	d1c5      	bne.n	80073c4 <_strtod_l+0x34>
 8007438:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800743a:	9419      	str	r4, [sp, #100]	@ 0x64
 800743c:	2b00      	cmp	r3, #0
 800743e:	f040 8570 	bne.w	8007f22 <_strtod_l+0xb92>
 8007442:	4652      	mov	r2, sl
 8007444:	465b      	mov	r3, fp
 8007446:	e7e5      	b.n	8007414 <_strtod_l+0x84>
 8007448:	2100      	movs	r1, #0
 800744a:	e7ef      	b.n	800742c <_strtod_l+0x9c>
 800744c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800744e:	b13a      	cbz	r2, 8007460 <_strtod_l+0xd0>
 8007450:	2135      	movs	r1, #53	@ 0x35
 8007452:	a81c      	add	r0, sp, #112	@ 0x70
 8007454:	f7ff ff3a 	bl	80072cc <__copybits>
 8007458:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800745a:	9805      	ldr	r0, [sp, #20]
 800745c:	f7ff fb10 	bl	8006a80 <_Bfree>
 8007460:	3e01      	subs	r6, #1
 8007462:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007464:	2e04      	cmp	r6, #4
 8007466:	d806      	bhi.n	8007476 <_strtod_l+0xe6>
 8007468:	e8df f006 	tbb	[pc, r6]
 800746c:	201d0314 	.word	0x201d0314
 8007470:	14          	.byte	0x14
 8007471:	00          	.byte	0x00
 8007472:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007476:	05e1      	lsls	r1, r4, #23
 8007478:	bf48      	it	mi
 800747a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800747e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007482:	0d1b      	lsrs	r3, r3, #20
 8007484:	051b      	lsls	r3, r3, #20
 8007486:	2b00      	cmp	r3, #0
 8007488:	d1bb      	bne.n	8007402 <_strtod_l+0x72>
 800748a:	f7fe fb2d 	bl	8005ae8 <__errno>
 800748e:	2322      	movs	r3, #34	@ 0x22
 8007490:	6003      	str	r3, [r0, #0]
 8007492:	e7b6      	b.n	8007402 <_strtod_l+0x72>
 8007494:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007498:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800749c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80074a0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80074a4:	e7e7      	b.n	8007476 <_strtod_l+0xe6>
 80074a6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8007628 <_strtod_l+0x298>
 80074aa:	e7e4      	b.n	8007476 <_strtod_l+0xe6>
 80074ac:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80074b0:	f04f 3aff 	mov.w	sl, #4294967295
 80074b4:	e7df      	b.n	8007476 <_strtod_l+0xe6>
 80074b6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80074b8:	1c5a      	adds	r2, r3, #1
 80074ba:	9219      	str	r2, [sp, #100]	@ 0x64
 80074bc:	785b      	ldrb	r3, [r3, #1]
 80074be:	2b30      	cmp	r3, #48	@ 0x30
 80074c0:	d0f9      	beq.n	80074b6 <_strtod_l+0x126>
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d09d      	beq.n	8007402 <_strtod_l+0x72>
 80074c6:	2301      	movs	r3, #1
 80074c8:	2700      	movs	r7, #0
 80074ca:	9308      	str	r3, [sp, #32]
 80074cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80074ce:	930c      	str	r3, [sp, #48]	@ 0x30
 80074d0:	970b      	str	r7, [sp, #44]	@ 0x2c
 80074d2:	46b9      	mov	r9, r7
 80074d4:	220a      	movs	r2, #10
 80074d6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80074d8:	7805      	ldrb	r5, [r0, #0]
 80074da:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80074de:	b2d9      	uxtb	r1, r3
 80074e0:	2909      	cmp	r1, #9
 80074e2:	d928      	bls.n	8007536 <_strtod_l+0x1a6>
 80074e4:	494f      	ldr	r1, [pc, #316]	@ (8007624 <_strtod_l+0x294>)
 80074e6:	2201      	movs	r2, #1
 80074e8:	f000 ffd6 	bl	8008498 <strncmp>
 80074ec:	2800      	cmp	r0, #0
 80074ee:	d032      	beq.n	8007556 <_strtod_l+0x1c6>
 80074f0:	2000      	movs	r0, #0
 80074f2:	462a      	mov	r2, r5
 80074f4:	900a      	str	r0, [sp, #40]	@ 0x28
 80074f6:	464d      	mov	r5, r9
 80074f8:	4603      	mov	r3, r0
 80074fa:	2a65      	cmp	r2, #101	@ 0x65
 80074fc:	d001      	beq.n	8007502 <_strtod_l+0x172>
 80074fe:	2a45      	cmp	r2, #69	@ 0x45
 8007500:	d114      	bne.n	800752c <_strtod_l+0x19c>
 8007502:	b91d      	cbnz	r5, 800750c <_strtod_l+0x17c>
 8007504:	9a08      	ldr	r2, [sp, #32]
 8007506:	4302      	orrs	r2, r0
 8007508:	d096      	beq.n	8007438 <_strtod_l+0xa8>
 800750a:	2500      	movs	r5, #0
 800750c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800750e:	1c62      	adds	r2, r4, #1
 8007510:	9219      	str	r2, [sp, #100]	@ 0x64
 8007512:	7862      	ldrb	r2, [r4, #1]
 8007514:	2a2b      	cmp	r2, #43	@ 0x2b
 8007516:	d07a      	beq.n	800760e <_strtod_l+0x27e>
 8007518:	2a2d      	cmp	r2, #45	@ 0x2d
 800751a:	d07e      	beq.n	800761a <_strtod_l+0x28a>
 800751c:	f04f 0c00 	mov.w	ip, #0
 8007520:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007524:	2909      	cmp	r1, #9
 8007526:	f240 8085 	bls.w	8007634 <_strtod_l+0x2a4>
 800752a:	9419      	str	r4, [sp, #100]	@ 0x64
 800752c:	f04f 0800 	mov.w	r8, #0
 8007530:	e0a5      	b.n	800767e <_strtod_l+0x2ee>
 8007532:	2300      	movs	r3, #0
 8007534:	e7c8      	b.n	80074c8 <_strtod_l+0x138>
 8007536:	f1b9 0f08 	cmp.w	r9, #8
 800753a:	bfd8      	it	le
 800753c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800753e:	f100 0001 	add.w	r0, r0, #1
 8007542:	bfda      	itte	le
 8007544:	fb02 3301 	mlale	r3, r2, r1, r3
 8007548:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800754a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800754e:	f109 0901 	add.w	r9, r9, #1
 8007552:	9019      	str	r0, [sp, #100]	@ 0x64
 8007554:	e7bf      	b.n	80074d6 <_strtod_l+0x146>
 8007556:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007558:	1c5a      	adds	r2, r3, #1
 800755a:	9219      	str	r2, [sp, #100]	@ 0x64
 800755c:	785a      	ldrb	r2, [r3, #1]
 800755e:	f1b9 0f00 	cmp.w	r9, #0
 8007562:	d03b      	beq.n	80075dc <_strtod_l+0x24c>
 8007564:	900a      	str	r0, [sp, #40]	@ 0x28
 8007566:	464d      	mov	r5, r9
 8007568:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800756c:	2b09      	cmp	r3, #9
 800756e:	d912      	bls.n	8007596 <_strtod_l+0x206>
 8007570:	2301      	movs	r3, #1
 8007572:	e7c2      	b.n	80074fa <_strtod_l+0x16a>
 8007574:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007576:	1c5a      	adds	r2, r3, #1
 8007578:	9219      	str	r2, [sp, #100]	@ 0x64
 800757a:	785a      	ldrb	r2, [r3, #1]
 800757c:	3001      	adds	r0, #1
 800757e:	2a30      	cmp	r2, #48	@ 0x30
 8007580:	d0f8      	beq.n	8007574 <_strtod_l+0x1e4>
 8007582:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007586:	2b08      	cmp	r3, #8
 8007588:	f200 84d2 	bhi.w	8007f30 <_strtod_l+0xba0>
 800758c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800758e:	900a      	str	r0, [sp, #40]	@ 0x28
 8007590:	2000      	movs	r0, #0
 8007592:	930c      	str	r3, [sp, #48]	@ 0x30
 8007594:	4605      	mov	r5, r0
 8007596:	3a30      	subs	r2, #48	@ 0x30
 8007598:	f100 0301 	add.w	r3, r0, #1
 800759c:	d018      	beq.n	80075d0 <_strtod_l+0x240>
 800759e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80075a0:	4419      	add	r1, r3
 80075a2:	910a      	str	r1, [sp, #40]	@ 0x28
 80075a4:	462e      	mov	r6, r5
 80075a6:	f04f 0e0a 	mov.w	lr, #10
 80075aa:	1c71      	adds	r1, r6, #1
 80075ac:	eba1 0c05 	sub.w	ip, r1, r5
 80075b0:	4563      	cmp	r3, ip
 80075b2:	dc15      	bgt.n	80075e0 <_strtod_l+0x250>
 80075b4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80075b8:	182b      	adds	r3, r5, r0
 80075ba:	2b08      	cmp	r3, #8
 80075bc:	f105 0501 	add.w	r5, r5, #1
 80075c0:	4405      	add	r5, r0
 80075c2:	dc1a      	bgt.n	80075fa <_strtod_l+0x26a>
 80075c4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80075c6:	230a      	movs	r3, #10
 80075c8:	fb03 2301 	mla	r3, r3, r1, r2
 80075cc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80075ce:	2300      	movs	r3, #0
 80075d0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80075d2:	1c51      	adds	r1, r2, #1
 80075d4:	9119      	str	r1, [sp, #100]	@ 0x64
 80075d6:	7852      	ldrb	r2, [r2, #1]
 80075d8:	4618      	mov	r0, r3
 80075da:	e7c5      	b.n	8007568 <_strtod_l+0x1d8>
 80075dc:	4648      	mov	r0, r9
 80075de:	e7ce      	b.n	800757e <_strtod_l+0x1ee>
 80075e0:	2e08      	cmp	r6, #8
 80075e2:	dc05      	bgt.n	80075f0 <_strtod_l+0x260>
 80075e4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80075e6:	fb0e f606 	mul.w	r6, lr, r6
 80075ea:	960b      	str	r6, [sp, #44]	@ 0x2c
 80075ec:	460e      	mov	r6, r1
 80075ee:	e7dc      	b.n	80075aa <_strtod_l+0x21a>
 80075f0:	2910      	cmp	r1, #16
 80075f2:	bfd8      	it	le
 80075f4:	fb0e f707 	mulle.w	r7, lr, r7
 80075f8:	e7f8      	b.n	80075ec <_strtod_l+0x25c>
 80075fa:	2b0f      	cmp	r3, #15
 80075fc:	bfdc      	itt	le
 80075fe:	230a      	movle	r3, #10
 8007600:	fb03 2707 	mlale	r7, r3, r7, r2
 8007604:	e7e3      	b.n	80075ce <_strtod_l+0x23e>
 8007606:	2300      	movs	r3, #0
 8007608:	930a      	str	r3, [sp, #40]	@ 0x28
 800760a:	2301      	movs	r3, #1
 800760c:	e77a      	b.n	8007504 <_strtod_l+0x174>
 800760e:	f04f 0c00 	mov.w	ip, #0
 8007612:	1ca2      	adds	r2, r4, #2
 8007614:	9219      	str	r2, [sp, #100]	@ 0x64
 8007616:	78a2      	ldrb	r2, [r4, #2]
 8007618:	e782      	b.n	8007520 <_strtod_l+0x190>
 800761a:	f04f 0c01 	mov.w	ip, #1
 800761e:	e7f8      	b.n	8007612 <_strtod_l+0x282>
 8007620:	08009644 	.word	0x08009644
 8007624:	0800947b 	.word	0x0800947b
 8007628:	7ff00000 	.word	0x7ff00000
 800762c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800762e:	1c51      	adds	r1, r2, #1
 8007630:	9119      	str	r1, [sp, #100]	@ 0x64
 8007632:	7852      	ldrb	r2, [r2, #1]
 8007634:	2a30      	cmp	r2, #48	@ 0x30
 8007636:	d0f9      	beq.n	800762c <_strtod_l+0x29c>
 8007638:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800763c:	2908      	cmp	r1, #8
 800763e:	f63f af75 	bhi.w	800752c <_strtod_l+0x19c>
 8007642:	3a30      	subs	r2, #48	@ 0x30
 8007644:	9209      	str	r2, [sp, #36]	@ 0x24
 8007646:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007648:	920f      	str	r2, [sp, #60]	@ 0x3c
 800764a:	f04f 080a 	mov.w	r8, #10
 800764e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007650:	1c56      	adds	r6, r2, #1
 8007652:	9619      	str	r6, [sp, #100]	@ 0x64
 8007654:	7852      	ldrb	r2, [r2, #1]
 8007656:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800765a:	f1be 0f09 	cmp.w	lr, #9
 800765e:	d939      	bls.n	80076d4 <_strtod_l+0x344>
 8007660:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007662:	1a76      	subs	r6, r6, r1
 8007664:	2e08      	cmp	r6, #8
 8007666:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800766a:	dc03      	bgt.n	8007674 <_strtod_l+0x2e4>
 800766c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800766e:	4588      	cmp	r8, r1
 8007670:	bfa8      	it	ge
 8007672:	4688      	movge	r8, r1
 8007674:	f1bc 0f00 	cmp.w	ip, #0
 8007678:	d001      	beq.n	800767e <_strtod_l+0x2ee>
 800767a:	f1c8 0800 	rsb	r8, r8, #0
 800767e:	2d00      	cmp	r5, #0
 8007680:	d14e      	bne.n	8007720 <_strtod_l+0x390>
 8007682:	9908      	ldr	r1, [sp, #32]
 8007684:	4308      	orrs	r0, r1
 8007686:	f47f aebc 	bne.w	8007402 <_strtod_l+0x72>
 800768a:	2b00      	cmp	r3, #0
 800768c:	f47f aed4 	bne.w	8007438 <_strtod_l+0xa8>
 8007690:	2a69      	cmp	r2, #105	@ 0x69
 8007692:	d028      	beq.n	80076e6 <_strtod_l+0x356>
 8007694:	dc25      	bgt.n	80076e2 <_strtod_l+0x352>
 8007696:	2a49      	cmp	r2, #73	@ 0x49
 8007698:	d025      	beq.n	80076e6 <_strtod_l+0x356>
 800769a:	2a4e      	cmp	r2, #78	@ 0x4e
 800769c:	f47f aecc 	bne.w	8007438 <_strtod_l+0xa8>
 80076a0:	499a      	ldr	r1, [pc, #616]	@ (800790c <_strtod_l+0x57c>)
 80076a2:	a819      	add	r0, sp, #100	@ 0x64
 80076a4:	f001 f9ec 	bl	8008a80 <__match>
 80076a8:	2800      	cmp	r0, #0
 80076aa:	f43f aec5 	beq.w	8007438 <_strtod_l+0xa8>
 80076ae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	2b28      	cmp	r3, #40	@ 0x28
 80076b4:	d12e      	bne.n	8007714 <_strtod_l+0x384>
 80076b6:	4996      	ldr	r1, [pc, #600]	@ (8007910 <_strtod_l+0x580>)
 80076b8:	aa1c      	add	r2, sp, #112	@ 0x70
 80076ba:	a819      	add	r0, sp, #100	@ 0x64
 80076bc:	f001 f9f4 	bl	8008aa8 <__hexnan>
 80076c0:	2805      	cmp	r0, #5
 80076c2:	d127      	bne.n	8007714 <_strtod_l+0x384>
 80076c4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80076c6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80076ca:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80076ce:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80076d2:	e696      	b.n	8007402 <_strtod_l+0x72>
 80076d4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80076d6:	fb08 2101 	mla	r1, r8, r1, r2
 80076da:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80076de:	9209      	str	r2, [sp, #36]	@ 0x24
 80076e0:	e7b5      	b.n	800764e <_strtod_l+0x2be>
 80076e2:	2a6e      	cmp	r2, #110	@ 0x6e
 80076e4:	e7da      	b.n	800769c <_strtod_l+0x30c>
 80076e6:	498b      	ldr	r1, [pc, #556]	@ (8007914 <_strtod_l+0x584>)
 80076e8:	a819      	add	r0, sp, #100	@ 0x64
 80076ea:	f001 f9c9 	bl	8008a80 <__match>
 80076ee:	2800      	cmp	r0, #0
 80076f0:	f43f aea2 	beq.w	8007438 <_strtod_l+0xa8>
 80076f4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80076f6:	4988      	ldr	r1, [pc, #544]	@ (8007918 <_strtod_l+0x588>)
 80076f8:	3b01      	subs	r3, #1
 80076fa:	a819      	add	r0, sp, #100	@ 0x64
 80076fc:	9319      	str	r3, [sp, #100]	@ 0x64
 80076fe:	f001 f9bf 	bl	8008a80 <__match>
 8007702:	b910      	cbnz	r0, 800770a <_strtod_l+0x37a>
 8007704:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007706:	3301      	adds	r3, #1
 8007708:	9319      	str	r3, [sp, #100]	@ 0x64
 800770a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8007928 <_strtod_l+0x598>
 800770e:	f04f 0a00 	mov.w	sl, #0
 8007712:	e676      	b.n	8007402 <_strtod_l+0x72>
 8007714:	4881      	ldr	r0, [pc, #516]	@ (800791c <_strtod_l+0x58c>)
 8007716:	f000 feef 	bl	80084f8 <nan>
 800771a:	ec5b ab10 	vmov	sl, fp, d0
 800771e:	e670      	b.n	8007402 <_strtod_l+0x72>
 8007720:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007722:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8007724:	eba8 0303 	sub.w	r3, r8, r3
 8007728:	f1b9 0f00 	cmp.w	r9, #0
 800772c:	bf08      	it	eq
 800772e:	46a9      	moveq	r9, r5
 8007730:	2d10      	cmp	r5, #16
 8007732:	9309      	str	r3, [sp, #36]	@ 0x24
 8007734:	462c      	mov	r4, r5
 8007736:	bfa8      	it	ge
 8007738:	2410      	movge	r4, #16
 800773a:	f7f8 ff0b 	bl	8000554 <__aeabi_ui2d>
 800773e:	2d09      	cmp	r5, #9
 8007740:	4682      	mov	sl, r0
 8007742:	468b      	mov	fp, r1
 8007744:	dc13      	bgt.n	800776e <_strtod_l+0x3de>
 8007746:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007748:	2b00      	cmp	r3, #0
 800774a:	f43f ae5a 	beq.w	8007402 <_strtod_l+0x72>
 800774e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007750:	dd78      	ble.n	8007844 <_strtod_l+0x4b4>
 8007752:	2b16      	cmp	r3, #22
 8007754:	dc5f      	bgt.n	8007816 <_strtod_l+0x486>
 8007756:	4972      	ldr	r1, [pc, #456]	@ (8007920 <_strtod_l+0x590>)
 8007758:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800775c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007760:	4652      	mov	r2, sl
 8007762:	465b      	mov	r3, fp
 8007764:	f7f8 ff70 	bl	8000648 <__aeabi_dmul>
 8007768:	4682      	mov	sl, r0
 800776a:	468b      	mov	fp, r1
 800776c:	e649      	b.n	8007402 <_strtod_l+0x72>
 800776e:	4b6c      	ldr	r3, [pc, #432]	@ (8007920 <_strtod_l+0x590>)
 8007770:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007774:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007778:	f7f8 ff66 	bl	8000648 <__aeabi_dmul>
 800777c:	4682      	mov	sl, r0
 800777e:	4638      	mov	r0, r7
 8007780:	468b      	mov	fp, r1
 8007782:	f7f8 fee7 	bl	8000554 <__aeabi_ui2d>
 8007786:	4602      	mov	r2, r0
 8007788:	460b      	mov	r3, r1
 800778a:	4650      	mov	r0, sl
 800778c:	4659      	mov	r1, fp
 800778e:	f7f8 fda5 	bl	80002dc <__adddf3>
 8007792:	2d0f      	cmp	r5, #15
 8007794:	4682      	mov	sl, r0
 8007796:	468b      	mov	fp, r1
 8007798:	ddd5      	ble.n	8007746 <_strtod_l+0x3b6>
 800779a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800779c:	1b2c      	subs	r4, r5, r4
 800779e:	441c      	add	r4, r3
 80077a0:	2c00      	cmp	r4, #0
 80077a2:	f340 8093 	ble.w	80078cc <_strtod_l+0x53c>
 80077a6:	f014 030f 	ands.w	r3, r4, #15
 80077aa:	d00a      	beq.n	80077c2 <_strtod_l+0x432>
 80077ac:	495c      	ldr	r1, [pc, #368]	@ (8007920 <_strtod_l+0x590>)
 80077ae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80077b2:	4652      	mov	r2, sl
 80077b4:	465b      	mov	r3, fp
 80077b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077ba:	f7f8 ff45 	bl	8000648 <__aeabi_dmul>
 80077be:	4682      	mov	sl, r0
 80077c0:	468b      	mov	fp, r1
 80077c2:	f034 040f 	bics.w	r4, r4, #15
 80077c6:	d073      	beq.n	80078b0 <_strtod_l+0x520>
 80077c8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80077cc:	dd49      	ble.n	8007862 <_strtod_l+0x4d2>
 80077ce:	2400      	movs	r4, #0
 80077d0:	46a0      	mov	r8, r4
 80077d2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80077d4:	46a1      	mov	r9, r4
 80077d6:	9a05      	ldr	r2, [sp, #20]
 80077d8:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8007928 <_strtod_l+0x598>
 80077dc:	2322      	movs	r3, #34	@ 0x22
 80077de:	6013      	str	r3, [r2, #0]
 80077e0:	f04f 0a00 	mov.w	sl, #0
 80077e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	f43f ae0b 	beq.w	8007402 <_strtod_l+0x72>
 80077ec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80077ee:	9805      	ldr	r0, [sp, #20]
 80077f0:	f7ff f946 	bl	8006a80 <_Bfree>
 80077f4:	9805      	ldr	r0, [sp, #20]
 80077f6:	4649      	mov	r1, r9
 80077f8:	f7ff f942 	bl	8006a80 <_Bfree>
 80077fc:	9805      	ldr	r0, [sp, #20]
 80077fe:	4641      	mov	r1, r8
 8007800:	f7ff f93e 	bl	8006a80 <_Bfree>
 8007804:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007806:	9805      	ldr	r0, [sp, #20]
 8007808:	f7ff f93a 	bl	8006a80 <_Bfree>
 800780c:	9805      	ldr	r0, [sp, #20]
 800780e:	4621      	mov	r1, r4
 8007810:	f7ff f936 	bl	8006a80 <_Bfree>
 8007814:	e5f5      	b.n	8007402 <_strtod_l+0x72>
 8007816:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007818:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800781c:	4293      	cmp	r3, r2
 800781e:	dbbc      	blt.n	800779a <_strtod_l+0x40a>
 8007820:	4c3f      	ldr	r4, [pc, #252]	@ (8007920 <_strtod_l+0x590>)
 8007822:	f1c5 050f 	rsb	r5, r5, #15
 8007826:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800782a:	4652      	mov	r2, sl
 800782c:	465b      	mov	r3, fp
 800782e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007832:	f7f8 ff09 	bl	8000648 <__aeabi_dmul>
 8007836:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007838:	1b5d      	subs	r5, r3, r5
 800783a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800783e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007842:	e78f      	b.n	8007764 <_strtod_l+0x3d4>
 8007844:	3316      	adds	r3, #22
 8007846:	dba8      	blt.n	800779a <_strtod_l+0x40a>
 8007848:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800784a:	eba3 0808 	sub.w	r8, r3, r8
 800784e:	4b34      	ldr	r3, [pc, #208]	@ (8007920 <_strtod_l+0x590>)
 8007850:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007854:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007858:	4650      	mov	r0, sl
 800785a:	4659      	mov	r1, fp
 800785c:	f7f9 f81e 	bl	800089c <__aeabi_ddiv>
 8007860:	e782      	b.n	8007768 <_strtod_l+0x3d8>
 8007862:	2300      	movs	r3, #0
 8007864:	4f2f      	ldr	r7, [pc, #188]	@ (8007924 <_strtod_l+0x594>)
 8007866:	1124      	asrs	r4, r4, #4
 8007868:	4650      	mov	r0, sl
 800786a:	4659      	mov	r1, fp
 800786c:	461e      	mov	r6, r3
 800786e:	2c01      	cmp	r4, #1
 8007870:	dc21      	bgt.n	80078b6 <_strtod_l+0x526>
 8007872:	b10b      	cbz	r3, 8007878 <_strtod_l+0x4e8>
 8007874:	4682      	mov	sl, r0
 8007876:	468b      	mov	fp, r1
 8007878:	492a      	ldr	r1, [pc, #168]	@ (8007924 <_strtod_l+0x594>)
 800787a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800787e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007882:	4652      	mov	r2, sl
 8007884:	465b      	mov	r3, fp
 8007886:	e9d1 0100 	ldrd	r0, r1, [r1]
 800788a:	f7f8 fedd 	bl	8000648 <__aeabi_dmul>
 800788e:	4b26      	ldr	r3, [pc, #152]	@ (8007928 <_strtod_l+0x598>)
 8007890:	460a      	mov	r2, r1
 8007892:	400b      	ands	r3, r1
 8007894:	4925      	ldr	r1, [pc, #148]	@ (800792c <_strtod_l+0x59c>)
 8007896:	428b      	cmp	r3, r1
 8007898:	4682      	mov	sl, r0
 800789a:	d898      	bhi.n	80077ce <_strtod_l+0x43e>
 800789c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80078a0:	428b      	cmp	r3, r1
 80078a2:	bf86      	itte	hi
 80078a4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8007930 <_strtod_l+0x5a0>
 80078a8:	f04f 3aff 	movhi.w	sl, #4294967295
 80078ac:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80078b0:	2300      	movs	r3, #0
 80078b2:	9308      	str	r3, [sp, #32]
 80078b4:	e076      	b.n	80079a4 <_strtod_l+0x614>
 80078b6:	07e2      	lsls	r2, r4, #31
 80078b8:	d504      	bpl.n	80078c4 <_strtod_l+0x534>
 80078ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078be:	f7f8 fec3 	bl	8000648 <__aeabi_dmul>
 80078c2:	2301      	movs	r3, #1
 80078c4:	3601      	adds	r6, #1
 80078c6:	1064      	asrs	r4, r4, #1
 80078c8:	3708      	adds	r7, #8
 80078ca:	e7d0      	b.n	800786e <_strtod_l+0x4de>
 80078cc:	d0f0      	beq.n	80078b0 <_strtod_l+0x520>
 80078ce:	4264      	negs	r4, r4
 80078d0:	f014 020f 	ands.w	r2, r4, #15
 80078d4:	d00a      	beq.n	80078ec <_strtod_l+0x55c>
 80078d6:	4b12      	ldr	r3, [pc, #72]	@ (8007920 <_strtod_l+0x590>)
 80078d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80078dc:	4650      	mov	r0, sl
 80078de:	4659      	mov	r1, fp
 80078e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e4:	f7f8 ffda 	bl	800089c <__aeabi_ddiv>
 80078e8:	4682      	mov	sl, r0
 80078ea:	468b      	mov	fp, r1
 80078ec:	1124      	asrs	r4, r4, #4
 80078ee:	d0df      	beq.n	80078b0 <_strtod_l+0x520>
 80078f0:	2c1f      	cmp	r4, #31
 80078f2:	dd1f      	ble.n	8007934 <_strtod_l+0x5a4>
 80078f4:	2400      	movs	r4, #0
 80078f6:	46a0      	mov	r8, r4
 80078f8:	940b      	str	r4, [sp, #44]	@ 0x2c
 80078fa:	46a1      	mov	r9, r4
 80078fc:	9a05      	ldr	r2, [sp, #20]
 80078fe:	2322      	movs	r3, #34	@ 0x22
 8007900:	f04f 0a00 	mov.w	sl, #0
 8007904:	f04f 0b00 	mov.w	fp, #0
 8007908:	6013      	str	r3, [r2, #0]
 800790a:	e76b      	b.n	80077e4 <_strtod_l+0x454>
 800790c:	08009369 	.word	0x08009369
 8007910:	08009630 	.word	0x08009630
 8007914:	08009361 	.word	0x08009361
 8007918:	08009398 	.word	0x08009398
 800791c:	080094d1 	.word	0x080094d1
 8007920:	08009568 	.word	0x08009568
 8007924:	08009540 	.word	0x08009540
 8007928:	7ff00000 	.word	0x7ff00000
 800792c:	7ca00000 	.word	0x7ca00000
 8007930:	7fefffff 	.word	0x7fefffff
 8007934:	f014 0310 	ands.w	r3, r4, #16
 8007938:	bf18      	it	ne
 800793a:	236a      	movne	r3, #106	@ 0x6a
 800793c:	4ea9      	ldr	r6, [pc, #676]	@ (8007be4 <_strtod_l+0x854>)
 800793e:	9308      	str	r3, [sp, #32]
 8007940:	4650      	mov	r0, sl
 8007942:	4659      	mov	r1, fp
 8007944:	2300      	movs	r3, #0
 8007946:	07e7      	lsls	r7, r4, #31
 8007948:	d504      	bpl.n	8007954 <_strtod_l+0x5c4>
 800794a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800794e:	f7f8 fe7b 	bl	8000648 <__aeabi_dmul>
 8007952:	2301      	movs	r3, #1
 8007954:	1064      	asrs	r4, r4, #1
 8007956:	f106 0608 	add.w	r6, r6, #8
 800795a:	d1f4      	bne.n	8007946 <_strtod_l+0x5b6>
 800795c:	b10b      	cbz	r3, 8007962 <_strtod_l+0x5d2>
 800795e:	4682      	mov	sl, r0
 8007960:	468b      	mov	fp, r1
 8007962:	9b08      	ldr	r3, [sp, #32]
 8007964:	b1b3      	cbz	r3, 8007994 <_strtod_l+0x604>
 8007966:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800796a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800796e:	2b00      	cmp	r3, #0
 8007970:	4659      	mov	r1, fp
 8007972:	dd0f      	ble.n	8007994 <_strtod_l+0x604>
 8007974:	2b1f      	cmp	r3, #31
 8007976:	dd56      	ble.n	8007a26 <_strtod_l+0x696>
 8007978:	2b34      	cmp	r3, #52	@ 0x34
 800797a:	bfde      	ittt	le
 800797c:	f04f 33ff 	movle.w	r3, #4294967295
 8007980:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007984:	4093      	lslle	r3, r2
 8007986:	f04f 0a00 	mov.w	sl, #0
 800798a:	bfcc      	ite	gt
 800798c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007990:	ea03 0b01 	andle.w	fp, r3, r1
 8007994:	2200      	movs	r2, #0
 8007996:	2300      	movs	r3, #0
 8007998:	4650      	mov	r0, sl
 800799a:	4659      	mov	r1, fp
 800799c:	f7f9 f8bc 	bl	8000b18 <__aeabi_dcmpeq>
 80079a0:	2800      	cmp	r0, #0
 80079a2:	d1a7      	bne.n	80078f4 <_strtod_l+0x564>
 80079a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80079a6:	9300      	str	r3, [sp, #0]
 80079a8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80079aa:	9805      	ldr	r0, [sp, #20]
 80079ac:	462b      	mov	r3, r5
 80079ae:	464a      	mov	r2, r9
 80079b0:	f7ff f8ce 	bl	8006b50 <__s2b>
 80079b4:	900b      	str	r0, [sp, #44]	@ 0x2c
 80079b6:	2800      	cmp	r0, #0
 80079b8:	f43f af09 	beq.w	80077ce <_strtod_l+0x43e>
 80079bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80079be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079c0:	2a00      	cmp	r2, #0
 80079c2:	eba3 0308 	sub.w	r3, r3, r8
 80079c6:	bfa8      	it	ge
 80079c8:	2300      	movge	r3, #0
 80079ca:	9312      	str	r3, [sp, #72]	@ 0x48
 80079cc:	2400      	movs	r4, #0
 80079ce:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80079d2:	9316      	str	r3, [sp, #88]	@ 0x58
 80079d4:	46a0      	mov	r8, r4
 80079d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80079d8:	9805      	ldr	r0, [sp, #20]
 80079da:	6859      	ldr	r1, [r3, #4]
 80079dc:	f7ff f810 	bl	8006a00 <_Balloc>
 80079e0:	4681      	mov	r9, r0
 80079e2:	2800      	cmp	r0, #0
 80079e4:	f43f aef7 	beq.w	80077d6 <_strtod_l+0x446>
 80079e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80079ea:	691a      	ldr	r2, [r3, #16]
 80079ec:	3202      	adds	r2, #2
 80079ee:	f103 010c 	add.w	r1, r3, #12
 80079f2:	0092      	lsls	r2, r2, #2
 80079f4:	300c      	adds	r0, #12
 80079f6:	f000 fd71 	bl	80084dc <memcpy>
 80079fa:	ec4b ab10 	vmov	d0, sl, fp
 80079fe:	9805      	ldr	r0, [sp, #20]
 8007a00:	aa1c      	add	r2, sp, #112	@ 0x70
 8007a02:	a91b      	add	r1, sp, #108	@ 0x6c
 8007a04:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007a08:	f7ff fbd6 	bl	80071b8 <__d2b>
 8007a0c:	901a      	str	r0, [sp, #104]	@ 0x68
 8007a0e:	2800      	cmp	r0, #0
 8007a10:	f43f aee1 	beq.w	80077d6 <_strtod_l+0x446>
 8007a14:	9805      	ldr	r0, [sp, #20]
 8007a16:	2101      	movs	r1, #1
 8007a18:	f7ff f930 	bl	8006c7c <__i2b>
 8007a1c:	4680      	mov	r8, r0
 8007a1e:	b948      	cbnz	r0, 8007a34 <_strtod_l+0x6a4>
 8007a20:	f04f 0800 	mov.w	r8, #0
 8007a24:	e6d7      	b.n	80077d6 <_strtod_l+0x446>
 8007a26:	f04f 32ff 	mov.w	r2, #4294967295
 8007a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a2e:	ea03 0a0a 	and.w	sl, r3, sl
 8007a32:	e7af      	b.n	8007994 <_strtod_l+0x604>
 8007a34:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007a36:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007a38:	2d00      	cmp	r5, #0
 8007a3a:	bfab      	itete	ge
 8007a3c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007a3e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007a40:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007a42:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007a44:	bfac      	ite	ge
 8007a46:	18ef      	addge	r7, r5, r3
 8007a48:	1b5e      	sublt	r6, r3, r5
 8007a4a:	9b08      	ldr	r3, [sp, #32]
 8007a4c:	1aed      	subs	r5, r5, r3
 8007a4e:	4415      	add	r5, r2
 8007a50:	4b65      	ldr	r3, [pc, #404]	@ (8007be8 <_strtod_l+0x858>)
 8007a52:	3d01      	subs	r5, #1
 8007a54:	429d      	cmp	r5, r3
 8007a56:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007a5a:	da50      	bge.n	8007afe <_strtod_l+0x76e>
 8007a5c:	1b5b      	subs	r3, r3, r5
 8007a5e:	2b1f      	cmp	r3, #31
 8007a60:	eba2 0203 	sub.w	r2, r2, r3
 8007a64:	f04f 0101 	mov.w	r1, #1
 8007a68:	dc3d      	bgt.n	8007ae6 <_strtod_l+0x756>
 8007a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8007a6e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007a70:	2300      	movs	r3, #0
 8007a72:	9310      	str	r3, [sp, #64]	@ 0x40
 8007a74:	18bd      	adds	r5, r7, r2
 8007a76:	9b08      	ldr	r3, [sp, #32]
 8007a78:	42af      	cmp	r7, r5
 8007a7a:	4416      	add	r6, r2
 8007a7c:	441e      	add	r6, r3
 8007a7e:	463b      	mov	r3, r7
 8007a80:	bfa8      	it	ge
 8007a82:	462b      	movge	r3, r5
 8007a84:	42b3      	cmp	r3, r6
 8007a86:	bfa8      	it	ge
 8007a88:	4633      	movge	r3, r6
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	bfc2      	ittt	gt
 8007a8e:	1aed      	subgt	r5, r5, r3
 8007a90:	1af6      	subgt	r6, r6, r3
 8007a92:	1aff      	subgt	r7, r7, r3
 8007a94:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	dd16      	ble.n	8007ac8 <_strtod_l+0x738>
 8007a9a:	4641      	mov	r1, r8
 8007a9c:	9805      	ldr	r0, [sp, #20]
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	f7ff f9a4 	bl	8006dec <__pow5mult>
 8007aa4:	4680      	mov	r8, r0
 8007aa6:	2800      	cmp	r0, #0
 8007aa8:	d0ba      	beq.n	8007a20 <_strtod_l+0x690>
 8007aaa:	4601      	mov	r1, r0
 8007aac:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007aae:	9805      	ldr	r0, [sp, #20]
 8007ab0:	f7ff f8fa 	bl	8006ca8 <__multiply>
 8007ab4:	900a      	str	r0, [sp, #40]	@ 0x28
 8007ab6:	2800      	cmp	r0, #0
 8007ab8:	f43f ae8d 	beq.w	80077d6 <_strtod_l+0x446>
 8007abc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007abe:	9805      	ldr	r0, [sp, #20]
 8007ac0:	f7fe ffde 	bl	8006a80 <_Bfree>
 8007ac4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ac6:	931a      	str	r3, [sp, #104]	@ 0x68
 8007ac8:	2d00      	cmp	r5, #0
 8007aca:	dc1d      	bgt.n	8007b08 <_strtod_l+0x778>
 8007acc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	dd23      	ble.n	8007b1a <_strtod_l+0x78a>
 8007ad2:	4649      	mov	r1, r9
 8007ad4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007ad6:	9805      	ldr	r0, [sp, #20]
 8007ad8:	f7ff f988 	bl	8006dec <__pow5mult>
 8007adc:	4681      	mov	r9, r0
 8007ade:	b9e0      	cbnz	r0, 8007b1a <_strtod_l+0x78a>
 8007ae0:	f04f 0900 	mov.w	r9, #0
 8007ae4:	e677      	b.n	80077d6 <_strtod_l+0x446>
 8007ae6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007aea:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007aee:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007af2:	35e2      	adds	r5, #226	@ 0xe2
 8007af4:	fa01 f305 	lsl.w	r3, r1, r5
 8007af8:	9310      	str	r3, [sp, #64]	@ 0x40
 8007afa:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007afc:	e7ba      	b.n	8007a74 <_strtod_l+0x6e4>
 8007afe:	2300      	movs	r3, #0
 8007b00:	9310      	str	r3, [sp, #64]	@ 0x40
 8007b02:	2301      	movs	r3, #1
 8007b04:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007b06:	e7b5      	b.n	8007a74 <_strtod_l+0x6e4>
 8007b08:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007b0a:	9805      	ldr	r0, [sp, #20]
 8007b0c:	462a      	mov	r2, r5
 8007b0e:	f7ff f9c7 	bl	8006ea0 <__lshift>
 8007b12:	901a      	str	r0, [sp, #104]	@ 0x68
 8007b14:	2800      	cmp	r0, #0
 8007b16:	d1d9      	bne.n	8007acc <_strtod_l+0x73c>
 8007b18:	e65d      	b.n	80077d6 <_strtod_l+0x446>
 8007b1a:	2e00      	cmp	r6, #0
 8007b1c:	dd07      	ble.n	8007b2e <_strtod_l+0x79e>
 8007b1e:	4649      	mov	r1, r9
 8007b20:	9805      	ldr	r0, [sp, #20]
 8007b22:	4632      	mov	r2, r6
 8007b24:	f7ff f9bc 	bl	8006ea0 <__lshift>
 8007b28:	4681      	mov	r9, r0
 8007b2a:	2800      	cmp	r0, #0
 8007b2c:	d0d8      	beq.n	8007ae0 <_strtod_l+0x750>
 8007b2e:	2f00      	cmp	r7, #0
 8007b30:	dd08      	ble.n	8007b44 <_strtod_l+0x7b4>
 8007b32:	4641      	mov	r1, r8
 8007b34:	9805      	ldr	r0, [sp, #20]
 8007b36:	463a      	mov	r2, r7
 8007b38:	f7ff f9b2 	bl	8006ea0 <__lshift>
 8007b3c:	4680      	mov	r8, r0
 8007b3e:	2800      	cmp	r0, #0
 8007b40:	f43f ae49 	beq.w	80077d6 <_strtod_l+0x446>
 8007b44:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007b46:	9805      	ldr	r0, [sp, #20]
 8007b48:	464a      	mov	r2, r9
 8007b4a:	f7ff fa31 	bl	8006fb0 <__mdiff>
 8007b4e:	4604      	mov	r4, r0
 8007b50:	2800      	cmp	r0, #0
 8007b52:	f43f ae40 	beq.w	80077d6 <_strtod_l+0x446>
 8007b56:	68c3      	ldr	r3, [r0, #12]
 8007b58:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	60c3      	str	r3, [r0, #12]
 8007b5e:	4641      	mov	r1, r8
 8007b60:	f7ff fa0a 	bl	8006f78 <__mcmp>
 8007b64:	2800      	cmp	r0, #0
 8007b66:	da45      	bge.n	8007bf4 <_strtod_l+0x864>
 8007b68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b6a:	ea53 030a 	orrs.w	r3, r3, sl
 8007b6e:	d16b      	bne.n	8007c48 <_strtod_l+0x8b8>
 8007b70:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d167      	bne.n	8007c48 <_strtod_l+0x8b8>
 8007b78:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007b7c:	0d1b      	lsrs	r3, r3, #20
 8007b7e:	051b      	lsls	r3, r3, #20
 8007b80:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007b84:	d960      	bls.n	8007c48 <_strtod_l+0x8b8>
 8007b86:	6963      	ldr	r3, [r4, #20]
 8007b88:	b913      	cbnz	r3, 8007b90 <_strtod_l+0x800>
 8007b8a:	6923      	ldr	r3, [r4, #16]
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	dd5b      	ble.n	8007c48 <_strtod_l+0x8b8>
 8007b90:	4621      	mov	r1, r4
 8007b92:	2201      	movs	r2, #1
 8007b94:	9805      	ldr	r0, [sp, #20]
 8007b96:	f7ff f983 	bl	8006ea0 <__lshift>
 8007b9a:	4641      	mov	r1, r8
 8007b9c:	4604      	mov	r4, r0
 8007b9e:	f7ff f9eb 	bl	8006f78 <__mcmp>
 8007ba2:	2800      	cmp	r0, #0
 8007ba4:	dd50      	ble.n	8007c48 <_strtod_l+0x8b8>
 8007ba6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007baa:	9a08      	ldr	r2, [sp, #32]
 8007bac:	0d1b      	lsrs	r3, r3, #20
 8007bae:	051b      	lsls	r3, r3, #20
 8007bb0:	2a00      	cmp	r2, #0
 8007bb2:	d06a      	beq.n	8007c8a <_strtod_l+0x8fa>
 8007bb4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007bb8:	d867      	bhi.n	8007c8a <_strtod_l+0x8fa>
 8007bba:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007bbe:	f67f ae9d 	bls.w	80078fc <_strtod_l+0x56c>
 8007bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8007bec <_strtod_l+0x85c>)
 8007bc4:	4650      	mov	r0, sl
 8007bc6:	4659      	mov	r1, fp
 8007bc8:	2200      	movs	r2, #0
 8007bca:	f7f8 fd3d 	bl	8000648 <__aeabi_dmul>
 8007bce:	4b08      	ldr	r3, [pc, #32]	@ (8007bf0 <_strtod_l+0x860>)
 8007bd0:	400b      	ands	r3, r1
 8007bd2:	4682      	mov	sl, r0
 8007bd4:	468b      	mov	fp, r1
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	f47f ae08 	bne.w	80077ec <_strtod_l+0x45c>
 8007bdc:	9a05      	ldr	r2, [sp, #20]
 8007bde:	2322      	movs	r3, #34	@ 0x22
 8007be0:	6013      	str	r3, [r2, #0]
 8007be2:	e603      	b.n	80077ec <_strtod_l+0x45c>
 8007be4:	08009658 	.word	0x08009658
 8007be8:	fffffc02 	.word	0xfffffc02
 8007bec:	39500000 	.word	0x39500000
 8007bf0:	7ff00000 	.word	0x7ff00000
 8007bf4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8007bf8:	d165      	bne.n	8007cc6 <_strtod_l+0x936>
 8007bfa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007bfc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007c00:	b35a      	cbz	r2, 8007c5a <_strtod_l+0x8ca>
 8007c02:	4a9f      	ldr	r2, [pc, #636]	@ (8007e80 <_strtod_l+0xaf0>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d12b      	bne.n	8007c60 <_strtod_l+0x8d0>
 8007c08:	9b08      	ldr	r3, [sp, #32]
 8007c0a:	4651      	mov	r1, sl
 8007c0c:	b303      	cbz	r3, 8007c50 <_strtod_l+0x8c0>
 8007c0e:	4b9d      	ldr	r3, [pc, #628]	@ (8007e84 <_strtod_l+0xaf4>)
 8007c10:	465a      	mov	r2, fp
 8007c12:	4013      	ands	r3, r2
 8007c14:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007c18:	f04f 32ff 	mov.w	r2, #4294967295
 8007c1c:	d81b      	bhi.n	8007c56 <_strtod_l+0x8c6>
 8007c1e:	0d1b      	lsrs	r3, r3, #20
 8007c20:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007c24:	fa02 f303 	lsl.w	r3, r2, r3
 8007c28:	4299      	cmp	r1, r3
 8007c2a:	d119      	bne.n	8007c60 <_strtod_l+0x8d0>
 8007c2c:	4b96      	ldr	r3, [pc, #600]	@ (8007e88 <_strtod_l+0xaf8>)
 8007c2e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d102      	bne.n	8007c3a <_strtod_l+0x8aa>
 8007c34:	3101      	adds	r1, #1
 8007c36:	f43f adce 	beq.w	80077d6 <_strtod_l+0x446>
 8007c3a:	4b92      	ldr	r3, [pc, #584]	@ (8007e84 <_strtod_l+0xaf4>)
 8007c3c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007c3e:	401a      	ands	r2, r3
 8007c40:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007c44:	f04f 0a00 	mov.w	sl, #0
 8007c48:	9b08      	ldr	r3, [sp, #32]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d1b9      	bne.n	8007bc2 <_strtod_l+0x832>
 8007c4e:	e5cd      	b.n	80077ec <_strtod_l+0x45c>
 8007c50:	f04f 33ff 	mov.w	r3, #4294967295
 8007c54:	e7e8      	b.n	8007c28 <_strtod_l+0x898>
 8007c56:	4613      	mov	r3, r2
 8007c58:	e7e6      	b.n	8007c28 <_strtod_l+0x898>
 8007c5a:	ea53 030a 	orrs.w	r3, r3, sl
 8007c5e:	d0a2      	beq.n	8007ba6 <_strtod_l+0x816>
 8007c60:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007c62:	b1db      	cbz	r3, 8007c9c <_strtod_l+0x90c>
 8007c64:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007c66:	4213      	tst	r3, r2
 8007c68:	d0ee      	beq.n	8007c48 <_strtod_l+0x8b8>
 8007c6a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c6c:	9a08      	ldr	r2, [sp, #32]
 8007c6e:	4650      	mov	r0, sl
 8007c70:	4659      	mov	r1, fp
 8007c72:	b1bb      	cbz	r3, 8007ca4 <_strtod_l+0x914>
 8007c74:	f7ff fb6e 	bl	8007354 <sulp>
 8007c78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c7c:	ec53 2b10 	vmov	r2, r3, d0
 8007c80:	f7f8 fb2c 	bl	80002dc <__adddf3>
 8007c84:	4682      	mov	sl, r0
 8007c86:	468b      	mov	fp, r1
 8007c88:	e7de      	b.n	8007c48 <_strtod_l+0x8b8>
 8007c8a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007c8e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007c92:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007c96:	f04f 3aff 	mov.w	sl, #4294967295
 8007c9a:	e7d5      	b.n	8007c48 <_strtod_l+0x8b8>
 8007c9c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007c9e:	ea13 0f0a 	tst.w	r3, sl
 8007ca2:	e7e1      	b.n	8007c68 <_strtod_l+0x8d8>
 8007ca4:	f7ff fb56 	bl	8007354 <sulp>
 8007ca8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007cac:	ec53 2b10 	vmov	r2, r3, d0
 8007cb0:	f7f8 fb12 	bl	80002d8 <__aeabi_dsub>
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	4682      	mov	sl, r0
 8007cba:	468b      	mov	fp, r1
 8007cbc:	f7f8 ff2c 	bl	8000b18 <__aeabi_dcmpeq>
 8007cc0:	2800      	cmp	r0, #0
 8007cc2:	d0c1      	beq.n	8007c48 <_strtod_l+0x8b8>
 8007cc4:	e61a      	b.n	80078fc <_strtod_l+0x56c>
 8007cc6:	4641      	mov	r1, r8
 8007cc8:	4620      	mov	r0, r4
 8007cca:	f7ff facd 	bl	8007268 <__ratio>
 8007cce:	ec57 6b10 	vmov	r6, r7, d0
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007cd8:	4630      	mov	r0, r6
 8007cda:	4639      	mov	r1, r7
 8007cdc:	f7f8 ff30 	bl	8000b40 <__aeabi_dcmple>
 8007ce0:	2800      	cmp	r0, #0
 8007ce2:	d06f      	beq.n	8007dc4 <_strtod_l+0xa34>
 8007ce4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d17a      	bne.n	8007de0 <_strtod_l+0xa50>
 8007cea:	f1ba 0f00 	cmp.w	sl, #0
 8007cee:	d158      	bne.n	8007da2 <_strtod_l+0xa12>
 8007cf0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007cf2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d15a      	bne.n	8007db0 <_strtod_l+0xa20>
 8007cfa:	4b64      	ldr	r3, [pc, #400]	@ (8007e8c <_strtod_l+0xafc>)
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	4630      	mov	r0, r6
 8007d00:	4639      	mov	r1, r7
 8007d02:	f7f8 ff13 	bl	8000b2c <__aeabi_dcmplt>
 8007d06:	2800      	cmp	r0, #0
 8007d08:	d159      	bne.n	8007dbe <_strtod_l+0xa2e>
 8007d0a:	4630      	mov	r0, r6
 8007d0c:	4639      	mov	r1, r7
 8007d0e:	4b60      	ldr	r3, [pc, #384]	@ (8007e90 <_strtod_l+0xb00>)
 8007d10:	2200      	movs	r2, #0
 8007d12:	f7f8 fc99 	bl	8000648 <__aeabi_dmul>
 8007d16:	4606      	mov	r6, r0
 8007d18:	460f      	mov	r7, r1
 8007d1a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007d1e:	9606      	str	r6, [sp, #24]
 8007d20:	9307      	str	r3, [sp, #28]
 8007d22:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007d26:	4d57      	ldr	r5, [pc, #348]	@ (8007e84 <_strtod_l+0xaf4>)
 8007d28:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007d2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d2e:	401d      	ands	r5, r3
 8007d30:	4b58      	ldr	r3, [pc, #352]	@ (8007e94 <_strtod_l+0xb04>)
 8007d32:	429d      	cmp	r5, r3
 8007d34:	f040 80b2 	bne.w	8007e9c <_strtod_l+0xb0c>
 8007d38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d3a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007d3e:	ec4b ab10 	vmov	d0, sl, fp
 8007d42:	f7ff f9c9 	bl	80070d8 <__ulp>
 8007d46:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007d4a:	ec51 0b10 	vmov	r0, r1, d0
 8007d4e:	f7f8 fc7b 	bl	8000648 <__aeabi_dmul>
 8007d52:	4652      	mov	r2, sl
 8007d54:	465b      	mov	r3, fp
 8007d56:	f7f8 fac1 	bl	80002dc <__adddf3>
 8007d5a:	460b      	mov	r3, r1
 8007d5c:	4949      	ldr	r1, [pc, #292]	@ (8007e84 <_strtod_l+0xaf4>)
 8007d5e:	4a4e      	ldr	r2, [pc, #312]	@ (8007e98 <_strtod_l+0xb08>)
 8007d60:	4019      	ands	r1, r3
 8007d62:	4291      	cmp	r1, r2
 8007d64:	4682      	mov	sl, r0
 8007d66:	d942      	bls.n	8007dee <_strtod_l+0xa5e>
 8007d68:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007d6a:	4b47      	ldr	r3, [pc, #284]	@ (8007e88 <_strtod_l+0xaf8>)
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d103      	bne.n	8007d78 <_strtod_l+0x9e8>
 8007d70:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007d72:	3301      	adds	r3, #1
 8007d74:	f43f ad2f 	beq.w	80077d6 <_strtod_l+0x446>
 8007d78:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8007e88 <_strtod_l+0xaf8>
 8007d7c:	f04f 3aff 	mov.w	sl, #4294967295
 8007d80:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007d82:	9805      	ldr	r0, [sp, #20]
 8007d84:	f7fe fe7c 	bl	8006a80 <_Bfree>
 8007d88:	9805      	ldr	r0, [sp, #20]
 8007d8a:	4649      	mov	r1, r9
 8007d8c:	f7fe fe78 	bl	8006a80 <_Bfree>
 8007d90:	9805      	ldr	r0, [sp, #20]
 8007d92:	4641      	mov	r1, r8
 8007d94:	f7fe fe74 	bl	8006a80 <_Bfree>
 8007d98:	9805      	ldr	r0, [sp, #20]
 8007d9a:	4621      	mov	r1, r4
 8007d9c:	f7fe fe70 	bl	8006a80 <_Bfree>
 8007da0:	e619      	b.n	80079d6 <_strtod_l+0x646>
 8007da2:	f1ba 0f01 	cmp.w	sl, #1
 8007da6:	d103      	bne.n	8007db0 <_strtod_l+0xa20>
 8007da8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	f43f ada6 	beq.w	80078fc <_strtod_l+0x56c>
 8007db0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8007e60 <_strtod_l+0xad0>
 8007db4:	4f35      	ldr	r7, [pc, #212]	@ (8007e8c <_strtod_l+0xafc>)
 8007db6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007dba:	2600      	movs	r6, #0
 8007dbc:	e7b1      	b.n	8007d22 <_strtod_l+0x992>
 8007dbe:	4f34      	ldr	r7, [pc, #208]	@ (8007e90 <_strtod_l+0xb00>)
 8007dc0:	2600      	movs	r6, #0
 8007dc2:	e7aa      	b.n	8007d1a <_strtod_l+0x98a>
 8007dc4:	4b32      	ldr	r3, [pc, #200]	@ (8007e90 <_strtod_l+0xb00>)
 8007dc6:	4630      	mov	r0, r6
 8007dc8:	4639      	mov	r1, r7
 8007dca:	2200      	movs	r2, #0
 8007dcc:	f7f8 fc3c 	bl	8000648 <__aeabi_dmul>
 8007dd0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007dd2:	4606      	mov	r6, r0
 8007dd4:	460f      	mov	r7, r1
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d09f      	beq.n	8007d1a <_strtod_l+0x98a>
 8007dda:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007dde:	e7a0      	b.n	8007d22 <_strtod_l+0x992>
 8007de0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007e68 <_strtod_l+0xad8>
 8007de4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007de8:	ec57 6b17 	vmov	r6, r7, d7
 8007dec:	e799      	b.n	8007d22 <_strtod_l+0x992>
 8007dee:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007df2:	9b08      	ldr	r3, [sp, #32]
 8007df4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d1c1      	bne.n	8007d80 <_strtod_l+0x9f0>
 8007dfc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007e00:	0d1b      	lsrs	r3, r3, #20
 8007e02:	051b      	lsls	r3, r3, #20
 8007e04:	429d      	cmp	r5, r3
 8007e06:	d1bb      	bne.n	8007d80 <_strtod_l+0x9f0>
 8007e08:	4630      	mov	r0, r6
 8007e0a:	4639      	mov	r1, r7
 8007e0c:	f7f8 ff7c 	bl	8000d08 <__aeabi_d2lz>
 8007e10:	f7f8 fbec 	bl	80005ec <__aeabi_l2d>
 8007e14:	4602      	mov	r2, r0
 8007e16:	460b      	mov	r3, r1
 8007e18:	4630      	mov	r0, r6
 8007e1a:	4639      	mov	r1, r7
 8007e1c:	f7f8 fa5c 	bl	80002d8 <__aeabi_dsub>
 8007e20:	460b      	mov	r3, r1
 8007e22:	4602      	mov	r2, r0
 8007e24:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007e28:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007e2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e2e:	ea46 060a 	orr.w	r6, r6, sl
 8007e32:	431e      	orrs	r6, r3
 8007e34:	d06f      	beq.n	8007f16 <_strtod_l+0xb86>
 8007e36:	a30e      	add	r3, pc, #56	@ (adr r3, 8007e70 <_strtod_l+0xae0>)
 8007e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e3c:	f7f8 fe76 	bl	8000b2c <__aeabi_dcmplt>
 8007e40:	2800      	cmp	r0, #0
 8007e42:	f47f acd3 	bne.w	80077ec <_strtod_l+0x45c>
 8007e46:	a30c      	add	r3, pc, #48	@ (adr r3, 8007e78 <_strtod_l+0xae8>)
 8007e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e4c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e50:	f7f8 fe8a 	bl	8000b68 <__aeabi_dcmpgt>
 8007e54:	2800      	cmp	r0, #0
 8007e56:	d093      	beq.n	8007d80 <_strtod_l+0x9f0>
 8007e58:	e4c8      	b.n	80077ec <_strtod_l+0x45c>
 8007e5a:	bf00      	nop
 8007e5c:	f3af 8000 	nop.w
 8007e60:	00000000 	.word	0x00000000
 8007e64:	bff00000 	.word	0xbff00000
 8007e68:	00000000 	.word	0x00000000
 8007e6c:	3ff00000 	.word	0x3ff00000
 8007e70:	94a03595 	.word	0x94a03595
 8007e74:	3fdfffff 	.word	0x3fdfffff
 8007e78:	35afe535 	.word	0x35afe535
 8007e7c:	3fe00000 	.word	0x3fe00000
 8007e80:	000fffff 	.word	0x000fffff
 8007e84:	7ff00000 	.word	0x7ff00000
 8007e88:	7fefffff 	.word	0x7fefffff
 8007e8c:	3ff00000 	.word	0x3ff00000
 8007e90:	3fe00000 	.word	0x3fe00000
 8007e94:	7fe00000 	.word	0x7fe00000
 8007e98:	7c9fffff 	.word	0x7c9fffff
 8007e9c:	9b08      	ldr	r3, [sp, #32]
 8007e9e:	b323      	cbz	r3, 8007eea <_strtod_l+0xb5a>
 8007ea0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007ea4:	d821      	bhi.n	8007eea <_strtod_l+0xb5a>
 8007ea6:	a328      	add	r3, pc, #160	@ (adr r3, 8007f48 <_strtod_l+0xbb8>)
 8007ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eac:	4630      	mov	r0, r6
 8007eae:	4639      	mov	r1, r7
 8007eb0:	f7f8 fe46 	bl	8000b40 <__aeabi_dcmple>
 8007eb4:	b1a0      	cbz	r0, 8007ee0 <_strtod_l+0xb50>
 8007eb6:	4639      	mov	r1, r7
 8007eb8:	4630      	mov	r0, r6
 8007eba:	f7f8 fe9d 	bl	8000bf8 <__aeabi_d2uiz>
 8007ebe:	2801      	cmp	r0, #1
 8007ec0:	bf38      	it	cc
 8007ec2:	2001      	movcc	r0, #1
 8007ec4:	f7f8 fb46 	bl	8000554 <__aeabi_ui2d>
 8007ec8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007eca:	4606      	mov	r6, r0
 8007ecc:	460f      	mov	r7, r1
 8007ece:	b9fb      	cbnz	r3, 8007f10 <_strtod_l+0xb80>
 8007ed0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007ed4:	9014      	str	r0, [sp, #80]	@ 0x50
 8007ed6:	9315      	str	r3, [sp, #84]	@ 0x54
 8007ed8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007edc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007ee0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007ee2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007ee6:	1b5b      	subs	r3, r3, r5
 8007ee8:	9311      	str	r3, [sp, #68]	@ 0x44
 8007eea:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007eee:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007ef2:	f7ff f8f1 	bl	80070d8 <__ulp>
 8007ef6:	4650      	mov	r0, sl
 8007ef8:	ec53 2b10 	vmov	r2, r3, d0
 8007efc:	4659      	mov	r1, fp
 8007efe:	f7f8 fba3 	bl	8000648 <__aeabi_dmul>
 8007f02:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007f06:	f7f8 f9e9 	bl	80002dc <__adddf3>
 8007f0a:	4682      	mov	sl, r0
 8007f0c:	468b      	mov	fp, r1
 8007f0e:	e770      	b.n	8007df2 <_strtod_l+0xa62>
 8007f10:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007f14:	e7e0      	b.n	8007ed8 <_strtod_l+0xb48>
 8007f16:	a30e      	add	r3, pc, #56	@ (adr r3, 8007f50 <_strtod_l+0xbc0>)
 8007f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f1c:	f7f8 fe06 	bl	8000b2c <__aeabi_dcmplt>
 8007f20:	e798      	b.n	8007e54 <_strtod_l+0xac4>
 8007f22:	2300      	movs	r3, #0
 8007f24:	930e      	str	r3, [sp, #56]	@ 0x38
 8007f26:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007f28:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007f2a:	6013      	str	r3, [r2, #0]
 8007f2c:	f7ff ba6d 	b.w	800740a <_strtod_l+0x7a>
 8007f30:	2a65      	cmp	r2, #101	@ 0x65
 8007f32:	f43f ab68 	beq.w	8007606 <_strtod_l+0x276>
 8007f36:	2a45      	cmp	r2, #69	@ 0x45
 8007f38:	f43f ab65 	beq.w	8007606 <_strtod_l+0x276>
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	f7ff bba0 	b.w	8007682 <_strtod_l+0x2f2>
 8007f42:	bf00      	nop
 8007f44:	f3af 8000 	nop.w
 8007f48:	ffc00000 	.word	0xffc00000
 8007f4c:	41dfffff 	.word	0x41dfffff
 8007f50:	94a03595 	.word	0x94a03595
 8007f54:	3fcfffff 	.word	0x3fcfffff

08007f58 <_strtod_r>:
 8007f58:	4b01      	ldr	r3, [pc, #4]	@ (8007f60 <_strtod_r+0x8>)
 8007f5a:	f7ff ba19 	b.w	8007390 <_strtod_l>
 8007f5e:	bf00      	nop
 8007f60:	20000068 	.word	0x20000068

08007f64 <_strtol_l.isra.0>:
 8007f64:	2b24      	cmp	r3, #36	@ 0x24
 8007f66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f6a:	4686      	mov	lr, r0
 8007f6c:	4690      	mov	r8, r2
 8007f6e:	d801      	bhi.n	8007f74 <_strtol_l.isra.0+0x10>
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d106      	bne.n	8007f82 <_strtol_l.isra.0+0x1e>
 8007f74:	f7fd fdb8 	bl	8005ae8 <__errno>
 8007f78:	2316      	movs	r3, #22
 8007f7a:	6003      	str	r3, [r0, #0]
 8007f7c:	2000      	movs	r0, #0
 8007f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f82:	4834      	ldr	r0, [pc, #208]	@ (8008054 <_strtol_l.isra.0+0xf0>)
 8007f84:	460d      	mov	r5, r1
 8007f86:	462a      	mov	r2, r5
 8007f88:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f8c:	5d06      	ldrb	r6, [r0, r4]
 8007f8e:	f016 0608 	ands.w	r6, r6, #8
 8007f92:	d1f8      	bne.n	8007f86 <_strtol_l.isra.0+0x22>
 8007f94:	2c2d      	cmp	r4, #45	@ 0x2d
 8007f96:	d110      	bne.n	8007fba <_strtol_l.isra.0+0x56>
 8007f98:	782c      	ldrb	r4, [r5, #0]
 8007f9a:	2601      	movs	r6, #1
 8007f9c:	1c95      	adds	r5, r2, #2
 8007f9e:	f033 0210 	bics.w	r2, r3, #16
 8007fa2:	d115      	bne.n	8007fd0 <_strtol_l.isra.0+0x6c>
 8007fa4:	2c30      	cmp	r4, #48	@ 0x30
 8007fa6:	d10d      	bne.n	8007fc4 <_strtol_l.isra.0+0x60>
 8007fa8:	782a      	ldrb	r2, [r5, #0]
 8007faa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007fae:	2a58      	cmp	r2, #88	@ 0x58
 8007fb0:	d108      	bne.n	8007fc4 <_strtol_l.isra.0+0x60>
 8007fb2:	786c      	ldrb	r4, [r5, #1]
 8007fb4:	3502      	adds	r5, #2
 8007fb6:	2310      	movs	r3, #16
 8007fb8:	e00a      	b.n	8007fd0 <_strtol_l.isra.0+0x6c>
 8007fba:	2c2b      	cmp	r4, #43	@ 0x2b
 8007fbc:	bf04      	itt	eq
 8007fbe:	782c      	ldrbeq	r4, [r5, #0]
 8007fc0:	1c95      	addeq	r5, r2, #2
 8007fc2:	e7ec      	b.n	8007f9e <_strtol_l.isra.0+0x3a>
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d1f6      	bne.n	8007fb6 <_strtol_l.isra.0+0x52>
 8007fc8:	2c30      	cmp	r4, #48	@ 0x30
 8007fca:	bf14      	ite	ne
 8007fcc:	230a      	movne	r3, #10
 8007fce:	2308      	moveq	r3, #8
 8007fd0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007fd4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007fd8:	2200      	movs	r2, #0
 8007fda:	fbbc f9f3 	udiv	r9, ip, r3
 8007fde:	4610      	mov	r0, r2
 8007fe0:	fb03 ca19 	mls	sl, r3, r9, ip
 8007fe4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007fe8:	2f09      	cmp	r7, #9
 8007fea:	d80f      	bhi.n	800800c <_strtol_l.isra.0+0xa8>
 8007fec:	463c      	mov	r4, r7
 8007fee:	42a3      	cmp	r3, r4
 8007ff0:	dd1b      	ble.n	800802a <_strtol_l.isra.0+0xc6>
 8007ff2:	1c57      	adds	r7, r2, #1
 8007ff4:	d007      	beq.n	8008006 <_strtol_l.isra.0+0xa2>
 8007ff6:	4581      	cmp	r9, r0
 8007ff8:	d314      	bcc.n	8008024 <_strtol_l.isra.0+0xc0>
 8007ffa:	d101      	bne.n	8008000 <_strtol_l.isra.0+0x9c>
 8007ffc:	45a2      	cmp	sl, r4
 8007ffe:	db11      	blt.n	8008024 <_strtol_l.isra.0+0xc0>
 8008000:	fb00 4003 	mla	r0, r0, r3, r4
 8008004:	2201      	movs	r2, #1
 8008006:	f815 4b01 	ldrb.w	r4, [r5], #1
 800800a:	e7eb      	b.n	8007fe4 <_strtol_l.isra.0+0x80>
 800800c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008010:	2f19      	cmp	r7, #25
 8008012:	d801      	bhi.n	8008018 <_strtol_l.isra.0+0xb4>
 8008014:	3c37      	subs	r4, #55	@ 0x37
 8008016:	e7ea      	b.n	8007fee <_strtol_l.isra.0+0x8a>
 8008018:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800801c:	2f19      	cmp	r7, #25
 800801e:	d804      	bhi.n	800802a <_strtol_l.isra.0+0xc6>
 8008020:	3c57      	subs	r4, #87	@ 0x57
 8008022:	e7e4      	b.n	8007fee <_strtol_l.isra.0+0x8a>
 8008024:	f04f 32ff 	mov.w	r2, #4294967295
 8008028:	e7ed      	b.n	8008006 <_strtol_l.isra.0+0xa2>
 800802a:	1c53      	adds	r3, r2, #1
 800802c:	d108      	bne.n	8008040 <_strtol_l.isra.0+0xdc>
 800802e:	2322      	movs	r3, #34	@ 0x22
 8008030:	f8ce 3000 	str.w	r3, [lr]
 8008034:	4660      	mov	r0, ip
 8008036:	f1b8 0f00 	cmp.w	r8, #0
 800803a:	d0a0      	beq.n	8007f7e <_strtol_l.isra.0+0x1a>
 800803c:	1e69      	subs	r1, r5, #1
 800803e:	e006      	b.n	800804e <_strtol_l.isra.0+0xea>
 8008040:	b106      	cbz	r6, 8008044 <_strtol_l.isra.0+0xe0>
 8008042:	4240      	negs	r0, r0
 8008044:	f1b8 0f00 	cmp.w	r8, #0
 8008048:	d099      	beq.n	8007f7e <_strtol_l.isra.0+0x1a>
 800804a:	2a00      	cmp	r2, #0
 800804c:	d1f6      	bne.n	800803c <_strtol_l.isra.0+0xd8>
 800804e:	f8c8 1000 	str.w	r1, [r8]
 8008052:	e794      	b.n	8007f7e <_strtol_l.isra.0+0x1a>
 8008054:	08009681 	.word	0x08009681

08008058 <_strtol_r>:
 8008058:	f7ff bf84 	b.w	8007f64 <_strtol_l.isra.0>

0800805c <__ssputs_r>:
 800805c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008060:	688e      	ldr	r6, [r1, #8]
 8008062:	461f      	mov	r7, r3
 8008064:	42be      	cmp	r6, r7
 8008066:	680b      	ldr	r3, [r1, #0]
 8008068:	4682      	mov	sl, r0
 800806a:	460c      	mov	r4, r1
 800806c:	4690      	mov	r8, r2
 800806e:	d82d      	bhi.n	80080cc <__ssputs_r+0x70>
 8008070:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008074:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008078:	d026      	beq.n	80080c8 <__ssputs_r+0x6c>
 800807a:	6965      	ldr	r5, [r4, #20]
 800807c:	6909      	ldr	r1, [r1, #16]
 800807e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008082:	eba3 0901 	sub.w	r9, r3, r1
 8008086:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800808a:	1c7b      	adds	r3, r7, #1
 800808c:	444b      	add	r3, r9
 800808e:	106d      	asrs	r5, r5, #1
 8008090:	429d      	cmp	r5, r3
 8008092:	bf38      	it	cc
 8008094:	461d      	movcc	r5, r3
 8008096:	0553      	lsls	r3, r2, #21
 8008098:	d527      	bpl.n	80080ea <__ssputs_r+0x8e>
 800809a:	4629      	mov	r1, r5
 800809c:	f7fe fc24 	bl	80068e8 <_malloc_r>
 80080a0:	4606      	mov	r6, r0
 80080a2:	b360      	cbz	r0, 80080fe <__ssputs_r+0xa2>
 80080a4:	6921      	ldr	r1, [r4, #16]
 80080a6:	464a      	mov	r2, r9
 80080a8:	f000 fa18 	bl	80084dc <memcpy>
 80080ac:	89a3      	ldrh	r3, [r4, #12]
 80080ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80080b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080b6:	81a3      	strh	r3, [r4, #12]
 80080b8:	6126      	str	r6, [r4, #16]
 80080ba:	6165      	str	r5, [r4, #20]
 80080bc:	444e      	add	r6, r9
 80080be:	eba5 0509 	sub.w	r5, r5, r9
 80080c2:	6026      	str	r6, [r4, #0]
 80080c4:	60a5      	str	r5, [r4, #8]
 80080c6:	463e      	mov	r6, r7
 80080c8:	42be      	cmp	r6, r7
 80080ca:	d900      	bls.n	80080ce <__ssputs_r+0x72>
 80080cc:	463e      	mov	r6, r7
 80080ce:	6820      	ldr	r0, [r4, #0]
 80080d0:	4632      	mov	r2, r6
 80080d2:	4641      	mov	r1, r8
 80080d4:	f000 f9c6 	bl	8008464 <memmove>
 80080d8:	68a3      	ldr	r3, [r4, #8]
 80080da:	1b9b      	subs	r3, r3, r6
 80080dc:	60a3      	str	r3, [r4, #8]
 80080de:	6823      	ldr	r3, [r4, #0]
 80080e0:	4433      	add	r3, r6
 80080e2:	6023      	str	r3, [r4, #0]
 80080e4:	2000      	movs	r0, #0
 80080e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080ea:	462a      	mov	r2, r5
 80080ec:	f000 fd89 	bl	8008c02 <_realloc_r>
 80080f0:	4606      	mov	r6, r0
 80080f2:	2800      	cmp	r0, #0
 80080f4:	d1e0      	bne.n	80080b8 <__ssputs_r+0x5c>
 80080f6:	6921      	ldr	r1, [r4, #16]
 80080f8:	4650      	mov	r0, sl
 80080fa:	f7fe fb81 	bl	8006800 <_free_r>
 80080fe:	230c      	movs	r3, #12
 8008100:	f8ca 3000 	str.w	r3, [sl]
 8008104:	89a3      	ldrh	r3, [r4, #12]
 8008106:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800810a:	81a3      	strh	r3, [r4, #12]
 800810c:	f04f 30ff 	mov.w	r0, #4294967295
 8008110:	e7e9      	b.n	80080e6 <__ssputs_r+0x8a>
	...

08008114 <_svfiprintf_r>:
 8008114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008118:	4698      	mov	r8, r3
 800811a:	898b      	ldrh	r3, [r1, #12]
 800811c:	061b      	lsls	r3, r3, #24
 800811e:	b09d      	sub	sp, #116	@ 0x74
 8008120:	4607      	mov	r7, r0
 8008122:	460d      	mov	r5, r1
 8008124:	4614      	mov	r4, r2
 8008126:	d510      	bpl.n	800814a <_svfiprintf_r+0x36>
 8008128:	690b      	ldr	r3, [r1, #16]
 800812a:	b973      	cbnz	r3, 800814a <_svfiprintf_r+0x36>
 800812c:	2140      	movs	r1, #64	@ 0x40
 800812e:	f7fe fbdb 	bl	80068e8 <_malloc_r>
 8008132:	6028      	str	r0, [r5, #0]
 8008134:	6128      	str	r0, [r5, #16]
 8008136:	b930      	cbnz	r0, 8008146 <_svfiprintf_r+0x32>
 8008138:	230c      	movs	r3, #12
 800813a:	603b      	str	r3, [r7, #0]
 800813c:	f04f 30ff 	mov.w	r0, #4294967295
 8008140:	b01d      	add	sp, #116	@ 0x74
 8008142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008146:	2340      	movs	r3, #64	@ 0x40
 8008148:	616b      	str	r3, [r5, #20]
 800814a:	2300      	movs	r3, #0
 800814c:	9309      	str	r3, [sp, #36]	@ 0x24
 800814e:	2320      	movs	r3, #32
 8008150:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008154:	f8cd 800c 	str.w	r8, [sp, #12]
 8008158:	2330      	movs	r3, #48	@ 0x30
 800815a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80082f8 <_svfiprintf_r+0x1e4>
 800815e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008162:	f04f 0901 	mov.w	r9, #1
 8008166:	4623      	mov	r3, r4
 8008168:	469a      	mov	sl, r3
 800816a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800816e:	b10a      	cbz	r2, 8008174 <_svfiprintf_r+0x60>
 8008170:	2a25      	cmp	r2, #37	@ 0x25
 8008172:	d1f9      	bne.n	8008168 <_svfiprintf_r+0x54>
 8008174:	ebba 0b04 	subs.w	fp, sl, r4
 8008178:	d00b      	beq.n	8008192 <_svfiprintf_r+0x7e>
 800817a:	465b      	mov	r3, fp
 800817c:	4622      	mov	r2, r4
 800817e:	4629      	mov	r1, r5
 8008180:	4638      	mov	r0, r7
 8008182:	f7ff ff6b 	bl	800805c <__ssputs_r>
 8008186:	3001      	adds	r0, #1
 8008188:	f000 80a7 	beq.w	80082da <_svfiprintf_r+0x1c6>
 800818c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800818e:	445a      	add	r2, fp
 8008190:	9209      	str	r2, [sp, #36]	@ 0x24
 8008192:	f89a 3000 	ldrb.w	r3, [sl]
 8008196:	2b00      	cmp	r3, #0
 8008198:	f000 809f 	beq.w	80082da <_svfiprintf_r+0x1c6>
 800819c:	2300      	movs	r3, #0
 800819e:	f04f 32ff 	mov.w	r2, #4294967295
 80081a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081a6:	f10a 0a01 	add.w	sl, sl, #1
 80081aa:	9304      	str	r3, [sp, #16]
 80081ac:	9307      	str	r3, [sp, #28]
 80081ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80081b2:	931a      	str	r3, [sp, #104]	@ 0x68
 80081b4:	4654      	mov	r4, sl
 80081b6:	2205      	movs	r2, #5
 80081b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081bc:	484e      	ldr	r0, [pc, #312]	@ (80082f8 <_svfiprintf_r+0x1e4>)
 80081be:	f7f8 f82f 	bl	8000220 <memchr>
 80081c2:	9a04      	ldr	r2, [sp, #16]
 80081c4:	b9d8      	cbnz	r0, 80081fe <_svfiprintf_r+0xea>
 80081c6:	06d0      	lsls	r0, r2, #27
 80081c8:	bf44      	itt	mi
 80081ca:	2320      	movmi	r3, #32
 80081cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80081d0:	0711      	lsls	r1, r2, #28
 80081d2:	bf44      	itt	mi
 80081d4:	232b      	movmi	r3, #43	@ 0x2b
 80081d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80081da:	f89a 3000 	ldrb.w	r3, [sl]
 80081de:	2b2a      	cmp	r3, #42	@ 0x2a
 80081e0:	d015      	beq.n	800820e <_svfiprintf_r+0xfa>
 80081e2:	9a07      	ldr	r2, [sp, #28]
 80081e4:	4654      	mov	r4, sl
 80081e6:	2000      	movs	r0, #0
 80081e8:	f04f 0c0a 	mov.w	ip, #10
 80081ec:	4621      	mov	r1, r4
 80081ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081f2:	3b30      	subs	r3, #48	@ 0x30
 80081f4:	2b09      	cmp	r3, #9
 80081f6:	d94b      	bls.n	8008290 <_svfiprintf_r+0x17c>
 80081f8:	b1b0      	cbz	r0, 8008228 <_svfiprintf_r+0x114>
 80081fa:	9207      	str	r2, [sp, #28]
 80081fc:	e014      	b.n	8008228 <_svfiprintf_r+0x114>
 80081fe:	eba0 0308 	sub.w	r3, r0, r8
 8008202:	fa09 f303 	lsl.w	r3, r9, r3
 8008206:	4313      	orrs	r3, r2
 8008208:	9304      	str	r3, [sp, #16]
 800820a:	46a2      	mov	sl, r4
 800820c:	e7d2      	b.n	80081b4 <_svfiprintf_r+0xa0>
 800820e:	9b03      	ldr	r3, [sp, #12]
 8008210:	1d19      	adds	r1, r3, #4
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	9103      	str	r1, [sp, #12]
 8008216:	2b00      	cmp	r3, #0
 8008218:	bfbb      	ittet	lt
 800821a:	425b      	neglt	r3, r3
 800821c:	f042 0202 	orrlt.w	r2, r2, #2
 8008220:	9307      	strge	r3, [sp, #28]
 8008222:	9307      	strlt	r3, [sp, #28]
 8008224:	bfb8      	it	lt
 8008226:	9204      	strlt	r2, [sp, #16]
 8008228:	7823      	ldrb	r3, [r4, #0]
 800822a:	2b2e      	cmp	r3, #46	@ 0x2e
 800822c:	d10a      	bne.n	8008244 <_svfiprintf_r+0x130>
 800822e:	7863      	ldrb	r3, [r4, #1]
 8008230:	2b2a      	cmp	r3, #42	@ 0x2a
 8008232:	d132      	bne.n	800829a <_svfiprintf_r+0x186>
 8008234:	9b03      	ldr	r3, [sp, #12]
 8008236:	1d1a      	adds	r2, r3, #4
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	9203      	str	r2, [sp, #12]
 800823c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008240:	3402      	adds	r4, #2
 8008242:	9305      	str	r3, [sp, #20]
 8008244:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008308 <_svfiprintf_r+0x1f4>
 8008248:	7821      	ldrb	r1, [r4, #0]
 800824a:	2203      	movs	r2, #3
 800824c:	4650      	mov	r0, sl
 800824e:	f7f7 ffe7 	bl	8000220 <memchr>
 8008252:	b138      	cbz	r0, 8008264 <_svfiprintf_r+0x150>
 8008254:	9b04      	ldr	r3, [sp, #16]
 8008256:	eba0 000a 	sub.w	r0, r0, sl
 800825a:	2240      	movs	r2, #64	@ 0x40
 800825c:	4082      	lsls	r2, r0
 800825e:	4313      	orrs	r3, r2
 8008260:	3401      	adds	r4, #1
 8008262:	9304      	str	r3, [sp, #16]
 8008264:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008268:	4824      	ldr	r0, [pc, #144]	@ (80082fc <_svfiprintf_r+0x1e8>)
 800826a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800826e:	2206      	movs	r2, #6
 8008270:	f7f7 ffd6 	bl	8000220 <memchr>
 8008274:	2800      	cmp	r0, #0
 8008276:	d036      	beq.n	80082e6 <_svfiprintf_r+0x1d2>
 8008278:	4b21      	ldr	r3, [pc, #132]	@ (8008300 <_svfiprintf_r+0x1ec>)
 800827a:	bb1b      	cbnz	r3, 80082c4 <_svfiprintf_r+0x1b0>
 800827c:	9b03      	ldr	r3, [sp, #12]
 800827e:	3307      	adds	r3, #7
 8008280:	f023 0307 	bic.w	r3, r3, #7
 8008284:	3308      	adds	r3, #8
 8008286:	9303      	str	r3, [sp, #12]
 8008288:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800828a:	4433      	add	r3, r6
 800828c:	9309      	str	r3, [sp, #36]	@ 0x24
 800828e:	e76a      	b.n	8008166 <_svfiprintf_r+0x52>
 8008290:	fb0c 3202 	mla	r2, ip, r2, r3
 8008294:	460c      	mov	r4, r1
 8008296:	2001      	movs	r0, #1
 8008298:	e7a8      	b.n	80081ec <_svfiprintf_r+0xd8>
 800829a:	2300      	movs	r3, #0
 800829c:	3401      	adds	r4, #1
 800829e:	9305      	str	r3, [sp, #20]
 80082a0:	4619      	mov	r1, r3
 80082a2:	f04f 0c0a 	mov.w	ip, #10
 80082a6:	4620      	mov	r0, r4
 80082a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082ac:	3a30      	subs	r2, #48	@ 0x30
 80082ae:	2a09      	cmp	r2, #9
 80082b0:	d903      	bls.n	80082ba <_svfiprintf_r+0x1a6>
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d0c6      	beq.n	8008244 <_svfiprintf_r+0x130>
 80082b6:	9105      	str	r1, [sp, #20]
 80082b8:	e7c4      	b.n	8008244 <_svfiprintf_r+0x130>
 80082ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80082be:	4604      	mov	r4, r0
 80082c0:	2301      	movs	r3, #1
 80082c2:	e7f0      	b.n	80082a6 <_svfiprintf_r+0x192>
 80082c4:	ab03      	add	r3, sp, #12
 80082c6:	9300      	str	r3, [sp, #0]
 80082c8:	462a      	mov	r2, r5
 80082ca:	4b0e      	ldr	r3, [pc, #56]	@ (8008304 <_svfiprintf_r+0x1f0>)
 80082cc:	a904      	add	r1, sp, #16
 80082ce:	4638      	mov	r0, r7
 80082d0:	f7fc fccc 	bl	8004c6c <_printf_float>
 80082d4:	1c42      	adds	r2, r0, #1
 80082d6:	4606      	mov	r6, r0
 80082d8:	d1d6      	bne.n	8008288 <_svfiprintf_r+0x174>
 80082da:	89ab      	ldrh	r3, [r5, #12]
 80082dc:	065b      	lsls	r3, r3, #25
 80082de:	f53f af2d 	bmi.w	800813c <_svfiprintf_r+0x28>
 80082e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80082e4:	e72c      	b.n	8008140 <_svfiprintf_r+0x2c>
 80082e6:	ab03      	add	r3, sp, #12
 80082e8:	9300      	str	r3, [sp, #0]
 80082ea:	462a      	mov	r2, r5
 80082ec:	4b05      	ldr	r3, [pc, #20]	@ (8008304 <_svfiprintf_r+0x1f0>)
 80082ee:	a904      	add	r1, sp, #16
 80082f0:	4638      	mov	r0, r7
 80082f2:	f7fc ff53 	bl	800519c <_printf_i>
 80082f6:	e7ed      	b.n	80082d4 <_svfiprintf_r+0x1c0>
 80082f8:	0800947d 	.word	0x0800947d
 80082fc:	08009487 	.word	0x08009487
 8008300:	08004c6d 	.word	0x08004c6d
 8008304:	0800805d 	.word	0x0800805d
 8008308:	08009483 	.word	0x08009483

0800830c <__sflush_r>:
 800830c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008314:	0716      	lsls	r6, r2, #28
 8008316:	4605      	mov	r5, r0
 8008318:	460c      	mov	r4, r1
 800831a:	d454      	bmi.n	80083c6 <__sflush_r+0xba>
 800831c:	684b      	ldr	r3, [r1, #4]
 800831e:	2b00      	cmp	r3, #0
 8008320:	dc02      	bgt.n	8008328 <__sflush_r+0x1c>
 8008322:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008324:	2b00      	cmp	r3, #0
 8008326:	dd48      	ble.n	80083ba <__sflush_r+0xae>
 8008328:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800832a:	2e00      	cmp	r6, #0
 800832c:	d045      	beq.n	80083ba <__sflush_r+0xae>
 800832e:	2300      	movs	r3, #0
 8008330:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008334:	682f      	ldr	r7, [r5, #0]
 8008336:	6a21      	ldr	r1, [r4, #32]
 8008338:	602b      	str	r3, [r5, #0]
 800833a:	d030      	beq.n	800839e <__sflush_r+0x92>
 800833c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800833e:	89a3      	ldrh	r3, [r4, #12]
 8008340:	0759      	lsls	r1, r3, #29
 8008342:	d505      	bpl.n	8008350 <__sflush_r+0x44>
 8008344:	6863      	ldr	r3, [r4, #4]
 8008346:	1ad2      	subs	r2, r2, r3
 8008348:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800834a:	b10b      	cbz	r3, 8008350 <__sflush_r+0x44>
 800834c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800834e:	1ad2      	subs	r2, r2, r3
 8008350:	2300      	movs	r3, #0
 8008352:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008354:	6a21      	ldr	r1, [r4, #32]
 8008356:	4628      	mov	r0, r5
 8008358:	47b0      	blx	r6
 800835a:	1c43      	adds	r3, r0, #1
 800835c:	89a3      	ldrh	r3, [r4, #12]
 800835e:	d106      	bne.n	800836e <__sflush_r+0x62>
 8008360:	6829      	ldr	r1, [r5, #0]
 8008362:	291d      	cmp	r1, #29
 8008364:	d82b      	bhi.n	80083be <__sflush_r+0xb2>
 8008366:	4a2a      	ldr	r2, [pc, #168]	@ (8008410 <__sflush_r+0x104>)
 8008368:	40ca      	lsrs	r2, r1
 800836a:	07d6      	lsls	r6, r2, #31
 800836c:	d527      	bpl.n	80083be <__sflush_r+0xb2>
 800836e:	2200      	movs	r2, #0
 8008370:	6062      	str	r2, [r4, #4]
 8008372:	04d9      	lsls	r1, r3, #19
 8008374:	6922      	ldr	r2, [r4, #16]
 8008376:	6022      	str	r2, [r4, #0]
 8008378:	d504      	bpl.n	8008384 <__sflush_r+0x78>
 800837a:	1c42      	adds	r2, r0, #1
 800837c:	d101      	bne.n	8008382 <__sflush_r+0x76>
 800837e:	682b      	ldr	r3, [r5, #0]
 8008380:	b903      	cbnz	r3, 8008384 <__sflush_r+0x78>
 8008382:	6560      	str	r0, [r4, #84]	@ 0x54
 8008384:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008386:	602f      	str	r7, [r5, #0]
 8008388:	b1b9      	cbz	r1, 80083ba <__sflush_r+0xae>
 800838a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800838e:	4299      	cmp	r1, r3
 8008390:	d002      	beq.n	8008398 <__sflush_r+0x8c>
 8008392:	4628      	mov	r0, r5
 8008394:	f7fe fa34 	bl	8006800 <_free_r>
 8008398:	2300      	movs	r3, #0
 800839a:	6363      	str	r3, [r4, #52]	@ 0x34
 800839c:	e00d      	b.n	80083ba <__sflush_r+0xae>
 800839e:	2301      	movs	r3, #1
 80083a0:	4628      	mov	r0, r5
 80083a2:	47b0      	blx	r6
 80083a4:	4602      	mov	r2, r0
 80083a6:	1c50      	adds	r0, r2, #1
 80083a8:	d1c9      	bne.n	800833e <__sflush_r+0x32>
 80083aa:	682b      	ldr	r3, [r5, #0]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d0c6      	beq.n	800833e <__sflush_r+0x32>
 80083b0:	2b1d      	cmp	r3, #29
 80083b2:	d001      	beq.n	80083b8 <__sflush_r+0xac>
 80083b4:	2b16      	cmp	r3, #22
 80083b6:	d11e      	bne.n	80083f6 <__sflush_r+0xea>
 80083b8:	602f      	str	r7, [r5, #0]
 80083ba:	2000      	movs	r0, #0
 80083bc:	e022      	b.n	8008404 <__sflush_r+0xf8>
 80083be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083c2:	b21b      	sxth	r3, r3
 80083c4:	e01b      	b.n	80083fe <__sflush_r+0xf2>
 80083c6:	690f      	ldr	r7, [r1, #16]
 80083c8:	2f00      	cmp	r7, #0
 80083ca:	d0f6      	beq.n	80083ba <__sflush_r+0xae>
 80083cc:	0793      	lsls	r3, r2, #30
 80083ce:	680e      	ldr	r6, [r1, #0]
 80083d0:	bf08      	it	eq
 80083d2:	694b      	ldreq	r3, [r1, #20]
 80083d4:	600f      	str	r7, [r1, #0]
 80083d6:	bf18      	it	ne
 80083d8:	2300      	movne	r3, #0
 80083da:	eba6 0807 	sub.w	r8, r6, r7
 80083de:	608b      	str	r3, [r1, #8]
 80083e0:	f1b8 0f00 	cmp.w	r8, #0
 80083e4:	dde9      	ble.n	80083ba <__sflush_r+0xae>
 80083e6:	6a21      	ldr	r1, [r4, #32]
 80083e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80083ea:	4643      	mov	r3, r8
 80083ec:	463a      	mov	r2, r7
 80083ee:	4628      	mov	r0, r5
 80083f0:	47b0      	blx	r6
 80083f2:	2800      	cmp	r0, #0
 80083f4:	dc08      	bgt.n	8008408 <__sflush_r+0xfc>
 80083f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083fe:	81a3      	strh	r3, [r4, #12]
 8008400:	f04f 30ff 	mov.w	r0, #4294967295
 8008404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008408:	4407      	add	r7, r0
 800840a:	eba8 0800 	sub.w	r8, r8, r0
 800840e:	e7e7      	b.n	80083e0 <__sflush_r+0xd4>
 8008410:	20400001 	.word	0x20400001

08008414 <_fflush_r>:
 8008414:	b538      	push	{r3, r4, r5, lr}
 8008416:	690b      	ldr	r3, [r1, #16]
 8008418:	4605      	mov	r5, r0
 800841a:	460c      	mov	r4, r1
 800841c:	b913      	cbnz	r3, 8008424 <_fflush_r+0x10>
 800841e:	2500      	movs	r5, #0
 8008420:	4628      	mov	r0, r5
 8008422:	bd38      	pop	{r3, r4, r5, pc}
 8008424:	b118      	cbz	r0, 800842e <_fflush_r+0x1a>
 8008426:	6a03      	ldr	r3, [r0, #32]
 8008428:	b90b      	cbnz	r3, 800842e <_fflush_r+0x1a>
 800842a:	f7fd fa6f 	bl	800590c <__sinit>
 800842e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d0f3      	beq.n	800841e <_fflush_r+0xa>
 8008436:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008438:	07d0      	lsls	r0, r2, #31
 800843a:	d404      	bmi.n	8008446 <_fflush_r+0x32>
 800843c:	0599      	lsls	r1, r3, #22
 800843e:	d402      	bmi.n	8008446 <_fflush_r+0x32>
 8008440:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008442:	f7fd fb7c 	bl	8005b3e <__retarget_lock_acquire_recursive>
 8008446:	4628      	mov	r0, r5
 8008448:	4621      	mov	r1, r4
 800844a:	f7ff ff5f 	bl	800830c <__sflush_r>
 800844e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008450:	07da      	lsls	r2, r3, #31
 8008452:	4605      	mov	r5, r0
 8008454:	d4e4      	bmi.n	8008420 <_fflush_r+0xc>
 8008456:	89a3      	ldrh	r3, [r4, #12]
 8008458:	059b      	lsls	r3, r3, #22
 800845a:	d4e1      	bmi.n	8008420 <_fflush_r+0xc>
 800845c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800845e:	f7fd fb6f 	bl	8005b40 <__retarget_lock_release_recursive>
 8008462:	e7dd      	b.n	8008420 <_fflush_r+0xc>

08008464 <memmove>:
 8008464:	4288      	cmp	r0, r1
 8008466:	b510      	push	{r4, lr}
 8008468:	eb01 0402 	add.w	r4, r1, r2
 800846c:	d902      	bls.n	8008474 <memmove+0x10>
 800846e:	4284      	cmp	r4, r0
 8008470:	4623      	mov	r3, r4
 8008472:	d807      	bhi.n	8008484 <memmove+0x20>
 8008474:	1e43      	subs	r3, r0, #1
 8008476:	42a1      	cmp	r1, r4
 8008478:	d008      	beq.n	800848c <memmove+0x28>
 800847a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800847e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008482:	e7f8      	b.n	8008476 <memmove+0x12>
 8008484:	4402      	add	r2, r0
 8008486:	4601      	mov	r1, r0
 8008488:	428a      	cmp	r2, r1
 800848a:	d100      	bne.n	800848e <memmove+0x2a>
 800848c:	bd10      	pop	{r4, pc}
 800848e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008492:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008496:	e7f7      	b.n	8008488 <memmove+0x24>

08008498 <strncmp>:
 8008498:	b510      	push	{r4, lr}
 800849a:	b16a      	cbz	r2, 80084b8 <strncmp+0x20>
 800849c:	3901      	subs	r1, #1
 800849e:	1884      	adds	r4, r0, r2
 80084a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084a4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80084a8:	429a      	cmp	r2, r3
 80084aa:	d103      	bne.n	80084b4 <strncmp+0x1c>
 80084ac:	42a0      	cmp	r0, r4
 80084ae:	d001      	beq.n	80084b4 <strncmp+0x1c>
 80084b0:	2a00      	cmp	r2, #0
 80084b2:	d1f5      	bne.n	80084a0 <strncmp+0x8>
 80084b4:	1ad0      	subs	r0, r2, r3
 80084b6:	bd10      	pop	{r4, pc}
 80084b8:	4610      	mov	r0, r2
 80084ba:	e7fc      	b.n	80084b6 <strncmp+0x1e>

080084bc <_sbrk_r>:
 80084bc:	b538      	push	{r3, r4, r5, lr}
 80084be:	4d06      	ldr	r5, [pc, #24]	@ (80084d8 <_sbrk_r+0x1c>)
 80084c0:	2300      	movs	r3, #0
 80084c2:	4604      	mov	r4, r0
 80084c4:	4608      	mov	r0, r1
 80084c6:	602b      	str	r3, [r5, #0]
 80084c8:	f7f9 f9a2 	bl	8001810 <_sbrk>
 80084cc:	1c43      	adds	r3, r0, #1
 80084ce:	d102      	bne.n	80084d6 <_sbrk_r+0x1a>
 80084d0:	682b      	ldr	r3, [r5, #0]
 80084d2:	b103      	cbz	r3, 80084d6 <_sbrk_r+0x1a>
 80084d4:	6023      	str	r3, [r4, #0]
 80084d6:	bd38      	pop	{r3, r4, r5, pc}
 80084d8:	20000490 	.word	0x20000490

080084dc <memcpy>:
 80084dc:	440a      	add	r2, r1
 80084de:	4291      	cmp	r1, r2
 80084e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80084e4:	d100      	bne.n	80084e8 <memcpy+0xc>
 80084e6:	4770      	bx	lr
 80084e8:	b510      	push	{r4, lr}
 80084ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084f2:	4291      	cmp	r1, r2
 80084f4:	d1f9      	bne.n	80084ea <memcpy+0xe>
 80084f6:	bd10      	pop	{r4, pc}

080084f8 <nan>:
 80084f8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008500 <nan+0x8>
 80084fc:	4770      	bx	lr
 80084fe:	bf00      	nop
 8008500:	00000000 	.word	0x00000000
 8008504:	7ff80000 	.word	0x7ff80000

08008508 <__assert_func>:
 8008508:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800850a:	4614      	mov	r4, r2
 800850c:	461a      	mov	r2, r3
 800850e:	4b09      	ldr	r3, [pc, #36]	@ (8008534 <__assert_func+0x2c>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4605      	mov	r5, r0
 8008514:	68d8      	ldr	r0, [r3, #12]
 8008516:	b14c      	cbz	r4, 800852c <__assert_func+0x24>
 8008518:	4b07      	ldr	r3, [pc, #28]	@ (8008538 <__assert_func+0x30>)
 800851a:	9100      	str	r1, [sp, #0]
 800851c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008520:	4906      	ldr	r1, [pc, #24]	@ (800853c <__assert_func+0x34>)
 8008522:	462b      	mov	r3, r5
 8008524:	f000 fba8 	bl	8008c78 <fiprintf>
 8008528:	f000 fbb8 	bl	8008c9c <abort>
 800852c:	4b04      	ldr	r3, [pc, #16]	@ (8008540 <__assert_func+0x38>)
 800852e:	461c      	mov	r4, r3
 8008530:	e7f3      	b.n	800851a <__assert_func+0x12>
 8008532:	bf00      	nop
 8008534:	20000018 	.word	0x20000018
 8008538:	08009496 	.word	0x08009496
 800853c:	080094a3 	.word	0x080094a3
 8008540:	080094d1 	.word	0x080094d1

08008544 <_calloc_r>:
 8008544:	b570      	push	{r4, r5, r6, lr}
 8008546:	fba1 5402 	umull	r5, r4, r1, r2
 800854a:	b934      	cbnz	r4, 800855a <_calloc_r+0x16>
 800854c:	4629      	mov	r1, r5
 800854e:	f7fe f9cb 	bl	80068e8 <_malloc_r>
 8008552:	4606      	mov	r6, r0
 8008554:	b928      	cbnz	r0, 8008562 <_calloc_r+0x1e>
 8008556:	4630      	mov	r0, r6
 8008558:	bd70      	pop	{r4, r5, r6, pc}
 800855a:	220c      	movs	r2, #12
 800855c:	6002      	str	r2, [r0, #0]
 800855e:	2600      	movs	r6, #0
 8008560:	e7f9      	b.n	8008556 <_calloc_r+0x12>
 8008562:	462a      	mov	r2, r5
 8008564:	4621      	mov	r1, r4
 8008566:	f7fd fa6c 	bl	8005a42 <memset>
 800856a:	e7f4      	b.n	8008556 <_calloc_r+0x12>

0800856c <rshift>:
 800856c:	6903      	ldr	r3, [r0, #16]
 800856e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008572:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008576:	ea4f 1261 	mov.w	r2, r1, asr #5
 800857a:	f100 0414 	add.w	r4, r0, #20
 800857e:	dd45      	ble.n	800860c <rshift+0xa0>
 8008580:	f011 011f 	ands.w	r1, r1, #31
 8008584:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008588:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800858c:	d10c      	bne.n	80085a8 <rshift+0x3c>
 800858e:	f100 0710 	add.w	r7, r0, #16
 8008592:	4629      	mov	r1, r5
 8008594:	42b1      	cmp	r1, r6
 8008596:	d334      	bcc.n	8008602 <rshift+0x96>
 8008598:	1a9b      	subs	r3, r3, r2
 800859a:	009b      	lsls	r3, r3, #2
 800859c:	1eea      	subs	r2, r5, #3
 800859e:	4296      	cmp	r6, r2
 80085a0:	bf38      	it	cc
 80085a2:	2300      	movcc	r3, #0
 80085a4:	4423      	add	r3, r4
 80085a6:	e015      	b.n	80085d4 <rshift+0x68>
 80085a8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80085ac:	f1c1 0820 	rsb	r8, r1, #32
 80085b0:	40cf      	lsrs	r7, r1
 80085b2:	f105 0e04 	add.w	lr, r5, #4
 80085b6:	46a1      	mov	r9, r4
 80085b8:	4576      	cmp	r6, lr
 80085ba:	46f4      	mov	ip, lr
 80085bc:	d815      	bhi.n	80085ea <rshift+0x7e>
 80085be:	1a9a      	subs	r2, r3, r2
 80085c0:	0092      	lsls	r2, r2, #2
 80085c2:	3a04      	subs	r2, #4
 80085c4:	3501      	adds	r5, #1
 80085c6:	42ae      	cmp	r6, r5
 80085c8:	bf38      	it	cc
 80085ca:	2200      	movcc	r2, #0
 80085cc:	18a3      	adds	r3, r4, r2
 80085ce:	50a7      	str	r7, [r4, r2]
 80085d0:	b107      	cbz	r7, 80085d4 <rshift+0x68>
 80085d2:	3304      	adds	r3, #4
 80085d4:	1b1a      	subs	r2, r3, r4
 80085d6:	42a3      	cmp	r3, r4
 80085d8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80085dc:	bf08      	it	eq
 80085de:	2300      	moveq	r3, #0
 80085e0:	6102      	str	r2, [r0, #16]
 80085e2:	bf08      	it	eq
 80085e4:	6143      	streq	r3, [r0, #20]
 80085e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80085ea:	f8dc c000 	ldr.w	ip, [ip]
 80085ee:	fa0c fc08 	lsl.w	ip, ip, r8
 80085f2:	ea4c 0707 	orr.w	r7, ip, r7
 80085f6:	f849 7b04 	str.w	r7, [r9], #4
 80085fa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80085fe:	40cf      	lsrs	r7, r1
 8008600:	e7da      	b.n	80085b8 <rshift+0x4c>
 8008602:	f851 cb04 	ldr.w	ip, [r1], #4
 8008606:	f847 cf04 	str.w	ip, [r7, #4]!
 800860a:	e7c3      	b.n	8008594 <rshift+0x28>
 800860c:	4623      	mov	r3, r4
 800860e:	e7e1      	b.n	80085d4 <rshift+0x68>

08008610 <__hexdig_fun>:
 8008610:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008614:	2b09      	cmp	r3, #9
 8008616:	d802      	bhi.n	800861e <__hexdig_fun+0xe>
 8008618:	3820      	subs	r0, #32
 800861a:	b2c0      	uxtb	r0, r0
 800861c:	4770      	bx	lr
 800861e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008622:	2b05      	cmp	r3, #5
 8008624:	d801      	bhi.n	800862a <__hexdig_fun+0x1a>
 8008626:	3847      	subs	r0, #71	@ 0x47
 8008628:	e7f7      	b.n	800861a <__hexdig_fun+0xa>
 800862a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800862e:	2b05      	cmp	r3, #5
 8008630:	d801      	bhi.n	8008636 <__hexdig_fun+0x26>
 8008632:	3827      	subs	r0, #39	@ 0x27
 8008634:	e7f1      	b.n	800861a <__hexdig_fun+0xa>
 8008636:	2000      	movs	r0, #0
 8008638:	4770      	bx	lr
	...

0800863c <__gethex>:
 800863c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008640:	b085      	sub	sp, #20
 8008642:	468a      	mov	sl, r1
 8008644:	9302      	str	r3, [sp, #8]
 8008646:	680b      	ldr	r3, [r1, #0]
 8008648:	9001      	str	r0, [sp, #4]
 800864a:	4690      	mov	r8, r2
 800864c:	1c9c      	adds	r4, r3, #2
 800864e:	46a1      	mov	r9, r4
 8008650:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008654:	2830      	cmp	r0, #48	@ 0x30
 8008656:	d0fa      	beq.n	800864e <__gethex+0x12>
 8008658:	eba9 0303 	sub.w	r3, r9, r3
 800865c:	f1a3 0b02 	sub.w	fp, r3, #2
 8008660:	f7ff ffd6 	bl	8008610 <__hexdig_fun>
 8008664:	4605      	mov	r5, r0
 8008666:	2800      	cmp	r0, #0
 8008668:	d168      	bne.n	800873c <__gethex+0x100>
 800866a:	49a0      	ldr	r1, [pc, #640]	@ (80088ec <__gethex+0x2b0>)
 800866c:	2201      	movs	r2, #1
 800866e:	4648      	mov	r0, r9
 8008670:	f7ff ff12 	bl	8008498 <strncmp>
 8008674:	4607      	mov	r7, r0
 8008676:	2800      	cmp	r0, #0
 8008678:	d167      	bne.n	800874a <__gethex+0x10e>
 800867a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800867e:	4626      	mov	r6, r4
 8008680:	f7ff ffc6 	bl	8008610 <__hexdig_fun>
 8008684:	2800      	cmp	r0, #0
 8008686:	d062      	beq.n	800874e <__gethex+0x112>
 8008688:	4623      	mov	r3, r4
 800868a:	7818      	ldrb	r0, [r3, #0]
 800868c:	2830      	cmp	r0, #48	@ 0x30
 800868e:	4699      	mov	r9, r3
 8008690:	f103 0301 	add.w	r3, r3, #1
 8008694:	d0f9      	beq.n	800868a <__gethex+0x4e>
 8008696:	f7ff ffbb 	bl	8008610 <__hexdig_fun>
 800869a:	fab0 f580 	clz	r5, r0
 800869e:	096d      	lsrs	r5, r5, #5
 80086a0:	f04f 0b01 	mov.w	fp, #1
 80086a4:	464a      	mov	r2, r9
 80086a6:	4616      	mov	r6, r2
 80086a8:	3201      	adds	r2, #1
 80086aa:	7830      	ldrb	r0, [r6, #0]
 80086ac:	f7ff ffb0 	bl	8008610 <__hexdig_fun>
 80086b0:	2800      	cmp	r0, #0
 80086b2:	d1f8      	bne.n	80086a6 <__gethex+0x6a>
 80086b4:	498d      	ldr	r1, [pc, #564]	@ (80088ec <__gethex+0x2b0>)
 80086b6:	2201      	movs	r2, #1
 80086b8:	4630      	mov	r0, r6
 80086ba:	f7ff feed 	bl	8008498 <strncmp>
 80086be:	2800      	cmp	r0, #0
 80086c0:	d13f      	bne.n	8008742 <__gethex+0x106>
 80086c2:	b944      	cbnz	r4, 80086d6 <__gethex+0x9a>
 80086c4:	1c74      	adds	r4, r6, #1
 80086c6:	4622      	mov	r2, r4
 80086c8:	4616      	mov	r6, r2
 80086ca:	3201      	adds	r2, #1
 80086cc:	7830      	ldrb	r0, [r6, #0]
 80086ce:	f7ff ff9f 	bl	8008610 <__hexdig_fun>
 80086d2:	2800      	cmp	r0, #0
 80086d4:	d1f8      	bne.n	80086c8 <__gethex+0x8c>
 80086d6:	1ba4      	subs	r4, r4, r6
 80086d8:	00a7      	lsls	r7, r4, #2
 80086da:	7833      	ldrb	r3, [r6, #0]
 80086dc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80086e0:	2b50      	cmp	r3, #80	@ 0x50
 80086e2:	d13e      	bne.n	8008762 <__gethex+0x126>
 80086e4:	7873      	ldrb	r3, [r6, #1]
 80086e6:	2b2b      	cmp	r3, #43	@ 0x2b
 80086e8:	d033      	beq.n	8008752 <__gethex+0x116>
 80086ea:	2b2d      	cmp	r3, #45	@ 0x2d
 80086ec:	d034      	beq.n	8008758 <__gethex+0x11c>
 80086ee:	1c71      	adds	r1, r6, #1
 80086f0:	2400      	movs	r4, #0
 80086f2:	7808      	ldrb	r0, [r1, #0]
 80086f4:	f7ff ff8c 	bl	8008610 <__hexdig_fun>
 80086f8:	1e43      	subs	r3, r0, #1
 80086fa:	b2db      	uxtb	r3, r3
 80086fc:	2b18      	cmp	r3, #24
 80086fe:	d830      	bhi.n	8008762 <__gethex+0x126>
 8008700:	f1a0 0210 	sub.w	r2, r0, #16
 8008704:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008708:	f7ff ff82 	bl	8008610 <__hexdig_fun>
 800870c:	f100 3cff 	add.w	ip, r0, #4294967295
 8008710:	fa5f fc8c 	uxtb.w	ip, ip
 8008714:	f1bc 0f18 	cmp.w	ip, #24
 8008718:	f04f 030a 	mov.w	r3, #10
 800871c:	d91e      	bls.n	800875c <__gethex+0x120>
 800871e:	b104      	cbz	r4, 8008722 <__gethex+0xe6>
 8008720:	4252      	negs	r2, r2
 8008722:	4417      	add	r7, r2
 8008724:	f8ca 1000 	str.w	r1, [sl]
 8008728:	b1ed      	cbz	r5, 8008766 <__gethex+0x12a>
 800872a:	f1bb 0f00 	cmp.w	fp, #0
 800872e:	bf0c      	ite	eq
 8008730:	2506      	moveq	r5, #6
 8008732:	2500      	movne	r5, #0
 8008734:	4628      	mov	r0, r5
 8008736:	b005      	add	sp, #20
 8008738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800873c:	2500      	movs	r5, #0
 800873e:	462c      	mov	r4, r5
 8008740:	e7b0      	b.n	80086a4 <__gethex+0x68>
 8008742:	2c00      	cmp	r4, #0
 8008744:	d1c7      	bne.n	80086d6 <__gethex+0x9a>
 8008746:	4627      	mov	r7, r4
 8008748:	e7c7      	b.n	80086da <__gethex+0x9e>
 800874a:	464e      	mov	r6, r9
 800874c:	462f      	mov	r7, r5
 800874e:	2501      	movs	r5, #1
 8008750:	e7c3      	b.n	80086da <__gethex+0x9e>
 8008752:	2400      	movs	r4, #0
 8008754:	1cb1      	adds	r1, r6, #2
 8008756:	e7cc      	b.n	80086f2 <__gethex+0xb6>
 8008758:	2401      	movs	r4, #1
 800875a:	e7fb      	b.n	8008754 <__gethex+0x118>
 800875c:	fb03 0002 	mla	r0, r3, r2, r0
 8008760:	e7ce      	b.n	8008700 <__gethex+0xc4>
 8008762:	4631      	mov	r1, r6
 8008764:	e7de      	b.n	8008724 <__gethex+0xe8>
 8008766:	eba6 0309 	sub.w	r3, r6, r9
 800876a:	3b01      	subs	r3, #1
 800876c:	4629      	mov	r1, r5
 800876e:	2b07      	cmp	r3, #7
 8008770:	dc0a      	bgt.n	8008788 <__gethex+0x14c>
 8008772:	9801      	ldr	r0, [sp, #4]
 8008774:	f7fe f944 	bl	8006a00 <_Balloc>
 8008778:	4604      	mov	r4, r0
 800877a:	b940      	cbnz	r0, 800878e <__gethex+0x152>
 800877c:	4b5c      	ldr	r3, [pc, #368]	@ (80088f0 <__gethex+0x2b4>)
 800877e:	4602      	mov	r2, r0
 8008780:	21e4      	movs	r1, #228	@ 0xe4
 8008782:	485c      	ldr	r0, [pc, #368]	@ (80088f4 <__gethex+0x2b8>)
 8008784:	f7ff fec0 	bl	8008508 <__assert_func>
 8008788:	3101      	adds	r1, #1
 800878a:	105b      	asrs	r3, r3, #1
 800878c:	e7ef      	b.n	800876e <__gethex+0x132>
 800878e:	f100 0a14 	add.w	sl, r0, #20
 8008792:	2300      	movs	r3, #0
 8008794:	4655      	mov	r5, sl
 8008796:	469b      	mov	fp, r3
 8008798:	45b1      	cmp	r9, r6
 800879a:	d337      	bcc.n	800880c <__gethex+0x1d0>
 800879c:	f845 bb04 	str.w	fp, [r5], #4
 80087a0:	eba5 050a 	sub.w	r5, r5, sl
 80087a4:	10ad      	asrs	r5, r5, #2
 80087a6:	6125      	str	r5, [r4, #16]
 80087a8:	4658      	mov	r0, fp
 80087aa:	f7fe fa1b 	bl	8006be4 <__hi0bits>
 80087ae:	016d      	lsls	r5, r5, #5
 80087b0:	f8d8 6000 	ldr.w	r6, [r8]
 80087b4:	1a2d      	subs	r5, r5, r0
 80087b6:	42b5      	cmp	r5, r6
 80087b8:	dd54      	ble.n	8008864 <__gethex+0x228>
 80087ba:	1bad      	subs	r5, r5, r6
 80087bc:	4629      	mov	r1, r5
 80087be:	4620      	mov	r0, r4
 80087c0:	f7fe fda7 	bl	8007312 <__any_on>
 80087c4:	4681      	mov	r9, r0
 80087c6:	b178      	cbz	r0, 80087e8 <__gethex+0x1ac>
 80087c8:	1e6b      	subs	r3, r5, #1
 80087ca:	1159      	asrs	r1, r3, #5
 80087cc:	f003 021f 	and.w	r2, r3, #31
 80087d0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80087d4:	f04f 0901 	mov.w	r9, #1
 80087d8:	fa09 f202 	lsl.w	r2, r9, r2
 80087dc:	420a      	tst	r2, r1
 80087de:	d003      	beq.n	80087e8 <__gethex+0x1ac>
 80087e0:	454b      	cmp	r3, r9
 80087e2:	dc36      	bgt.n	8008852 <__gethex+0x216>
 80087e4:	f04f 0902 	mov.w	r9, #2
 80087e8:	4629      	mov	r1, r5
 80087ea:	4620      	mov	r0, r4
 80087ec:	f7ff febe 	bl	800856c <rshift>
 80087f0:	442f      	add	r7, r5
 80087f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80087f6:	42bb      	cmp	r3, r7
 80087f8:	da42      	bge.n	8008880 <__gethex+0x244>
 80087fa:	9801      	ldr	r0, [sp, #4]
 80087fc:	4621      	mov	r1, r4
 80087fe:	f7fe f93f 	bl	8006a80 <_Bfree>
 8008802:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008804:	2300      	movs	r3, #0
 8008806:	6013      	str	r3, [r2, #0]
 8008808:	25a3      	movs	r5, #163	@ 0xa3
 800880a:	e793      	b.n	8008734 <__gethex+0xf8>
 800880c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008810:	2a2e      	cmp	r2, #46	@ 0x2e
 8008812:	d012      	beq.n	800883a <__gethex+0x1fe>
 8008814:	2b20      	cmp	r3, #32
 8008816:	d104      	bne.n	8008822 <__gethex+0x1e6>
 8008818:	f845 bb04 	str.w	fp, [r5], #4
 800881c:	f04f 0b00 	mov.w	fp, #0
 8008820:	465b      	mov	r3, fp
 8008822:	7830      	ldrb	r0, [r6, #0]
 8008824:	9303      	str	r3, [sp, #12]
 8008826:	f7ff fef3 	bl	8008610 <__hexdig_fun>
 800882a:	9b03      	ldr	r3, [sp, #12]
 800882c:	f000 000f 	and.w	r0, r0, #15
 8008830:	4098      	lsls	r0, r3
 8008832:	ea4b 0b00 	orr.w	fp, fp, r0
 8008836:	3304      	adds	r3, #4
 8008838:	e7ae      	b.n	8008798 <__gethex+0x15c>
 800883a:	45b1      	cmp	r9, r6
 800883c:	d8ea      	bhi.n	8008814 <__gethex+0x1d8>
 800883e:	492b      	ldr	r1, [pc, #172]	@ (80088ec <__gethex+0x2b0>)
 8008840:	9303      	str	r3, [sp, #12]
 8008842:	2201      	movs	r2, #1
 8008844:	4630      	mov	r0, r6
 8008846:	f7ff fe27 	bl	8008498 <strncmp>
 800884a:	9b03      	ldr	r3, [sp, #12]
 800884c:	2800      	cmp	r0, #0
 800884e:	d1e1      	bne.n	8008814 <__gethex+0x1d8>
 8008850:	e7a2      	b.n	8008798 <__gethex+0x15c>
 8008852:	1ea9      	subs	r1, r5, #2
 8008854:	4620      	mov	r0, r4
 8008856:	f7fe fd5c 	bl	8007312 <__any_on>
 800885a:	2800      	cmp	r0, #0
 800885c:	d0c2      	beq.n	80087e4 <__gethex+0x1a8>
 800885e:	f04f 0903 	mov.w	r9, #3
 8008862:	e7c1      	b.n	80087e8 <__gethex+0x1ac>
 8008864:	da09      	bge.n	800887a <__gethex+0x23e>
 8008866:	1b75      	subs	r5, r6, r5
 8008868:	4621      	mov	r1, r4
 800886a:	9801      	ldr	r0, [sp, #4]
 800886c:	462a      	mov	r2, r5
 800886e:	f7fe fb17 	bl	8006ea0 <__lshift>
 8008872:	1b7f      	subs	r7, r7, r5
 8008874:	4604      	mov	r4, r0
 8008876:	f100 0a14 	add.w	sl, r0, #20
 800887a:	f04f 0900 	mov.w	r9, #0
 800887e:	e7b8      	b.n	80087f2 <__gethex+0x1b6>
 8008880:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008884:	42bd      	cmp	r5, r7
 8008886:	dd6f      	ble.n	8008968 <__gethex+0x32c>
 8008888:	1bed      	subs	r5, r5, r7
 800888a:	42ae      	cmp	r6, r5
 800888c:	dc34      	bgt.n	80088f8 <__gethex+0x2bc>
 800888e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008892:	2b02      	cmp	r3, #2
 8008894:	d022      	beq.n	80088dc <__gethex+0x2a0>
 8008896:	2b03      	cmp	r3, #3
 8008898:	d024      	beq.n	80088e4 <__gethex+0x2a8>
 800889a:	2b01      	cmp	r3, #1
 800889c:	d115      	bne.n	80088ca <__gethex+0x28e>
 800889e:	42ae      	cmp	r6, r5
 80088a0:	d113      	bne.n	80088ca <__gethex+0x28e>
 80088a2:	2e01      	cmp	r6, #1
 80088a4:	d10b      	bne.n	80088be <__gethex+0x282>
 80088a6:	9a02      	ldr	r2, [sp, #8]
 80088a8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80088ac:	6013      	str	r3, [r2, #0]
 80088ae:	2301      	movs	r3, #1
 80088b0:	6123      	str	r3, [r4, #16]
 80088b2:	f8ca 3000 	str.w	r3, [sl]
 80088b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80088b8:	2562      	movs	r5, #98	@ 0x62
 80088ba:	601c      	str	r4, [r3, #0]
 80088bc:	e73a      	b.n	8008734 <__gethex+0xf8>
 80088be:	1e71      	subs	r1, r6, #1
 80088c0:	4620      	mov	r0, r4
 80088c2:	f7fe fd26 	bl	8007312 <__any_on>
 80088c6:	2800      	cmp	r0, #0
 80088c8:	d1ed      	bne.n	80088a6 <__gethex+0x26a>
 80088ca:	9801      	ldr	r0, [sp, #4]
 80088cc:	4621      	mov	r1, r4
 80088ce:	f7fe f8d7 	bl	8006a80 <_Bfree>
 80088d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80088d4:	2300      	movs	r3, #0
 80088d6:	6013      	str	r3, [r2, #0]
 80088d8:	2550      	movs	r5, #80	@ 0x50
 80088da:	e72b      	b.n	8008734 <__gethex+0xf8>
 80088dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d1f3      	bne.n	80088ca <__gethex+0x28e>
 80088e2:	e7e0      	b.n	80088a6 <__gethex+0x26a>
 80088e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d1dd      	bne.n	80088a6 <__gethex+0x26a>
 80088ea:	e7ee      	b.n	80088ca <__gethex+0x28e>
 80088ec:	0800947b 	.word	0x0800947b
 80088f0:	08009411 	.word	0x08009411
 80088f4:	080094d2 	.word	0x080094d2
 80088f8:	1e6f      	subs	r7, r5, #1
 80088fa:	f1b9 0f00 	cmp.w	r9, #0
 80088fe:	d130      	bne.n	8008962 <__gethex+0x326>
 8008900:	b127      	cbz	r7, 800890c <__gethex+0x2d0>
 8008902:	4639      	mov	r1, r7
 8008904:	4620      	mov	r0, r4
 8008906:	f7fe fd04 	bl	8007312 <__any_on>
 800890a:	4681      	mov	r9, r0
 800890c:	117a      	asrs	r2, r7, #5
 800890e:	2301      	movs	r3, #1
 8008910:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008914:	f007 071f 	and.w	r7, r7, #31
 8008918:	40bb      	lsls	r3, r7
 800891a:	4213      	tst	r3, r2
 800891c:	4629      	mov	r1, r5
 800891e:	4620      	mov	r0, r4
 8008920:	bf18      	it	ne
 8008922:	f049 0902 	orrne.w	r9, r9, #2
 8008926:	f7ff fe21 	bl	800856c <rshift>
 800892a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800892e:	1b76      	subs	r6, r6, r5
 8008930:	2502      	movs	r5, #2
 8008932:	f1b9 0f00 	cmp.w	r9, #0
 8008936:	d047      	beq.n	80089c8 <__gethex+0x38c>
 8008938:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800893c:	2b02      	cmp	r3, #2
 800893e:	d015      	beq.n	800896c <__gethex+0x330>
 8008940:	2b03      	cmp	r3, #3
 8008942:	d017      	beq.n	8008974 <__gethex+0x338>
 8008944:	2b01      	cmp	r3, #1
 8008946:	d109      	bne.n	800895c <__gethex+0x320>
 8008948:	f019 0f02 	tst.w	r9, #2
 800894c:	d006      	beq.n	800895c <__gethex+0x320>
 800894e:	f8da 3000 	ldr.w	r3, [sl]
 8008952:	ea49 0903 	orr.w	r9, r9, r3
 8008956:	f019 0f01 	tst.w	r9, #1
 800895a:	d10e      	bne.n	800897a <__gethex+0x33e>
 800895c:	f045 0510 	orr.w	r5, r5, #16
 8008960:	e032      	b.n	80089c8 <__gethex+0x38c>
 8008962:	f04f 0901 	mov.w	r9, #1
 8008966:	e7d1      	b.n	800890c <__gethex+0x2d0>
 8008968:	2501      	movs	r5, #1
 800896a:	e7e2      	b.n	8008932 <__gethex+0x2f6>
 800896c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800896e:	f1c3 0301 	rsb	r3, r3, #1
 8008972:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008974:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008976:	2b00      	cmp	r3, #0
 8008978:	d0f0      	beq.n	800895c <__gethex+0x320>
 800897a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800897e:	f104 0314 	add.w	r3, r4, #20
 8008982:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008986:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800898a:	f04f 0c00 	mov.w	ip, #0
 800898e:	4618      	mov	r0, r3
 8008990:	f853 2b04 	ldr.w	r2, [r3], #4
 8008994:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008998:	d01b      	beq.n	80089d2 <__gethex+0x396>
 800899a:	3201      	adds	r2, #1
 800899c:	6002      	str	r2, [r0, #0]
 800899e:	2d02      	cmp	r5, #2
 80089a0:	f104 0314 	add.w	r3, r4, #20
 80089a4:	d13c      	bne.n	8008a20 <__gethex+0x3e4>
 80089a6:	f8d8 2000 	ldr.w	r2, [r8]
 80089aa:	3a01      	subs	r2, #1
 80089ac:	42b2      	cmp	r2, r6
 80089ae:	d109      	bne.n	80089c4 <__gethex+0x388>
 80089b0:	1171      	asrs	r1, r6, #5
 80089b2:	2201      	movs	r2, #1
 80089b4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80089b8:	f006 061f 	and.w	r6, r6, #31
 80089bc:	fa02 f606 	lsl.w	r6, r2, r6
 80089c0:	421e      	tst	r6, r3
 80089c2:	d13a      	bne.n	8008a3a <__gethex+0x3fe>
 80089c4:	f045 0520 	orr.w	r5, r5, #32
 80089c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80089ca:	601c      	str	r4, [r3, #0]
 80089cc:	9b02      	ldr	r3, [sp, #8]
 80089ce:	601f      	str	r7, [r3, #0]
 80089d0:	e6b0      	b.n	8008734 <__gethex+0xf8>
 80089d2:	4299      	cmp	r1, r3
 80089d4:	f843 cc04 	str.w	ip, [r3, #-4]
 80089d8:	d8d9      	bhi.n	800898e <__gethex+0x352>
 80089da:	68a3      	ldr	r3, [r4, #8]
 80089dc:	459b      	cmp	fp, r3
 80089de:	db17      	blt.n	8008a10 <__gethex+0x3d4>
 80089e0:	6861      	ldr	r1, [r4, #4]
 80089e2:	9801      	ldr	r0, [sp, #4]
 80089e4:	3101      	adds	r1, #1
 80089e6:	f7fe f80b 	bl	8006a00 <_Balloc>
 80089ea:	4681      	mov	r9, r0
 80089ec:	b918      	cbnz	r0, 80089f6 <__gethex+0x3ba>
 80089ee:	4b1a      	ldr	r3, [pc, #104]	@ (8008a58 <__gethex+0x41c>)
 80089f0:	4602      	mov	r2, r0
 80089f2:	2184      	movs	r1, #132	@ 0x84
 80089f4:	e6c5      	b.n	8008782 <__gethex+0x146>
 80089f6:	6922      	ldr	r2, [r4, #16]
 80089f8:	3202      	adds	r2, #2
 80089fa:	f104 010c 	add.w	r1, r4, #12
 80089fe:	0092      	lsls	r2, r2, #2
 8008a00:	300c      	adds	r0, #12
 8008a02:	f7ff fd6b 	bl	80084dc <memcpy>
 8008a06:	4621      	mov	r1, r4
 8008a08:	9801      	ldr	r0, [sp, #4]
 8008a0a:	f7fe f839 	bl	8006a80 <_Bfree>
 8008a0e:	464c      	mov	r4, r9
 8008a10:	6923      	ldr	r3, [r4, #16]
 8008a12:	1c5a      	adds	r2, r3, #1
 8008a14:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008a18:	6122      	str	r2, [r4, #16]
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	615a      	str	r2, [r3, #20]
 8008a1e:	e7be      	b.n	800899e <__gethex+0x362>
 8008a20:	6922      	ldr	r2, [r4, #16]
 8008a22:	455a      	cmp	r2, fp
 8008a24:	dd0b      	ble.n	8008a3e <__gethex+0x402>
 8008a26:	2101      	movs	r1, #1
 8008a28:	4620      	mov	r0, r4
 8008a2a:	f7ff fd9f 	bl	800856c <rshift>
 8008a2e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008a32:	3701      	adds	r7, #1
 8008a34:	42bb      	cmp	r3, r7
 8008a36:	f6ff aee0 	blt.w	80087fa <__gethex+0x1be>
 8008a3a:	2501      	movs	r5, #1
 8008a3c:	e7c2      	b.n	80089c4 <__gethex+0x388>
 8008a3e:	f016 061f 	ands.w	r6, r6, #31
 8008a42:	d0fa      	beq.n	8008a3a <__gethex+0x3fe>
 8008a44:	4453      	add	r3, sl
 8008a46:	f1c6 0620 	rsb	r6, r6, #32
 8008a4a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008a4e:	f7fe f8c9 	bl	8006be4 <__hi0bits>
 8008a52:	42b0      	cmp	r0, r6
 8008a54:	dbe7      	blt.n	8008a26 <__gethex+0x3ea>
 8008a56:	e7f0      	b.n	8008a3a <__gethex+0x3fe>
 8008a58:	08009411 	.word	0x08009411

08008a5c <L_shift>:
 8008a5c:	f1c2 0208 	rsb	r2, r2, #8
 8008a60:	0092      	lsls	r2, r2, #2
 8008a62:	b570      	push	{r4, r5, r6, lr}
 8008a64:	f1c2 0620 	rsb	r6, r2, #32
 8008a68:	6843      	ldr	r3, [r0, #4]
 8008a6a:	6804      	ldr	r4, [r0, #0]
 8008a6c:	fa03 f506 	lsl.w	r5, r3, r6
 8008a70:	432c      	orrs	r4, r5
 8008a72:	40d3      	lsrs	r3, r2
 8008a74:	6004      	str	r4, [r0, #0]
 8008a76:	f840 3f04 	str.w	r3, [r0, #4]!
 8008a7a:	4288      	cmp	r0, r1
 8008a7c:	d3f4      	bcc.n	8008a68 <L_shift+0xc>
 8008a7e:	bd70      	pop	{r4, r5, r6, pc}

08008a80 <__match>:
 8008a80:	b530      	push	{r4, r5, lr}
 8008a82:	6803      	ldr	r3, [r0, #0]
 8008a84:	3301      	adds	r3, #1
 8008a86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a8a:	b914      	cbnz	r4, 8008a92 <__match+0x12>
 8008a8c:	6003      	str	r3, [r0, #0]
 8008a8e:	2001      	movs	r0, #1
 8008a90:	bd30      	pop	{r4, r5, pc}
 8008a92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a96:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008a9a:	2d19      	cmp	r5, #25
 8008a9c:	bf98      	it	ls
 8008a9e:	3220      	addls	r2, #32
 8008aa0:	42a2      	cmp	r2, r4
 8008aa2:	d0f0      	beq.n	8008a86 <__match+0x6>
 8008aa4:	2000      	movs	r0, #0
 8008aa6:	e7f3      	b.n	8008a90 <__match+0x10>

08008aa8 <__hexnan>:
 8008aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aac:	680b      	ldr	r3, [r1, #0]
 8008aae:	6801      	ldr	r1, [r0, #0]
 8008ab0:	115e      	asrs	r6, r3, #5
 8008ab2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008ab6:	f013 031f 	ands.w	r3, r3, #31
 8008aba:	b087      	sub	sp, #28
 8008abc:	bf18      	it	ne
 8008abe:	3604      	addne	r6, #4
 8008ac0:	2500      	movs	r5, #0
 8008ac2:	1f37      	subs	r7, r6, #4
 8008ac4:	4682      	mov	sl, r0
 8008ac6:	4690      	mov	r8, r2
 8008ac8:	9301      	str	r3, [sp, #4]
 8008aca:	f846 5c04 	str.w	r5, [r6, #-4]
 8008ace:	46b9      	mov	r9, r7
 8008ad0:	463c      	mov	r4, r7
 8008ad2:	9502      	str	r5, [sp, #8]
 8008ad4:	46ab      	mov	fp, r5
 8008ad6:	784a      	ldrb	r2, [r1, #1]
 8008ad8:	1c4b      	adds	r3, r1, #1
 8008ada:	9303      	str	r3, [sp, #12]
 8008adc:	b342      	cbz	r2, 8008b30 <__hexnan+0x88>
 8008ade:	4610      	mov	r0, r2
 8008ae0:	9105      	str	r1, [sp, #20]
 8008ae2:	9204      	str	r2, [sp, #16]
 8008ae4:	f7ff fd94 	bl	8008610 <__hexdig_fun>
 8008ae8:	2800      	cmp	r0, #0
 8008aea:	d151      	bne.n	8008b90 <__hexnan+0xe8>
 8008aec:	9a04      	ldr	r2, [sp, #16]
 8008aee:	9905      	ldr	r1, [sp, #20]
 8008af0:	2a20      	cmp	r2, #32
 8008af2:	d818      	bhi.n	8008b26 <__hexnan+0x7e>
 8008af4:	9b02      	ldr	r3, [sp, #8]
 8008af6:	459b      	cmp	fp, r3
 8008af8:	dd13      	ble.n	8008b22 <__hexnan+0x7a>
 8008afa:	454c      	cmp	r4, r9
 8008afc:	d206      	bcs.n	8008b0c <__hexnan+0x64>
 8008afe:	2d07      	cmp	r5, #7
 8008b00:	dc04      	bgt.n	8008b0c <__hexnan+0x64>
 8008b02:	462a      	mov	r2, r5
 8008b04:	4649      	mov	r1, r9
 8008b06:	4620      	mov	r0, r4
 8008b08:	f7ff ffa8 	bl	8008a5c <L_shift>
 8008b0c:	4544      	cmp	r4, r8
 8008b0e:	d952      	bls.n	8008bb6 <__hexnan+0x10e>
 8008b10:	2300      	movs	r3, #0
 8008b12:	f1a4 0904 	sub.w	r9, r4, #4
 8008b16:	f844 3c04 	str.w	r3, [r4, #-4]
 8008b1a:	f8cd b008 	str.w	fp, [sp, #8]
 8008b1e:	464c      	mov	r4, r9
 8008b20:	461d      	mov	r5, r3
 8008b22:	9903      	ldr	r1, [sp, #12]
 8008b24:	e7d7      	b.n	8008ad6 <__hexnan+0x2e>
 8008b26:	2a29      	cmp	r2, #41	@ 0x29
 8008b28:	d157      	bne.n	8008bda <__hexnan+0x132>
 8008b2a:	3102      	adds	r1, #2
 8008b2c:	f8ca 1000 	str.w	r1, [sl]
 8008b30:	f1bb 0f00 	cmp.w	fp, #0
 8008b34:	d051      	beq.n	8008bda <__hexnan+0x132>
 8008b36:	454c      	cmp	r4, r9
 8008b38:	d206      	bcs.n	8008b48 <__hexnan+0xa0>
 8008b3a:	2d07      	cmp	r5, #7
 8008b3c:	dc04      	bgt.n	8008b48 <__hexnan+0xa0>
 8008b3e:	462a      	mov	r2, r5
 8008b40:	4649      	mov	r1, r9
 8008b42:	4620      	mov	r0, r4
 8008b44:	f7ff ff8a 	bl	8008a5c <L_shift>
 8008b48:	4544      	cmp	r4, r8
 8008b4a:	d936      	bls.n	8008bba <__hexnan+0x112>
 8008b4c:	f1a8 0204 	sub.w	r2, r8, #4
 8008b50:	4623      	mov	r3, r4
 8008b52:	f853 1b04 	ldr.w	r1, [r3], #4
 8008b56:	f842 1f04 	str.w	r1, [r2, #4]!
 8008b5a:	429f      	cmp	r7, r3
 8008b5c:	d2f9      	bcs.n	8008b52 <__hexnan+0xaa>
 8008b5e:	1b3b      	subs	r3, r7, r4
 8008b60:	f023 0303 	bic.w	r3, r3, #3
 8008b64:	3304      	adds	r3, #4
 8008b66:	3401      	adds	r4, #1
 8008b68:	3e03      	subs	r6, #3
 8008b6a:	42b4      	cmp	r4, r6
 8008b6c:	bf88      	it	hi
 8008b6e:	2304      	movhi	r3, #4
 8008b70:	4443      	add	r3, r8
 8008b72:	2200      	movs	r2, #0
 8008b74:	f843 2b04 	str.w	r2, [r3], #4
 8008b78:	429f      	cmp	r7, r3
 8008b7a:	d2fb      	bcs.n	8008b74 <__hexnan+0xcc>
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	b91b      	cbnz	r3, 8008b88 <__hexnan+0xe0>
 8008b80:	4547      	cmp	r7, r8
 8008b82:	d128      	bne.n	8008bd6 <__hexnan+0x12e>
 8008b84:	2301      	movs	r3, #1
 8008b86:	603b      	str	r3, [r7, #0]
 8008b88:	2005      	movs	r0, #5
 8008b8a:	b007      	add	sp, #28
 8008b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b90:	3501      	adds	r5, #1
 8008b92:	2d08      	cmp	r5, #8
 8008b94:	f10b 0b01 	add.w	fp, fp, #1
 8008b98:	dd06      	ble.n	8008ba8 <__hexnan+0x100>
 8008b9a:	4544      	cmp	r4, r8
 8008b9c:	d9c1      	bls.n	8008b22 <__hexnan+0x7a>
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	f844 3c04 	str.w	r3, [r4, #-4]
 8008ba4:	2501      	movs	r5, #1
 8008ba6:	3c04      	subs	r4, #4
 8008ba8:	6822      	ldr	r2, [r4, #0]
 8008baa:	f000 000f 	and.w	r0, r0, #15
 8008bae:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008bb2:	6020      	str	r0, [r4, #0]
 8008bb4:	e7b5      	b.n	8008b22 <__hexnan+0x7a>
 8008bb6:	2508      	movs	r5, #8
 8008bb8:	e7b3      	b.n	8008b22 <__hexnan+0x7a>
 8008bba:	9b01      	ldr	r3, [sp, #4]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d0dd      	beq.n	8008b7c <__hexnan+0xd4>
 8008bc0:	f1c3 0320 	rsb	r3, r3, #32
 8008bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8008bc8:	40da      	lsrs	r2, r3
 8008bca:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008bce:	4013      	ands	r3, r2
 8008bd0:	f846 3c04 	str.w	r3, [r6, #-4]
 8008bd4:	e7d2      	b.n	8008b7c <__hexnan+0xd4>
 8008bd6:	3f04      	subs	r7, #4
 8008bd8:	e7d0      	b.n	8008b7c <__hexnan+0xd4>
 8008bda:	2004      	movs	r0, #4
 8008bdc:	e7d5      	b.n	8008b8a <__hexnan+0xe2>

08008bde <__ascii_mbtowc>:
 8008bde:	b082      	sub	sp, #8
 8008be0:	b901      	cbnz	r1, 8008be4 <__ascii_mbtowc+0x6>
 8008be2:	a901      	add	r1, sp, #4
 8008be4:	b142      	cbz	r2, 8008bf8 <__ascii_mbtowc+0x1a>
 8008be6:	b14b      	cbz	r3, 8008bfc <__ascii_mbtowc+0x1e>
 8008be8:	7813      	ldrb	r3, [r2, #0]
 8008bea:	600b      	str	r3, [r1, #0]
 8008bec:	7812      	ldrb	r2, [r2, #0]
 8008bee:	1e10      	subs	r0, r2, #0
 8008bf0:	bf18      	it	ne
 8008bf2:	2001      	movne	r0, #1
 8008bf4:	b002      	add	sp, #8
 8008bf6:	4770      	bx	lr
 8008bf8:	4610      	mov	r0, r2
 8008bfa:	e7fb      	b.n	8008bf4 <__ascii_mbtowc+0x16>
 8008bfc:	f06f 0001 	mvn.w	r0, #1
 8008c00:	e7f8      	b.n	8008bf4 <__ascii_mbtowc+0x16>

08008c02 <_realloc_r>:
 8008c02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c06:	4607      	mov	r7, r0
 8008c08:	4614      	mov	r4, r2
 8008c0a:	460d      	mov	r5, r1
 8008c0c:	b921      	cbnz	r1, 8008c18 <_realloc_r+0x16>
 8008c0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c12:	4611      	mov	r1, r2
 8008c14:	f7fd be68 	b.w	80068e8 <_malloc_r>
 8008c18:	b92a      	cbnz	r2, 8008c26 <_realloc_r+0x24>
 8008c1a:	f7fd fdf1 	bl	8006800 <_free_r>
 8008c1e:	4625      	mov	r5, r4
 8008c20:	4628      	mov	r0, r5
 8008c22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c26:	f000 f840 	bl	8008caa <_malloc_usable_size_r>
 8008c2a:	4284      	cmp	r4, r0
 8008c2c:	4606      	mov	r6, r0
 8008c2e:	d802      	bhi.n	8008c36 <_realloc_r+0x34>
 8008c30:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008c34:	d8f4      	bhi.n	8008c20 <_realloc_r+0x1e>
 8008c36:	4621      	mov	r1, r4
 8008c38:	4638      	mov	r0, r7
 8008c3a:	f7fd fe55 	bl	80068e8 <_malloc_r>
 8008c3e:	4680      	mov	r8, r0
 8008c40:	b908      	cbnz	r0, 8008c46 <_realloc_r+0x44>
 8008c42:	4645      	mov	r5, r8
 8008c44:	e7ec      	b.n	8008c20 <_realloc_r+0x1e>
 8008c46:	42b4      	cmp	r4, r6
 8008c48:	4622      	mov	r2, r4
 8008c4a:	4629      	mov	r1, r5
 8008c4c:	bf28      	it	cs
 8008c4e:	4632      	movcs	r2, r6
 8008c50:	f7ff fc44 	bl	80084dc <memcpy>
 8008c54:	4629      	mov	r1, r5
 8008c56:	4638      	mov	r0, r7
 8008c58:	f7fd fdd2 	bl	8006800 <_free_r>
 8008c5c:	e7f1      	b.n	8008c42 <_realloc_r+0x40>

08008c5e <__ascii_wctomb>:
 8008c5e:	4603      	mov	r3, r0
 8008c60:	4608      	mov	r0, r1
 8008c62:	b141      	cbz	r1, 8008c76 <__ascii_wctomb+0x18>
 8008c64:	2aff      	cmp	r2, #255	@ 0xff
 8008c66:	d904      	bls.n	8008c72 <__ascii_wctomb+0x14>
 8008c68:	228a      	movs	r2, #138	@ 0x8a
 8008c6a:	601a      	str	r2, [r3, #0]
 8008c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c70:	4770      	bx	lr
 8008c72:	700a      	strb	r2, [r1, #0]
 8008c74:	2001      	movs	r0, #1
 8008c76:	4770      	bx	lr

08008c78 <fiprintf>:
 8008c78:	b40e      	push	{r1, r2, r3}
 8008c7a:	b503      	push	{r0, r1, lr}
 8008c7c:	4601      	mov	r1, r0
 8008c7e:	ab03      	add	r3, sp, #12
 8008c80:	4805      	ldr	r0, [pc, #20]	@ (8008c98 <fiprintf+0x20>)
 8008c82:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c86:	6800      	ldr	r0, [r0, #0]
 8008c88:	9301      	str	r3, [sp, #4]
 8008c8a:	f000 f83f 	bl	8008d0c <_vfiprintf_r>
 8008c8e:	b002      	add	sp, #8
 8008c90:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c94:	b003      	add	sp, #12
 8008c96:	4770      	bx	lr
 8008c98:	20000018 	.word	0x20000018

08008c9c <abort>:
 8008c9c:	b508      	push	{r3, lr}
 8008c9e:	2006      	movs	r0, #6
 8008ca0:	f000 fa08 	bl	80090b4 <raise>
 8008ca4:	2001      	movs	r0, #1
 8008ca6:	f7f8 fd3b 	bl	8001720 <_exit>

08008caa <_malloc_usable_size_r>:
 8008caa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cae:	1f18      	subs	r0, r3, #4
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	bfbc      	itt	lt
 8008cb4:	580b      	ldrlt	r3, [r1, r0]
 8008cb6:	18c0      	addlt	r0, r0, r3
 8008cb8:	4770      	bx	lr

08008cba <__sfputc_r>:
 8008cba:	6893      	ldr	r3, [r2, #8]
 8008cbc:	3b01      	subs	r3, #1
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	b410      	push	{r4}
 8008cc2:	6093      	str	r3, [r2, #8]
 8008cc4:	da08      	bge.n	8008cd8 <__sfputc_r+0x1e>
 8008cc6:	6994      	ldr	r4, [r2, #24]
 8008cc8:	42a3      	cmp	r3, r4
 8008cca:	db01      	blt.n	8008cd0 <__sfputc_r+0x16>
 8008ccc:	290a      	cmp	r1, #10
 8008cce:	d103      	bne.n	8008cd8 <__sfputc_r+0x1e>
 8008cd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008cd4:	f000 b932 	b.w	8008f3c <__swbuf_r>
 8008cd8:	6813      	ldr	r3, [r2, #0]
 8008cda:	1c58      	adds	r0, r3, #1
 8008cdc:	6010      	str	r0, [r2, #0]
 8008cde:	7019      	strb	r1, [r3, #0]
 8008ce0:	4608      	mov	r0, r1
 8008ce2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ce6:	4770      	bx	lr

08008ce8 <__sfputs_r>:
 8008ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cea:	4606      	mov	r6, r0
 8008cec:	460f      	mov	r7, r1
 8008cee:	4614      	mov	r4, r2
 8008cf0:	18d5      	adds	r5, r2, r3
 8008cf2:	42ac      	cmp	r4, r5
 8008cf4:	d101      	bne.n	8008cfa <__sfputs_r+0x12>
 8008cf6:	2000      	movs	r0, #0
 8008cf8:	e007      	b.n	8008d0a <__sfputs_r+0x22>
 8008cfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cfe:	463a      	mov	r2, r7
 8008d00:	4630      	mov	r0, r6
 8008d02:	f7ff ffda 	bl	8008cba <__sfputc_r>
 8008d06:	1c43      	adds	r3, r0, #1
 8008d08:	d1f3      	bne.n	8008cf2 <__sfputs_r+0xa>
 8008d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008d0c <_vfiprintf_r>:
 8008d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d10:	460d      	mov	r5, r1
 8008d12:	b09d      	sub	sp, #116	@ 0x74
 8008d14:	4614      	mov	r4, r2
 8008d16:	4698      	mov	r8, r3
 8008d18:	4606      	mov	r6, r0
 8008d1a:	b118      	cbz	r0, 8008d24 <_vfiprintf_r+0x18>
 8008d1c:	6a03      	ldr	r3, [r0, #32]
 8008d1e:	b90b      	cbnz	r3, 8008d24 <_vfiprintf_r+0x18>
 8008d20:	f7fc fdf4 	bl	800590c <__sinit>
 8008d24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008d26:	07d9      	lsls	r1, r3, #31
 8008d28:	d405      	bmi.n	8008d36 <_vfiprintf_r+0x2a>
 8008d2a:	89ab      	ldrh	r3, [r5, #12]
 8008d2c:	059a      	lsls	r2, r3, #22
 8008d2e:	d402      	bmi.n	8008d36 <_vfiprintf_r+0x2a>
 8008d30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d32:	f7fc ff04 	bl	8005b3e <__retarget_lock_acquire_recursive>
 8008d36:	89ab      	ldrh	r3, [r5, #12]
 8008d38:	071b      	lsls	r3, r3, #28
 8008d3a:	d501      	bpl.n	8008d40 <_vfiprintf_r+0x34>
 8008d3c:	692b      	ldr	r3, [r5, #16]
 8008d3e:	b99b      	cbnz	r3, 8008d68 <_vfiprintf_r+0x5c>
 8008d40:	4629      	mov	r1, r5
 8008d42:	4630      	mov	r0, r6
 8008d44:	f000 f938 	bl	8008fb8 <__swsetup_r>
 8008d48:	b170      	cbz	r0, 8008d68 <_vfiprintf_r+0x5c>
 8008d4a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008d4c:	07dc      	lsls	r4, r3, #31
 8008d4e:	d504      	bpl.n	8008d5a <_vfiprintf_r+0x4e>
 8008d50:	f04f 30ff 	mov.w	r0, #4294967295
 8008d54:	b01d      	add	sp, #116	@ 0x74
 8008d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d5a:	89ab      	ldrh	r3, [r5, #12]
 8008d5c:	0598      	lsls	r0, r3, #22
 8008d5e:	d4f7      	bmi.n	8008d50 <_vfiprintf_r+0x44>
 8008d60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d62:	f7fc feed 	bl	8005b40 <__retarget_lock_release_recursive>
 8008d66:	e7f3      	b.n	8008d50 <_vfiprintf_r+0x44>
 8008d68:	2300      	movs	r3, #0
 8008d6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d6c:	2320      	movs	r3, #32
 8008d6e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008d72:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d76:	2330      	movs	r3, #48	@ 0x30
 8008d78:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008f28 <_vfiprintf_r+0x21c>
 8008d7c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008d80:	f04f 0901 	mov.w	r9, #1
 8008d84:	4623      	mov	r3, r4
 8008d86:	469a      	mov	sl, r3
 8008d88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d8c:	b10a      	cbz	r2, 8008d92 <_vfiprintf_r+0x86>
 8008d8e:	2a25      	cmp	r2, #37	@ 0x25
 8008d90:	d1f9      	bne.n	8008d86 <_vfiprintf_r+0x7a>
 8008d92:	ebba 0b04 	subs.w	fp, sl, r4
 8008d96:	d00b      	beq.n	8008db0 <_vfiprintf_r+0xa4>
 8008d98:	465b      	mov	r3, fp
 8008d9a:	4622      	mov	r2, r4
 8008d9c:	4629      	mov	r1, r5
 8008d9e:	4630      	mov	r0, r6
 8008da0:	f7ff ffa2 	bl	8008ce8 <__sfputs_r>
 8008da4:	3001      	adds	r0, #1
 8008da6:	f000 80a7 	beq.w	8008ef8 <_vfiprintf_r+0x1ec>
 8008daa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008dac:	445a      	add	r2, fp
 8008dae:	9209      	str	r2, [sp, #36]	@ 0x24
 8008db0:	f89a 3000 	ldrb.w	r3, [sl]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	f000 809f 	beq.w	8008ef8 <_vfiprintf_r+0x1ec>
 8008dba:	2300      	movs	r3, #0
 8008dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8008dc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008dc4:	f10a 0a01 	add.w	sl, sl, #1
 8008dc8:	9304      	str	r3, [sp, #16]
 8008dca:	9307      	str	r3, [sp, #28]
 8008dcc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008dd0:	931a      	str	r3, [sp, #104]	@ 0x68
 8008dd2:	4654      	mov	r4, sl
 8008dd4:	2205      	movs	r2, #5
 8008dd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dda:	4853      	ldr	r0, [pc, #332]	@ (8008f28 <_vfiprintf_r+0x21c>)
 8008ddc:	f7f7 fa20 	bl	8000220 <memchr>
 8008de0:	9a04      	ldr	r2, [sp, #16]
 8008de2:	b9d8      	cbnz	r0, 8008e1c <_vfiprintf_r+0x110>
 8008de4:	06d1      	lsls	r1, r2, #27
 8008de6:	bf44      	itt	mi
 8008de8:	2320      	movmi	r3, #32
 8008dea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008dee:	0713      	lsls	r3, r2, #28
 8008df0:	bf44      	itt	mi
 8008df2:	232b      	movmi	r3, #43	@ 0x2b
 8008df4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008df8:	f89a 3000 	ldrb.w	r3, [sl]
 8008dfc:	2b2a      	cmp	r3, #42	@ 0x2a
 8008dfe:	d015      	beq.n	8008e2c <_vfiprintf_r+0x120>
 8008e00:	9a07      	ldr	r2, [sp, #28]
 8008e02:	4654      	mov	r4, sl
 8008e04:	2000      	movs	r0, #0
 8008e06:	f04f 0c0a 	mov.w	ip, #10
 8008e0a:	4621      	mov	r1, r4
 8008e0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e10:	3b30      	subs	r3, #48	@ 0x30
 8008e12:	2b09      	cmp	r3, #9
 8008e14:	d94b      	bls.n	8008eae <_vfiprintf_r+0x1a2>
 8008e16:	b1b0      	cbz	r0, 8008e46 <_vfiprintf_r+0x13a>
 8008e18:	9207      	str	r2, [sp, #28]
 8008e1a:	e014      	b.n	8008e46 <_vfiprintf_r+0x13a>
 8008e1c:	eba0 0308 	sub.w	r3, r0, r8
 8008e20:	fa09 f303 	lsl.w	r3, r9, r3
 8008e24:	4313      	orrs	r3, r2
 8008e26:	9304      	str	r3, [sp, #16]
 8008e28:	46a2      	mov	sl, r4
 8008e2a:	e7d2      	b.n	8008dd2 <_vfiprintf_r+0xc6>
 8008e2c:	9b03      	ldr	r3, [sp, #12]
 8008e2e:	1d19      	adds	r1, r3, #4
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	9103      	str	r1, [sp, #12]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	bfbb      	ittet	lt
 8008e38:	425b      	neglt	r3, r3
 8008e3a:	f042 0202 	orrlt.w	r2, r2, #2
 8008e3e:	9307      	strge	r3, [sp, #28]
 8008e40:	9307      	strlt	r3, [sp, #28]
 8008e42:	bfb8      	it	lt
 8008e44:	9204      	strlt	r2, [sp, #16]
 8008e46:	7823      	ldrb	r3, [r4, #0]
 8008e48:	2b2e      	cmp	r3, #46	@ 0x2e
 8008e4a:	d10a      	bne.n	8008e62 <_vfiprintf_r+0x156>
 8008e4c:	7863      	ldrb	r3, [r4, #1]
 8008e4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e50:	d132      	bne.n	8008eb8 <_vfiprintf_r+0x1ac>
 8008e52:	9b03      	ldr	r3, [sp, #12]
 8008e54:	1d1a      	adds	r2, r3, #4
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	9203      	str	r2, [sp, #12]
 8008e5a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008e5e:	3402      	adds	r4, #2
 8008e60:	9305      	str	r3, [sp, #20]
 8008e62:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008f38 <_vfiprintf_r+0x22c>
 8008e66:	7821      	ldrb	r1, [r4, #0]
 8008e68:	2203      	movs	r2, #3
 8008e6a:	4650      	mov	r0, sl
 8008e6c:	f7f7 f9d8 	bl	8000220 <memchr>
 8008e70:	b138      	cbz	r0, 8008e82 <_vfiprintf_r+0x176>
 8008e72:	9b04      	ldr	r3, [sp, #16]
 8008e74:	eba0 000a 	sub.w	r0, r0, sl
 8008e78:	2240      	movs	r2, #64	@ 0x40
 8008e7a:	4082      	lsls	r2, r0
 8008e7c:	4313      	orrs	r3, r2
 8008e7e:	3401      	adds	r4, #1
 8008e80:	9304      	str	r3, [sp, #16]
 8008e82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e86:	4829      	ldr	r0, [pc, #164]	@ (8008f2c <_vfiprintf_r+0x220>)
 8008e88:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008e8c:	2206      	movs	r2, #6
 8008e8e:	f7f7 f9c7 	bl	8000220 <memchr>
 8008e92:	2800      	cmp	r0, #0
 8008e94:	d03f      	beq.n	8008f16 <_vfiprintf_r+0x20a>
 8008e96:	4b26      	ldr	r3, [pc, #152]	@ (8008f30 <_vfiprintf_r+0x224>)
 8008e98:	bb1b      	cbnz	r3, 8008ee2 <_vfiprintf_r+0x1d6>
 8008e9a:	9b03      	ldr	r3, [sp, #12]
 8008e9c:	3307      	adds	r3, #7
 8008e9e:	f023 0307 	bic.w	r3, r3, #7
 8008ea2:	3308      	adds	r3, #8
 8008ea4:	9303      	str	r3, [sp, #12]
 8008ea6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ea8:	443b      	add	r3, r7
 8008eaa:	9309      	str	r3, [sp, #36]	@ 0x24
 8008eac:	e76a      	b.n	8008d84 <_vfiprintf_r+0x78>
 8008eae:	fb0c 3202 	mla	r2, ip, r2, r3
 8008eb2:	460c      	mov	r4, r1
 8008eb4:	2001      	movs	r0, #1
 8008eb6:	e7a8      	b.n	8008e0a <_vfiprintf_r+0xfe>
 8008eb8:	2300      	movs	r3, #0
 8008eba:	3401      	adds	r4, #1
 8008ebc:	9305      	str	r3, [sp, #20]
 8008ebe:	4619      	mov	r1, r3
 8008ec0:	f04f 0c0a 	mov.w	ip, #10
 8008ec4:	4620      	mov	r0, r4
 8008ec6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008eca:	3a30      	subs	r2, #48	@ 0x30
 8008ecc:	2a09      	cmp	r2, #9
 8008ece:	d903      	bls.n	8008ed8 <_vfiprintf_r+0x1cc>
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d0c6      	beq.n	8008e62 <_vfiprintf_r+0x156>
 8008ed4:	9105      	str	r1, [sp, #20]
 8008ed6:	e7c4      	b.n	8008e62 <_vfiprintf_r+0x156>
 8008ed8:	fb0c 2101 	mla	r1, ip, r1, r2
 8008edc:	4604      	mov	r4, r0
 8008ede:	2301      	movs	r3, #1
 8008ee0:	e7f0      	b.n	8008ec4 <_vfiprintf_r+0x1b8>
 8008ee2:	ab03      	add	r3, sp, #12
 8008ee4:	9300      	str	r3, [sp, #0]
 8008ee6:	462a      	mov	r2, r5
 8008ee8:	4b12      	ldr	r3, [pc, #72]	@ (8008f34 <_vfiprintf_r+0x228>)
 8008eea:	a904      	add	r1, sp, #16
 8008eec:	4630      	mov	r0, r6
 8008eee:	f7fb febd 	bl	8004c6c <_printf_float>
 8008ef2:	4607      	mov	r7, r0
 8008ef4:	1c78      	adds	r0, r7, #1
 8008ef6:	d1d6      	bne.n	8008ea6 <_vfiprintf_r+0x19a>
 8008ef8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008efa:	07d9      	lsls	r1, r3, #31
 8008efc:	d405      	bmi.n	8008f0a <_vfiprintf_r+0x1fe>
 8008efe:	89ab      	ldrh	r3, [r5, #12]
 8008f00:	059a      	lsls	r2, r3, #22
 8008f02:	d402      	bmi.n	8008f0a <_vfiprintf_r+0x1fe>
 8008f04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008f06:	f7fc fe1b 	bl	8005b40 <__retarget_lock_release_recursive>
 8008f0a:	89ab      	ldrh	r3, [r5, #12]
 8008f0c:	065b      	lsls	r3, r3, #25
 8008f0e:	f53f af1f 	bmi.w	8008d50 <_vfiprintf_r+0x44>
 8008f12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008f14:	e71e      	b.n	8008d54 <_vfiprintf_r+0x48>
 8008f16:	ab03      	add	r3, sp, #12
 8008f18:	9300      	str	r3, [sp, #0]
 8008f1a:	462a      	mov	r2, r5
 8008f1c:	4b05      	ldr	r3, [pc, #20]	@ (8008f34 <_vfiprintf_r+0x228>)
 8008f1e:	a904      	add	r1, sp, #16
 8008f20:	4630      	mov	r0, r6
 8008f22:	f7fc f93b 	bl	800519c <_printf_i>
 8008f26:	e7e4      	b.n	8008ef2 <_vfiprintf_r+0x1e6>
 8008f28:	0800947d 	.word	0x0800947d
 8008f2c:	08009487 	.word	0x08009487
 8008f30:	08004c6d 	.word	0x08004c6d
 8008f34:	08008ce9 	.word	0x08008ce9
 8008f38:	08009483 	.word	0x08009483

08008f3c <__swbuf_r>:
 8008f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f3e:	460e      	mov	r6, r1
 8008f40:	4614      	mov	r4, r2
 8008f42:	4605      	mov	r5, r0
 8008f44:	b118      	cbz	r0, 8008f4e <__swbuf_r+0x12>
 8008f46:	6a03      	ldr	r3, [r0, #32]
 8008f48:	b90b      	cbnz	r3, 8008f4e <__swbuf_r+0x12>
 8008f4a:	f7fc fcdf 	bl	800590c <__sinit>
 8008f4e:	69a3      	ldr	r3, [r4, #24]
 8008f50:	60a3      	str	r3, [r4, #8]
 8008f52:	89a3      	ldrh	r3, [r4, #12]
 8008f54:	071a      	lsls	r2, r3, #28
 8008f56:	d501      	bpl.n	8008f5c <__swbuf_r+0x20>
 8008f58:	6923      	ldr	r3, [r4, #16]
 8008f5a:	b943      	cbnz	r3, 8008f6e <__swbuf_r+0x32>
 8008f5c:	4621      	mov	r1, r4
 8008f5e:	4628      	mov	r0, r5
 8008f60:	f000 f82a 	bl	8008fb8 <__swsetup_r>
 8008f64:	b118      	cbz	r0, 8008f6e <__swbuf_r+0x32>
 8008f66:	f04f 37ff 	mov.w	r7, #4294967295
 8008f6a:	4638      	mov	r0, r7
 8008f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f6e:	6823      	ldr	r3, [r4, #0]
 8008f70:	6922      	ldr	r2, [r4, #16]
 8008f72:	1a98      	subs	r0, r3, r2
 8008f74:	6963      	ldr	r3, [r4, #20]
 8008f76:	b2f6      	uxtb	r6, r6
 8008f78:	4283      	cmp	r3, r0
 8008f7a:	4637      	mov	r7, r6
 8008f7c:	dc05      	bgt.n	8008f8a <__swbuf_r+0x4e>
 8008f7e:	4621      	mov	r1, r4
 8008f80:	4628      	mov	r0, r5
 8008f82:	f7ff fa47 	bl	8008414 <_fflush_r>
 8008f86:	2800      	cmp	r0, #0
 8008f88:	d1ed      	bne.n	8008f66 <__swbuf_r+0x2a>
 8008f8a:	68a3      	ldr	r3, [r4, #8]
 8008f8c:	3b01      	subs	r3, #1
 8008f8e:	60a3      	str	r3, [r4, #8]
 8008f90:	6823      	ldr	r3, [r4, #0]
 8008f92:	1c5a      	adds	r2, r3, #1
 8008f94:	6022      	str	r2, [r4, #0]
 8008f96:	701e      	strb	r6, [r3, #0]
 8008f98:	6962      	ldr	r2, [r4, #20]
 8008f9a:	1c43      	adds	r3, r0, #1
 8008f9c:	429a      	cmp	r2, r3
 8008f9e:	d004      	beq.n	8008faa <__swbuf_r+0x6e>
 8008fa0:	89a3      	ldrh	r3, [r4, #12]
 8008fa2:	07db      	lsls	r3, r3, #31
 8008fa4:	d5e1      	bpl.n	8008f6a <__swbuf_r+0x2e>
 8008fa6:	2e0a      	cmp	r6, #10
 8008fa8:	d1df      	bne.n	8008f6a <__swbuf_r+0x2e>
 8008faa:	4621      	mov	r1, r4
 8008fac:	4628      	mov	r0, r5
 8008fae:	f7ff fa31 	bl	8008414 <_fflush_r>
 8008fb2:	2800      	cmp	r0, #0
 8008fb4:	d0d9      	beq.n	8008f6a <__swbuf_r+0x2e>
 8008fb6:	e7d6      	b.n	8008f66 <__swbuf_r+0x2a>

08008fb8 <__swsetup_r>:
 8008fb8:	b538      	push	{r3, r4, r5, lr}
 8008fba:	4b29      	ldr	r3, [pc, #164]	@ (8009060 <__swsetup_r+0xa8>)
 8008fbc:	4605      	mov	r5, r0
 8008fbe:	6818      	ldr	r0, [r3, #0]
 8008fc0:	460c      	mov	r4, r1
 8008fc2:	b118      	cbz	r0, 8008fcc <__swsetup_r+0x14>
 8008fc4:	6a03      	ldr	r3, [r0, #32]
 8008fc6:	b90b      	cbnz	r3, 8008fcc <__swsetup_r+0x14>
 8008fc8:	f7fc fca0 	bl	800590c <__sinit>
 8008fcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fd0:	0719      	lsls	r1, r3, #28
 8008fd2:	d422      	bmi.n	800901a <__swsetup_r+0x62>
 8008fd4:	06da      	lsls	r2, r3, #27
 8008fd6:	d407      	bmi.n	8008fe8 <__swsetup_r+0x30>
 8008fd8:	2209      	movs	r2, #9
 8008fda:	602a      	str	r2, [r5, #0]
 8008fdc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008fe0:	81a3      	strh	r3, [r4, #12]
 8008fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8008fe6:	e033      	b.n	8009050 <__swsetup_r+0x98>
 8008fe8:	0758      	lsls	r0, r3, #29
 8008fea:	d512      	bpl.n	8009012 <__swsetup_r+0x5a>
 8008fec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008fee:	b141      	cbz	r1, 8009002 <__swsetup_r+0x4a>
 8008ff0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008ff4:	4299      	cmp	r1, r3
 8008ff6:	d002      	beq.n	8008ffe <__swsetup_r+0x46>
 8008ff8:	4628      	mov	r0, r5
 8008ffa:	f7fd fc01 	bl	8006800 <_free_r>
 8008ffe:	2300      	movs	r3, #0
 8009000:	6363      	str	r3, [r4, #52]	@ 0x34
 8009002:	89a3      	ldrh	r3, [r4, #12]
 8009004:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009008:	81a3      	strh	r3, [r4, #12]
 800900a:	2300      	movs	r3, #0
 800900c:	6063      	str	r3, [r4, #4]
 800900e:	6923      	ldr	r3, [r4, #16]
 8009010:	6023      	str	r3, [r4, #0]
 8009012:	89a3      	ldrh	r3, [r4, #12]
 8009014:	f043 0308 	orr.w	r3, r3, #8
 8009018:	81a3      	strh	r3, [r4, #12]
 800901a:	6923      	ldr	r3, [r4, #16]
 800901c:	b94b      	cbnz	r3, 8009032 <__swsetup_r+0x7a>
 800901e:	89a3      	ldrh	r3, [r4, #12]
 8009020:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009024:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009028:	d003      	beq.n	8009032 <__swsetup_r+0x7a>
 800902a:	4621      	mov	r1, r4
 800902c:	4628      	mov	r0, r5
 800902e:	f000 f883 	bl	8009138 <__smakebuf_r>
 8009032:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009036:	f013 0201 	ands.w	r2, r3, #1
 800903a:	d00a      	beq.n	8009052 <__swsetup_r+0x9a>
 800903c:	2200      	movs	r2, #0
 800903e:	60a2      	str	r2, [r4, #8]
 8009040:	6962      	ldr	r2, [r4, #20]
 8009042:	4252      	negs	r2, r2
 8009044:	61a2      	str	r2, [r4, #24]
 8009046:	6922      	ldr	r2, [r4, #16]
 8009048:	b942      	cbnz	r2, 800905c <__swsetup_r+0xa4>
 800904a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800904e:	d1c5      	bne.n	8008fdc <__swsetup_r+0x24>
 8009050:	bd38      	pop	{r3, r4, r5, pc}
 8009052:	0799      	lsls	r1, r3, #30
 8009054:	bf58      	it	pl
 8009056:	6962      	ldrpl	r2, [r4, #20]
 8009058:	60a2      	str	r2, [r4, #8]
 800905a:	e7f4      	b.n	8009046 <__swsetup_r+0x8e>
 800905c:	2000      	movs	r0, #0
 800905e:	e7f7      	b.n	8009050 <__swsetup_r+0x98>
 8009060:	20000018 	.word	0x20000018

08009064 <_raise_r>:
 8009064:	291f      	cmp	r1, #31
 8009066:	b538      	push	{r3, r4, r5, lr}
 8009068:	4605      	mov	r5, r0
 800906a:	460c      	mov	r4, r1
 800906c:	d904      	bls.n	8009078 <_raise_r+0x14>
 800906e:	2316      	movs	r3, #22
 8009070:	6003      	str	r3, [r0, #0]
 8009072:	f04f 30ff 	mov.w	r0, #4294967295
 8009076:	bd38      	pop	{r3, r4, r5, pc}
 8009078:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800907a:	b112      	cbz	r2, 8009082 <_raise_r+0x1e>
 800907c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009080:	b94b      	cbnz	r3, 8009096 <_raise_r+0x32>
 8009082:	4628      	mov	r0, r5
 8009084:	f000 f830 	bl	80090e8 <_getpid_r>
 8009088:	4622      	mov	r2, r4
 800908a:	4601      	mov	r1, r0
 800908c:	4628      	mov	r0, r5
 800908e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009092:	f000 b817 	b.w	80090c4 <_kill_r>
 8009096:	2b01      	cmp	r3, #1
 8009098:	d00a      	beq.n	80090b0 <_raise_r+0x4c>
 800909a:	1c59      	adds	r1, r3, #1
 800909c:	d103      	bne.n	80090a6 <_raise_r+0x42>
 800909e:	2316      	movs	r3, #22
 80090a0:	6003      	str	r3, [r0, #0]
 80090a2:	2001      	movs	r0, #1
 80090a4:	e7e7      	b.n	8009076 <_raise_r+0x12>
 80090a6:	2100      	movs	r1, #0
 80090a8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80090ac:	4620      	mov	r0, r4
 80090ae:	4798      	blx	r3
 80090b0:	2000      	movs	r0, #0
 80090b2:	e7e0      	b.n	8009076 <_raise_r+0x12>

080090b4 <raise>:
 80090b4:	4b02      	ldr	r3, [pc, #8]	@ (80090c0 <raise+0xc>)
 80090b6:	4601      	mov	r1, r0
 80090b8:	6818      	ldr	r0, [r3, #0]
 80090ba:	f7ff bfd3 	b.w	8009064 <_raise_r>
 80090be:	bf00      	nop
 80090c0:	20000018 	.word	0x20000018

080090c4 <_kill_r>:
 80090c4:	b538      	push	{r3, r4, r5, lr}
 80090c6:	4d07      	ldr	r5, [pc, #28]	@ (80090e4 <_kill_r+0x20>)
 80090c8:	2300      	movs	r3, #0
 80090ca:	4604      	mov	r4, r0
 80090cc:	4608      	mov	r0, r1
 80090ce:	4611      	mov	r1, r2
 80090d0:	602b      	str	r3, [r5, #0]
 80090d2:	f7f8 fb15 	bl	8001700 <_kill>
 80090d6:	1c43      	adds	r3, r0, #1
 80090d8:	d102      	bne.n	80090e0 <_kill_r+0x1c>
 80090da:	682b      	ldr	r3, [r5, #0]
 80090dc:	b103      	cbz	r3, 80090e0 <_kill_r+0x1c>
 80090de:	6023      	str	r3, [r4, #0]
 80090e0:	bd38      	pop	{r3, r4, r5, pc}
 80090e2:	bf00      	nop
 80090e4:	20000490 	.word	0x20000490

080090e8 <_getpid_r>:
 80090e8:	f7f8 bb02 	b.w	80016f0 <_getpid>

080090ec <__swhatbuf_r>:
 80090ec:	b570      	push	{r4, r5, r6, lr}
 80090ee:	460c      	mov	r4, r1
 80090f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090f4:	2900      	cmp	r1, #0
 80090f6:	b096      	sub	sp, #88	@ 0x58
 80090f8:	4615      	mov	r5, r2
 80090fa:	461e      	mov	r6, r3
 80090fc:	da0d      	bge.n	800911a <__swhatbuf_r+0x2e>
 80090fe:	89a3      	ldrh	r3, [r4, #12]
 8009100:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009104:	f04f 0100 	mov.w	r1, #0
 8009108:	bf14      	ite	ne
 800910a:	2340      	movne	r3, #64	@ 0x40
 800910c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009110:	2000      	movs	r0, #0
 8009112:	6031      	str	r1, [r6, #0]
 8009114:	602b      	str	r3, [r5, #0]
 8009116:	b016      	add	sp, #88	@ 0x58
 8009118:	bd70      	pop	{r4, r5, r6, pc}
 800911a:	466a      	mov	r2, sp
 800911c:	f000 f848 	bl	80091b0 <_fstat_r>
 8009120:	2800      	cmp	r0, #0
 8009122:	dbec      	blt.n	80090fe <__swhatbuf_r+0x12>
 8009124:	9901      	ldr	r1, [sp, #4]
 8009126:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800912a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800912e:	4259      	negs	r1, r3
 8009130:	4159      	adcs	r1, r3
 8009132:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009136:	e7eb      	b.n	8009110 <__swhatbuf_r+0x24>

08009138 <__smakebuf_r>:
 8009138:	898b      	ldrh	r3, [r1, #12]
 800913a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800913c:	079d      	lsls	r5, r3, #30
 800913e:	4606      	mov	r6, r0
 8009140:	460c      	mov	r4, r1
 8009142:	d507      	bpl.n	8009154 <__smakebuf_r+0x1c>
 8009144:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009148:	6023      	str	r3, [r4, #0]
 800914a:	6123      	str	r3, [r4, #16]
 800914c:	2301      	movs	r3, #1
 800914e:	6163      	str	r3, [r4, #20]
 8009150:	b003      	add	sp, #12
 8009152:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009154:	ab01      	add	r3, sp, #4
 8009156:	466a      	mov	r2, sp
 8009158:	f7ff ffc8 	bl	80090ec <__swhatbuf_r>
 800915c:	9f00      	ldr	r7, [sp, #0]
 800915e:	4605      	mov	r5, r0
 8009160:	4639      	mov	r1, r7
 8009162:	4630      	mov	r0, r6
 8009164:	f7fd fbc0 	bl	80068e8 <_malloc_r>
 8009168:	b948      	cbnz	r0, 800917e <__smakebuf_r+0x46>
 800916a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800916e:	059a      	lsls	r2, r3, #22
 8009170:	d4ee      	bmi.n	8009150 <__smakebuf_r+0x18>
 8009172:	f023 0303 	bic.w	r3, r3, #3
 8009176:	f043 0302 	orr.w	r3, r3, #2
 800917a:	81a3      	strh	r3, [r4, #12]
 800917c:	e7e2      	b.n	8009144 <__smakebuf_r+0xc>
 800917e:	89a3      	ldrh	r3, [r4, #12]
 8009180:	6020      	str	r0, [r4, #0]
 8009182:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009186:	81a3      	strh	r3, [r4, #12]
 8009188:	9b01      	ldr	r3, [sp, #4]
 800918a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800918e:	b15b      	cbz	r3, 80091a8 <__smakebuf_r+0x70>
 8009190:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009194:	4630      	mov	r0, r6
 8009196:	f000 f81d 	bl	80091d4 <_isatty_r>
 800919a:	b128      	cbz	r0, 80091a8 <__smakebuf_r+0x70>
 800919c:	89a3      	ldrh	r3, [r4, #12]
 800919e:	f023 0303 	bic.w	r3, r3, #3
 80091a2:	f043 0301 	orr.w	r3, r3, #1
 80091a6:	81a3      	strh	r3, [r4, #12]
 80091a8:	89a3      	ldrh	r3, [r4, #12]
 80091aa:	431d      	orrs	r5, r3
 80091ac:	81a5      	strh	r5, [r4, #12]
 80091ae:	e7cf      	b.n	8009150 <__smakebuf_r+0x18>

080091b0 <_fstat_r>:
 80091b0:	b538      	push	{r3, r4, r5, lr}
 80091b2:	4d07      	ldr	r5, [pc, #28]	@ (80091d0 <_fstat_r+0x20>)
 80091b4:	2300      	movs	r3, #0
 80091b6:	4604      	mov	r4, r0
 80091b8:	4608      	mov	r0, r1
 80091ba:	4611      	mov	r1, r2
 80091bc:	602b      	str	r3, [r5, #0]
 80091be:	f7f8 faff 	bl	80017c0 <_fstat>
 80091c2:	1c43      	adds	r3, r0, #1
 80091c4:	d102      	bne.n	80091cc <_fstat_r+0x1c>
 80091c6:	682b      	ldr	r3, [r5, #0]
 80091c8:	b103      	cbz	r3, 80091cc <_fstat_r+0x1c>
 80091ca:	6023      	str	r3, [r4, #0]
 80091cc:	bd38      	pop	{r3, r4, r5, pc}
 80091ce:	bf00      	nop
 80091d0:	20000490 	.word	0x20000490

080091d4 <_isatty_r>:
 80091d4:	b538      	push	{r3, r4, r5, lr}
 80091d6:	4d06      	ldr	r5, [pc, #24]	@ (80091f0 <_isatty_r+0x1c>)
 80091d8:	2300      	movs	r3, #0
 80091da:	4604      	mov	r4, r0
 80091dc:	4608      	mov	r0, r1
 80091de:	602b      	str	r3, [r5, #0]
 80091e0:	f7f8 fafe 	bl	80017e0 <_isatty>
 80091e4:	1c43      	adds	r3, r0, #1
 80091e6:	d102      	bne.n	80091ee <_isatty_r+0x1a>
 80091e8:	682b      	ldr	r3, [r5, #0]
 80091ea:	b103      	cbz	r3, 80091ee <_isatty_r+0x1a>
 80091ec:	6023      	str	r3, [r4, #0]
 80091ee:	bd38      	pop	{r3, r4, r5, pc}
 80091f0:	20000490 	.word	0x20000490

080091f4 <_init>:
 80091f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091f6:	bf00      	nop
 80091f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091fa:	bc08      	pop	{r3}
 80091fc:	469e      	mov	lr, r3
 80091fe:	4770      	bx	lr

08009200 <_fini>:
 8009200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009202:	bf00      	nop
 8009204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009206:	bc08      	pop	{r3}
 8009208:	469e      	mov	lr, r3
 800920a:	4770      	bx	lr
